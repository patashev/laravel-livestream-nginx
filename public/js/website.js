/*!
  * Bootstrap v4.0.0 (https://getbootstrap.com)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery'), require('popper.js')) :
	typeof define === 'function' && define.amd ? define(['exports', 'jquery', 'popper.js'], factory) :
	(factory((global.bootstrap = {}),global.jQuery,global.Popper));
}(this, (function (exports,$,Popper) { 'use strict';

$ = $ && $.hasOwnProperty('default') ? $['default'] : $;
Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): util.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Util = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */
  var transition = false;
  var MAX_UID = 1000000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  function toType(obj) {
    return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: transition.end,
      delegateType: transition.end,
      handle: function handle(event) {
        if ($$$1(event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }

        return undefined; // eslint-disable-line no-undefined
      }
    };
  }

  function transitionEndTest() {
    if (typeof window !== 'undefined' && window.QUnit) {
      return false;
    }

    return {
      end: 'transitionend'
    };
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;
    $$$1(this).one(Util.TRANSITION_END, function () {
      called = true;
    });
    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);
    return this;
  }

  function setTransitionEndSupport() {
    transition = transitionEndTest();
    $$$1.fn.emulateTransitionEnd = transitionEndEmulator;

    if (Util.supportsTransitionEnd()) {
      $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
    }
  }

  function escapeId(selector) {
    // We escape IDs in case of special selectors (selector = '#myId:something')
    // $.escapeSelector does not exist in jQuery < 3
    selector = typeof $$$1.escapeSelector === 'function' ? $$$1.escapeSelector(selector).substr(1) : selector.replace(/(:|\.|\[|\]|,|=|@)/g, '\\$1');
    return selector;
  }
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var Util = {
    TRANSITION_END: 'bsTransitionEnd',
    getUID: function getUID(prefix) {
      do {
        // eslint-disable-next-line no-bitwise
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));

      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');

      if (!selector || selector === '#') {
        selector = element.getAttribute('href') || '';
      } // If it's an ID


      if (selector.charAt(0) === '#') {
        selector = escapeId(selector);
      }

      try {
        var $selector = $$$1(document).find(selector);
        return $selector.length > 0 ? selector : null;
      } catch (err) {
        return null;
      }
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      $$$1(element).trigger(transition.end);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(transition);
    },
    isElement: function isElement(obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && Util.isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
          }
        }
      }
    }
  };
  setTransitionEndSupport();
  return Util;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Alert = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'alert';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 150;
  var Selector = {
    DISMISS: '[data-dismiss="alert"]'
  };
  var Event = {
    CLOSE: "close" + EVENT_KEY,
    CLOSED: "closed" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    ALERT: 'alert',
    FADE: 'fade',
    SHOW: 'show'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Alert =
  /*#__PURE__*/
  function () {
    function Alert(element) {
      this._element = element;
    } // Getters


    var _proto = Alert.prototype;

    // Public
    _proto.close = function close(element) {
      element = element || this._element;

      var rootElement = this._getRootElement(element);

      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._element = null;
    }; // Private


    _proto._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = $$$1(selector)[0];
      }

      if (!parent) {
        parent = $$$1(element).closest("." + ClassName.ALERT)[0];
      }

      return parent;
    };

    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $$$1.Event(Event.CLOSE);
      $$$1(element).trigger(closeEvent);
      return closeEvent;
    };

    _proto._removeElement = function _removeElement(element) {
      var _this = this;

      $$$1(element).removeClass(ClassName.SHOW);

      if (!Util.supportsTransitionEnd() || !$$$1(element).hasClass(ClassName.FADE)) {
        this._destroyElement(element);

        return;
      }

      $$$1(element).one(Util.TRANSITION_END, function (event) {
        return _this._destroyElement(element, event);
      }).emulateTransitionEnd(TRANSITION_DURATION);
    };

    _proto._destroyElement = function _destroyElement(element) {
      $$$1(element).detach().trigger(Event.CLOSED).remove();
    }; // Static


    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $$$1(this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);
    return Alert;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Alert._jQueryInterface;
  $$$1.fn[NAME].Constructor = Alert;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  return Alert;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Button = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'button';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.button';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var ClassName = {
    ACTIVE: 'active',
    BUTTON: 'btn',
    FOCUS: 'focus'
  };
  var Selector = {
    DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
    DATA_TOGGLE: '[data-toggle="buttons"]',
    INPUT: 'input',
    ACTIVE: '.active',
    BUTTON: '.btn'
  };
  var Event = {
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
    FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Button =
  /*#__PURE__*/
  function () {
    function Button(element) {
      this._element = element;
    } // Getters


    var _proto = Button.prototype;

    // Public
    _proto.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];

      if (rootElement) {
        var input = $$$1(this._element).find(Selector.INPUT)[0];

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && $$$1(this._element).hasClass(ClassName.ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = $$$1(rootElement).find(Selector.ACTIVE)[0];

              if (activeElement) {
                $$$1(activeElement).removeClass(ClassName.ACTIVE);
              }
            }
          }

          if (triggerChangeEvent) {
            if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
              return;
            }

            input.checked = !$$$1(this._element).hasClass(ClassName.ACTIVE);
            $$$1(input).trigger('change');
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (addAriaPressed) {
        this._element.setAttribute('aria-pressed', !$$$1(this._element).hasClass(ClassName.ACTIVE));
      }

      if (triggerChangeEvent) {
        $$$1(this._element).toggleClass(ClassName.ACTIVE);
      }
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._element = null;
    }; // Static


    Button._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        if (!data) {
          data = new Button(this);
          $$$1(this).data(DATA_KEY, data);
        }

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);
    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    event.preventDefault();
    var button = event.target;

    if (!$$$1(button).hasClass(ClassName.BUTTON)) {
      button = $$$1(button).closest(Selector.BUTTON);
    }

    Button._jQueryInterface.call($$$1(button), 'toggle');
  }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    var button = $$$1(event.target).closest(Selector.BUTTON)[0];
    $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Button._jQueryInterface;
  $$$1.fn[NAME].Constructor = Button;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Button._jQueryInterface;
  };

  return Button;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Carousel = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'carousel';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.carousel';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 600;
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true
  };
  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean'
  };
  var Direction = {
    NEXT: 'next',
    PREV: 'prev',
    LEFT: 'left',
    RIGHT: 'right'
  };
  var Event = {
    SLIDE: "slide" + EVENT_KEY,
    SLID: "slid" + EVENT_KEY,
    KEYDOWN: "keydown" + EVENT_KEY,
    MOUSEENTER: "mouseenter" + EVENT_KEY,
    MOUSELEAVE: "mouseleave" + EVENT_KEY,
    TOUCHEND: "touchend" + EVENT_KEY,
    LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    CAROUSEL: 'carousel',
    ACTIVE: 'active',
    SLIDE: 'slide',
    RIGHT: 'carousel-item-right',
    LEFT: 'carousel-item-left',
    NEXT: 'carousel-item-next',
    PREV: 'carousel-item-prev',
    ITEM: 'carousel-item'
  };
  var Selector = {
    ACTIVE: '.active',
    ACTIVE_ITEM: '.active.carousel-item',
    ITEM: '.carousel-item',
    NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
    INDICATORS: '.carousel-indicators',
    DATA_SLIDE: '[data-slide], [data-slide-to]',
    DATA_RIDE: '[data-ride="carousel"]'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Carousel =
  /*#__PURE__*/
  function () {
    function Carousel(element, config) {
      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this._config = this._getConfig(config);
      this._element = $$$1(element)[0];
      this._indicatorsElement = $$$1(this._element).find(Selector.INDICATORS)[0];

      this._addEventListeners();
    } // Getters


    var _proto = Carousel.prototype;

    // Public
    _proto.next = function next() {
      if (!this._isSliding) {
        this._slide(Direction.NEXT);
      }
    };

    _proto.nextWhenVisible = function nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && $$$1(this._element).is(':visible') && $$$1(this._element).css('visibility') !== 'hidden') {
        this.next();
      }
    };

    _proto.prev = function prev() {
      if (!this._isSliding) {
        this._slide(Direction.PREV);
      }
    };

    _proto.pause = function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if ($$$1(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    };

    _proto.cycle = function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    };

    _proto.to = function to(index) {
      var _this = this;

      this._activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        $$$1(this._element).one(Event.SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

      this._slide(direction, this._items[index]);
    };

    _proto.dispose = function dispose() {
      $$$1(this._element).off(EVENT_KEY);
      $$$1.removeData(this._element, DATA_KEY);
      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    }; // Private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._addEventListeners = function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        $$$1(this._element).on(Event.KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        $$$1(this._element).on(Event.MOUSEENTER, function (event) {
          return _this2.pause(event);
        }).on(Event.MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });

        if ('ontouchstart' in document.documentElement) {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          $$$1(this._element).on(Event.TOUCHEND, function () {
            _this2.pause();

            if (_this2.touchTimeout) {
              clearTimeout(_this2.touchTimeout);
            }

            _this2.touchTimeout = setTimeout(function (event) {
              return _this2.cycle(event);
            }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
          });
        }
      }
    };

    _proto._keydown = function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;

        default:
      }
    };

    _proto._getItemIndex = function _getItemIndex(element) {
      this._items = $$$1.makeArray($$$1(element).parent().find(Selector.ITEM));
      return this._items.indexOf(element);
    };

    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === Direction.NEXT;
      var isPrevDirection = direction === Direction.PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === Direction.PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    };

    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex($$$1(this._element).find(Selector.ACTIVE_ITEM)[0]);

      var slideEvent = $$$1.Event(Event.SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
      $$$1(this._element).trigger(slideEvent);
      return slideEvent;
    };

    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        $$$1(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          $$$1(nextIndicator).addClass(ClassName.ACTIVE);
        }
      }
    };

    _proto._slide = function _slide(direction, element) {
      var _this3 = this;

      var activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === Direction.NEXT) {
        directionalClassName = ClassName.LEFT;
        orderClassName = ClassName.NEXT;
        eventDirectionName = Direction.LEFT;
      } else {
        directionalClassName = ClassName.RIGHT;
        orderClassName = ClassName.PREV;
        eventDirectionName = Direction.RIGHT;
      }

      if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      var slidEvent = $$$1.Event(Event.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.SLIDE)) {
        $$$1(nextElement).addClass(orderClassName);
        Util.reflow(nextElement);
        $$$1(activeElement).addClass(directionalClassName);
        $$$1(nextElement).addClass(directionalClassName);
        $$$1(activeElement).one(Util.TRANSITION_END, function () {
          $$$1(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);
          $$$1(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
          _this3._isSliding = false;
          setTimeout(function () {
            return $$$1(_this3._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        $$$1(activeElement).removeClass(ClassName.ACTIVE);
        $$$1(nextElement).addClass(ClassName.ACTIVE);
        this._isSliding = false;
        $$$1(this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    }; // Static


    Carousel._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = _extends({}, Default, $$$1(this).data());

        if (typeof config === 'object') {
          _config = _extends({}, _config, config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new TypeError("No method named \"" + action + "\"");
          }

          data[action]();
        } else if (_config.interval) {
          data.pause();
          data.cycle();
        }
      });
    };

    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
      var selector = Util.getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = $$$1(selector)[0];

      if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
        return;
      }

      var config = _extends({}, $$$1(target).data(), $$$1(this).data());
      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call($$$1(target), config);

      if (slideIndex) {
        $$$1(target).data(DATA_KEY).to(slideIndex);
      }

      event.preventDefault();
    };

    _createClass(Carousel, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return Carousel;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
  $$$1(window).on(Event.LOAD_DATA_API, function () {
    $$$1(Selector.DATA_RIDE).each(function () {
      var $carousel = $$$1(this);

      Carousel._jQueryInterface.call($carousel, $carousel.data());
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Carousel._jQueryInterface;
  $$$1.fn[NAME].Constructor = Carousel;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Carousel._jQueryInterface;
  };

  return Carousel;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Collapse = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'collapse';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.collapse';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 600;
  var Default = {
    toggle: true,
    parent: ''
  };
  var DefaultType = {
    toggle: 'boolean',
    parent: '(string|element)'
  };
  var Event = {
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    SHOW: 'show',
    COLLAPSE: 'collapse',
    COLLAPSING: 'collapsing',
    COLLAPSED: 'collapsed'
  };
  var Dimension = {
    WIDTH: 'width',
    HEIGHT: 'height'
  };
  var Selector = {
    ACTIVES: '.show, .collapsing',
    DATA_TOGGLE: '[data-toggle="collapse"]'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Collapse =
  /*#__PURE__*/
  function () {
    function Collapse(element, config) {
      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = $$$1.makeArray($$$1("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
      var tabToggles = $$$1(Selector.DATA_TOGGLE);

      for (var i = 0; i < tabToggles.length; i++) {
        var elem = tabToggles[i];
        var selector = Util.getSelectorFromElement(elem);

        if (selector !== null && $$$1(selector).filter(element).length > 0) {
          this._selector = selector;

          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // Getters


    var _proto = Collapse.prototype;

    // Public
    _proto.toggle = function toggle() {
      if ($$$1(this._element).hasClass(ClassName.SHOW)) {
        this.hide();
      } else {
        this.show();
      }
    };

    _proto.show = function show() {
      var _this = this;

      if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var actives;
      var activesData;

      if (this._parent) {
        actives = $$$1.makeArray($$$1(this._parent).find(Selector.ACTIVES).filter("[data-parent=\"" + this._config.parent + "\"]"));

        if (actives.length === 0) {
          actives = null;
        }
      }

      if (actives) {
        activesData = $$$1(actives).not(this._selector).data(DATA_KEY);

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = $$$1.Event(Event.SHOW);
      $$$1(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call($$$1(actives).not(this._selector), 'hide');

        if (!activesData) {
          $$$1(actives).data(DATA_KEY, null);
        }
      }

      var dimension = this._getDimension();

      $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
      this._element.style[dimension] = 0;

      if (this._triggerArray.length > 0) {
        $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
        _this._element.style[dimension] = '';

        _this.setTransitioning(false);

        $$$1(_this._element).trigger(Event.SHOWN);
      };

      if (!Util.supportsTransitionEnd()) {
        complete();
        return;
      }

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll" + capitalizedDimension;
      $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      this._element.style[dimension] = this._element[scrollSize] + "px";
    };

    _proto.hide = function hide() {
      var _this2 = this;

      if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var startEvent = $$$1.Event(Event.HIDE);
      $$$1(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
      Util.reflow(this._element);
      $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);

      if (this._triggerArray.length > 0) {
        for (var i = 0; i < this._triggerArray.length; i++) {
          var trigger = this._triggerArray[i];
          var selector = Util.getSelectorFromElement(trigger);

          if (selector !== null) {
            var $elem = $$$1(selector);

            if (!$elem.hasClass(ClassName.SHOW)) {
              $$$1(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
      };

      this._element.style[dimension] = '';

      if (!Util.supportsTransitionEnd()) {
        complete();
        return;
      }

      $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
    };

    _proto.setTransitioning = function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    }; // Private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._getDimension = function _getDimension() {
      var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
      return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
    };

    _proto._getParent = function _getParent() {
      var _this3 = this;

      var parent = null;

      if (Util.isElement(this._config.parent)) {
        parent = this._config.parent; // It's a jQuery object

        if (typeof this._config.parent.jquery !== 'undefined') {
          parent = this._config.parent[0];
        }
      } else {
        parent = $$$1(this._config.parent)[0];
      }

      var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
      $$$1(parent).find(selector).each(function (i, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });
      return parent;
    };

    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
      if (element) {
        var isOpen = $$$1(element).hasClass(ClassName.SHOW);

        if (triggerArray.length > 0) {
          $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
        }
      }
    }; // Static


    Collapse._getTargetFromElement = function _getTargetFromElement(element) {
      var selector = Util.getSelectorFromElement(element);
      return selector ? $$$1(selector)[0] : null;
    };

    Collapse._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $$$1(this);
        var data = $this.data(DATA_KEY);

        var _config = _extends({}, Default, $this.data(), typeof config === 'object' && config);

        if (!data && _config.toggle && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Collapse, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return Collapse;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.currentTarget.tagName === 'A') {
      event.preventDefault();
    }

    var $trigger = $$$1(this);
    var selector = Util.getSelectorFromElement(this);
    $$$1(selector).each(function () {
      var $target = $$$1(this);
      var data = $target.data(DATA_KEY);
      var config = data ? 'toggle' : $trigger.data();

      Collapse._jQueryInterface.call($target, config);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Collapse._jQueryInterface;
  $$$1.fn[NAME].Constructor = Collapse;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Collapse._jQueryInterface;
  };

  return Collapse;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Dropdown = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'dropdown';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.dropdown';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    CLICK: "click" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
    KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
    KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    DISABLED: 'disabled',
    SHOW: 'show',
    DROPUP: 'dropup',
    DROPRIGHT: 'dropright',
    DROPLEFT: 'dropleft',
    MENURIGHT: 'dropdown-menu-right',
    MENULEFT: 'dropdown-menu-left',
    POSITION_STATIC: 'position-static'
  };
  var Selector = {
    DATA_TOGGLE: '[data-toggle="dropdown"]',
    FORM_CHILD: '.dropdown form',
    MENU: '.dropdown-menu',
    NAVBAR_NAV: '.navbar-nav',
    VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled)'
  };
  var AttachmentMap = {
    TOP: 'top-start',
    TOPEND: 'top-end',
    BOTTOM: 'bottom-start',
    BOTTOMEND: 'bottom-end',
    RIGHT: 'right-start',
    RIGHTEND: 'right-end',
    LEFT: 'left-start',
    LEFTEND: 'left-end'
  };
  var Default = {
    offset: 0,
    flip: true,
    boundary: 'scrollParent'
  };
  var DefaultType = {
    offset: '(number|string|function)',
    flip: 'boolean',
    boundary: '(string|element)'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Dropdown =
  /*#__PURE__*/
  function () {
    function Dropdown(element, config) {
      this._element = element;
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();

      this._addEventListeners();
    } // Getters


    var _proto = Dropdown.prototype;

    // Public
    _proto.toggle = function toggle() {
      if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this._element);

      var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);

      Dropdown._clearMenus();

      if (isActive) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
      $$$1(parent).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      } // Disable totally Popper.js for Dropdown in Navbar


      if (!this._inNavbar) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper === 'undefined') {
          throw new TypeError('Bootstrap dropdown require Popper.js (https://popper.js.org)');
        }

        var element = this._element; // For dropup with alignment we use the parent as popper container

        if ($$$1(parent).hasClass(ClassName.DROPUP)) {
          if ($$$1(this._menu).hasClass(ClassName.MENULEFT) || $$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
            element = parent;
          }
        } // If boundary is not `scrollParent`, then set position to `static`
        // to allow the menu to "escape" the scroll parent's boundaries
        // https://github.com/twbs/bootstrap/issues/24251


        if (this._config.boundary !== 'scrollParent') {
          $$$1(parent).addClass(ClassName.POSITION_STATIC);
        }

        this._popper = new Popper(element, this._menu, this._getPopperConfig());
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && $$$1(parent).closest(Selector.NAVBAR_NAV).length === 0) {
        $$$1('body').children().on('mouseover', null, $$$1.noop);
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      $$$1(this._menu).toggleClass(ClassName.SHOW);
      $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      $$$1(this._element).off(EVENT_KEY);
      this._element = null;
      this._menu = null;

      if (this._popper !== null) {
        this._popper.destroy();

        this._popper = null;
      }
    };

    _proto.update = function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    }; // Private


    _proto._addEventListeners = function _addEventListeners() {
      var _this = this;

      $$$1(this._element).on(Event.CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();

        _this.toggle();
      });
    };

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, this.constructor.Default, $$$1(this._element).data(), config);
      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getMenuElement = function _getMenuElement() {
      if (!this._menu) {
        var parent = Dropdown._getParentFromElement(this._element);

        this._menu = $$$1(parent).find(Selector.MENU)[0];
      }

      return this._menu;
    };

    _proto._getPlacement = function _getPlacement() {
      var $parentDropdown = $$$1(this._element).parent();
      var placement = AttachmentMap.BOTTOM; // Handle dropup

      if ($parentDropdown.hasClass(ClassName.DROPUP)) {
        placement = AttachmentMap.TOP;

        if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
          placement = AttachmentMap.TOPEND;
        }
      } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
        placement = AttachmentMap.RIGHT;
      } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
        placement = AttachmentMap.LEFT;
      } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
        placement = AttachmentMap.BOTTOMEND;
      }

      return placement;
    };

    _proto._detectNavbar = function _detectNavbar() {
      return $$$1(this._element).closest('.navbar').length > 0;
    };

    _proto._getPopperConfig = function _getPopperConfig() {
      var _this2 = this;

      var offsetConf = {};

      if (typeof this._config.offset === 'function') {
        offsetConf.fn = function (data) {
          data.offsets = _extends({}, data.offsets, _this2._config.offset(data.offsets) || {});
          return data;
        };
      } else {
        offsetConf.offset = this._config.offset;
      }

      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: offsetConf,
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      };
      return popperConfig;
    }; // Static


    Dropdown._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' ? config : null;

        if (!data) {
          data = new Dropdown(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    Dropdown._clearMenus = function _clearMenus(event) {
      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
        return;
      }

      var toggles = $$$1.makeArray($$$1(Selector.DATA_TOGGLE));

      for (var i = 0; i < toggles.length; i++) {
        var parent = Dropdown._getParentFromElement(toggles[i]);

        var context = $$$1(toggles[i]).data(DATA_KEY);
        var relatedTarget = {
          relatedTarget: toggles[i]
        };

        if (!context) {
          continue;
        }

        var dropdownMenu = context._menu;

        if (!$$$1(parent).hasClass(ClassName.SHOW)) {
          continue;
        }

        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
          continue;
        }

        var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
        $$$1(parent).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          continue;
        } // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          $$$1('body').children().off('mouseover', null, $$$1.noop);
        }

        toggles[i].setAttribute('aria-expanded', 'false');
        $$$1(dropdownMenu).removeClass(ClassName.SHOW);
        $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
      }
    };

    Dropdown._getParentFromElement = function _getParentFromElement(element) {
      var parent;
      var selector = Util.getSelectorFromElement(element);

      if (selector) {
        parent = $$$1(selector)[0];
      }

      return parent || element.parentNode;
    }; // eslint-disable-next-line complexity


    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this);

      var isActive = $$$1(parent).hasClass(ClassName.SHOW);

      if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
        if (event.which === ESCAPE_KEYCODE) {
          var toggle = $$$1(parent).find(Selector.DATA_TOGGLE)[0];
          $$$1(toggle).trigger('focus');
        }

        $$$1(this).trigger('click');
        return;
      }

      var items = $$$1(parent).find(Selector.VISIBLE_ITEMS).get();

      if (items.length === 0) {
        return;
      }

      var index = items.indexOf(event.target);

      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // Up
        index--;
      }

      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // Down
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      items[index].focus();
    };

    _createClass(Dropdown, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }]);
    return Dropdown;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    event.preventDefault();
    event.stopPropagation();

    Dropdown._jQueryInterface.call($$$1(this), 'toggle');
  }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
    e.stopPropagation();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Dropdown._jQueryInterface;
  $$$1.fn[NAME].Constructor = Dropdown;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Dropdown._jQueryInterface;
  };

  return Dropdown;
}($, Popper);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Modal = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'modal';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.modal';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 300;
  var BACKDROP_TRANSITION_DURATION = 150;
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var DefaultType = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    FOCUSIN: "focusin" + EVENT_KEY,
    RESIZE: "resize" + EVENT_KEY,
    CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
    KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
    MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    STICKY_CONTENT: '.sticky-top',
    NAVBAR_TOGGLER: '.navbar-toggler'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Modal =
  /*#__PURE__*/
  function () {
    function Modal(element, config) {
      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = $$$1(element).find(Selector.DIALOG)[0];
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._originalBodyPadding = 0;
      this._scrollbarWidth = 0;
    } // Getters


    var _proto = Modal.prototype;

    // Public
    _proto.toggle = function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    };

    _proto.show = function show(relatedTarget) {
      var _this = this;

      if (this._isTransitioning || this._isShown) {
        return;
      }

      if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
        this._isTransitioning = true;
      }

      var showEvent = $$$1.Event(Event.SHOW, {
        relatedTarget: relatedTarget
      });
      $$$1(this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      $$$1(document.body).addClass(ClassName.OPEN);

      this._setEscapeEvent();

      this._setResizeEvent();

      $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
        return _this.hide(event);
      });
      $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
        $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {
          if ($$$1(event.target).is(_this._element)) {
            _this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    };

    _proto.hide = function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (this._isTransitioning || !this._isShown) {
        return;
      }

      var hideEvent = $$$1.Event(Event.HIDE);
      $$$1(this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;
      var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      $$$1(document).off(Event.FOCUSIN);
      $$$1(this._element).removeClass(ClassName.SHOW);
      $$$1(this._element).off(Event.CLICK_DISMISS);
      $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);

      if (transition) {
        $$$1(this._element).one(Util.TRANSITION_END, function (event) {
          return _this2._hideModal(event);
        }).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        this._hideModal();
      }
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._scrollbarWidth = null;
    };

    _proto.handleUpdate = function handleUpdate() {
      this._adjustDialog();
    }; // Private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._showElement = function _showElement(relatedTarget) {
      var _this3 = this;

      var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.scrollTop = 0;

      if (transition) {
        Util.reflow(this._element);
      }

      $$$1(this._element).addClass(ClassName.SHOW);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = $$$1.Event(Event.SHOWN, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this3._config.focus) {
          _this3._element.focus();
        }

        _this3._isTransitioning = false;
        $$$1(_this3._element).trigger(shownEvent);
      };

      if (transition) {
        $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        transitionComplete();
      }
    };

    _proto._enforceFocus = function _enforceFocus() {
      var _this4 = this;

      $$$1(document).off(Event.FOCUSIN) // Guard against infinite focus loop
      .on(Event.FOCUSIN, function (event) {
        if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {
          _this4._element.focus();
        }
      });
    };

    _proto._setEscapeEvent = function _setEscapeEvent() {
      var _this5 = this;

      if (this._isShown && this._config.keyboard) {
        $$$1(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
          if (event.which === ESCAPE_KEYCODE) {
            event.preventDefault();

            _this5.hide();
          }
        });
      } else if (!this._isShown) {
        $$$1(this._element).off(Event.KEYDOWN_DISMISS);
      }
    };

    _proto._setResizeEvent = function _setResizeEvent() {
      var _this6 = this;

      if (this._isShown) {
        $$$1(window).on(Event.RESIZE, function (event) {
          return _this6.handleUpdate(event);
        });
      } else {
        $$$1(window).off(Event.RESIZE);
      }
    };

    _proto._hideModal = function _hideModal() {
      var _this7 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._isTransitioning = false;

      this._showBackdrop(function () {
        $$$1(document.body).removeClass(ClassName.OPEN);

        _this7._resetAdjustments();

        _this7._resetScrollbar();

        $$$1(_this7._element).trigger(Event.HIDDEN);
      });
    };

    _proto._removeBackdrop = function _removeBackdrop() {
      if (this._backdrop) {
        $$$1(this._backdrop).remove();
        this._backdrop = null;
      }
    };

    _proto._showBackdrop = function _showBackdrop(callback) {
      var _this8 = this;

      var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

      if (this._isShown && this._config.backdrop) {
        var doAnimate = Util.supportsTransitionEnd() && animate;
        this._backdrop = document.createElement('div');
        this._backdrop.className = ClassName.BACKDROP;

        if (animate) {
          $$$1(this._backdrop).addClass(animate);
        }

        $$$1(this._backdrop).appendTo(document.body);
        $$$1(this._element).on(Event.CLICK_DISMISS, function (event) {
          if (_this8._ignoreBackdropClick) {
            _this8._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          if (_this8._config.backdrop === 'static') {
            _this8._element.focus();
          } else {
            _this8.hide();
          }
        });

        if (doAnimate) {
          Util.reflow(this._backdrop);
        }

        $$$1(this._backdrop).addClass(ClassName.SHOW);

        if (!callback) {
          return;
        }

        if (!doAnimate) {
          callback();
          return;
        }

        $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
      } else if (!this._isShown && this._backdrop) {
        $$$1(this._backdrop).removeClass(ClassName.SHOW);

        var callbackRemove = function callbackRemove() {
          _this8._removeBackdrop();

          if (callback) {
            callback();
          }
        };

        if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
          $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    }; // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------


    _proto._adjustDialog = function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = this._scrollbarWidth + "px";
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = this._scrollbarWidth + "px";
      }
    };

    _proto._resetAdjustments = function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    };

    _proto._checkScrollbar = function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    };

    _proto._setScrollbar = function _setScrollbar() {
      var _this9 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        // Adjust fixed content padding
        $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
          var actualPadding = $$$1(element)[0].style.paddingRight;
          var calculatedPadding = $$$1(element).css('padding-right');
          $$$1(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + "px");
        }); // Adjust sticky content margin

        $$$1(Selector.STICKY_CONTENT).each(function (index, element) {
          var actualMargin = $$$1(element)[0].style.marginRight;
          var calculatedMargin = $$$1(element).css('margin-right');
          $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + "px");
        }); // Adjust navbar-toggler margin

        $$$1(Selector.NAVBAR_TOGGLER).each(function (index, element) {
          var actualMargin = $$$1(element)[0].style.marginRight;
          var calculatedMargin = $$$1(element).css('margin-right');
          $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) + _this9._scrollbarWidth + "px");
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = $$$1('body').css('padding-right');
        $$$1('body').data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
      }
    };

    _proto._resetScrollbar = function _resetScrollbar() {
      // Restore fixed content padding
      $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
        var padding = $$$1(element).data('padding-right');

        if (typeof padding !== 'undefined') {
          $$$1(element).css('padding-right', padding).removeData('padding-right');
        }
      }); // Restore sticky content and navbar-toggler margin

      $$$1(Selector.STICKY_CONTENT + ", " + Selector.NAVBAR_TOGGLER).each(function (index, element) {
        var margin = $$$1(element).data('margin-right');

        if (typeof margin !== 'undefined') {
          $$$1(element).css('margin-right', margin).removeData('margin-right');
        }
      }); // Restore body padding

      var padding = $$$1('body').data('padding-right');

      if (typeof padding !== 'undefined') {
        $$$1('body').css('padding-right', padding).removeData('padding-right');
      }
    };

    _proto._getScrollbarWidth = function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    }; // Static


    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = _extends({}, Modal.Default, $$$1(this).data(), typeof config === 'object' && config);

        if (!data) {
          data = new Modal(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    };

    _createClass(Modal, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return Modal;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    var _this10 = this;

    var target;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = $$$1(selector)[0];
    }

    var config = $$$1(target).data(DATA_KEY) ? 'toggle' : _extends({}, $$$1(target).data(), $$$1(this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = $$$1(target).one(Event.SHOW, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // Only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(Event.HIDDEN, function () {
        if ($$$1(_this10).is(':visible')) {
          _this10.focus();
        }
      });
    });

    Modal._jQueryInterface.call($$$1(target), config, this);
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Modal._jQueryInterface;
  $$$1.fn[NAME].Constructor = Modal;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Modal._jQueryInterface;
  };

  return Modal;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tooltip = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'tooltip';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.tooltip';
  var EVENT_KEY = "." + DATA_KEY;
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 150;
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var DefaultType = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)',
    boundary: '(string|element)'
  };
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };
  var Default = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent'
  };
  var HoverState = {
    SHOW: 'show',
    OUT: 'out'
  };
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    INSERTED: "inserted" + EVENT_KEY,
    CLICK: "click" + EVENT_KEY,
    FOCUSIN: "focusin" + EVENT_KEY,
    FOCUSOUT: "focusout" + EVENT_KEY,
    MOUSEENTER: "mouseenter" + EVENT_KEY,
    MOUSELEAVE: "mouseleave" + EVENT_KEY
  };
  var ClassName = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    TOOLTIP: '.tooltip',
    TOOLTIP_INNER: '.tooltip-inner',
    ARROW: '.arrow'
  };
  var Trigger = {
    HOVER: 'hover',
    FOCUS: 'focus',
    CLICK: 'click',
    MANUAL: 'manual'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Tooltip =
  /*#__PURE__*/
  function () {
    function Tooltip(element, config) {
      /**
       * Check for Popper dependency
       * Popper - https://popper.js.org
       */
      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)');
      } // private


      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // Protected

      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // Getters


    var _proto = Tooltip.prototype;

    // Public
    _proto.enable = function enable() {
      this._isEnabled = true;
    };

    _proto.disable = function disable() {
      this._isEnabled = false;
    };

    _proto.toggleEnabled = function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    };

    _proto.toggle = function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var dataKey = this.constructor.DATA_KEY;
        var context = $$$1(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $$$1(event.currentTarget).data(dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      $$$1.removeData(this.element, this.constructor.DATA_KEY);
      $$$1(this.element).off(this.constructor.EVENT_KEY);
      $$$1(this.element).closest('.modal').off('hide.bs.modal');

      if (this.tip) {
        $$$1(this.tip).remove();
      }

      this._isEnabled = null;
      this._timeout = null;
      this._hoverState = null;
      this._activeTrigger = null;

      if (this._popper !== null) {
        this._popper.destroy();
      }

      this._popper = null;
      this.element = null;
      this.config = null;
      this.tip = null;
    };

    _proto.show = function show() {
      var _this = this;

      if ($$$1(this.element).css('display') === 'none') {
        throw new Error('Please use show on visible elements');
      }

      var showEvent = $$$1.Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        $$$1(this.element).trigger(showEvent);
        var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);

        if (showEvent.isDefaultPrevented() || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);
        tip.setAttribute('id', tipId);
        this.element.setAttribute('aria-describedby', tipId);
        this.setContent();

        if (this.config.animation) {
          $$$1(tip).addClass(ClassName.FADE);
        }

        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement);

        this.addAttachmentClass(attachment);
        var container = this.config.container === false ? document.body : $$$1(this.config.container);
        $$$1(tip).data(this.constructor.DATA_KEY, this);

        if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
          $$$1(tip).appendTo(container);
        }

        $$$1(this.element).trigger(this.constructor.Event.INSERTED);
        this._popper = new Popper(this.element, tip, {
          placement: attachment,
          modifiers: {
            offset: {
              offset: this.config.offset
            },
            flip: {
              behavior: this.config.fallbackPlacement
            },
            arrow: {
              element: Selector.ARROW
            },
            preventOverflow: {
              boundariesElement: this.config.boundary
            }
          },
          onCreate: function onCreate(data) {
            if (data.originalPlacement !== data.placement) {
              _this._handlePopperPlacementChange(data);
            }
          },
          onUpdate: function onUpdate(data) {
            _this._handlePopperPlacementChange(data);
          }
        });
        $$$1(tip).addClass(ClassName.SHOW); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ('ontouchstart' in document.documentElement) {
          $$$1('body').children().on('mouseover', null, $$$1.noop);
        }

        var complete = function complete() {
          if (_this.config.animation) {
            _this._fixTransition();
          }

          var prevHoverState = _this._hoverState;
          _this._hoverState = null;
          $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);

          if (prevHoverState === HoverState.OUT) {
            _this._leave(null, _this);
          }
        };

        if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
          $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);
        } else {
          complete();
        }
      }
    };

    _proto.hide = function hide(callback) {
      var _this2 = this;

      var tip = this.getTipElement();
      var hideEvent = $$$1.Event(this.constructor.Event.HIDE);

      var complete = function complete() {
        if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this2._cleanTipClass();

        _this2.element.removeAttribute('aria-describedby');

        $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

        if (_this2._popper !== null) {
          _this2._popper.destroy();
        }

        if (callback) {
          callback();
        }
      };

      $$$1(this.element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      $$$1(tip).removeClass(ClassName.SHOW); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        $$$1('body').children().off('mouseover', null, $$$1.noop);
      }

      this._activeTrigger[Trigger.CLICK] = false;
      this._activeTrigger[Trigger.FOCUS] = false;
      this._activeTrigger[Trigger.HOVER] = false;

      if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
        $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        complete();
      }

      this._hoverState = '';
    };

    _proto.update = function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    }; // Protected


    _proto.isWithContent = function isWithContent() {
      return Boolean(this.getTitle());
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $$$1(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $$$1(this.getTipElement());
      this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
      $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
    };

    _proto.setElementContent = function setElementContent($element, content) {
      var html = this.config.html;

      if (typeof content === 'object' && (content.nodeType || content.jquery)) {
        // Content is a DOM node or a jQuery
        if (html) {
          if (!$$$1(content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($$$1(content).text());
        }
      } else {
        $element[html ? 'html' : 'text'](content);
      }
    };

    _proto.getTitle = function getTitle() {
      var title = this.element.getAttribute('data-original-title');

      if (!title) {
        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
      }

      return title;
    }; // Private


    _proto._getAttachment = function _getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    };

    _proto._setListeners = function _setListeners() {
      var _this3 = this;

      var triggers = this.config.trigger.split(' ');
      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function (event) {
            return _this3.toggle(event);
          });
        } else if (trigger !== Trigger.MANUAL) {
          var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
          var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
          $$$1(_this3.element).on(eventIn, _this3.config.selector, function (event) {
            return _this3._enter(event);
          }).on(eventOut, _this3.config.selector, function (event) {
            return _this3._leave(event);
          });
        }

        $$$1(_this3.element).closest('.modal').on('hide.bs.modal', function () {
          return _this3.hide();
        });
      });

      if (this.config.selector) {
        this.config = _extends({}, this.config, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    };

    _proto._fixTitle = function _fixTitle() {
      var titleType = typeof this.element.getAttribute('data-original-title');

      if (this.element.getAttribute('title') || titleType !== 'string') {
        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
        this.element.setAttribute('title', '');
      }
    };

    _proto._enter = function _enter(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $$$1(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $$$1(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
      }

      if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
        context._hoverState = HoverState.SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    };

    _proto._leave = function _leave(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $$$1(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $$$1(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    };

    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    };

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, this.constructor.Default, $$$1(this.element).data(), config);

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getDelegateConfig = function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }

      return config;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $$$1(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
      this._cleanTipClass();

      this.addAttachmentClass(this._getAttachment(data.placement));
    };

    _proto._fixTransition = function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;

      if (tip.getAttribute('x-placement') !== null) {
        return;
      }

      $$$1(tip).removeClass(ClassName.FADE);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    }; // Static


    Tooltip._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' && config;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Tooltip(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }]);
    return Tooltip;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $$$1.fn[NAME] = Tooltip._jQueryInterface;
  $$$1.fn[NAME].Constructor = Tooltip;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Tooltip._jQueryInterface;
  };

  return Tooltip;
}($, Popper);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Popover = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'popover';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.popover';
  var EVENT_KEY = "." + DATA_KEY;
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var CLASS_PREFIX = 'bs-popover';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var Default = _extends({}, Tooltip.Default, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });
  var DefaultType = _extends({}, Tooltip.DefaultType, {
    content: '(string|element|function)'
  });
  var ClassName = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    TITLE: '.popover-header',
    CONTENT: '.popover-body'
  };
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    INSERTED: "inserted" + EVENT_KEY,
    CLICK: "click" + EVENT_KEY,
    FOCUSIN: "focusin" + EVENT_KEY,
    FOCUSOUT: "focusout" + EVENT_KEY,
    MOUSEENTER: "mouseenter" + EVENT_KEY,
    MOUSELEAVE: "mouseleave" + EVENT_KEY
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Popover =
  /*#__PURE__*/
  function (_Tooltip) {
    _inheritsLoose(Popover, _Tooltip);

    function Popover() {
      return _Tooltip.apply(this, arguments) || this;
    }

    var _proto = Popover.prototype;

    // Overrides
    _proto.isWithContent = function isWithContent() {
      return this.getTitle() || this._getContent();
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $$$1(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $$$1(this.getTipElement()); // We use append for html objects to maintain js events

      this.setElementContent($tip.find(Selector.TITLE), this.getTitle());

      var content = this._getContent();

      if (typeof content === 'function') {
        content = content.call(this.element);
      }

      this.setElementContent($tip.find(Selector.CONTENT), content);
      $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
    }; // Private


    _proto._getContent = function _getContent() {
      return this.element.getAttribute('data-content') || this.config.content;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $$$1(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    }; // Static


    Popover._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' ? config : null;

        if (!data && /destroy|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Popover(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Popover, null, [{
      key: "VERSION",
      // Getters
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType;
      }
    }]);
    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $$$1.fn[NAME] = Popover._jQueryInterface;
  $$$1.fn[NAME].Constructor = Popover;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Popover._jQueryInterface;
  };

  return Popover;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var ScrollSpy = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'scrollspy';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.scrollspy';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var Default = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var Event = {
    ACTIVATE: "activate" + EVENT_KEY,
    SCROLL: "scroll" + EVENT_KEY,
    LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    DROPDOWN_ITEM: 'dropdown-item',
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active'
  };
  var Selector = {
    DATA_SPY: '[data-spy="scroll"]',
    ACTIVE: '.active',
    NAV_LIST_GROUP: '.nav, .list-group',
    NAV_LINKS: '.nav-link',
    NAV_ITEMS: '.nav-item',
    LIST_ITEMS: '.list-group-item',
    DROPDOWN: '.dropdown',
    DROPDOWN_ITEMS: '.dropdown-item',
    DROPDOWN_TOGGLE: '.dropdown-toggle'
  };
  var OffsetMethod = {
    OFFSET: 'offset',
    POSITION: 'position'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var ScrollSpy =
  /*#__PURE__*/
  function () {
    function ScrollSpy(element, config) {
      var _this = this;

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.LIST_ITEMS + ",") + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      $$$1(this._scrollElement).on(Event.SCROLL, function (event) {
        return _this._process(event);
      });
      this.refresh();

      this._process();
    } // Getters


    var _proto = ScrollSpy.prototype;

    // Public
    _proto.refresh = function refresh() {
      var _this2 = this;

      var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = $$$1.makeArray($$$1(this._selector));
      targets.map(function (element) {
        var target;
        var targetSelector = Util.getSelectorFromElement(element);

        if (targetSelector) {
          target = $$$1(targetSelector)[0];
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            // TODO (fat): remove sketch reliance on jQuery position/offset
            return [$$$1(target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this2._offsets.push(item[0]);

        _this2._targets.push(item[1]);
      });
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      $$$1(this._scrollElement).off(EVENT_KEY);
      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    }; // Private


    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);

      if (typeof config.target !== 'string') {
        var id = $$$1(config.target).attr('id');

        if (!id) {
          id = Util.getUID(NAME);
          $$$1(config.target).attr('id', id);
        }

        config.target = "#" + id;
      }

      Util.typeCheckConfig(NAME, config, DefaultType);
      return config;
    };

    _proto._getScrollTop = function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    };

    _proto._getScrollHeight = function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    };

    _proto._getOffsetHeight = function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    };

    _proto._process = function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      for (var i = this._offsets.length; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    };

    _proto._activate = function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(','); // eslint-disable-next-line arrow-body-style


      queries = queries.map(function (selector) {
        return selector + "[data-target=\"" + target + "\"]," + (selector + "[href=\"" + target + "\"]");
      });
      var $link = $$$1(queries.join(','));

      if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
        $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
        $link.addClass(ClassName.ACTIVE);
      } else {
        // Set triggered link as active
        $link.addClass(ClassName.ACTIVE); // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE); // Handle special case when .nav-link is inside .nav-item

        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
      }

      $$$1(this._scrollElement).trigger(Event.ACTIVATE, {
        relatedTarget: target
      });
    };

    _proto._clear = function _clear() {
      $$$1(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
    }; // Static


    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $$$1(this).data(DATA_KEY);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          $$$1(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(ScrollSpy, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);
    return ScrollSpy;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(window).on(Event.LOAD_DATA_API, function () {
    var scrollSpys = $$$1.makeArray($$$1(Selector.DATA_SPY));

    for (var i = scrollSpys.length; i--;) {
      var $spy = $$$1(scrollSpys[i]);

      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
  $$$1.fn[NAME].Constructor = ScrollSpy;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return ScrollSpy._jQueryInterface;
  };

  return ScrollSpy;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tab = function ($$$1) {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  var NAME = 'tab';
  var VERSION = '4.0.0';
  var DATA_KEY = 'bs.tab';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
  var TRANSITION_DURATION = 150;
  var Event = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active',
    DISABLED: 'disabled',
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector = {
    DROPDOWN: '.dropdown',
    NAV_LIST_GROUP: '.nav, .list-group',
    ACTIVE: '.active',
    ACTIVE_UL: '> li > .active',
    DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
    DROPDOWN_TOGGLE: '.dropdown-toggle',
    DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

  };

  var Tab =
  /*#__PURE__*/
  function () {
    function Tab(element) {
      this._element = element;
    } // Getters


    var _proto = Tab.prototype;

    // Public
    _proto.show = function show() {
      var _this = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
        return;
      }

      var target;
      var previous;
      var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
      var selector = Util.getSelectorFromElement(this._element);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
        previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
        previous = previous[previous.length - 1];
      }

      var hideEvent = $$$1.Event(Event.HIDE, {
        relatedTarget: this._element
      });
      var showEvent = $$$1.Event(Event.SHOW, {
        relatedTarget: previous
      });

      if (previous) {
        $$$1(previous).trigger(hideEvent);
      }

      $$$1(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = $$$1(selector)[0];
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = $$$1.Event(Event.HIDDEN, {
          relatedTarget: _this._element
        });
        var shownEvent = $$$1.Event(Event.SHOWN, {
          relatedTarget: previous
        });
        $$$1(previous).trigger(hiddenEvent);
        $$$1(_this._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    };

    _proto.dispose = function dispose() {
      $$$1.removeData(this._element, DATA_KEY);
      this._element = null;
    }; // Private


    _proto._activate = function _activate(element, container, callback) {
      var _this2 = this;

      var activeElements;

      if (container.nodeName === 'UL') {
        activeElements = $$$1(container).find(Selector.ACTIVE_UL);
      } else {
        activeElements = $$$1(container).children(Selector.ACTIVE);
      }

      var active = activeElements[0];
      var isTransitioning = callback && Util.supportsTransitionEnd() && active && $$$1(active).hasClass(ClassName.FADE);

      var complete = function complete() {
        return _this2._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        complete();
      }
    };

    _proto._transitionComplete = function _transitionComplete(element, active, callback) {
      if (active) {
        $$$1(active).removeClass(ClassName.SHOW + " " + ClassName.ACTIVE);
        var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      $$$1(element).addClass(ClassName.ACTIVE);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      Util.reflow(element);
      $$$1(element).addClass(ClassName.SHOW);

      if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
        var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];

        if (dropdownElement) {
          $$$1(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    }; // Static


    Tab._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $$$1(this);
        var data = $this.data(DATA_KEY);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tab, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);
    return Tab;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
    event.preventDefault();

    Tab._jQueryInterface.call($$$1(this), 'show');
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $$$1.fn[NAME] = Tab._jQueryInterface;
  $$$1.fn[NAME].Constructor = Tab;

  $$$1.fn[NAME].noConflict = function () {
    $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
    return Tab._jQueryInterface;
  };

  return Tab;
}($);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

(function ($$$1) {
  if (typeof $$$1 === 'undefined') {
    throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
  }

  var version = $$$1.fn.jquery.split(' ')[0].split('.');
  var minMajor = 1;
  var ltMajor = 2;
  var minMinor = 9;
  var minPatch = 1;
  var maxMajor = 4;

  if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
    throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
  }
})($);

exports.Util = Util;
exports.Alert = Alert;
exports.Button = Button;
exports.Carousel = Carousel;
exports.Collapse = Collapse;
exports.Dropdown = Dropdown;
exports.Modal = Modal;
exports.Popover = Popover;
exports.Scrollspy = ScrollSpy;
exports.Tab = Tab;
exports.Tooltip = Tooltip;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bootstrap.js.map

/*! DataTables 1.10.13
 * ©2008-2016 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.13
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd
 * @contact     www.datatables.net
 * @copyright   Copyright 2008-2016 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

(function( factory ) {
	"use strict";

	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				// CommonJS environments without a window global must pass a
				// root. This will give an error otherwise
				root = window;
			}

			if ( ! $ ) {
				$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
					require('jquery') :
					require('jquery')( root );
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}
(function( $, window, document, undefined ) {
	"use strict";

	/**
	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	 * flexible tool, based upon the foundations of progressive enhancement,
	 * which will add advanced interaction controls to any HTML table. For a
	 * full list of features please refer to
	 * [DataTables.net](href="http://datatables.net).
	 *
	 * Note that the `DataTable` object is not a global variable but is aliased
	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	 * be  accessed.
	 *
	 *  @class
	 *  @param {object} [init={}] Configuration object for DataTables. Options
	 *    are defined by {@link DataTable.defaults}
	 *  @requires jQuery 1.7+
	 *
	 *  @example
	 *    // Basic initialisation
	 *    $(document).ready( function {
	 *      $('#example').dataTable();
	 *    } );
	 *
	 *  @example
	 *    // Initialisation with configuration options - in this case, disable
	 *    // pagination and sorting.
	 *    $(document).ready( function {
	 *      $('#example').dataTable( {
	 *        "paginate": false,
	 *        "sort": false
	 *      } );
	 *    } );
	 */
	var DataTable = function ( options )
	{
		/**
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
		 * return the resulting jQuery object.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
		 *    criterion ("applied") or all TR elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {object} jQuery object, filtered by the given selector.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Highlight every second row
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.
		 *      oTable.fnFilter('Webkit');
		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
		 *      oTable.fnFilter('');
		 *    } );
		 */
		this.$ = function ( sSelector, oOpts )
		{
			return this.api(true).$( sSelector, oOpts );
		};
		
		
		/**
		 * Almost identical to $ in operation, but in this case returns the data for the matched
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching
		 * rows are found, the data returned is the original data array/object that was used to
		 * create the row (or a generated array if from a DOM source).
		 *
		 * This method is often useful in-combination with $ where both functions are given the
		 * same parameters and the array indexes will match identically.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
		 *    criterion ("applied") or all elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
		 *    entry in the array.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the data from the first row in the table
		 *      var data = oTable._('tr:first');
		 *
		 *      // Do something useful with the data
		 *      alert( "First cell is: "+data[0] );
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to 'Webkit' and get all data for
		 *      oTable.fnFilter('Webkit');
		 *      var data = oTable._('tr', {"search": "applied"});
		 *
		 *      // Do something with the data
		 *      alert( data.length+" rows matched the search" );
		 *    } );
		 */
		this._ = function ( sSelector, oOpts )
		{
			return this.api(true).rows( sSelector, oOpts ).data();
		};
		
		
		/**
		 * Create a DataTables Api instance, with the currently selected tables for
		 * the Api's context.
		 * @param {boolean} [traditional=false] Set the API instance's context to be
		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
		 *   or if all tables captured in the jQuery object should be used.
		 * @return {DataTables.Api}
		 */
		this.api = function ( traditional )
		{
			return traditional ?
				new _Api(
					_fnSettingsFromNode( this[ _ext.iApiIndex ] )
				) :
				new _Api( this );
		};
		
		
		/**
		 * Add a single new row or multiple rows of data to the table. Please note
		 * that this is suitable for client-side processing only - if you are using
		 * server-side processing (i.e. "bServerSide": true), then to add data, you
		 * must add it to the data source, i.e. the server-side, through an Ajax call.
		 *  @param {array|object} data The data to be added to the table. This can be:
		 *    <ul>
		 *      <li>1D array of data - add a single row with the data provided</li>
		 *      <li>2D array of arrays - add multiple rows in a single call</li>
		 *      <li>object - data object when using <i>mData</i></li>
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
		 *    </ul>
		 *  @param {bool} [redraw=true] redraw the table or not
		 *  @returns {array} An array of integers, representing the list of indexes in
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
		 *    the table.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Global var for counter
		 *    var giCount = 2;
		 *
		 *    $(document).ready(function() {
		 *      $('#example').dataTable();
		 *    } );
		 *
		 *    function fnClickAddRow() {
		 *      $('#example').dataTable().fnAddData( [
		 *        giCount+".1",
		 *        giCount+".2",
		 *        giCount+".3",
		 *        giCount+".4" ]
		 *      );
		 *
		 *      giCount++;
		 *    }
		 */
		this.fnAddData = function( data, redraw )
		{
			var api = this.api( true );
		
			/* Check if we want to add multiple rows or not */
			var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
				api.rows.add( data ) :
				api.row.add( data );
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return rows.flatten().toArray();
		};
		
		
		/**
		 * This function will make DataTables recalculate the column sizes, based on the data
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
		 * through the sWidth parameter). This can be useful when the width of the table's
		 * parent element changes (for example a window resize).
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable( {
		 *        "sScrollY": "200px",
		 *        "bPaginate": false
		 *      } );
		 *
		 *      $(window).on('resize', function () {
		 *        oTable.fnAdjustColumnSizing();
		 *      } );
		 *    } );
		 */
		this.fnAdjustColumnSizing = function ( bRedraw )
		{
			var api = this.api( true ).columns.adjust();
			var settings = api.settings()[0];
			var scroll = settings.oScroll;
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw( false );
			}
			else if ( scroll.sX !== "" || scroll.sY !== "" ) {
				/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
				_fnScrollDraw( settings );
			}
		};
		
		
		/**
		 * Quickly and simply clear a table
		 *  @param {bool} [bRedraw=true] redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
		 *      oTable.fnClearTable();
		 *    } );
		 */
		this.fnClearTable = function( bRedraw )
		{
			var api = this.api( true ).clear();
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
		};
		
		
		/**
		 * The exact opposite of 'opening' a row, this function will close any rows which
		 * are currently 'open'.
		 *  @param {node} nTr the table row to 'close'
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnClose = function( nTr )
		{
			this.api( true ).row( nTr ).child.hide();
		};
		
		
		/**
		 * Remove a row for the table
		 *  @param {mixed} target The index of the row from aoData to be deleted, or
		 *    the TR element you want to delete
		 *  @param {function|null} [callBack] Callback function
		 *  @param {bool} [redraw=true] Redraw the table or not
		 *  @returns {array} The row that was deleted
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately remove the first row
		 *      oTable.fnDeleteRow( 0 );
		 *    } );
		 */
		this.fnDeleteRow = function( target, callback, redraw )
		{
			var api = this.api( true );
			var rows = api.rows( target );
			var settings = rows.settings()[0];
			var data = settings.aoData[ rows[0][0] ];
		
			rows.remove();
		
			if ( callback ) {
				callback.call( this, settings, data );
			}
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return data;
		};
		
		
		/**
		 * Restore the table to it's original state in the DOM by removing all of DataTables
		 * enhancements, alterations to the DOM structure of the table and event listeners.
		 *  @param {boolean} [remove=false] Completely remove the table from the DOM
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnDestroy();
		 *    } );
		 */
		this.fnDestroy = function ( remove )
		{
			this.api( true ).destroy( remove );
		};
		
		
		/**
		 * Redraw the table
		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
		 *      oTable.fnDraw();
		 *    } );
		 */
		this.fnDraw = function( complete )
		{
			// Note that this isn't an exact match to the old call to _fnDraw - it takes
			// into account the new data, but can hold position.
			this.api( true ).draw( complete );
		};
		
		
		/**
		 * Filter the input based on data
		 *  @param {string} sInput String to filter the table on
		 *  @param {int|null} [iColumn] Column to limit filtering to
		 *  @param {bool} [bRegex=false] Treat as regular expression or not
		 *  @param {bool} [bSmart=true] Perform smart filtering or not
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sometime later - filter...
		 *      oTable.fnFilter( 'test string' );
		 *    } );
		 */
		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
		{
			var api = this.api( true );
		
			if ( iColumn === null || iColumn === undefined ) {
				api.search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
			else {
				api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
		
			api.draw();
		};
		
		
		/**
		 * Get the data for the whole table, an individual row or an individual cell based on the
		 * provided parameters.
		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
		 *    a TR node then the data source for the whole row will be returned. If given as a
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the
		 *    cell returned. If given as an integer, then this is treated as the aoData internal
		 *    data index for the row (see fnGetPosition) and the data for that row used.
		 *  @param {int} [col] Optional column index that you want the data of.
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
		 *    returned. If mRow is defined, just data for that row, and is iCol is
		 *    defined, only data for the designated cell is returned.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Row data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('tr').click( function () {
		 *        var data = oTable.fnGetData( this );
		 *        // ... do something with the array / object of data for the row
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Individual cell data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('td').click( function () {
		 *        var sData = oTable.fnGetData( this );
		 *        alert( 'The cell clicked on had the value of '+sData );
		 *      } );
		 *    } );
		 */
		this.fnGetData = function( src, col )
		{
			var api = this.api( true );
		
			if ( src !== undefined ) {
				var type = src.nodeName ? src.nodeName.toLowerCase() : '';
		
				return col !== undefined || type == 'td' || type == 'th' ?
					api.cell( src, col ).data() :
					api.row( src ).data() || null;
			}
		
			return api.data().toArray();
		};
		
		
		/**
		 * Get an array of the TR nodes that are used in the table's body. Note that you will
		 * typically want to use the '$' API method in preference to this as it is more
		 * flexible.
		 *  @param {int} [iRow] Optional row index for the TR element you want
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
		 *    in the table's body, or iRow is defined, just the TR element requested.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the nodes from the table
		 *      var nNodes = oTable.fnGetNodes( );
		 *    } );
		 */
		this.fnGetNodes = function( iRow )
		{
			var api = this.api( true );
		
			return iRow !== undefined ?
				api.row( iRow ).node() :
				api.rows().nodes().flatten().toArray();
		};
		
		
		/**
		 * Get the array indexes of a particular cell from it's DOM element
		 * and column index including hidden columns
		 *  @param {node} node this can either be a TR, TD or TH in the table's body
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
		 *    if given as a cell, an array of [row index, column index (visible),
		 *    column index (all)] is given.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      $('#example tbody td').click( function () {
		 *        // Get the position of the current data from the node
		 *        var aPos = oTable.fnGetPosition( this );
		 *
		 *        // Get the data array for this row
		 *        var aData = oTable.fnGetData( aPos[0] );
		 *
		 *        // Update the data array and return the value
		 *        aData[ aPos[1] ] = 'clicked';
		 *        this.innerHTML = 'clicked';
		 *      } );
		 *
		 *      // Init DataTables
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnGetPosition = function( node )
		{
			var api = this.api( true );
			var nodeName = node.nodeName.toUpperCase();
		
			if ( nodeName == 'TR' ) {
				return api.row( node ).index();
			}
			else if ( nodeName == 'TD' || nodeName == 'TH' ) {
				var cell = api.cell( node ).index();
		
				return [
					cell.row,
					cell.columnVisible,
					cell.column
				];
			}
			return null;
		};
		
		
		/**
		 * Check to see if a row is 'open' or not.
		 *  @param {node} nTr the table row to check
		 *  @returns {boolean} true if the row is currently open, false otherwise
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnIsOpen = function( nTr )
		{
			return this.api( true ).row( nTr ).child.isShown();
		};
		
		
		/**
		 * This function will place a new row directly after a row which is currently
		 * on display on the page, with the HTML contents that is passed into the
		 * function. This can be used, for example, to ask for confirmation that a
		 * particular record should be deleted.
		 *  @param {node} nTr The table row to 'open'
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row
		 *  @param {string} sClass Class to give the new TD cell
		 *  @returns {node} The row opened. Note that if the table row passed in as the
		 *    first parameter, is not found in the table, this method will silently
		 *    return.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnOpen = function( nTr, mHtml, sClass )
		{
			return this.api( true )
				.row( nTr )
				.child( mHtml, sClass )
				.show()
				.child()[0];
		};
		
		
		/**
		 * Change the pagination - provides the internal logic for pagination in a simple API
		 * function. With this function you can have a DataTables table go to the next,
		 * previous, first or last pages.
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
		 *    or page number to jump to (integer), note that page 0 is the first page.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnPageChange( 'next' );
		 *    } );
		 */
		this.fnPageChange = function ( mAction, bRedraw )
		{
			var api = this.api( true ).page( mAction );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw(false);
			}
		};
		
		
		/**
		 * Show a particular column
		 *  @param {int} iCol The column whose display should be changed
		 *  @param {bool} bShow Show (true) or hide (false) the column
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Hide the second column after initialisation
		 *      oTable.fnSetColumnVis( 1, false );
		 *    } );
		 */
		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
		{
			var api = this.api( true ).column( iCol ).visible( bShow );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.columns.adjust().draw();
			}
		};
		
		
		/**
		 * Get the settings for a particular table for external manipulation
		 *  @returns {object} DataTables settings object. See
		 *    {@link DataTable.models.oSettings}
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      var oSettings = oTable.fnSettings();
		 *
		 *      // Show an example parameter from the settings
		 *      alert( oSettings._iDisplayStart );
		 *    } );
		 */
		this.fnSettings = function()
		{
			return _fnSettingsFromNode( this[_ext.iApiIndex] );
		};
		
		
		/**
		 * Sort the table by a particular column
		 *  @param {int} iCol the data index to sort on. Note that this will not match the
		 *    'display index' if you have hidden data entries
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort immediately with columns 0 and 1
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
		 *    } );
		 */
		this.fnSort = function( aaSort )
		{
			this.api( true ).order( aaSort ).draw();
		};
		
		
		/**
		 * Attach a sort listener to an element for a given column
		 *  @param {node} nNode the element to attach the sort listener to
		 *  @param {int} iColumn the column that a click on this node will sort on
		 *  @param {function} [fnCallback] callback function when sort is run
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort on column 1, when 'sorter' is clicked on
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
		 *    } );
		 */
		this.fnSortListener = function( nNode, iColumn, fnCallback )
		{
			this.api( true ).order.listener( nNode, iColumn, fnCallback );
		};
		
		
		/**
		 * Update a table cell or row - this method will accept either a single value to
		 * update the cell with, an array of values with one element for each column or
		 * an object in the same format as the original data source. The function is
		 * self-referencing in order to make the multi column updates easier.
		 *  @param {object|array|string} mData Data to update the cell/row with
		 *  @param {node|int} mRow TR element you want to update or the aoData index
		 *  @param {int} [iColumn] The column to update, give as null or undefined to
		 *    update a whole row.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not
		 *  @returns {int} 0 on success, 1 on error
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
		 *    } );
		 */
		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
		{
			var api = this.api( true );
		
			if ( iColumn === undefined || iColumn === null ) {
				api.row( mRow ).data( mData );
			}
			else {
				api.cell( mRow, iColumn ).data( mData );
			}
		
			if ( bAction === undefined || bAction ) {
				api.columns.adjust();
			}
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
			return 0;
		};
		
		
		/**
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
		 * to ensure compatibility.
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
		 *    formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
		 *    version, or false if this version of DataTales is not suitable
		 *  @method
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
		 *    } );
		 */
		this.fnVersionCheck = _ext.fnVersionCheck;
		

		var _that = this;
		var emptyInit = options === undefined;
		var len = this.length;

		if ( emptyInit ) {
			options = {};
		}

		this.oApi = this.internal = _ext.internal;

		// Extend with old style plug-in API methods
		for ( var fn in DataTable.ext.internal ) {
			if ( fn ) {
				this[fn] = _fnExternApiFunc(fn);
			}
		}

		this.each(function() {
			// For each initialisation we want to give it a clean initialisation
			// object that can be bashed around
			var o = {};
			var oInit = len > 1 ? // optimisation for single table case
				_fnExtend( o, options, true ) :
				options;

			/*global oInit,_that,emptyInit*/
			var i=0, iLen, j, jLen, k, kLen;
			var sId = this.getAttribute( 'id' );
			var bInitHandedOff = false;
			var defaults = DataTable.defaults;
			var $this = $(this);
			
			
			/* Sanity check */
			if ( this.nodeName.toLowerCase() != 'table' )
			{
				_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
				return;
			}
			
			/* Backwards compatibility for the defaults */
			_fnCompatOpts( defaults );
			_fnCompatCols( defaults.column );
			
			/* Convert the camel-case defaults to Hungarian */
			_fnCamelToHungarian( defaults, defaults, true );
			_fnCamelToHungarian( defaults.column, defaults.column, true );
			
			/* Setting up the initialisation object */
			_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );
			
			
			
			/* Check to see if we are re-initialising a table */
			var allSettings = DataTable.settings;
			for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
			{
				var s = allSettings[i];
			
				/* Base check on table node */
				if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )
				{
					var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
					var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
			
					if ( emptyInit || bRetrieve )
					{
						return s.oInstance;
					}
					else if ( bDestroy )
					{
						s.oInstance.fnDestroy();
						break;
					}
					else
					{
						_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
						return;
					}
				}
			
				/* If the element we are initialising has the same ID as a table which was previously
				 * initialised, but the table nodes don't match (from before) then we destroy the old
				 * instance by simply deleting it. This is under the assumption that the table has been
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
				 */
				if ( s.sTableId == this.id )
				{
					allSettings.splice( i, 1 );
					break;
				}
			}
			
			/* Ensure the table has an ID - required for accessibility */
			if ( sId === null || sId === "" )
			{
				sId = "DataTables_Table_"+(DataTable.ext._unique++);
				this.id = sId;
			}
			
			/* Create the settings object for this table and set some of the default parameters */
			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
				"sDestroyWidth": $this[0].style.width,
				"sInstance":     sId,
				"sTableId":      sId
			} );
			oSettings.nTable = this;
			oSettings.oApi   = _that.internal;
			oSettings.oInit  = oInit;
			
			allSettings.push( oSettings );
			
			// Need to add the instance after the instance after the settings object has been added
			// to the settings array, so we can self reference the table instance if more than one
			oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
			
			// Backwards compatibility, before we apply all the defaults
			_fnCompatOpts( oInit );
			
			if ( oInit.oLanguage )
			{
				_fnLanguageCompat( oInit.oLanguage );
			}
			
			// If the length menu is given, but the init display length is not, use the length menu
			if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
			{
				oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
					oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
			}
			
			// Apply the defaults and init options to make a single init object will all
			// options defined from defaults and instance options.
			oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
			
			
			// Map the initialisation options onto the settings object
			_fnMap( oSettings.oFeatures, oInit, [
				"bPaginate",
				"bLengthChange",
				"bFilter",
				"bSort",
				"bSortMulti",
				"bInfo",
				"bProcessing",
				"bAutoWidth",
				"bSortClasses",
				"bServerSide",
				"bDeferRender"
			] );
			_fnMap( oSettings, oInit, [
				"asStripeClasses",
				"ajax",
				"fnServerData",
				"fnFormatNumber",
				"sServerMethod",
				"aaSorting",
				"aaSortingFixed",
				"aLengthMenu",
				"sPaginationType",
				"sAjaxSource",
				"sAjaxDataProp",
				"iStateDuration",
				"sDom",
				"bSortCellsTop",
				"iTabIndex",
				"fnStateLoadCallback",
				"fnStateSaveCallback",
				"renderer",
				"searchDelay",
				"rowId",
				[ "iCookieDuration", "iStateDuration" ], // backwards compat
				[ "oSearch", "oPreviousSearch" ],
				[ "aoSearchCols", "aoPreSearchCols" ],
				[ "iDisplayLength", "_iDisplayLength" ],
				[ "bJQueryUI", "bJUI" ]
			] );
			_fnMap( oSettings.oScroll, oInit, [
				[ "sScrollX", "sX" ],
				[ "sScrollXInner", "sXInner" ],
				[ "sScrollY", "sY" ],
				[ "bScrollCollapse", "bCollapse" ]
			] );
			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
			
			/* Callback functions which are array driven */
			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
			
			oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
			
			/* Browser support detection */
			_fnBrowserDetect( oSettings );
			
			var oClasses = oSettings.oClasses;
			
			// @todo Remove in 1.11
			if ( oInit.bJQueryUI )
			{
				/* Use the JUI classes object for display. You could clone the oStdClasses object if
				 * you want to have multiple tables with multiple independent classes
				 */
				$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );
			
				if ( oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip" )
				{
					/* Set the DOM to use a layout suitable for jQuery UI's theming */
					oSettings.sDom = '<"H"lfr>t<"F"ip>';
				}
			
				if ( ! oSettings.renderer ) {
					oSettings.renderer = 'jqueryui';
				}
				else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {
					oSettings.renderer.header = 'jqueryui';
				}
			}
			else
			{
				$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
			}
			$this.addClass( oClasses.sTable );
			
			
			if ( oSettings.iInitDisplayStart === undefined )
			{
				/* Display start point, taking into account the save saving */
				oSettings.iInitDisplayStart = oInit.iDisplayStart;
				oSettings._iDisplayStart = oInit.iDisplayStart;
			}
			
			if ( oInit.iDeferLoading !== null )
			{
				oSettings.bDeferLoading = true;
				var tmp = $.isArray( oInit.iDeferLoading );
				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
			}
			
			/* Language definitions */
			var oLanguage = oSettings.oLanguage;
			$.extend( true, oLanguage, oInit.oLanguage );
			
			if ( oLanguage.sUrl )
			{
				/* Get the language definitions from a file - because this Ajax call makes the language
				 * get async to the remainder of this function we use bInitHandedOff to indicate that
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
				 */
				$.ajax( {
					dataType: 'json',
					url: oLanguage.sUrl,
					success: function ( json ) {
						_fnLanguageCompat( json );
						_fnCamelToHungarian( defaults.oLanguage, json );
						$.extend( true, oLanguage, json );
						_fnInitialise( oSettings );
					},
					error: function () {
						// Error occurred loading language file, continue on as best we can
						_fnInitialise( oSettings );
					}
				} );
				bInitHandedOff = true;
			}
			
			/*
			 * Stripes
			 */
			if ( oInit.asStripeClasses === null )
			{
				oSettings.asStripeClasses =[
					oClasses.sStripeOdd,
					oClasses.sStripeEven
				];
			}
			
			/* Remove row stripe classes if they are already on the table row */
			var stripeClasses = oSettings.asStripeClasses;
			var rowOne = $this.children('tbody').find('tr').eq(0);
			if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
				return rowOne.hasClass(el);
			} ) ) !== -1 ) {
				$('tbody tr', this).removeClass( stripeClasses.join(' ') );
				oSettings.asDestroyStripes = stripeClasses.slice();
			}
			
			/*
			 * Columns
			 * See if we should load columns automatically or use defined ones
			 */
			var anThs = [];
			var aoColumnsInit;
			var nThead = this.getElementsByTagName('thead');
			if ( nThead.length !== 0 )
			{
				_fnDetectHeader( oSettings.aoHeader, nThead[0] );
				anThs = _fnGetUniqueThs( oSettings );
			}
			
			/* If not given a column array, generate one with nulls */
			if ( oInit.aoColumns === null )
			{
				aoColumnsInit = [];
				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
				{
					aoColumnsInit.push( null );
				}
			}
			else
			{
				aoColumnsInit = oInit.aoColumns;
			}
			
			/* Add the columns */
			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
			{
				_fnAddColumn( oSettings, anThs ? anThs[i] : null );
			}
			
			/* Apply the column definitions */
			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
				_fnColumnOptions( oSettings, iCol, oDef );
			} );
			
			/* HTML5 attribute detection - build an mData object automatically if the
			 * attributes are found
			 */
			if ( rowOne.length ) {
				var a = function ( cell, name ) {
					return cell.getAttribute( 'data-'+name ) !== null ? name : null;
				};
			
				$( rowOne[0] ).children('th, td').each( function (i, cell) {
					var col = oSettings.aoColumns[i];
			
					if ( col.mData === i ) {
						var sort = a( cell, 'sort' ) || a( cell, 'order' );
						var filter = a( cell, 'filter' ) || a( cell, 'search' );
			
						if ( sort !== null || filter !== null ) {
							col.mData = {
								_:      i+'.display',
								sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
								type:   sort !== null   ? i+'.@data-'+sort   : undefined,
								filter: filter !== null ? i+'.@data-'+filter : undefined
							};
			
							_fnColumnOptions( oSettings, i );
						}
					}
				} );
			}
			
			var features = oSettings.oFeatures;
			var loadedInit = function () {
				/*
				 * Sorting
				 * @todo For modularisation (1.11) this needs to do into a sort start up handler
				 */
			
				// If aaSorting is not defined, then we use the first indicator in asSorting
				// in case that has been altered, so the default sort reflects that option
				if ( oInit.aaSorting === undefined ) {
					var sorting = oSettings.aaSorting;
					for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
						sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
					}
				}
			
				/* Do a first pass on the sorting classes (allows any size changes to be taken into
				 * account, and also will apply sorting disabled classes if disabled
				 */
				_fnSortingClasses( oSettings );
			
				if ( features.bSort ) {
					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
						if ( oSettings.bSorted ) {
							var aSort = _fnSortFlatten( oSettings );
							var sortedColumns = {};
			
							$.each( aSort, function (i, val) {
								sortedColumns[ val.src ] = val.dir;
							} );
			
							_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
							_fnSortAria( oSettings );
						}
					} );
				}
			
				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
					if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
						_fnSortingClasses( oSettings );
					}
				}, 'sc' );
			
			
				/*
				 * Final init
				 * Cache the header, body and footer as required, creating them if needed
				 */
			
				// Work around for Webkit bug 83867 - store the caption-side before removing from doc
				var captions = $this.children('caption').each( function () {
					this._captionSide = $(this).css('caption-side');
				} );
			
				var thead = $this.children('thead');
				if ( thead.length === 0 ) {
					thead = $('<thead/>').appendTo($this);
				}
				oSettings.nTHead = thead[0];
			
				var tbody = $this.children('tbody');
				if ( tbody.length === 0 ) {
					tbody = $('<tbody/>').appendTo($this);
				}
				oSettings.nTBody = tbody[0];
			
				var tfoot = $this.children('tfoot');
				if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
					// If we are a scrolling table, and no footer has been given, then we need to create
					// a tfoot element for the caption element to be appended to
					tfoot = $('<tfoot/>').appendTo($this);
				}
			
				if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
					$this.addClass( oClasses.sNoFooter );
				}
				else if ( tfoot.length > 0 ) {
					oSettings.nTFoot = tfoot[0];
					_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
				}
			
				/* Check if there is data passing into the constructor */
				if ( oInit.aaData ) {
					for ( i=0 ; i<oInit.aaData.length ; i++ ) {
						_fnAddData( oSettings, oInit.aaData[ i ] );
					}
				}
				else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
					/* Grab the data from the page - only do this when deferred loading or no Ajax
					 * source since there is no point in reading the DOM data if we are then going
					 * to replace it with Ajax data
					 */
					_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
				}
			
				/* Copy the data index array */
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
			
				/* Initialisation complete - table can be drawn */
				oSettings.bInitialised = true;
			
				/* Check if we need to initialise the table (it might not have been handed off to the
				 * language processor)
				 */
				if ( bInitHandedOff === false ) {
					_fnInitialise( oSettings );
				}
			};
			
			/* Must be done after everything which can be overridden by the state saving! */
			if ( oInit.bStateSave )
			{
				features.bStateSave = true;
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
				_fnLoadState( oSettings, oInit, loadedInit );
			}
			else {
				loadedInit();
			}
			
		} );
		_that = null;
		return this;
	};

	
	/*
	 * It is useful to have variables which are scoped locally so only the
	 * DataTables functions can access them and they don't leak into global space.
	 * At the same time these functions are often useful over multiple files in the
	 * core and API, so we list, or at least document, all variables which are used
	 * by DataTables as private variables here. This also ensures that there is no
	 * clashing of variable names and that they can easily referenced for reuse.
	 */
	
	
	// Defined else where
	//  _selector_run
	//  _selector_opts
	//  _selector_first
	//  _selector_row_indexes
	
	var _ext; // DataTable.ext
	var _Api; // DataTable.Api
	var _api_register; // DataTable.Api.register
	var _api_registerPlural; // DataTable.Api.registerPlural
	
	var _re_dic = {};
	var _re_new_lines = /[\r\n]/g;
	var _re_html = /<.*?>/g;
	
	// This is not strict ISO8601 - Date.parse() is quite lax, although
	// implementations differ between browsers.
	var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
	
	// Escape regular expression special characters
	var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
	
	// http://en.wikipedia.org/wiki/Foreign_exchange_market
	// - \u20BD - Russian ruble.
	// - \u20a9 - South Korean Won
	// - \u20BA - Turkish Lira
	// - \u20B9 - Indian Rupee
	// - R - Brazil (R$) and South Africa
	// - fr - Swiss Franc
	// - kr - Swedish krona, Norwegian krone and Danish krone
	// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
	//   standards as thousands separators.
	var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;
	
	
	var _empty = function ( d ) {
		return !d || d === true || d === '-' ? true : false;
	};
	
	
	var _intVal = function ( s ) {
		var integer = parseInt( s, 10 );
		return !isNaN(integer) && isFinite(s) ? integer : null;
	};
	
	// Convert from a formatted number with characters other than `.` as the
	// decimal place, to a Javascript number
	var _numToDecimal = function ( num, decimalPoint ) {
		// Cache created regular expressions for speed as this function is called often
		if ( ! _re_dic[ decimalPoint ] ) {
			_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
		}
		return typeof num === 'string' && decimalPoint !== '.' ?
			num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
			num;
	};
	
	
	var _isNumber = function ( d, decimalPoint, formatted ) {
		var strType = typeof d === 'string';
	
		// If empty return immediately so there must be a number if it is a
		// formatted string (this stops the string "k", or "kr", etc being detected
		// as a formatted number for currency
		if ( _empty( d ) ) {
			return true;
		}
	
		if ( decimalPoint && strType ) {
			d = _numToDecimal( d, decimalPoint );
		}
	
		if ( formatted && strType ) {
			d = d.replace( _re_formatted_numeric, '' );
		}
	
		return !isNaN( parseFloat(d) ) && isFinite( d );
	};
	
	
	// A string without HTML in it can be considered to be HTML still
	var _isHtml = function ( d ) {
		return _empty( d ) || typeof d === 'string';
	};
	
	
	var _htmlNumeric = function ( d, decimalPoint, formatted ) {
		if ( _empty( d ) ) {
			return true;
		}
	
		var html = _isHtml( d );
		return ! html ?
			null :
			_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
				true :
				null;
	};
	
	
	var _pluck = function ( a, prop, prop2 ) {
		var out = [];
		var i=0, ien=a.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[i] && a[i][ prop ] ) {
					out.push( a[i][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				if ( a[i] ) {
					out.push( a[i][ prop ] );
				}
			}
		}
	
		return out;
	};
	
	
	// Basically the same as _pluck, but rather than looping over `a` we use `order`
	// as the indexes to pick from `a`
	var _pluck_order = function ( a, order, prop, prop2 )
	{
		var out = [];
		var i=0, ien=order.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[ order[i] ][ prop ] ) {
					out.push( a[ order[i] ][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				out.push( a[ order[i] ][ prop ] );
			}
		}
	
		return out;
	};
	
	
	var _range = function ( len, start )
	{
		var out = [];
		var end;
	
		if ( start === undefined ) {
			start = 0;
			end = len;
		}
		else {
			end = start;
			start = len;
		}
	
		for ( var i=start ; i<end ; i++ ) {
			out.push( i );
		}
	
		return out;
	};
	
	
	var _removeEmpty = function ( a )
	{
		var out = [];
	
		for ( var i=0, ien=a.length ; i<ien ; i++ ) {
			if ( a[i] ) { // careful - will remove all falsy values!
				out.push( a[i] );
			}
		}
	
		return out;
	};
	
	
	var _stripHtml = function ( d ) {
		return d.replace( _re_html, '' );
	};
	
	
	/**
	 * Find the unique elements in a source array.
	 *
	 * @param  {array} src Source array
	 * @return {array} Array of unique items
	 * @ignore
	 */
	var _unique = function ( src )
	{
		// A faster unique method is to use object keys to identify used values,
		// but this doesn't work with arrays or objects, which we must also
		// consider. See jsperf.com/compare-array-unique-versions/4 for more
		// information.
		var
			out = [],
			val,
			i, ien=src.length,
			j, k=0;
	
		again: for ( i=0 ; i<ien ; i++ ) {
			val = src[i];
	
			for ( j=0 ; j<k ; j++ ) {
				if ( out[j] === val ) {
					continue again;
				}
			}
	
			out.push( val );
			k++;
		}
	
		return out;
	};
	
	
	/**
	 * DataTables utility methods
	 * 
	 * This namespace provides helper methods that DataTables uses internally to
	 * create a DataTable, but which are not exclusively used only for DataTables.
	 * These methods can be used by extension authors to save the duplication of
	 * code.
	 *
	 *  @namespace
	 */
	DataTable.util = {
		/**
		 * Throttle the calls to a function. Arguments and context are maintained
		 * for the throttled function.
		 *
		 * @param {function} fn Function to be called
		 * @param {integer} freq Call frequency in mS
		 * @return {function} Wrapped function
		 */
		throttle: function ( fn, freq ) {
			var
				frequency = freq !== undefined ? freq : 200,
				last,
				timer;
	
			return function () {
				var
					that = this,
					now  = +new Date(),
					args = arguments;
	
				if ( last && now < last + frequency ) {
					clearTimeout( timer );
	
					timer = setTimeout( function () {
						last = undefined;
						fn.apply( that, args );
					}, frequency );
				}
				else {
					last = now;
					fn.apply( that, args );
				}
			};
		},
	
	
		/**
		 * Escape a string such that it can be used in a regular expression
		 *
		 *  @param {string} val string to escape
		 *  @returns {string} escaped string
		 */
		escapeRegex: function ( val ) {
			return val.replace( _re_escape_regex, '\\$1' );
		}
	};
	
	
	
	/**
	 * Create a mapping object that allows camel case parameters to be looked up
	 * for their Hungarian counterparts. The mapping is stored in a private
	 * parameter called `_hungarianMap` which can be accessed on the source object.
	 *  @param {object} o
	 *  @memberof DataTable#oApi
	 */
	function _fnHungarianMap ( o )
	{
		var
			hungarian = 'a aa ai ao as b fn i m o s ',
			match,
			newKey,
			map = {};
	
		$.each( o, function (key, val) {
			match = key.match(/^([^A-Z]+?)([A-Z])/);
	
			if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
			{
				newKey = key.replace( match[0], match[2].toLowerCase() );
				map[ newKey ] = key;
	
				if ( match[1] === 'o' )
				{
					_fnHungarianMap( o[key] );
				}
			}
		} );
	
		o._hungarianMap = map;
	}
	
	
	/**
	 * Convert from camel case parameters to Hungarian, based on a Hungarian map
	 * created by _fnHungarianMap.
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 *  @memberof DataTable#oApi
	 */
	function _fnCamelToHungarian ( src, user, force )
	{
		if ( ! src._hungarianMap ) {
			_fnHungarianMap( src );
		}
	
		var hungarianKey;
	
		$.each( user, function (key, val) {
			hungarianKey = src._hungarianMap[ key ];
	
			if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
			{
				// For objects, we need to buzz down into the object to copy parameters
				if ( hungarianKey.charAt(0) === 'o' )
				{
					// Copy the camelCase options over to the hungarian
					if ( ! user[ hungarianKey ] ) {
						user[ hungarianKey ] = {};
					}
					$.extend( true, user[hungarianKey], user[key] );
	
					_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
				}
				else {
					user[hungarianKey] = user[ key ];
				}
			}
		} );
	}
	
	
	/**
	 * Language compatibility - when certain options are given, and others aren't, we
	 * need to duplicate the values over, in order to provide backwards compatibility
	 * with older language files.
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnLanguageCompat( lang )
	{
		var defaults = DataTable.defaults.oLanguage;
		var zeroRecords = lang.sZeroRecords;
	
		/* Backwards compatibility - if there is no sEmptyTable given, then use the same as
		 * sZeroRecords - assuming that is given.
		 */
		if ( ! lang.sEmptyTable && zeroRecords &&
			defaults.sEmptyTable === "No data available in table" )
		{
			_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
		}
	
		/* Likewise with loading records */
		if ( ! lang.sLoadingRecords && zeroRecords &&
			defaults.sLoadingRecords === "Loading..." )
		{
			_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
		}
	
		// Old parameter name of the thousands separator mapped onto the new
		if ( lang.sInfoThousands ) {
			lang.sThousands = lang.sInfoThousands;
		}
	
		var decimal = lang.sDecimal;
		if ( decimal ) {
			_addNumericSort( decimal );
		}
	}
	
	
	/**
	 * Map one parameter onto another
	 *  @param {object} o Object to map
	 *  @param {*} knew The new parameter name
	 *  @param {*} old The old parameter name
	 */
	var _fnCompatMap = function ( o, knew, old ) {
		if ( o[ knew ] !== undefined ) {
			o[ old ] = o[ knew ];
		}
	};
	
	
	/**
	 * Provide backwards compatibility for the main DT options. Note that the new
	 * options are mapped onto the old parameters, so this is an external interface
	 * change only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatOpts ( init )
	{
		_fnCompatMap( init, 'ordering',      'bSort' );
		_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
		_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
		_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
		_fnCompatMap( init, 'order',         'aaSorting' );
		_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
		_fnCompatMap( init, 'paging',        'bPaginate' );
		_fnCompatMap( init, 'pagingType',    'sPaginationType' );
		_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
		_fnCompatMap( init, 'searching',     'bFilter' );
	
		// Boolean initialisation of x-scrolling
		if ( typeof init.sScrollX === 'boolean' ) {
			init.sScrollX = init.sScrollX ? '100%' : '';
		}
		if ( typeof init.scrollX === 'boolean' ) {
			init.scrollX = init.scrollX ? '100%' : '';
		}
	
		// Column search objects are in an array, so it needs to be converted
		// element by element
		var searchCols = init.aoSearchCols;
	
		if ( searchCols ) {
			for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
				if ( searchCols[i] ) {
					_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
				}
			}
		}
	}
	
	
	/**
	 * Provide backwards compatibility for column options. Note that the new options
	 * are mapped onto the old parameters, so this is an external interface change
	 * only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatCols ( init )
	{
		_fnCompatMap( init, 'orderable',     'bSortable' );
		_fnCompatMap( init, 'orderData',     'aDataSort' );
		_fnCompatMap( init, 'orderSequence', 'asSorting' );
		_fnCompatMap( init, 'orderDataType', 'sortDataType' );
	
		// orderData can be given as an integer
		var dataSort = init.aDataSort;
		if ( dataSort && ! $.isArray( dataSort ) ) {
			init.aDataSort = [ dataSort ];
		}
	}
	
	
	/**
	 * Browser feature detection for capabilities, quirks
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBrowserDetect( settings )
	{
		// We don't need to do this every time DataTables is constructed, the values
		// calculated are specific to the browser and OS configuration which we
		// don't expect to change between initialisations
		if ( ! DataTable.__browser ) {
			var browser = {};
			DataTable.__browser = browser;
	
			// Scrolling feature / quirks detection
			var n = $('<div/>')
				.css( {
					position: 'fixed',
					top: 0,
					left: $(window).scrollLeft()*-1, // allow for scrolling
					height: 1,
					width: 1,
					overflow: 'hidden'
				} )
				.append(
					$('<div/>')
						.css( {
							position: 'absolute',
							top: 1,
							left: 1,
							width: 100,
							overflow: 'scroll'
						} )
						.append(
							$('<div/>')
								.css( {
									width: '100%',
									height: 10
								} )
						)
				)
				.appendTo( 'body' );
	
			var outer = n.children();
			var inner = outer.children();
	
			// Numbers below, in order, are:
			// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
			//
			// IE6 XP:                           100 100 100  83
			// IE7 Vista:                        100 100 100  83
			// IE 8+ Windows:                     83  83 100  83
			// Evergreen Windows:                 83  83 100  83
			// Evergreen Mac with scrollbars:     85  85 100  85
			// Evergreen Mac without scrollbars: 100 100 100 100
	
			// Get scrollbar width
			browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
	
			// IE6/7 will oversize a width 100% element inside a scrolling element, to
			// include the width of the scrollbar, while other browsers ensure the inner
			// element is contained without forcing scrolling
			browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
	
			// In rtl text layout, some browsers (most, but not all) will place the
			// scrollbar on the left, rather than the right.
			browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
	
			// IE8- don't provide height and width for getBoundingClientRect
			browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
	
			n.remove();
		}
	
		$.extend( settings.oBrowser, DataTable.__browser );
		settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
	}
	
	
	/**
	 * Array.prototype reduce[Right] method, used for browsers which don't support
	 * JS 1.6. Done this way to reduce code size, since we iterate either way
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnReduce ( that, fn, init, start, end, inc )
	{
		var
			i = start,
			value,
			isSet = false;
	
		if ( init !== undefined ) {
			value = init;
			isSet = true;
		}
	
		while ( i !== end ) {
			if ( ! that.hasOwnProperty(i) ) {
				continue;
			}
	
			value = isSet ?
				fn( value, that[i], i, that ) :
				that[i];
	
			isSet = true;
			i += inc;
		}
	
		return value;
	}
	
	/**
	 * Add a column to the list used for the table with default values
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nTh The th element for this column
	 *  @memberof DataTable#oApi
	 */
	function _fnAddColumn( oSettings, nTh )
	{
		// Add column to aoColumns array
		var oDefaults = DataTable.defaults.column;
		var iCol = oSettings.aoColumns.length;
		var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
			"nTh": nTh ? nTh : document.createElement('th'),
			"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
			"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
			"mData": oDefaults.mData ? oDefaults.mData : iCol,
			idx: iCol
		} );
		oSettings.aoColumns.push( oCol );
	
		// Add search object for column specific search. Note that the `searchCols[ iCol ]`
		// passed into extend can be undefined. This allows the user to give a default
		// with only some of the parameters defined, and also not give a default
		var searchCols = oSettings.aoPreSearchCols;
		searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
	
		// Use the default column options function to initialise classes etc
		_fnColumnOptions( oSettings, iCol, $(nTh).data() );
	}
	
	
	/**
	 * Apply options for a column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iCol column index to consider
	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnOptions( oSettings, iCol, oOptions )
	{
		var oCol = oSettings.aoColumns[ iCol ];
		var oClasses = oSettings.oClasses;
		var th = $(oCol.nTh);
	
		// Try to get width information from the DOM. We can't get it from CSS
		// as we'd need to parse the CSS stylesheet. `width` option can override
		if ( ! oCol.sWidthOrig ) {
			// Width attribute
			oCol.sWidthOrig = th.attr('width') || null;
	
			// Style attribute
			var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
			if ( t ) {
				oCol.sWidthOrig = t[1];
			}
		}
	
		/* User specified column options */
		if ( oOptions !== undefined && oOptions !== null )
		{
			// Backwards compatibility
			_fnCompatCols( oOptions );
	
			// Map camel case parameters to their Hungarian counterparts
			_fnCamelToHungarian( DataTable.defaults.column, oOptions );
	
			/* Backwards compatibility for mDataProp */
			if ( oOptions.mDataProp !== undefined && !oOptions.mData )
			{
				oOptions.mData = oOptions.mDataProp;
			}
	
			if ( oOptions.sType )
			{
				oCol._sManualType = oOptions.sType;
			}
	
			// `class` is a reserved word in Javascript, so we need to provide
			// the ability to use a valid name for the camel case input
			if ( oOptions.className && ! oOptions.sClass )
			{
				oOptions.sClass = oOptions.className;
			}
	
			$.extend( oCol, oOptions );
			_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
	
			/* iDataSort to be applied (backwards compatibility), but aDataSort will take
			 * priority if defined
			 */
			if ( oOptions.iDataSort !== undefined )
			{
				oCol.aDataSort = [ oOptions.iDataSort ];
			}
			_fnMap( oCol, oOptions, "aDataSort" );
		}
	
		/* Cache the data get and set functions for speed */
		var mDataSrc = oCol.mData;
		var mData = _fnGetObjectDataFn( mDataSrc );
		var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
	
		var attrTest = function( src ) {
			return typeof src === 'string' && src.indexOf('@') !== -1;
		};
		oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
			attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
		);
		oCol._setter = null;
	
		oCol.fnGetData = function (rowData, type, meta) {
			var innerData = mData( rowData, type, undefined, meta );
	
			return mRender && type ?
				mRender( innerData, type, rowData, meta ) :
				innerData;
		};
		oCol.fnSetData = function ( rowData, val, meta ) {
			return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
		};
	
		// Indicate if DataTables should read DOM data as an object or array
		// Used in _fnGetRowElements
		if ( typeof mDataSrc !== 'number' ) {
			oSettings._rowReadObject = true;
		}
	
		/* Feature sorting overrides column specific when off */
		if ( !oSettings.oFeatures.bSort )
		{
			oCol.bSortable = false;
			th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
		}
	
		/* Check that the class assignment is correct for sorting */
		var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
		var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
		if ( !oCol.bSortable || (!bAsc && !bDesc) )
		{
			oCol.sSortingClass = oClasses.sSortableNone;
			oCol.sSortingClassJUI = "";
		}
		else if ( bAsc && !bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableAsc;
			oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
		}
		else if ( !bAsc && bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableDesc;
			oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
		}
		else
		{
			oCol.sSortingClass = oClasses.sSortable;
			oCol.sSortingClassJUI = oClasses.sSortJUI;
		}
	}
	
	
	/**
	 * Adjust the table column widths for new data. Note: you would probably want to
	 * do a redraw after calling this function!
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAdjustColumnSizing ( settings )
	{
		/* Not interested in doing column width calculation if auto-width is disabled */
		if ( settings.oFeatures.bAutoWidth !== false )
		{
			var columns = settings.aoColumns;
	
			_fnCalculateColumnWidths( settings );
			for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
			{
				columns[i].nTh.style.width = columns[i].sWidth;
			}
		}
	
		var scroll = settings.oScroll;
		if ( scroll.sY !== '' || scroll.sX !== '')
		{
			_fnScrollDraw( settings );
		}
	
		_fnCallbackFire( settings, null, 'column-sizing', [settings] );
	}
	
	
	/**
	 * Covert the index of a visible column to the index in the data array (take account
	 * of hidden columns)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iMatch Visible column index to lookup
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnVisibleToColumnIndex( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
	
		return typeof aiVis[iMatch] === 'number' ?
			aiVis[iMatch] :
			null;
	}
	
	
	/**
	 * Covert the index of an index in the data array and convert it to the visible
	 *   column index (take account of hidden columns)
	 *  @param {int} iMatch Column index to lookup
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnIndexToVisible( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
		var iPos = $.inArray( iMatch, aiVis );
	
		return iPos !== -1 ? iPos : null;
	}
	
	
	/**
	 * Get the number of visible columns
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the number of visible columns
	 *  @memberof DataTable#oApi
	 */
	function _fnVisbleColumns( oSettings )
	{
		var vis = 0;
	
		// No reduce in IE8, use a loop for now
		$.each( oSettings.aoColumns, function ( i, col ) {
			if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
				vis++;
			}
		} );
	
		return vis;
	}
	
	
	/**
	 * Get an array of column indexes that match a given property
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sParam Parameter in aoColumns to look for - typically
	 *    bVisible or bSearchable
	 *  @returns {array} Array of indexes with matched properties
	 *  @memberof DataTable#oApi
	 */
	function _fnGetColumns( oSettings, sParam )
	{
		var a = [];
	
		$.map( oSettings.aoColumns, function(val, i) {
			if ( val[sParam] ) {
				a.push( i );
			}
		} );
	
		return a;
	}
	
	
	/**
	 * Calculate the 'type' of a column
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnTypes ( settings )
	{
		var columns = settings.aoColumns;
		var data = settings.aoData;
		var types = DataTable.ext.type.detect;
		var i, ien, j, jen, k, ken;
		var col, cell, detectedType, cache;
	
		// For each column, spin over the 
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			col = columns[i];
			cache = [];
	
			if ( ! col.sType && col._sManualType ) {
				col.sType = col._sManualType;
			}
			else if ( ! col.sType ) {
				for ( j=0, jen=types.length ; j<jen ; j++ ) {
					for ( k=0, ken=data.length ; k<ken ; k++ ) {
						// Use a cache array so we only need to get the type data
						// from the formatter once (when using multiple detectors)
						if ( cache[k] === undefined ) {
							cache[k] = _fnGetCellData( settings, k, i, 'type' );
						}
	
						detectedType = types[j]( cache[k], settings );
	
						// If null, then this type can't apply to this column, so
						// rather than testing all cells, break out. There is an
						// exception for the last type which is `html`. We need to
						// scan all rows since it is possible to mix string and HTML
						// types
						if ( ! detectedType && j !== types.length-1 ) {
							break;
						}
	
						// Only a single match is needed for html type since it is
						// bottom of the pile and very similar to string
						if ( detectedType === 'html' ) {
							break;
						}
					}
	
					// Type is valid for all data points in the column - use this
					// type
					if ( detectedType ) {
						col.sType = detectedType;
						break;
					}
				}
	
				// Fall back - if no type was detected, always use string
				if ( ! col.sType ) {
					col.sType = 'string';
				}
			}
		}
	}
	
	
	/**
	 * Take the column definitions and static columns arrays and calculate how
	 * they relate to column indexes. The callback function will then apply the
	 * definition found for a column to a suitable configuration object.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	 *  @param {array} aoCols The aoColumns array that defines columns individually
	 *  @param {function} fn Callback function - takes two parameters, the calculated
	 *    column index and the definition for that column.
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
	{
		var i, iLen, j, jLen, k, kLen, def;
		var columns = oSettings.aoColumns;
	
		// Column definitions with aTargets
		if ( aoColDefs )
		{
			/* Loop over the definitions array - loop in reverse so first instance has priority */
			for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
			{
				def = aoColDefs[i];
	
				/* Each definition can target multiple columns, as it is an array */
				var aTargets = def.targets !== undefined ?
					def.targets :
					def.aTargets;
	
				if ( ! $.isArray( aTargets ) )
				{
					aTargets = [ aTargets ];
				}
	
				for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
				{
					if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
					{
						/* Add columns that we don't yet know about */
						while( columns.length <= aTargets[j] )
						{
							_fnAddColumn( oSettings );
						}
	
						/* Integer, basic index */
						fn( aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
					{
						/* Negative integer, right to left column counting */
						fn( columns.length+aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'string' )
					{
						/* Class name matching on TH element */
						for ( k=0, kLen=columns.length ; k<kLen ; k++ )
						{
							if ( aTargets[j] == "_all" ||
							     $(columns[k].nTh).hasClass( aTargets[j] ) )
							{
								fn( k, def );
							}
						}
					}
				}
			}
		}
	
		// Statically defined columns array
		if ( aoCols )
		{
			for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
			{
				fn( i, aoCols[i] );
			}
		}
	}
	
	/**
	 * Add a data array to the table, creating DOM node etc. This is the parallel to
	 * _fnGatherData, but for adding rows from a Javascript source, rather than a
	 * DOM source.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aData data array to be added
	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	 *  @memberof DataTable#oApi
	 */
	function _fnAddData ( oSettings, aDataIn, nTr, anTds )
	{
		/* Create the object for storing information about this new row */
		var iRow = oSettings.aoData.length;
		var oData = $.extend( true, {}, DataTable.models.oRow, {
			src: nTr ? 'dom' : 'data',
			idx: iRow
		} );
	
		oData._aData = aDataIn;
		oSettings.aoData.push( oData );
	
		/* Create the cells */
		var nTd, sThisType;
		var columns = oSettings.aoColumns;
	
		// Invalidate the column types as the new data needs to be revalidated
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			columns[i].sType = null;
		}
	
		/* Add to the display array */
		oSettings.aiDisplayMaster.push( iRow );
	
		var id = oSettings.rowIdFn( aDataIn );
		if ( id !== undefined ) {
			oSettings.aIds[ id ] = oData;
		}
	
		/* Create the DOM information, or register it if already present */
		if ( nTr || ! oSettings.oFeatures.bDeferRender )
		{
			_fnCreateTr( oSettings, iRow, nTr, anTds );
		}
	
		return iRow;
	}
	
	
	/**
	 * Add one or more TR elements to the table. Generally we'd expect to
	 * use this for reading data from a DOM sourced table, but it could be
	 * used for an TR element. Note that if a TR is given, it is used (i.e.
	 * it is not cloned).
	 *  @param {object} settings dataTables settings object
	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	 *  @returns {array} Array of indexes for the added rows
	 *  @memberof DataTable#oApi
	 */
	function _fnAddTr( settings, trs )
	{
		var row;
	
		// Allow an individual node to be passed in
		if ( ! (trs instanceof $) ) {
			trs = $(trs);
		}
	
		return trs.map( function (i, el) {
			row = _fnGetRowElements( settings, el );
			return _fnAddData( settings, row.data, el, row.cells );
		} );
	}
	
	
	/**
	 * Take a TR element and convert it to an index in aoData
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} n the TR element to find
	 *  @returns {int} index if the node is found, null if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToDataIndex( oSettings, n )
	{
		return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
	}
	
	
	/**
	 * Take a TD element and convert it into a column data index (not the visible index)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow The row number the TD/TH can be found in
	 *  @param {node} n The TD/TH element to find
	 *  @returns {int} index if the node is found, -1 if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToColumnIndex( oSettings, iRow, n )
	{
		return $.inArray( n, oSettings.aoData[ iRow ].anCells );
	}
	
	
	/**
	 * Get the data for a given cell from the internal cache, taking into account data mapping
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	 *  @returns {*} Cell data
	 *  @memberof DataTable#oApi
	 */
	function _fnGetCellData( settings, rowIdx, colIdx, type )
	{
		var draw           = settings.iDraw;
		var col            = settings.aoColumns[colIdx];
		var rowData        = settings.aoData[rowIdx]._aData;
		var defaultContent = col.sDefaultContent;
		var cellData       = col.fnGetData( rowData, type, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		} );
	
		if ( cellData === undefined ) {
			if ( settings.iDrawError != draw && defaultContent === null ) {
				_fnLog( settings, 0, "Requested unknown parameter "+
					(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
					" for row "+rowIdx+", column "+colIdx, 4 );
				settings.iDrawError = draw;
			}
			return defaultContent;
		}
	
		// When the data source is null and a specific data type is requested (i.e.
		// not the original data), we can use default column data
		if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
			cellData = defaultContent;
		}
		else if ( typeof cellData === 'function' ) {
			// If the data source is a function, then we run it and use the return,
			// executing in the scope of the data object (for instances)
			return cellData.call( rowData );
		}
	
		if ( cellData === null && type == 'display' ) {
			return '';
		}
		return cellData;
	}
	
	
	/**
	 * Set the value for a specific cell, into the internal data cache
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {*} val Value to set
	 *  @memberof DataTable#oApi
	 */
	function _fnSetCellData( settings, rowIdx, colIdx, val )
	{
		var col     = settings.aoColumns[colIdx];
		var rowData = settings.aoData[rowIdx]._aData;
	
		col.fnSetData( rowData, val, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		}  );
	}
	
	
	// Private variable that is used to match action syntax in the data property object
	var __reArray = /\[.*?\]$/;
	var __reFn = /\(\)$/;
	
	/**
	 * Split string on periods, taking into account escaped periods
	 * @param  {string} str String to split
	 * @return {array} Split string
	 */
	function _fnSplitObjNotation( str )
	{
		return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
			return s.replace(/\\\./g, '.');
		} );
	}
	
	
	/**
	 * Return a function that can be used to get data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data get function
	 *  @memberof DataTable#oApi
	 */
	function _fnGetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Build an object of get functions, and wrap them in a single call */
			var o = {};
			$.each( mSource, function (key, val) {
				if ( val ) {
					o[key] = _fnGetObjectDataFn( val );
				}
			} );
	
			return function (data, type, row, meta) {
				var t = o[type] || o._;
				return t !== undefined ?
					t(data, type, row, meta) :
					data;
			};
		}
		else if ( mSource === null )
		{
			/* Give an empty string for rendering / sorting etc */
			return function (data) { // type, row and meta also passed, but not used
				return data;
			};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, type, row, meta) {
				return mSource( data, type, row, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the next
			 * level down. On each loop we test for undefined, and if found immediately
			 * return. This allows entire objects to be missing and sDefaultContent to
			 * be used if defined, rather than throwing an error
			 */
			var fetchData = function (data, type, src) {
				var arrayNotation, funcNotation, out, innerSrc;
	
				if ( src !== "" )
				{
					var a = _fnSplitObjNotation( src );
	
					for ( var i=0, iLen=a.length ; i<iLen ; i++ )
					{
						// Check if we are dealing with special notation
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);
	
						if ( arrayNotation )
						{
							// Array notation
							a[i] = a[i].replace(__reArray, '');
	
							// Condition allows simply [] to be passed in
							if ( a[i] !== "" ) {
								data = data[ a[i] ];
							}
							out = [];
	
							// Get the remainder of the nested object to get
							a.splice( 0, i+1 );
							innerSrc = a.join('.');
	
							// Traverse each entry in the array getting the properties requested
							if ( $.isArray( data ) ) {
								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
									out.push( fetchData( data[j], type, innerSrc ) );
								}
							}
	
							// If a string is given in between the array notation indicators, that
							// is used to join the strings together, otherwise an array is returned
							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
							data = (join==="") ? out : out.join(join);
	
							// The inner call to fetchData has already traversed through the remainder
							// of the source requested, so we exit from the loop
							break;
						}
						else if ( funcNotation )
						{
							// Function call
							a[i] = a[i].replace(__reFn, '');
							data = data[ a[i] ]();
							continue;
						}
	
						if ( data === null || data[ a[i] ] === undefined )
						{
							return undefined;
						}
						data = data[ a[i] ];
					}
				}
	
				return data;
			};
	
			return function (data, type) { // row and meta also passed, but not used
				return fetchData( data, type, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, type) { // row and meta also passed, but not used
				return data[mSource];
			};
		}
	}
	
	
	/**
	 * Return a function that can be used to set data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data set function
	 *  @memberof DataTable#oApi
	 */
	function _fnSetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Unlike get, only the underscore (global) option is used for for
			 * setting data since we don't know the type here. This is why an object
			 * option is not documented for `mData` (which is read/write), but it is
			 * for `mRender` which is read only.
			 */
			return _fnSetObjectDataFn( mSource._ );
		}
		else if ( mSource === null )
		{
			/* Nothing to do when the data source is null */
			return function () {};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, val, meta) {
				mSource( data, 'set', val, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* Like the get, we need to get data from a nested object */
			var setData = function (data, val, src) {
				var a = _fnSplitObjNotation( src ), b;
				var aLast = a[a.length-1];
				var arrayNotation, funcNotation, o, innerSrc;
	
				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
				{
					// Check if we are dealing with an array notation request
					arrayNotation = a[i].match(__reArray);
					funcNotation = a[i].match(__reFn);
	
					if ( arrayNotation )
					{
						a[i] = a[i].replace(__reArray, '');
						data[ a[i] ] = [];
	
						// Get the remainder of the nested object to set so we can recurse
						b = a.slice();
						b.splice( 0, i+1 );
						innerSrc = b.join('.');
	
						// Traverse each entry in the array setting the properties requested
						if ( $.isArray( val ) )
						{
							for ( var j=0, jLen=val.length ; j<jLen ; j++ )
							{
								o = {};
								setData( o, val[j], innerSrc );
								data[ a[i] ].push( o );
							}
						}
						else
						{
							// We've been asked to save data to an array, but it
							// isn't array data to be saved. Best that can be done
							// is to just save the value.
							data[ a[i] ] = val;
						}
	
						// The inner call to setData has already traversed through the remainder
						// of the source and has set the data, thus we can exit here
						return;
					}
					else if ( funcNotation )
					{
						// Function call
						a[i] = a[i].replace(__reFn, '');
						data = data[ a[i] ]( val );
					}
	
					// If the nested object doesn't currently exist - since we are
					// trying to set the value - create it
					if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
					{
						data[ a[i] ] = {};
					}
					data = data[ a[i] ];
				}
	
				// Last item in the input - i.e, the actual set
				if ( aLast.match(__reFn ) )
				{
					// Function call
					data = data[ aLast.replace(__reFn, '') ]( val );
				}
				else
				{
					// If array notation is used, we just want to strip it and use the property name
					// and assign the value. If it isn't used, then we get the result we want anyway
					data[ aLast.replace(__reArray, '') ] = val;
				}
			};
	
			return function (data, val) { // meta is also passed in, but not used
				return setData( data, val, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, val) { // meta is also passed in, but not used
				data[mSource] = val;
			};
		}
	}
	
	
	/**
	 * Return an array with the full table data
	 *  @param {object} oSettings dataTables settings object
	 *  @returns array {array} aData Master data array
	 *  @memberof DataTable#oApi
	 */
	function _fnGetDataMaster ( settings )
	{
		return _pluck( settings.aoData, '_aData' );
	}
	
	
	/**
	 * Nuke the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnClearTable( settings )
	{
		settings.aoData.length = 0;
		settings.aiDisplayMaster.length = 0;
		settings.aiDisplay.length = 0;
		settings.aIds = {};
	}
	
	
	 /**
	 * Take an array of integers (index array) and remove a target integer (value - not
	 * the key!)
	 *  @param {array} a Index array to target
	 *  @param {int} iTarget value to find
	 *  @memberof DataTable#oApi
	 */
	function _fnDeleteIndex( a, iTarget, splice )
	{
		var iTargetIndex = -1;
	
		for ( var i=0, iLen=a.length ; i<iLen ; i++ )
		{
			if ( a[i] == iTarget )
			{
				iTargetIndex = i;
			}
			else if ( a[i] > iTarget )
			{
				a[i]--;
			}
		}
	
		if ( iTargetIndex != -1 && splice === undefined )
		{
			a.splice( iTargetIndex, 1 );
		}
	}
	
	
	/**
	 * Mark cached data as invalid such that a re-read of the data will occur when
	 * the cached data is next requested. Also update from the data source object.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {int}    rowIdx   Row index to invalidate
	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	 *     or 'data'
	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	 *     row will be invalidated
	 * @memberof DataTable#oApi
	 *
	 * @todo For the modularisation of v1.11 this will need to become a callback, so
	 *   the sort and filter methods can subscribe to it. That will required
	 *   initialisation options for sorting, which is why it is not already baked in
	 */
	function _fnInvalidate( settings, rowIdx, src, colIdx )
	{
		var row = settings.aoData[ rowIdx ];
		var i, ien;
		var cellWrite = function ( cell, col ) {
			// This is very frustrating, but in IE if you just write directly
			// to innerHTML, and elements that are overwritten are GC'ed,
			// even if there is a reference to them elsewhere
			while ( cell.childNodes.length ) {
				cell.removeChild( cell.firstChild );
			}
	
			cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
		};
	
		// Are we reading last data from DOM or the data object?
		if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
			// Read the data from the DOM
			row._aData = _fnGetRowElements(
					settings, row, colIdx, colIdx === undefined ? undefined : row._aData
				)
				.data;
		}
		else {
			// Reading from data object, update the DOM
			var cells = row.anCells;
	
			if ( cells ) {
				if ( colIdx !== undefined ) {
					cellWrite( cells[colIdx], colIdx );
				}
				else {
					for ( i=0, ien=cells.length ; i<ien ; i++ ) {
						cellWrite( cells[i], i );
					}
				}
			}
		}
	
		// For both row and cell invalidation, the cached data for sorting and
		// filtering is nulled out
		row._aSortData = null;
		row._aFilterData = null;
	
		// Invalidate the type for a specific column (if given) or all columns since
		// the data might have changed
		var cols = settings.aoColumns;
		if ( colIdx !== undefined ) {
			cols[ colIdx ].sType = null;
		}
		else {
			for ( i=0, ien=cols.length ; i<ien ; i++ ) {
				cols[i].sType = null;
			}
	
			// Update DataTables special `DT_*` attributes for the row
			_fnRowAttributes( settings, row );
		}
	}
	
	
	/**
	 * Build a data source object from an HTML row, reading the contents of the
	 * cells that are in the row.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {node|object} TR element from which to read data or existing row
	 *   object from which to re-read the data from the cells
	 * @param {int} [colIdx] Optional column index
	 * @param {array|object} [d] Data source object. If `colIdx` is given then this
	 *   parameter should also be given and will be used to write the data into.
	 *   Only the column in question will be written
	 * @returns {object} Object with two parameters: `data` the data read, in
	 *   document order, and `cells` and array of nodes (they can be useful to the
	 *   caller, so rather than needing a second traversal to get them, just return
	 *   them from here).
	 * @memberof DataTable#oApi
	 */
	function _fnGetRowElements( settings, row, colIdx, d )
	{
		var
			tds = [],
			td = row.firstChild,
			name, col, o, i=0, contents,
			columns = settings.aoColumns,
			objectRead = settings._rowReadObject;
	
		// Allow the data object to be passed in, or construct
		d = d !== undefined ?
			d :
			objectRead ?
				{} :
				[];
	
		var attr = function ( str, td  ) {
			if ( typeof str === 'string' ) {
				var idx = str.indexOf('@');
	
				if ( idx !== -1 ) {
					var attr = str.substring( idx+1 );
					var setter = _fnSetObjectDataFn( str );
					setter( d, td.getAttribute( attr ) );
				}
			}
		};
	
		// Read data from a cell and store into the data object
		var cellProcess = function ( cell ) {
			if ( colIdx === undefined || colIdx === i ) {
				col = columns[i];
				contents = $.trim(cell.innerHTML);
	
				if ( col && col._bAttrSrc ) {
					var setter = _fnSetObjectDataFn( col.mData._ );
					setter( d, contents );
	
					attr( col.mData.sort, cell );
					attr( col.mData.type, cell );
					attr( col.mData.filter, cell );
				}
				else {
					// Depending on the `data` option for the columns the data can
					// be read to either an object or an array.
					if ( objectRead ) {
						if ( ! col._setter ) {
							// Cache the setter function
							col._setter = _fnSetObjectDataFn( col.mData );
						}
						col._setter( d, contents );
					}
					else {
						d[i] = contents;
					}
				}
			}
	
			i++;
		};
	
		if ( td ) {
			// `tr` element was passed in
			while ( td ) {
				name = td.nodeName.toUpperCase();
	
				if ( name == "TD" || name == "TH" ) {
					cellProcess( td );
					tds.push( td );
				}
	
				td = td.nextSibling;
			}
		}
		else {
			// Existing row object passed in
			tds = row.anCells;
	
			for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
				cellProcess( tds[j] );
			}
		}
	
		// Read the ID from the DOM if present
		var rowNode = row.firstChild ? row : row.nTr;
	
		if ( rowNode ) {
			var id = rowNode.getAttribute( 'id' );
	
			if ( id ) {
				_fnSetObjectDataFn( settings.rowId )( d, id );
			}
		}
	
		return {
			data: d,
			cells: tds
		};
	}
	/**
	 * Create a new TR element (and it's TD children) for a row
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow Row to consider
	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @memberof DataTable#oApi
	 */
	function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
	{
		var
			row = oSettings.aoData[iRow],
			rowData = row._aData,
			cells = [],
			nTr, nTd, oCol,
			i, iLen;
	
		if ( row.nTr === null )
		{
			nTr = nTrIn || document.createElement('tr');
	
			row.nTr = nTr;
			row.anCells = cells;
	
			/* Use a private property on the node to allow reserve mapping from the node
			 * to the aoData array for fast look up
			 */
			nTr._DT_RowIndex = iRow;
	
			/* Special parameters can be given by the data source to be used on the row */
			_fnRowAttributes( oSettings, row );
	
			/* Process each column */
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
			{
				oCol = oSettings.aoColumns[i];
	
				nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );
				nTd._DT_CellIndex = {
					row: iRow,
					column: i
				};
				
				cells.push( nTd );
	
				// Need to create the HTML if new, or if a rendering function is defined
				if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&
					 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
				) {
					nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
				}
	
				/* Add user defined class */
				if ( oCol.sClass )
				{
					nTd.className += ' '+oCol.sClass;
				}
	
				// Visibility - add or remove as required
				if ( oCol.bVisible && ! nTrIn )
				{
					nTr.appendChild( nTd );
				}
				else if ( ! oCol.bVisible && nTrIn )
				{
					nTd.parentNode.removeChild( nTd );
				}
	
				if ( oCol.fnCreatedCell )
				{
					oCol.fnCreatedCell.call( oSettings.oInstance,
						nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
					);
				}
			}
	
			_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );
		}
	
		// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
		// and deployed
		row.nTr.setAttribute( 'role', 'row' );
	}
	
	
	/**
	 * Add attributes to a row based on the special `DT_*` parameters in a data
	 * source object.
	 *  @param {object} settings DataTables settings object
	 *  @param {object} DataTables row object for the row to be modified
	 *  @memberof DataTable#oApi
	 */
	function _fnRowAttributes( settings, row )
	{
		var tr = row.nTr;
		var data = row._aData;
	
		if ( tr ) {
			var id = settings.rowIdFn( data );
	
			if ( id ) {
				tr.id = id;
			}
	
			if ( data.DT_RowClass ) {
				// Remove any classes added by DT_RowClass before
				var a = data.DT_RowClass.split(' ');
				row.__rowc = row.__rowc ?
					_unique( row.__rowc.concat( a ) ) :
					a;
	
				$(tr)
					.removeClass( row.__rowc.join(' ') )
					.addClass( data.DT_RowClass );
			}
	
			if ( data.DT_RowAttr ) {
				$(tr).attr( data.DT_RowAttr );
			}
	
			if ( data.DT_RowData ) {
				$(tr).data( data.DT_RowData );
			}
		}
	}
	
	
	/**
	 * Create the HTML header for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBuildHead( oSettings )
	{
		var i, ien, cell, row, column;
		var thead = oSettings.nTHead;
		var tfoot = oSettings.nTFoot;
		var createHeader = $('th, td', thead).length === 0;
		var classes = oSettings.oClasses;
		var columns = oSettings.aoColumns;
	
		if ( createHeader ) {
			row = $('<tr/>').appendTo( thead );
		}
	
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			column = columns[i];
			cell = $( column.nTh ).addClass( column.sClass );
	
			if ( createHeader ) {
				cell.appendTo( row );
			}
	
			// 1.11 move into sorting
			if ( oSettings.oFeatures.bSort ) {
				cell.addClass( column.sSortingClass );
	
				if ( column.bSortable !== false ) {
					cell
						.attr( 'tabindex', oSettings.iTabIndex )
						.attr( 'aria-controls', oSettings.sTableId );
	
					_fnSortAttachListener( oSettings, column.nTh, i );
				}
			}
	
			if ( column.sTitle != cell[0].innerHTML ) {
				cell.html( column.sTitle );
			}
	
			_fnRenderer( oSettings, 'header' )(
				oSettings, cell, column, classes
			);
		}
	
		if ( createHeader ) {
			_fnDetectHeader( oSettings.aoHeader, thead );
		}
		
		/* ARIA role for the rows */
	 	$(thead).find('>tr').attr('role', 'row');
	
		/* Deal with the footer - add classes if required */
		$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
		$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
	
		// Cache the footer cells. Note that we only take the cells from the first
		// row in the footer. If there is more than one row the user wants to
		// interact with, they need to use the table().foot() method. Note also this
		// allows cells to be used for multiple columns using colspan
		if ( tfoot !== null ) {
			var cells = oSettings.aoFooter[0];
	
			for ( i=0, ien=cells.length ; i<ien ; i++ ) {
				column = columns[i];
				column.nTf = cells[i].cell;
	
				if ( column.sClass ) {
					$(column.nTf).addClass( column.sClass );
				}
			}
		}
	}
	
	
	/**
	 * Draw the header (or footer) element based on the column visibility states. The
	 * methodology here is to use the layout array from _fnDetectHeader, modified for
	 * the instantaneous column visibility, to construct the new layout. The grid is
	 * traversed over cell at a time in a rows x columns grid fashion, although each
	 * cell insert can cover multiple elements in the grid - which is tracks using the
	 * aApplied array. Cell inserts in the grid will only occur where there isn't
	 * already a cell in that position.
	 *  @param {object} oSettings dataTables settings object
	 *  @param array {objects} aoSource Layout array from _fnDetectHeader
	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	 *  @memberof DataTable#oApi
	 */
	function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
	{
		var i, iLen, j, jLen, k, kLen, n, nLocalTr;
		var aoLocal = [];
		var aApplied = [];
		var iColumns = oSettings.aoColumns.length;
		var iRowspan, iColspan;
	
		if ( ! aoSource )
		{
			return;
		}
	
		if (  bIncludeHidden === undefined )
		{
			bIncludeHidden = false;
		}
	
		/* Make a copy of the master layout array, but without the visible columns in it */
		for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
		{
			aoLocal[i] = aoSource[i].slice();
			aoLocal[i].nTr = aoSource[i].nTr;
	
			/* Remove any columns which are currently hidden */
			for ( j=iColumns-1 ; j>=0 ; j-- )
			{
				if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
				{
					aoLocal[i].splice( j, 1 );
				}
			}
	
			/* Prep the applied array - it needs an element for each row */
			aApplied.push( [] );
		}
	
		for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
		{
			nLocalTr = aoLocal[i].nTr;
	
			/* All cells are going to be replaced, so empty out the row */
			if ( nLocalTr )
			{
				while( (n = nLocalTr.firstChild) )
				{
					nLocalTr.removeChild( n );
				}
			}
	
			for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
			{
				iRowspan = 1;
				iColspan = 1;
	
				/* Check to see if there is already a cell (row/colspan) covering our target
				 * insert point. If there is, then there is nothing to do.
				 */
				if ( aApplied[i][j] === undefined )
				{
					nLocalTr.appendChild( aoLocal[i][j].cell );
					aApplied[i][j] = 1;
	
					/* Expand the cell to cover as many rows as needed */
					while ( aoLocal[i+iRowspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
					{
						aApplied[i+iRowspan][j] = 1;
						iRowspan++;
					}
	
					/* Expand the cell to cover as many columns as needed */
					while ( aoLocal[i][j+iColspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
					{
						/* Must update the applied array over the rows for the columns */
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aApplied[i+k][j+iColspan] = 1;
						}
						iColspan++;
					}
	
					/* Do the actual expansion in the DOM */
					$(aoLocal[i][j].cell)
						.attr('rowspan', iRowspan)
						.attr('colspan', iColspan);
				}
			}
		}
	}
	
	
	/**
	 * Insert the required TR nodes into the table for display
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnDraw( oSettings )
	{
		/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
		var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
		if ( $.inArray( false, aPreDraw ) !== -1 )
		{
			_fnProcessingDisplay( oSettings, false );
			return;
		}
	
		var i, iLen, n;
		var anRows = [];
		var iRowCount = 0;
		var asStripeClasses = oSettings.asStripeClasses;
		var iStripes = asStripeClasses.length;
		var iOpenRows = oSettings.aoOpenRows.length;
		var oLang = oSettings.oLanguage;
		var iInitDisplayStart = oSettings.iInitDisplayStart;
		var bServerSide = _fnDataSource( oSettings ) == 'ssp';
		var aiDisplay = oSettings.aiDisplay;
	
		oSettings.bDrawing = true;
	
		/* Check and see if we have an initial draw position from state saving */
		if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
		{
			oSettings._iDisplayStart = bServerSide ?
				iInitDisplayStart :
				iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
					0 :
					iInitDisplayStart;
	
			oSettings.iInitDisplayStart = -1;
		}
	
		var iDisplayStart = oSettings._iDisplayStart;
		var iDisplayEnd = oSettings.fnDisplayEnd();
	
		/* Server-side processing draw intercept */
		if ( oSettings.bDeferLoading )
		{
			oSettings.bDeferLoading = false;
			oSettings.iDraw++;
			_fnProcessingDisplay( oSettings, false );
		}
		else if ( !bServerSide )
		{
			oSettings.iDraw++;
		}
		else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
		{
			return;
		}
	
		if ( aiDisplay.length !== 0 )
		{
			var iStart = bServerSide ? 0 : iDisplayStart;
			var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
	
			for ( var j=iStart ; j<iEnd ; j++ )
			{
				var iDataIndex = aiDisplay[j];
				var aoData = oSettings.aoData[ iDataIndex ];
				if ( aoData.nTr === null )
				{
					_fnCreateTr( oSettings, iDataIndex );
				}
	
				var nRow = aoData.nTr;
	
				/* Remove the old striping classes and then add the new one */
				if ( iStripes !== 0 )
				{
					var sStripe = asStripeClasses[ iRowCount % iStripes ];
					if ( aoData._sRowStripe != sStripe )
					{
						$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
						aoData._sRowStripe = sStripe;
					}
				}
	
				// Row callback functions - might want to manipulate the row
				// iRowCount and j are not currently documented. Are they at all
				// useful?
				_fnCallbackFire( oSettings, 'aoRowCallback', null,
					[nRow, aoData._aData, iRowCount, j] );
	
				anRows.push( nRow );
				iRowCount++;
			}
		}
		else
		{
			/* Table is empty - create a row with an empty message in it */
			var sZero = oLang.sZeroRecords;
			if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
			{
				sZero = oLang.sLoadingRecords;
			}
			else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
			{
				sZero = oLang.sEmptyTable;
			}
	
			anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
				.append( $('<td />', {
					'valign':  'top',
					'colSpan': _fnVisbleColumns( oSettings ),
					'class':   oSettings.oClasses.sRowEmpty
				} ).html( sZero ) )[0];
		}
	
		/* Header and footer callbacks */
		_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		var body = $(oSettings.nTBody);
	
		body.children().detach();
		body.append( $(anRows) );
	
		/* Call all required callback functions for the end of a draw */
		_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
	
		/* Draw is complete, sorting and filtering must be as well */
		oSettings.bSorted = false;
		oSettings.bFiltered = false;
		oSettings.bDrawing = false;
	}
	
	
	/**
	 * Redraw the table - taking account of the various features which are enabled
	 *  @param {object} oSettings dataTables settings object
	 *  @param {boolean} [holdPosition] Keep the current paging position. By default
	 *    the paging is reset to the first page
	 *  @memberof DataTable#oApi
	 */
	function _fnReDraw( settings, holdPosition )
	{
		var
			features = settings.oFeatures,
			sort     = features.bSort,
			filter   = features.bFilter;
	
		if ( sort ) {
			_fnSort( settings );
		}
	
		if ( filter ) {
			_fnFilterComplete( settings, settings.oPreviousSearch );
		}
		else {
			// No filtering, so we want to just use the display master
			settings.aiDisplay = settings.aiDisplayMaster.slice();
		}
	
		if ( holdPosition !== true ) {
			settings._iDisplayStart = 0;
		}
	
		// Let any modules know about the draw hold position state (used by
		// scrolling internally)
		settings._drawHold = holdPosition;
	
		_fnDraw( settings );
	
		settings._drawHold = false;
	}
	
	
	/**
	 * Add the options to the page HTML for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAddOptionsHtml ( oSettings )
	{
		var classes = oSettings.oClasses;
		var table = $(oSettings.nTable);
		var holding = $('<div/>').insertBefore( table ); // Holding element for speed
		var features = oSettings.oFeatures;
	
		// All DataTables are wrapped in a div
		var insert = $('<div/>', {
			id:      oSettings.sTableId+'_wrapper',
			'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
		} );
	
		oSettings.nHolding = holding[0];
		oSettings.nTableWrapper = insert[0];
		oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
	
		/* Loop over the user set positioning and place the elements as needed */
		var aDom = oSettings.sDom.split('');
		var featureNode, cOption, nNewNode, cNext, sAttr, j;
		for ( var i=0 ; i<aDom.length ; i++ )
		{
			featureNode = null;
			cOption = aDom[i];
	
			if ( cOption == '<' )
			{
				/* New container div */
				nNewNode = $('<div/>')[0];
	
				/* Check to see if we should append an id and/or a class name to the container */
				cNext = aDom[i+1];
				if ( cNext == "'" || cNext == '"' )
				{
					sAttr = "";
					j = 2;
					while ( aDom[i+j] != cNext )
					{
						sAttr += aDom[i+j];
						j++;
					}
	
					/* Replace jQuery UI constants @todo depreciated */
					if ( sAttr == "H" )
					{
						sAttr = classes.sJUIHeader;
					}
					else if ( sAttr == "F" )
					{
						sAttr = classes.sJUIFooter;
					}
	
					/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
					 * breaks the string into parts and applies them as needed
					 */
					if ( sAttr.indexOf('.') != -1 )
					{
						var aSplit = sAttr.split('.');
						nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
						nNewNode.className = aSplit[1];
					}
					else if ( sAttr.charAt(0) == "#" )
					{
						nNewNode.id = sAttr.substr(1, sAttr.length-1);
					}
					else
					{
						nNewNode.className = sAttr;
					}
	
					i += j; /* Move along the position array */
				}
	
				insert.append( nNewNode );
				insert = $(nNewNode);
			}
			else if ( cOption == '>' )
			{
				/* End container div */
				insert = insert.parent();
			}
			// @todo Move options into their own plugins?
			else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
			{
				/* Length */
				featureNode = _fnFeatureHtmlLength( oSettings );
			}
			else if ( cOption == 'f' && features.bFilter )
			{
				/* Filter */
				featureNode = _fnFeatureHtmlFilter( oSettings );
			}
			else if ( cOption == 'r' && features.bProcessing )
			{
				/* pRocessing */
				featureNode = _fnFeatureHtmlProcessing( oSettings );
			}
			else if ( cOption == 't' )
			{
				/* Table */
				featureNode = _fnFeatureHtmlTable( oSettings );
			}
			else if ( cOption ==  'i' && features.bInfo )
			{
				/* Info */
				featureNode = _fnFeatureHtmlInfo( oSettings );
			}
			else if ( cOption == 'p' && features.bPaginate )
			{
				/* Pagination */
				featureNode = _fnFeatureHtmlPaginate( oSettings );
			}
			else if ( DataTable.ext.feature.length !== 0 )
			{
				/* Plug-in features */
				var aoFeatures = DataTable.ext.feature;
				for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
				{
					if ( cOption == aoFeatures[k].cFeature )
					{
						featureNode = aoFeatures[k].fnInit( oSettings );
						break;
					}
				}
			}
	
			/* Add to the 2D features array */
			if ( featureNode )
			{
				var aanFeatures = oSettings.aanFeatures;
	
				if ( ! aanFeatures[cOption] )
				{
					aanFeatures[cOption] = [];
				}
	
				aanFeatures[cOption].push( featureNode );
				insert.append( featureNode );
			}
		}
	
		/* Built our DOM structure - replace the holding div with what we want */
		holding.replaceWith( insert );
		oSettings.nHolding = null;
	}
	
	
	/**
	 * Use the DOM source to create up an array of header cells. The idea here is to
	 * create a layout grid (array) of rows x columns, which contains a reference
	 * to the cell that that point in the grid (regardless of col/rowspan), such that
	 * any column / row could be removed and the new grid constructed
	 *  @param array {object} aLayout Array to store the calculated layout in
	 *  @param {node} nThead The header/footer element for the table
	 *  @memberof DataTable#oApi
	 */
	function _fnDetectHeader ( aLayout, nThead )
	{
		var nTrs = $(nThead).children('tr');
		var nTr, nCell;
		var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
		var bUnique;
		var fnShiftCol = function ( a, i, j ) {
			var k = a[i];
	                while ( k[j] ) {
				j++;
			}
			return j;
		};
	
		aLayout.splice( 0, aLayout.length );
	
		/* We know how many rows there are in the layout - so prep it */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			aLayout.push( [] );
		}
	
		/* Calculate a layout array */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			nTr = nTrs[i];
			iColumn = 0;
	
			/* For every cell in the row... */
			nCell = nTr.firstChild;
			while ( nCell ) {
				if ( nCell.nodeName.toUpperCase() == "TD" ||
				     nCell.nodeName.toUpperCase() == "TH" )
				{
					/* Get the col and rowspan attributes from the DOM and sanitise them */
					iColspan = nCell.getAttribute('colspan') * 1;
					iRowspan = nCell.getAttribute('rowspan') * 1;
					iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
					iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
	
					/* There might be colspan cells already in this row, so shift our target
					 * accordingly
					 */
					iColShifted = fnShiftCol( aLayout, i, iColumn );
	
					/* Cache calculation for unique columns */
					bUnique = iColspan === 1 ? true : false;
	
					/* If there is col / rowspan, copy the information into the layout grid */
					for ( l=0 ; l<iColspan ; l++ )
					{
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aLayout[i+k][iColShifted+l] = {
								"cell": nCell,
								"unique": bUnique
							};
							aLayout[i+k].nTr = nTr;
						}
					}
				}
				nCell = nCell.nextSibling;
			}
		}
	}
	
	
	/**
	 * Get an array of unique th elements, one for each column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nHeader automatically detect the layout from this node - optional
	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	 *  @returns array {node} aReturn list of unique th's
	 *  @memberof DataTable#oApi
	 */
	function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
	{
		var aReturn = [];
		if ( !aLayout )
		{
			aLayout = oSettings.aoHeader;
			if ( nHeader )
			{
				aLayout = [];
				_fnDetectHeader( aLayout, nHeader );
			}
		}
	
		for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
		{
			for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
			{
				if ( aLayout[i][j].unique &&
					 (!aReturn[j] || !oSettings.bSortCellsTop) )
				{
					aReturn[j] = aLayout[i][j].cell;
				}
			}
		}
	
		return aReturn;
	}
	
	/**
	 * Create an Ajax call based on the table's settings, taking into account that
	 * parameters can have multiple forms, and backwards compatibility.
	 *
	 * @param {object} oSettings dataTables settings object
	 * @param {array} data Data to send to the server, required by
	 *     DataTables - may be augmented by developer callbacks
	 * @param {function} fn Callback function to run when data is obtained
	 */
	function _fnBuildAjax( oSettings, data, fn )
	{
		// Compatibility with 1.9-, allow fnServerData and event to manipulate
		_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
	
		// Convert to object based for 1.10+ if using the old array scheme which can
		// come from server-side processing or serverParams
		if ( data && $.isArray(data) ) {
			var tmp = {};
			var rbracket = /(.*?)\[\]$/;
	
			$.each( data, function (key, val) {
				var match = val.name.match(rbracket);
	
				if ( match ) {
					// Support for arrays
					var name = match[0];
	
					if ( ! tmp[ name ] ) {
						tmp[ name ] = [];
					}
					tmp[ name ].push( val.value );
				}
				else {
					tmp[val.name] = val.value;
				}
			} );
			data = tmp;
		}
	
		var ajaxData;
		var ajax = oSettings.ajax;
		var instance = oSettings.oInstance;
		var callback = function ( json ) {
			_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
			fn( json );
		};
	
		if ( $.isPlainObject( ajax ) && ajax.data )
		{
			ajaxData = ajax.data;
	
			var newData = $.isFunction( ajaxData ) ?
				ajaxData( data, oSettings ) :  // fn can manipulate data or return
				ajaxData;                      // an object object or array to merge
	
			// If the function returned something, use that alone
			data = $.isFunction( ajaxData ) && newData ?
				newData :
				$.extend( true, data, newData );
	
			// Remove the data property as we've resolved it already and don't want
			// jQuery to do it again (it is restored at the end of the function)
			delete ajax.data;
		}
	
		var baseAjax = {
			"data": data,
			"success": function (json) {
				var error = json.error || json.sError;
				if ( error ) {
					_fnLog( oSettings, 0, error );
				}
	
				oSettings.json = json;
				callback( json );
			},
			"dataType": "json",
			"cache": false,
			"type": oSettings.sServerMethod,
			"error": function (xhr, error, thrown) {
				var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
	
				if ( $.inArray( true, ret ) === -1 ) {
					if ( error == "parsererror" ) {
						_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
					}
					else if ( xhr.readyState === 4 ) {
						_fnLog( oSettings, 0, 'Ajax error', 7 );
					}
				}
	
				_fnProcessingDisplay( oSettings, false );
			}
		};
	
		// Store the data submitted for the API
		oSettings.oAjaxData = data;
	
		// Allow plug-ins and external processes to modify the data
		_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
	
		if ( oSettings.fnServerData )
		{
			// DataTables 1.9- compatibility
			oSettings.fnServerData.call( instance,
				oSettings.sAjaxSource,
				$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
					return { name: key, value: val };
				} ),
				callback,
				oSettings
			);
		}
		else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
		{
			// DataTables 1.9- compatibility
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
				url: ajax || oSettings.sAjaxSource
			} ) );
		}
		else if ( $.isFunction( ajax ) )
		{
			// Is a function - let the caller define what needs to be done
			oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
		}
		else
		{
			// Object to extend the base settings
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
	
			// Restore for next time around
			ajax.data = ajaxData;
		}
	}
	
	
	/**
	 * Update the table using an Ajax call
	 *  @param {object} settings dataTables settings object
	 *  @returns {boolean} Block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdate( settings )
	{
		if ( settings.bAjaxDataGet ) {
			settings.iDraw++;
			_fnProcessingDisplay( settings, true );
	
			_fnBuildAjax(
				settings,
				_fnAjaxParameters( settings ),
				function(json) {
					_fnAjaxUpdateDraw( settings, json );
				}
			);
	
			return false;
		}
		return true;
	}
	
	
	/**
	 * Build up the parameters in an object needed for a server-side processing
	 * request. Note that this is basically done twice, is different ways - a modern
	 * method which is used by default in DataTables 1.10 which uses objects and
	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	 * the sAjaxSource option is used in the initialisation, or the legacyAjax
	 * option is set.
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {bool} block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxParameters( settings )
	{
		var
			columns = settings.aoColumns,
			columnCount = columns.length,
			features = settings.oFeatures,
			preSearch = settings.oPreviousSearch,
			preColSearch = settings.aoPreSearchCols,
			i, data = [], dataProp, column, columnSearch,
			sort = _fnSortFlatten( settings ),
			displayStart = settings._iDisplayStart,
			displayLength = features.bPaginate !== false ?
				settings._iDisplayLength :
				-1;
	
		var param = function ( name, value ) {
			data.push( { 'name': name, 'value': value } );
		};
	
		// DataTables 1.9- compatible method
		param( 'sEcho',          settings.iDraw );
		param( 'iColumns',       columnCount );
		param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
		param( 'iDisplayStart',  displayStart );
		param( 'iDisplayLength', displayLength );
	
		// DataTables 1.10+ method
		var d = {
			draw:    settings.iDraw,
			columns: [],
			order:   [],
			start:   displayStart,
			length:  displayLength,
			search:  {
				value: preSearch.sSearch,
				regex: preSearch.bRegex
			}
		};
	
		for ( i=0 ; i<columnCount ; i++ ) {
			column = columns[i];
			columnSearch = preColSearch[i];
			dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
	
			d.columns.push( {
				data:       dataProp,
				name:       column.sName,
				searchable: column.bSearchable,
				orderable:  column.bSortable,
				search:     {
					value: columnSearch.sSearch,
					regex: columnSearch.bRegex
				}
			} );
	
			param( "mDataProp_"+i, dataProp );
	
			if ( features.bFilter ) {
				param( 'sSearch_'+i,     columnSearch.sSearch );
				param( 'bRegex_'+i,      columnSearch.bRegex );
				param( 'bSearchable_'+i, column.bSearchable );
			}
	
			if ( features.bSort ) {
				param( 'bSortable_'+i, column.bSortable );
			}
		}
	
		if ( features.bFilter ) {
			param( 'sSearch', preSearch.sSearch );
			param( 'bRegex', preSearch.bRegex );
		}
	
		if ( features.bSort ) {
			$.each( sort, function ( i, val ) {
				d.order.push( { column: val.col, dir: val.dir } );
	
				param( 'iSortCol_'+i, val.col );
				param( 'sSortDir_'+i, val.dir );
			} );
	
			param( 'iSortingCols', sort.length );
		}
	
		// If the legacy.ajax parameter is null, then we automatically decide which
		// form to use, based on sAjaxSource
		var legacy = DataTable.ext.legacy.ajax;
		if ( legacy === null ) {
			return settings.sAjaxSource ? data : d;
		}
	
		// Otherwise, if legacy has been specified then we use that to decide on the
		// form
		return legacy ? data : d;
	}
	
	
	/**
	 * Data the data from the server (nuking the old) and redraw the table
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} json json data return from the server.
	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	 *  @param {array} json.aaData The data to display on this page
	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdateDraw ( settings, json )
	{
		// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
		// Support both
		var compat = function ( old, modern ) {
			return json[old] !== undefined ? json[old] : json[modern];
		};
	
		var data = _fnAjaxDataSrc( settings, json );
		var draw            = compat( 'sEcho',                'draw' );
		var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
		var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
	
		if ( draw ) {
			// Protect against out of sequence returns
			if ( draw*1 < settings.iDraw ) {
				return;
			}
			settings.iDraw = draw * 1;
		}
	
		_fnClearTable( settings );
		settings._iRecordsTotal   = parseInt(recordsTotal, 10);
		settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
	
		for ( var i=0, ien=data.length ; i<ien ; i++ ) {
			_fnAddData( settings, data[i] );
		}
		settings.aiDisplay = settings.aiDisplayMaster.slice();
	
		settings.bAjaxDataGet = false;
		_fnDraw( settings );
	
		if ( ! settings._bInitComplete ) {
			_fnInitComplete( settings, json );
		}
	
		settings.bAjaxDataGet = true;
		_fnProcessingDisplay( settings, false );
	}
	
	
	/**
	 * Get the data from the JSON data source to use for drawing a table. Using
	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	 * source object, or from a processing function.
	 *  @param {object} oSettings dataTables settings object
	 *  @param  {object} json Data source object / array from the server
	 *  @return {array} Array of data to use
	 */
	function _fnAjaxDataSrc ( oSettings, json )
	{
		var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
			oSettings.ajax.dataSrc :
			oSettings.sAjaxDataProp; // Compatibility with 1.9-.
	
		// Compatibility with 1.9-. In order to read from aaData, check if the
		// default has been changed, if not, check for aaData
		if ( dataSrc === 'data' ) {
			return json.aaData || json[dataSrc];
		}
	
		return dataSrc !== "" ?
			_fnGetObjectDataFn( dataSrc )( json ) :
			json;
	}
	
	/**
	 * Generate the node required for filtering text
	 *  @returns {node} Filter control element
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlFilter ( settings )
	{
		var classes = settings.oClasses;
		var tableId = settings.sTableId;
		var language = settings.oLanguage;
		var previousSearch = settings.oPreviousSearch;
		var features = settings.aanFeatures;
		var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
	
		var str = language.sSearch;
		str = str.match(/_INPUT_/) ?
			str.replace('_INPUT_', input) :
			str+input;
	
		var filter = $('<div/>', {
				'id': ! features.f ? tableId+'_filter' : null,
				'class': classes.sFilter
			} )
			.append( $('<label/>' ).append( str ) );
	
		var searchFn = function() {
			/* Update all other filter input elements for the new display */
			var n = features.f;
			var val = !this.value ? "" : this.value; // mental IE8 fix :-(
	
			/* Now do the filter */
			if ( val != previousSearch.sSearch ) {
				_fnFilterComplete( settings, {
					"sSearch": val,
					"bRegex": previousSearch.bRegex,
					"bSmart": previousSearch.bSmart ,
					"bCaseInsensitive": previousSearch.bCaseInsensitive
				} );
	
				// Need to redraw, without resorting
				settings._iDisplayStart = 0;
				_fnDraw( settings );
			}
		};
	
		var searchDelay = settings.searchDelay !== null ?
			settings.searchDelay :
			_fnDataSource( settings ) === 'ssp' ?
				400 :
				0;
	
		var jqFilter = $('input', filter)
			.val( previousSearch.sSearch )
			.attr( 'placeholder', language.sSearchPlaceholder )
			.on(
				'keyup.DT search.DT input.DT paste.DT cut.DT',
				searchDelay ?
					_fnThrottle( searchFn, searchDelay ) :
					searchFn
			)
			.on( 'keypress.DT', function(e) {
				/* Prevent form submission */
				if ( e.keyCode == 13 ) {
					return false;
				}
			} )
			.attr('aria-controls', tableId);
	
		// Update the input elements whenever the table is filtered
		$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
			if ( settings === s ) {
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame...
				try {
					if ( jqFilter[0] !== document.activeElement ) {
						jqFilter.val( previousSearch.sSearch );
					}
				}
				catch ( e ) {}
			}
		} );
	
		return filter[0];
	}
	
	
	/**
	 * Filter the table using both the global filter and column based filtering
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oSearch search information
	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterComplete ( oSettings, oInput, iForce )
	{
		var oPrevSearch = oSettings.oPreviousSearch;
		var aoPrevSearch = oSettings.aoPreSearchCols;
		var fnSaveFilter = function ( oFilter ) {
			/* Save the filtering values */
			oPrevSearch.sSearch = oFilter.sSearch;
			oPrevSearch.bRegex = oFilter.bRegex;
			oPrevSearch.bSmart = oFilter.bSmart;
			oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
		};
		var fnRegex = function ( o ) {
			// Backwards compatibility with the bEscapeRegex option
			return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
		};
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo As per sort - can this be moved into an event handler?
		_fnColumnTypes( oSettings );
	
		/* In server-side processing all filtering is done by the server, so no point hanging around here */
		if ( _fnDataSource( oSettings ) != 'ssp' )
		{
			/* Global filter */
			_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
			fnSaveFilter( oInput );
	
			/* Now do the individual column filter */
			for ( var i=0 ; i<aoPrevSearch.length ; i++ )
			{
				_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
					aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
			}
	
			/* Custom filtering */
			_fnFilterCustom( oSettings );
		}
		else
		{
			fnSaveFilter( oInput );
		}
	
		/* Tell the draw function we have been filtering */
		oSettings.bFiltered = true;
		_fnCallbackFire( oSettings, null, 'search', [oSettings] );
	}
	
	
	/**
	 * Apply custom filtering functions
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCustom( settings )
	{
		var filters = DataTable.ext.search;
		var displayRows = settings.aiDisplay;
		var row, rowIdx;
	
		for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
			var rows = [];
	
			// Loop over each row and see if it should be included
			for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
				rowIdx = displayRows[ j ];
				row = settings.aoData[ rowIdx ];
	
				if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
					rows.push( rowIdx );
				}
			}
	
			// So the array reference doesn't break set the results into the
			// existing array
			displayRows.length = 0;
			$.merge( displayRows, rows );
		}
	}
	
	
	/**
	 * Filter the table on a per-column basis
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sInput string to filter on
	 *  @param {int} iColumn column to filter
	 *  @param {bool} bRegex treat search string as a regular expression or not
	 *  @param {bool} bSmart use smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
	{
		if ( searchStr === '' ) {
			return;
		}
	
		var data;
		var out = [];
		var display = settings.aiDisplay;
		var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
	
		for ( var i=0 ; i<display.length ; i++ ) {
			data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
	
			if ( rpSearch.test( data ) ) {
				out.push( display[i] );
			}
		}
	
		settings.aiDisplay = out;
	}
	
	
	/**
	 * Filter the data table based on user input and draw the table
	 *  @param {object} settings dataTables settings object
	 *  @param {string} input string to filter on
	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	 *  @param {bool} regex treat as a regular expression or not
	 *  @param {bool} smart perform smart filtering or not
	 *  @param {bool} caseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
	{
		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
		var prevSearch = settings.oPreviousSearch.sSearch;
		var displayMaster = settings.aiDisplayMaster;
		var display, invalidated, i;
		var filtered = [];
	
		// Need to take account of custom filtering functions - always filter
		if ( DataTable.ext.search.length !== 0 ) {
			force = true;
		}
	
		// Check if any of the rows were invalidated
		invalidated = _fnFilterData( settings );
	
		// If the input is blank - we just want the full data set
		if ( input.length <= 0 ) {
			settings.aiDisplay = displayMaster.slice();
		}
		else {
			// New search - start from the master array
			if ( invalidated ||
				 force ||
				 prevSearch.length > input.length ||
				 input.indexOf(prevSearch) !== 0 ||
				 settings.bSorted // On resort, the display master needs to be
				                  // re-filtered since indexes will have changed
			) {
				settings.aiDisplay = displayMaster.slice();
			}
	
			// Search the display array
			display = settings.aiDisplay;
	
			for ( i=0 ; i<display.length ; i++ ) {
				if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
					filtered.push( display[i] );
				}
			}
	
			settings.aiDisplay = filtered;
		}
	}
	
	
	/**
	 * Build a regular expression object suitable for searching a table
	 *  @param {string} sSearch string to search for
	 *  @param {bool} bRegex treat as a regular expression or not
	 *  @param {bool} bSmart perform smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	 *  @returns {RegExp} constructed object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
	{
		search = regex ?
			search :
			_fnEscapeRegex( search );
		
		if ( smart ) {
			/* For smart filtering we want to allow the search to work regardless of
			 * word order. We also want double quoted text to be preserved, so word
			 * order is important - a la google. So this is what we want to
			 * generate:
			 * 
			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
			 */
			var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
				if ( word.charAt(0) === '"' ) {
					var m = word.match( /^"(.*)"$/ );
					word = m ? m[1] : word;
				}
	
				return word.replace('"', '');
			} );
	
			search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
		}
	
		return new RegExp( search, caseInsensitive ? 'i' : '' );
	}
	
	
	/**
	 * Escape a string such that it can be used in a regular expression
	 *  @param {string} sVal string to escape
	 *  @returns {string} escaped string
	 *  @memberof DataTable#oApi
	 */
	var _fnEscapeRegex = DataTable.util.escapeRegex;
	
	var __filter_div = $('<div>')[0];
	var __filter_div_textContent = __filter_div.textContent !== undefined;
	
	// Update the filtering data for each row if needed (by invalidation or first run)
	function _fnFilterData ( settings )
	{
		var columns = settings.aoColumns;
		var column;
		var i, j, ien, jen, filterData, cellData, row;
		var fomatters = DataTable.ext.type.search;
		var wasInvalidated = false;
	
		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aFilterData ) {
				filterData = [];
	
				for ( j=0, jen=columns.length ; j<jen ; j++ ) {
					column = columns[j];
	
					if ( column.bSearchable ) {
						cellData = _fnGetCellData( settings, i, j, 'filter' );
	
						if ( fomatters[ column.sType ] ) {
							cellData = fomatters[ column.sType ]( cellData );
						}
	
						// Search in DataTables 1.10 is string based. In 1.11 this
						// should be altered to also allow strict type checking.
						if ( cellData === null ) {
							cellData = '';
						}
	
						if ( typeof cellData !== 'string' && cellData.toString ) {
							cellData = cellData.toString();
						}
					}
					else {
						cellData = '';
					}
	
					// If it looks like there is an HTML entity in the string,
					// attempt to decode it so sorting works as expected. Note that
					// we could use a single line of jQuery to do this, but the DOM
					// method used here is much faster http://jsperf.com/html-decode
					if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
						__filter_div.innerHTML = cellData;
						cellData = __filter_div_textContent ?
							__filter_div.textContent :
							__filter_div.innerText;
					}
	
					if ( cellData.replace ) {
						cellData = cellData.replace(/[\r\n]/g, '');
					}
	
					filterData.push( cellData );
				}
	
				row._aFilterData = filterData;
				row._sFilterRow = filterData.join('  ');
				wasInvalidated = true;
			}
		}
	
		return wasInvalidated;
	}
	
	
	/**
	 * Convert from the internal Hungarian notation to camelCase for external
	 * interaction
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToCamel ( obj )
	{
		return {
			search:          obj.sSearch,
			smart:           obj.bSmart,
			regex:           obj.bRegex,
			caseInsensitive: obj.bCaseInsensitive
		};
	}
	
	
	
	/**
	 * Convert from camelCase notation to the internal Hungarian. We could use the
	 * Hungarian convert function here, but this is cleaner
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToHung ( obj )
	{
		return {
			sSearch:          obj.search,
			bSmart:           obj.smart,
			bRegex:           obj.regex,
			bCaseInsensitive: obj.caseInsensitive
		};
	}
	
	/**
	 * Generate the node required for the info display
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Information element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlInfo ( settings )
	{
		var
			tid = settings.sTableId,
			nodes = settings.aanFeatures.i,
			n = $('<div/>', {
				'class': settings.oClasses.sInfo,
				'id': ! nodes ? tid+'_info' : null
			} );
	
		if ( ! nodes ) {
			// Update display on each draw
			settings.aoDrawCallback.push( {
				"fn": _fnUpdateInfo,
				"sName": "information"
			} );
	
			n
				.attr( 'role', 'status' )
				.attr( 'aria-live', 'polite' );
	
			// Table is described by our info div
			$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
		}
	
		return n[0];
	}
	
	
	/**
	 * Update the information elements in the display
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnUpdateInfo ( settings )
	{
		/* Show information about the table */
		var nodes = settings.aanFeatures.i;
		if ( nodes.length === 0 ) {
			return;
		}
	
		var
			lang  = settings.oLanguage,
			start = settings._iDisplayStart+1,
			end   = settings.fnDisplayEnd(),
			max   = settings.fnRecordsTotal(),
			total = settings.fnRecordsDisplay(),
			out   = total ?
				lang.sInfo :
				lang.sInfoEmpty;
	
		if ( total !== max ) {
			/* Record set after filtering */
			out += ' ' + lang.sInfoFiltered;
		}
	
		// Convert the macros
		out += lang.sInfoPostFix;
		out = _fnInfoMacros( settings, out );
	
		var callback = lang.fnInfoCallback;
		if ( callback !== null ) {
			out = callback.call( settings.oInstance,
				settings, start, end, max, total, out
			);
		}
	
		$(nodes).html( out );
	}
	
	
	function _fnInfoMacros ( settings, str )
	{
		// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
		// internally
		var
			formatter  = settings.fnFormatNumber,
			start      = settings._iDisplayStart+1,
			len        = settings._iDisplayLength,
			vis        = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return str.
			replace(/_START_/g, formatter.call( settings, start ) ).
			replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
			replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
			replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
			replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
			replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
	}
	
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnInitialise ( settings )
	{
		var i, iLen, iAjaxStart=settings.iInitDisplayStart;
		var columns = settings.aoColumns, column;
		var features = settings.oFeatures;
		var deferLoading = settings.bDeferLoading; // value modified by the draw
	
		/* Ensure that the table data is fully initialised */
		if ( ! settings.bInitialised ) {
			setTimeout( function(){ _fnInitialise( settings ); }, 200 );
			return;
		}
	
		/* Show the display HTML options */
		_fnAddOptionsHtml( settings );
	
		/* Build and draw the header / footer for the table */
		_fnBuildHead( settings );
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		/* Okay to show that something is going on now */
		_fnProcessingDisplay( settings, true );
	
		/* Calculate sizes for columns */
		if ( features.bAutoWidth ) {
			_fnCalculateColumnWidths( settings );
		}
	
		for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
			column = columns[i];
	
			if ( column.sWidth ) {
				column.nTh.style.width = _fnStringToCss( column.sWidth );
			}
		}
	
		_fnCallbackFire( settings, null, 'preInit', [settings] );
	
		// If there is default sorting required - let's do it. The sort function
		// will do the drawing for us. Otherwise we draw the table regardless of the
		// Ajax source - this allows the table to look initialised for Ajax sourcing
		// data (show 'loading' message possibly)
		_fnReDraw( settings );
	
		// Server-side processing init complete is done by _fnAjaxUpdateDraw
		var dataSrc = _fnDataSource( settings );
		if ( dataSrc != 'ssp' || deferLoading ) {
			// if there is an ajax source load the data
			if ( dataSrc == 'ajax' ) {
				_fnBuildAjax( settings, [], function(json) {
					var aData = _fnAjaxDataSrc( settings, json );
	
					// Got the data - add it to the table
					for ( i=0 ; i<aData.length ; i++ ) {
						_fnAddData( settings, aData[i] );
					}
	
					// Reset the init display for cookie saving. We've already done
					// a filter, and therefore cleared it before. So we need to make
					// it appear 'fresh'
					settings.iInitDisplayStart = iAjaxStart;
	
					_fnReDraw( settings );
	
					_fnProcessingDisplay( settings, false );
					_fnInitComplete( settings, json );
				}, settings );
			}
			else {
				_fnProcessingDisplay( settings, false );
				_fnInitComplete( settings );
			}
		}
	}
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	 *    with client-side processing (optional)
	 *  @memberof DataTable#oApi
	 */
	function _fnInitComplete ( settings, json )
	{
		settings._bInitComplete = true;
	
		// When data was added after the initialisation (data or Ajax) we need to
		// calculate the column sizing
		if ( json || settings.oInit.aaData ) {
			_fnAdjustColumnSizing( settings );
		}
	
		_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
		_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
	}
	
	
	function _fnLengthChange ( settings, val )
	{
		var len = parseInt( val, 10 );
		settings._iDisplayLength = len;
	
		_fnLengthOverflow( settings );
	
		// Fire length change event
		_fnCallbackFire( settings, null, 'length', [settings, len] );
	}
	
	
	/**
	 * Generate the node required for user display length changing
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Display length feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlLength ( settings )
	{
		var
			classes  = settings.oClasses,
			tableId  = settings.sTableId,
			menu     = settings.aLengthMenu,
			d2       = $.isArray( menu[0] ),
			lengths  = d2 ? menu[0] : menu,
			language = d2 ? menu[1] : menu;
	
		var select = $('<select/>', {
			'name':          tableId+'_length',
			'aria-controls': tableId,
			'class':         classes.sLengthSelect
		} );
	
		for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
			select[0][ i ] = new Option( language[i], lengths[i] );
		}
	
		var div = $('<div><label/></div>').addClass( classes.sLength );
		if ( ! settings.aanFeatures.l ) {
			div[0].id = tableId+'_length';
		}
	
		div.children().append(
			settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
		);
	
		// Can't use `select` variable as user might provide their own and the
		// reference is broken by the use of outerHTML
		$('select', div)
			.val( settings._iDisplayLength )
			.on( 'change.DT', function(e) {
				_fnLengthChange( settings, $(this).val() );
				_fnDraw( settings );
			} );
	
		// Update node value whenever anything changes the table's length
		$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
			if ( settings === s ) {
				$('select', div).val( len );
			}
		} );
	
		return div[0];
	}
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Note that most of the paging logic is done in
	 * DataTable.ext.pager
	 */
	
	/**
	 * Generate the node required for default pagination
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Pagination feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlPaginate ( settings )
	{
		var
			type   = settings.sPaginationType,
			plugin = DataTable.ext.pager[ type ],
			modern = typeof plugin === 'function',
			redraw = function( settings ) {
				_fnDraw( settings );
			},
			node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
			features = settings.aanFeatures;
	
		if ( ! modern ) {
			plugin.fnInit( settings, node, redraw );
		}
	
		/* Add a draw callback for the pagination on first instance, to update the paging display */
		if ( ! features.p )
		{
			node.id = settings.sTableId+'_paginate';
	
			settings.aoDrawCallback.push( {
				"fn": function( settings ) {
					if ( modern ) {
						var
							start      = settings._iDisplayStart,
							len        = settings._iDisplayLength,
							visRecords = settings.fnRecordsDisplay(),
							all        = len === -1,
							page = all ? 0 : Math.ceil( start / len ),
							pages = all ? 1 : Math.ceil( visRecords / len ),
							buttons = plugin(page, pages),
							i, ien;
	
						for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
							_fnRenderer( settings, 'pageButton' )(
								settings, features.p[i], i, buttons, page, pages
							);
						}
					}
					else {
						plugin.fnUpdate( settings, redraw );
					}
				},
				"sName": "pagination"
			} );
		}
	
		return node;
	}
	
	
	/**
	 * Alter the display settings to change the page
	 *  @param {object} settings DataTables settings object
	 *  @param {string|int} action Paging action to take: "first", "previous",
	 *    "next" or "last" or page number to jump to (integer)
	 *  @param [bool] redraw Automatically draw the update or not
	 *  @returns {bool} true page has changed, false - no change
	 *  @memberof DataTable#oApi
	 */
	function _fnPageChange ( settings, action, redraw )
	{
		var
			start     = settings._iDisplayStart,
			len       = settings._iDisplayLength,
			records   = settings.fnRecordsDisplay();
	
		if ( records === 0 || len === -1 )
		{
			start = 0;
		}
		else if ( typeof action === "number" )
		{
			start = action * len;
	
			if ( start > records )
			{
				start = 0;
			}
		}
		else if ( action == "first" )
		{
			start = 0;
		}
		else if ( action == "previous" )
		{
			start = len >= 0 ?
				start - len :
				0;
	
			if ( start < 0 )
			{
			  start = 0;
			}
		}
		else if ( action == "next" )
		{
			if ( start + len < records )
			{
				start += len;
			}
		}
		else if ( action == "last" )
		{
			start = Math.floor( (records-1) / len) * len;
		}
		else
		{
			_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
		}
	
		var changed = settings._iDisplayStart !== start;
		settings._iDisplayStart = start;
	
		if ( changed ) {
			_fnCallbackFire( settings, null, 'page', [settings] );
	
			if ( redraw ) {
				_fnDraw( settings );
			}
		}
	
		return changed;
	}
	
	
	
	/**
	 * Generate the node required for the processing node
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Processing element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlProcessing ( settings )
	{
		return $('<div/>', {
				'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
				'class': settings.oClasses.sProcessing
			} )
			.html( settings.oLanguage.sProcessing )
			.insertBefore( settings.nTable )[0];
	}
	
	
	/**
	 * Display or hide the processing indicator
	 *  @param {object} settings dataTables settings object
	 *  @param {bool} show Show the processing indicator (true) or not (false)
	 *  @memberof DataTable#oApi
	 */
	function _fnProcessingDisplay ( settings, show )
	{
		if ( settings.oFeatures.bProcessing ) {
			$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
		}
	
		_fnCallbackFire( settings, null, 'processing', [settings, show] );
	}
	
	/**
	 * Add any control elements for the table - specifically scrolling
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Node to add to the DOM
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlTable ( settings )
	{
		var table = $(settings.nTable);
	
		// Add the ARIA grid role to the table
		table.attr( 'role', 'grid' );
	
		// Scrolling from here on in
		var scroll = settings.oScroll;
	
		if ( scroll.sX === '' && scroll.sY === '' ) {
			return settings.nTable;
		}
	
		var scrollX = scroll.sX;
		var scrollY = scroll.sY;
		var classes = settings.oClasses;
		var caption = table.children('caption');
		var captionSide = caption.length ? caption[0]._captionSide : null;
		var headerClone = $( table[0].cloneNode(false) );
		var footerClone = $( table[0].cloneNode(false) );
		var footer = table.children('tfoot');
		var _div = '<div/>';
		var size = function ( s ) {
			return !s ? null : _fnStringToCss( s );
		};
	
		if ( ! footer.length ) {
			footer = null;
		}
	
		/*
		 * The HTML structure that we want to generate in this function is:
		 *  div - scroller
		 *    div - scroll head
		 *      div - scroll head inner
		 *        table - scroll head table
		 *          thead - thead
		 *    div - scroll body
		 *      table - table (master table)
		 *        thead - thead clone for sizing
		 *        tbody - tbody
		 *    div - scroll foot
		 *      div - scroll foot inner
		 *        table - scroll foot table
		 *          tfoot - tfoot
		 */
		var scroller = $( _div, { 'class': classes.sScrollWrapper } )
			.append(
				$(_div, { 'class': classes.sScrollHead } )
					.css( {
						overflow: 'hidden',
						position: 'relative',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollHeadInner } )
							.css( {
								'box-sizing': 'content-box',
								width: scroll.sXInner || '100%'
							} )
							.append(
								headerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'top' ? caption : null )
									.append(
										table.children('thead')
									)
							)
					)
			)
			.append(
				$(_div, { 'class': classes.sScrollBody } )
					.css( {
						position: 'relative',
						overflow: 'auto',
						width: size( scrollX )
					} )
					.append( table )
			);
	
		if ( footer ) {
			scroller.append(
				$(_div, { 'class': classes.sScrollFoot } )
					.css( {
						overflow: 'hidden',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollFootInner } )
							.append(
								footerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'bottom' ? caption : null )
									.append(
										table.children('tfoot')
									)
							)
					)
			);
		}
	
		var children = scroller.children();
		var scrollHead = children[0];
		var scrollBody = children[1];
		var scrollFoot = footer ? children[2] : null;
	
		// When the body is scrolled, then we also want to scroll the headers
		if ( scrollX ) {
			$(scrollBody).on( 'scroll.DT', function (e) {
				var scrollLeft = this.scrollLeft;
	
				scrollHead.scrollLeft = scrollLeft;
	
				if ( footer ) {
					scrollFoot.scrollLeft = scrollLeft;
				}
			} );
		}
	
		$(scrollBody).css(
			scrollY && scroll.bCollapse ? 'max-height' : 'height', 
			scrollY
		);
	
		settings.nScrollHead = scrollHead;
		settings.nScrollBody = scrollBody;
		settings.nScrollFoot = scrollFoot;
	
		// On redraw - align columns
		settings.aoDrawCallback.push( {
			"fn": _fnScrollDraw,
			"sName": "scrolling"
		} );
	
		return scroller[0];
	}
	
	
	
	/**
	 * Update the header, footer and body tables for resizing - i.e. column
	 * alignment.
	 *
	 * Welcome to the most horrible function DataTables. The process that this
	 * function follows is basically:
	 *   1. Re-create the table inside the scrolling div
	 *   2. Take live measurements from the DOM
	 *   3. Apply the measurements to align the columns
	 *   4. Clean up
	 *
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnScrollDraw ( settings )
	{
		// Given that this is such a monster function, a lot of variables are use
		// to try and keep the minimised size as small as possible
		var
			scroll         = settings.oScroll,
			scrollX        = scroll.sX,
			scrollXInner   = scroll.sXInner,
			scrollY        = scroll.sY,
			barWidth       = scroll.iBarWidth,
			divHeader      = $(settings.nScrollHead),
			divHeaderStyle = divHeader[0].style,
			divHeaderInner = divHeader.children('div'),
			divHeaderInnerStyle = divHeaderInner[0].style,
			divHeaderTable = divHeaderInner.children('table'),
			divBodyEl      = settings.nScrollBody,
			divBody        = $(divBodyEl),
			divBodyStyle   = divBodyEl.style,
			divFooter      = $(settings.nScrollFoot),
			divFooterInner = divFooter.children('div'),
			divFooterTable = divFooterInner.children('table'),
			header         = $(settings.nTHead),
			table          = $(settings.nTable),
			tableEl        = table[0],
			tableStyle     = tableEl.style,
			footer         = settings.nTFoot ? $(settings.nTFoot) : null,
			browser        = settings.oBrowser,
			ie67           = browser.bScrollOversize,
			dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
			headerTrgEls, footerTrgEls,
			headerSrcEls, footerSrcEls,
			headerCopy, footerCopy,
			headerWidths=[], footerWidths=[],
			headerContent=[], footerContent=[],
			idx, correction, sanityWidth,
			zeroOut = function(nSizer) {
				var style = nSizer.style;
				style.paddingTop = "0";
				style.paddingBottom = "0";
				style.borderTopWidth = "0";
				style.borderBottomWidth = "0";
				style.height = 0;
			};
	
		// If the scrollbar visibility has changed from the last draw, we need to
		// adjust the column sizes as the table width will have changed to account
		// for the scrollbar
		var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
		
		if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
			settings.scrollBarVis = scrollBarVis;
			_fnAdjustColumnSizing( settings );
			return; // adjust column sizing will call this function again
		}
		else {
			settings.scrollBarVis = scrollBarVis;
		}
	
		/*
		 * 1. Re-create the table inside the scrolling div
		 */
	
		// Remove the old minimised thead and tfoot elements in the inner table
		table.children('thead, tfoot').remove();
	
		if ( footer ) {
			footerCopy = footer.clone().prependTo( table );
			footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
			footerSrcEls = footerCopy.find('tr');
		}
	
		// Clone the current header and footer elements and then place it into the inner table
		headerCopy = header.clone().prependTo( table );
		headerTrgEls = header.find('tr'); // original header is in its own table
		headerSrcEls = headerCopy.find('tr');
		headerCopy.find('th, td').removeAttr('tabindex');
	
	
		/*
		 * 2. Take live measurements from the DOM - do not alter the DOM itself!
		 */
	
		// Remove old sizing and apply the calculated column widths
		// Get the unique column headers in the newly created (cloned) header. We want to apply the
		// calculated sizes to this header
		if ( ! scrollX )
		{
			divBodyStyle.width = '100%';
			divHeader[0].style.width = '100%';
		}
	
		$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
			idx = _fnVisibleToColumnIndex( settings, i );
			el.style.width = settings.aoColumns[idx].sWidth;
		} );
	
		if ( footer ) {
			_fnApplyToChildren( function(n) {
				n.style.width = "";
			}, footerSrcEls );
		}
	
		// Size the table as a whole
		sanityWidth = table.outerWidth();
		if ( scrollX === "" ) {
			// No x scrolling
			tableStyle.width = "100%";
	
			// IE7 will make the width of the table when 100% include the scrollbar
			// - which is shouldn't. When there is a scrollbar we need to take this
			// into account.
			if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
			}
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
		else if ( scrollXInner !== "" ) {
			// legacy x scroll inner has been given - use it
			tableStyle.width = _fnStringToCss(scrollXInner);
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
	
		// Hidden header should have zero height, so remove padding and borders. Then
		// set the width based on the real headers
	
		// Apply all styles in one pass
		_fnApplyToChildren( zeroOut, headerSrcEls );
	
		// Read all widths in next pass
		_fnApplyToChildren( function(nSizer) {
			headerContent.push( nSizer.innerHTML );
			headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
		}, headerSrcEls );
	
		// Apply all widths in final pass
		_fnApplyToChildren( function(nToSize, i) {
			// Only apply widths to the DataTables detected header cells - this
			// prevents complex headers from having contradictory sizes applied
			if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {
				nToSize.style.width = headerWidths[i];
			}
		}, headerTrgEls );
	
		$(headerSrcEls).height(0);
	
		/* Same again with the footer if we have one */
		if ( footer )
		{
			_fnApplyToChildren( zeroOut, footerSrcEls );
	
			_fnApplyToChildren( function(nSizer) {
				footerContent.push( nSizer.innerHTML );
				footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
			}, footerSrcEls );
	
			_fnApplyToChildren( function(nToSize, i) {
				nToSize.style.width = footerWidths[i];
			}, footerTrgEls );
	
			$(footerSrcEls).height(0);
		}
	
	
		/*
		 * 3. Apply the measurements
		 */
	
		// "Hide" the header and footer that we used for the sizing. We need to keep
		// the content of the cell so that the width applied to the header and body
		// both match, but we want to hide it completely. We want to also fix their
		// width to what they currently are
		_fnApplyToChildren( function(nSizer, i) {
			nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+headerContent[i]+'</div>';
			nSizer.style.width = headerWidths[i];
		}, headerSrcEls );
	
		if ( footer )
		{
			_fnApplyToChildren( function(nSizer, i) {
				nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+footerContent[i]+'</div>';
				nSizer.style.width = footerWidths[i];
			}, footerSrcEls );
		}
	
		// Sanity check that the table is of a sensible width. If not then we are going to get
		// misalignment - try to prevent this by not allowing the table to shrink below its min width
		if ( table.outerWidth() < sanityWidth )
		{
			// The min width depends upon if we have a vertical scrollbar visible or not */
			correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")) ?
					sanityWidth+barWidth :
					sanityWidth;
	
			// IE6/7 are a law unto themselves...
			if ( ie67 && (divBodyEl.scrollHeight >
				divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( correction-barWidth );
			}
	
			// And give the user a warning that we've stopped the table getting too small
			if ( scrollX === "" || scrollXInner !== "" ) {
				_fnLog( settings, 1, 'Possible column misalignment', 6 );
			}
		}
		else
		{
			correction = '100%';
		}
	
		// Apply to the container elements
		divBodyStyle.width = _fnStringToCss( correction );
		divHeaderStyle.width = _fnStringToCss( correction );
	
		if ( footer ) {
			settings.nScrollFoot.style.width = _fnStringToCss( correction );
		}
	
	
		/*
		 * 4. Clean up
		 */
		if ( ! scrollY ) {
			/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
			 * the scrollbar height from the visible display, rather than adding it on. We need to
			 * set the height in order to sort this. Don't want to do it in any other browsers.
			 */
			if ( ie67 ) {
				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
			}
		}
	
		/* Finally set the width's of the header and footer tables */
		var iOuterWidth = table.outerWidth();
		divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
		divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
	
		// Figure out if there are scrollbar present - if so then we need a the header and footer to
		// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
		var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
		var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
		divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
	
		if ( footer ) {
			divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
		}
	
		// Correct DOM ordering for colgroup - comes before the thead
		table.children('colgroup').insertBefore( table.children('thead') );
	
		/* Adjust the position of the header in case we loose the y-scrollbar */
		divBody.scroll();
	
		// If sorting or filtering has occurred, jump the scrolling back to the top
		// only if we aren't holding the position
		if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
			divBodyEl.scrollTop = 0;
		}
	}
	
	
	
	/**
	 * Apply a given function to the display child nodes of an element array (typically
	 * TD children of TR rows
	 *  @param {function} fn Method to apply to the objects
	 *  @param array {nodes} an1 List of elements to look through for display children
	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyToChildren( fn, an1, an2 )
	{
		var index=0, i=0, iLen=an1.length;
		var nNode1, nNode2;
	
		while ( i < iLen ) {
			nNode1 = an1[i].firstChild;
			nNode2 = an2 ? an2[i].firstChild : null;
	
			while ( nNode1 ) {
				if ( nNode1.nodeType === 1 ) {
					if ( an2 ) {
						fn( nNode1, nNode2, index );
					}
					else {
						fn( nNode1, index );
					}
	
					index++;
				}
	
				nNode1 = nNode1.nextSibling;
				nNode2 = an2 ? nNode2.nextSibling : null;
			}
	
			i++;
		}
	}
	
	
	
	var __re_html_remove = /<.*?>/g;
	
	
	/**
	 * Calculate the width of columns for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnCalculateColumnWidths ( oSettings )
	{
		var
			table = oSettings.nTable,
			columns = oSettings.aoColumns,
			scroll = oSettings.oScroll,
			scrollY = scroll.sY,
			scrollX = scroll.sX,
			scrollXInner = scroll.sXInner,
			columnCount = columns.length,
			visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
			headerCells = $('th', oSettings.nTHead),
			tableWidthAttr = table.getAttribute('width'), // from DOM element
			tableContainer = table.parentNode,
			userInputs = false,
			i, column, columnIdx, width, outerWidth,
			browser = oSettings.oBrowser,
			ie67 = browser.bScrollOversize;
	
		var styleWidth = table.style.width;
		if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
			tableWidthAttr = styleWidth;
		}
	
		/* Convert any user input sizes into pixel sizes */
		for ( i=0 ; i<visibleColumns.length ; i++ ) {
			column = columns[ visibleColumns[i] ];
	
			if ( column.sWidth !== null ) {
				column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
	
				userInputs = true;
			}
		}
	
		/* If the number of columns in the DOM equals the number that we have to
		 * process in DataTables, then we can use the offsets that are created by
		 * the web- browser. No custom sizes can be set in order for this to happen,
		 * nor scrolling used
		 */
		if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
		     columnCount == _fnVisbleColumns( oSettings ) &&
		     columnCount == headerCells.length
		) {
			for ( i=0 ; i<columnCount ; i++ ) {
				var colIdx = _fnVisibleToColumnIndex( oSettings, i );
	
				if ( colIdx !== null ) {
					columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
				}
			}
		}
		else
		{
			// Otherwise construct a single row, worst case, table with the widest
			// node in the data, assign any user defined widths, then insert it into
			// the DOM and allow the browser to do all the hard work of calculating
			// table widths
			var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
				.css( 'visibility', 'hidden' )
				.removeAttr( 'id' );
	
			// Clean up the table body
			tmpTable.find('tbody tr').remove();
			var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
	
			// Clone the table header and footer - we can't use the header / footer
			// from the cloned table, since if scrolling is active, the table's
			// real header and footer are contained in different table tags
			tmpTable.find('thead, tfoot').remove();
			tmpTable
				.append( $(oSettings.nTHead).clone() )
				.append( $(oSettings.nTFoot).clone() );
	
			// Remove any assigned widths from the footer (from scrolling)
			tmpTable.find('tfoot th, tfoot td').css('width', '');
	
			// Apply custom sizing to the cloned header
			headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
	
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				column = columns[ visibleColumns[i] ];
	
				headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
					_fnStringToCss( column.sWidthOrig ) :
					'';
	
				// For scrollX we need to force the column width otherwise the
				// browser will collapse it. If this width is smaller than the
				// width the column requires, then it will have no effect
				if ( column.sWidthOrig && scrollX ) {
					$( headerCells[i] ).append( $('<div/>').css( {
						width: column.sWidthOrig,
						margin: 0,
						padding: 0,
						border: 0,
						height: 1
					} ) );
				}
			}
	
			// Find the widest cell for each column and put it into the table
			if ( oSettings.aoData.length ) {
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					columnIdx = visibleColumns[i];
					column = columns[ columnIdx ];
	
					$( _fnGetWidestNode( oSettings, columnIdx ) )
						.clone( false )
						.append( column.sContentPadding )
						.appendTo( tr );
				}
			}
	
			// Tidy the temporary table - remove name attributes so there aren't
			// duplicated in the dom (radio elements for example)
			$('[name]', tmpTable).removeAttr('name');
	
			// Table has been built, attach to the document so we can work with it.
			// A holding element is used, positioned at the top of the container
			// with minimal height, so it has no effect on if the container scrolls
			// or not. Otherwise it might trigger scrolling when it actually isn't
			// needed
			var holder = $('<div/>').css( scrollX || scrollY ?
					{
						position: 'absolute',
						top: 0,
						left: 0,
						height: 1,
						right: 0,
						overflow: 'hidden'
					} :
					{}
				)
				.append( tmpTable )
				.appendTo( tableContainer );
	
			// When scrolling (X or Y) we want to set the width of the table as 
			// appropriate. However, when not scrolling leave the table width as it
			// is. This results in slightly different, but I think correct behaviour
			if ( scrollX && scrollXInner ) {
				tmpTable.width( scrollXInner );
			}
			else if ( scrollX ) {
				tmpTable.css( 'width', 'auto' );
				tmpTable.removeAttr('width');
	
				// If there is no width attribute or style, then allow the table to
				// collapse
				if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
					tmpTable.width( tableContainer.clientWidth );
				}
			}
			else if ( scrollY ) {
				tmpTable.width( tableContainer.clientWidth );
			}
			else if ( tableWidthAttr ) {
				tmpTable.width( tableWidthAttr );
			}
	
			// Get the width of each column in the constructed table - we need to
			// know the inner width (so it can be assigned to the other table's
			// cells) and the outer width so we can calculate the full width of the
			// table. This is safe since DataTables requires a unique cell for each
			// column, but if ever a header can span multiple columns, this will
			// need to be modified.
			var total = 0;
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				var cell = $(headerCells[i]);
				var border = cell.outerWidth() - cell.width();
	
				// Use getBounding... where possible (not IE8-) because it can give
				// sub-pixel accuracy, which we then want to round up!
				var bounding = browser.bBounding ?
					Math.ceil( headerCells[i].getBoundingClientRect().width ) :
					cell.outerWidth();
	
				// Total is tracked to remove any sub-pixel errors as the outerWidth
				// of the table might not equal the total given here (IE!).
				total += bounding;
	
				// Width for each column to use
				columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
			}
	
			table.style.width = _fnStringToCss( total );
	
			// Finished with the table - ditch it
			holder.remove();
		}
	
		// If there is a width attr, we want to attach an event listener which
		// allows the table sizing to automatically adjust when the window is
		// resized. Use the width attr rather than CSS, since we can't know if the
		// CSS is a relative value or absolute - DOM read is always px.
		if ( tableWidthAttr ) {
			table.style.width = _fnStringToCss( tableWidthAttr );
		}
	
		if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
			var bindResize = function () {
				$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
					_fnAdjustColumnSizing( oSettings );
				} ) );
			};
	
			// IE6/7 will crash if we bind a resize event handler on page load.
			// To be removed in 1.11 which drops IE6/7 support
			if ( ie67 ) {
				setTimeout( bindResize, 1000 );
			}
			else {
				bindResize();
			}
	
			oSettings._reszEvt = true;
		}
	}
	
	
	/**
	 * Throttle the calls to a function. Arguments and context are maintained for
	 * the throttled function
	 *  @param {function} fn Function to be called
	 *  @param {int} [freq=200] call frequency in mS
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#oApi
	 */
	var _fnThrottle = DataTable.util.throttle;
	
	
	/**
	 * Convert a CSS unit width to pixels (e.g. 2em)
	 *  @param {string} width width to be converted
	 *  @param {node} parent parent to get the with for (required for relative widths) - optional
	 *  @returns {int} width in pixels
	 *  @memberof DataTable#oApi
	 */
	function _fnConvertToWidth ( width, parent )
	{
		if ( ! width ) {
			return 0;
		}
	
		var n = $('<div/>')
			.css( 'width', _fnStringToCss( width ) )
			.appendTo( parent || document.body );
	
		var val = n[0].offsetWidth;
		n.remove();
	
		return val;
	}
	
	
	/**
	 * Get the widest node
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {node} widest table node
	 *  @memberof DataTable#oApi
	 */
	function _fnGetWidestNode( settings, colIdx )
	{
		var idx = _fnGetMaxLenString( settings, colIdx );
		if ( idx < 0 ) {
			return null;
		}
	
		var data = settings.aoData[ idx ];
		return ! data.nTr ? // Might not have been created when deferred rendering
			$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
			data.anCells[ colIdx ];
	}
	
	
	/**
	 * Get the maximum strlen for each data column
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {string} max string length for each column
	 *  @memberof DataTable#oApi
	 */
	function _fnGetMaxLenString( settings, colIdx )
	{
		var s, max=-1, maxIdx = -1;
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
			s = s.replace( __re_html_remove, '' );
			s = s.replace( /&nbsp;/g, ' ' );
	
			if ( s.length > max ) {
				max = s.length;
				maxIdx = i;
			}
		}
	
		return maxIdx;
	}
	
	
	/**
	 * Append a CSS unit (only if required) to a string
	 *  @param {string} value to css-ify
	 *  @returns {string} value with css unit
	 *  @memberof DataTable#oApi
	 */
	function _fnStringToCss( s )
	{
		if ( s === null ) {
			return '0px';
		}
	
		if ( typeof s == 'number' ) {
			return s < 0 ?
				'0px' :
				s+'px';
		}
	
		// Check it has a unit character already
		return s.match(/\d$/) ?
			s+'px' :
			s;
	}
	
	
	
	function _fnSortFlatten ( settings )
	{
		var
			i, iLen, k, kLen,
			aSort = [],
			aiOrig = [],
			aoColumns = settings.aoColumns,
			aDataSort, iCol, sType, srcCol,
			fixed = settings.aaSortingFixed,
			fixedObj = $.isPlainObject( fixed ),
			nestedSort = [],
			add = function ( a ) {
				if ( a.length && ! $.isArray( a[0] ) ) {
					// 1D array
					nestedSort.push( a );
				}
				else {
					// 2D array
					$.merge( nestedSort, a );
				}
			};
	
		// Build the sort array, with pre-fix and post-fix options if they have been
		// specified
		if ( $.isArray( fixed ) ) {
			add( fixed );
		}
	
		if ( fixedObj && fixed.pre ) {
			add( fixed.pre );
		}
	
		add( settings.aaSorting );
	
		if (fixedObj && fixed.post ) {
			add( fixed.post );
		}
	
		for ( i=0 ; i<nestedSort.length ; i++ )
		{
			srcCol = nestedSort[i][0];
			aDataSort = aoColumns[ srcCol ].aDataSort;
	
			for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
			{
				iCol = aDataSort[k];
				sType = aoColumns[ iCol ].sType || 'string';
	
				if ( nestedSort[i]._idx === undefined ) {
					nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
				}
	
				aSort.push( {
					src:       srcCol,
					col:       iCol,
					dir:       nestedSort[i][1],
					index:     nestedSort[i]._idx,
					type:      sType,
					formatter: DataTable.ext.type.order[ sType+"-pre" ]
				} );
			}
		}
	
		return aSort;
	}
	
	/**
	 * Change the order of the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 *  @todo This really needs split up!
	 */
	function _fnSort ( oSettings )
	{
		var
			i, ien, iLen, j, jLen, k, kLen,
			sDataType, nTh,
			aiOrig = [],
			oExtSort = DataTable.ext.type.order,
			aoData = oSettings.aoData,
			aoColumns = oSettings.aoColumns,
			aDataSort, data, iCol, sType, oSort,
			formatters = 0,
			sortCol,
			displayMaster = oSettings.aiDisplayMaster,
			aSort;
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo Can this be moved into a 'data-ready' handler which is called when
		//   data is going to be used in the table?
		_fnColumnTypes( oSettings );
	
		aSort = _fnSortFlatten( oSettings );
	
		for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
			sortCol = aSort[i];
	
			// Track if we can use the fast sort algorithm
			if ( sortCol.formatter ) {
				formatters++;
			}
	
			// Load the data needed for the sort, for each cell
			_fnSortData( oSettings, sortCol.col );
		}
	
		/* No sorting required if server-side or no sorting array */
		if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
		{
			// Create a value - key array of the current row positions such that we can use their
			// current position during the sort, if values match, in order to perform stable sorting
			for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
				aiOrig[ displayMaster[i] ] = i;
			}
	
			/* Do the sort - here we want multi-column sorting based on a given data source (column)
			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
			 * follow on it's own, but this is what we want (example two column sorting):
			 *  fnLocalSorting = function(a,b){
			 *    var iTest;
			 *    iTest = oSort['string-asc']('data11', 'data12');
			 *      if (iTest !== 0)
			 *        return iTest;
			 *    iTest = oSort['numeric-desc']('data21', 'data22');
			 *    if (iTest !== 0)
			 *      return iTest;
			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
			 *  }
			 * Basically we have a test for each sorting column, if the data in that column is equal,
			 * test the next column. If all columns match, then we use a numeric sort on the row
			 * positions in the original data array to provide a stable sort.
			 *
			 * Note - I know it seems excessive to have two sorting methods, but the first is around
			 * 15% faster, so the second is only maintained for backwards compatibility with sorting
			 * methods which do not have a pre-sort formatting function.
			 */
			if ( formatters === aSort.length ) {
				// All sort types have formatting functions
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, test, sort,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						test = x<y ? -1 : x>y ? 1 : 0;
						if ( test !== 0 ) {
							return sort.dir === 'asc' ? test : -test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
			else {
				// Depreciated - remove in 1.11 (providing a plug-in option)
				// Not all sort types have formatting methods, so we have to call their sorting
				// methods.
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, l, test, sort, fn,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
						test = fn( x, y );
						if ( test !== 0 ) {
							return test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
		}
	
		/* Tell the draw function that we have sorted the data */
		oSettings.bSorted = true;
	}
	
	
	function _fnSortAria ( settings )
	{
		var label;
		var nextSort;
		var columns = settings.aoColumns;
		var aSort = _fnSortFlatten( settings );
		var oAria = settings.oLanguage.oAria;
	
		// ARIA attributes - need to loop all columns, to update all (removing old
		// attributes as needed)
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			var col = columns[i];
			var asSorting = col.asSorting;
			var sTitle = col.sTitle.replace( /<.*?>/g, "" );
			var th = col.nTh;
	
			// IE7 is throwing an error when setting these properties with jQuery's
			// attr() and removeAttr() methods...
			th.removeAttribute('aria-sort');
	
			/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
			if ( col.bSortable ) {
				if ( aSort.length > 0 && aSort[0].col == i ) {
					th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
					nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
				}
				else {
					nextSort = asSorting[0];
				}
	
				label = sTitle + ( nextSort === "asc" ?
					oAria.sSortAscending :
					oAria.sSortDescending
				);
			}
			else {
				label = sTitle;
			}
	
			th.setAttribute('aria-label', label);
		}
	}
	
	
	/**
	 * Function to run on user sort request
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {boolean} [append=false] Append the requested sort to the existing
	 *    sort if true (i.e. multi-column sort)
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortListener ( settings, colIdx, append, callback )
	{
		var col = settings.aoColumns[ colIdx ];
		var sorting = settings.aaSorting;
		var asSorting = col.asSorting;
		var nextSortIdx;
		var next = function ( a, overflow ) {
			var idx = a._idx;
			if ( idx === undefined ) {
				idx = $.inArray( a[1], asSorting );
			}
	
			return idx+1 < asSorting.length ?
				idx+1 :
				overflow ?
					null :
					0;
		};
	
		// Convert to 2D array if needed
		if ( typeof sorting[0] === 'number' ) {
			sorting = settings.aaSorting = [ sorting ];
		}
	
		// If appending the sort then we are multi-column sorting
		if ( append && settings.oFeatures.bSortMulti ) {
			// Are we already doing some kind of sort on this column?
			var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
	
			if ( sortIdx !== -1 ) {
				// Yes, modify the sort
				nextSortIdx = next( sorting[sortIdx], true );
	
				if ( nextSortIdx === null && sorting.length === 1 ) {
					nextSortIdx = 0; // can't remove sorting completely
				}
	
				if ( nextSortIdx === null ) {
					sorting.splice( sortIdx, 1 );
				}
				else {
					sorting[sortIdx][1] = asSorting[ nextSortIdx ];
					sorting[sortIdx]._idx = nextSortIdx;
				}
			}
			else {
				// No sort on this column yet
				sorting.push( [ colIdx, asSorting[0], 0 ] );
				sorting[sorting.length-1]._idx = 0;
			}
		}
		else if ( sorting.length && sorting[0][0] == colIdx ) {
			// Single column - already sorting on this column, modify the sort
			nextSortIdx = next( sorting[0] );
	
			sorting.length = 1;
			sorting[0][1] = asSorting[ nextSortIdx ];
			sorting[0]._idx = nextSortIdx;
		}
		else {
			// Single column - sort only on this column
			sorting.length = 0;
			sorting.push( [ colIdx, asSorting[0] ] );
			sorting[0]._idx = 0;
		}
	
		// Run the sort by calling a full redraw
		_fnReDraw( settings );
	
		// callback used for async user interaction
		if ( typeof callback == 'function' ) {
			callback( settings );
		}
	}
	
	
	/**
	 * Attach a sort handler (click) to a node
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
	{
		var col = settings.aoColumns[ colIdx ];
	
		_fnBindAction( attachTo, {}, function (e) {
			/* If the column is not sortable - don't to anything */
			if ( col.bSortable === false ) {
				return;
			}
	
			// If processing is enabled use a timeout to allow the processing
			// display to be shown - otherwise to it synchronously
			if ( settings.oFeatures.bProcessing ) {
				_fnProcessingDisplay( settings, true );
	
				setTimeout( function() {
					_fnSortListener( settings, colIdx, e.shiftKey, callback );
	
					// In server-side processing, the draw callback will remove the
					// processing display
					if ( _fnDataSource( settings ) !== 'ssp' ) {
						_fnProcessingDisplay( settings, false );
					}
				}, 0 );
			}
			else {
				_fnSortListener( settings, colIdx, e.shiftKey, callback );
			}
		} );
	}
	
	
	/**
	 * Set the sorting classes on table's body, Note: it is safe to call this function
	 * when bSort and bSortClasses are false
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSortingClasses( settings )
	{
		var oldSort = settings.aLastSort;
		var sortClass = settings.oClasses.sSortColumn;
		var sort = _fnSortFlatten( settings );
		var features = settings.oFeatures;
		var i, ien, colIdx;
	
		if ( features.bSort && features.bSortClasses ) {
			// Remove old sorting classes
			for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
				colIdx = oldSort[i].src;
	
				// Remove column sorting
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.removeClass( sortClass + (i<2 ? i+1 : 3) );
			}
	
			// Add new column sorting
			for ( i=0, ien=sort.length ; i<ien ; i++ ) {
				colIdx = sort[i].src;
	
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.addClass( sortClass + (i<2 ? i+1 : 3) );
			}
		}
	
		settings.aLastSort = sort;
	}
	
	
	// Get the data to sort a column, be it from cache, fresh (populating the
	// cache), or from a sort formatter
	function _fnSortData( settings, idx )
	{
		// Custom sorting function - provided by the sort data type
		var column = settings.aoColumns[ idx ];
		var customSort = DataTable.ext.order[ column.sSortDataType ];
		var customData;
	
		if ( customSort ) {
			customData = customSort.call( settings.oInstance, settings, idx,
				_fnColumnIndexToVisible( settings, idx )
			);
		}
	
		// Use / populate cache
		var row, cellData;
		var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aSortData ) {
				row._aSortData = [];
			}
	
			if ( ! row._aSortData[idx] || customSort ) {
				cellData = customSort ?
					customData[i] : // If there was a custom sort function, use data from there
					_fnGetCellData( settings, i, idx, 'sort' );
	
				row._aSortData[ idx ] = formatter ?
					formatter( cellData ) :
					cellData;
			}
		}
	}
	
	
	
	/**
	 * Save the state of a table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSaveState ( settings )
	{
		if ( !settings.oFeatures.bStateSave || settings.bDestroying )
		{
			return;
		}
	
		/* Store the interesting variables */
		var state = {
			time:    +new Date(),
			start:   settings._iDisplayStart,
			length:  settings._iDisplayLength,
			order:   $.extend( true, [], settings.aaSorting ),
			search:  _fnSearchToCamel( settings.oPreviousSearch ),
			columns: $.map( settings.aoColumns, function ( col, i ) {
				return {
					visible: col.bVisible,
					search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
				};
			} )
		};
	
		_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
	
		settings.oSavedState = state;
		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
	}
	
	
	/**
	 * Attempt to load a saved table state
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oInit DataTables init object so we can override settings
	 *  @param {function} callback Callback to execute when the state has been loaded
	 *  @memberof DataTable#oApi
	 */
	function _fnLoadState ( settings, oInit, callback )
	{
		var i, ien;
		var columns = settings.aoColumns;
		var loaded = function ( s ) {
			if ( ! s || ! s.time ) {
				callback();
				return;
			}
	
			// Allow custom and plug-in manipulation functions to alter the saved data set and
			// cancelling of loading by returning false
			var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );
			if ( $.inArray( false, abStateLoad ) !== -1 ) {
				callback();
				return;
			}
	
			// Reject old data
			var duration = settings.iStateDuration;
			if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
				callback();
				return;
			}
	
			// Number of columns have changed - all bets are off, no restore of settings
			if ( s.columns && columns.length !== s.columns.length ) {
				callback();
				return;
			}
	
			// Store the saved state so it might be accessed at any time
			settings.oLoadedState = $.extend( true, {}, state );
	
			// Restore key features - todo - for 1.11 this needs to be done by
			// subscribed events
			if ( s.start !== undefined ) {
				settings._iDisplayStart    = s.start;
				settings.iInitDisplayStart = s.start;
			}
			if ( s.length !== undefined ) {
				settings._iDisplayLength   = s.length;
			}
	
			// Order
			if ( s.order !== undefined ) {
				settings.aaSorting = [];
				$.each( s.order, function ( i, col ) {
					settings.aaSorting.push( col[0] >= columns.length ?
						[ 0, col[1] ] :
						col
					);
				} );
			}
	
			// Search
			if ( s.search !== undefined ) {
				$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
			}
	
			// Columns
			// 
			if ( s.columns ) {
				for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
					var col = s.columns[i];
	
					// Visibility
					if ( col.visible !== undefined ) {
						columns[i].bVisible = col.visible;
					}
	
					// Search
					if ( col.search !== undefined ) {
						$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
					}
				}
			}
	
			_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );
			callback();
		}
	
		if ( ! settings.oFeatures.bStateSave ) {
			callback();
			return;
		}
	
		var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );
	
		if ( state !== undefined ) {
			loaded( state );
		}
		// otherwise, wait for the loaded callback to be executed
	}
	
	
	/**
	 * Return the settings object for a particular table
	 *  @param {node} table table we are using as a dataTable
	 *  @returns {object} Settings object - or null if not found
	 *  @memberof DataTable#oApi
	 */
	function _fnSettingsFromNode ( table )
	{
		var settings = DataTable.settings;
		var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
	
		return idx !== -1 ?
			settings[ idx ] :
			null;
	}
	
	
	/**
	 * Log an error message
	 *  @param {object} settings dataTables settings object
	 *  @param {int} level log error messages, or display them to the user
	 *  @param {string} msg error message
	 *  @param {int} tn Technical note id to get more information about the error.
	 *  @memberof DataTable#oApi
	 */
	function _fnLog( settings, level, msg, tn )
	{
		msg = 'DataTables warning: '+
			(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
	
		if ( tn ) {
			msg += '. For more information about this error, please see '+
			'http://datatables.net/tn/'+tn;
		}
	
		if ( ! level  ) {
			// Backwards compatibility pre 1.10
			var ext = DataTable.ext;
			var type = ext.sErrMode || ext.errMode;
	
			if ( settings ) {
				_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
			}
	
			if ( type == 'alert' ) {
				alert( msg );
			}
			else if ( type == 'throw' ) {
				throw new Error(msg);
			}
			else if ( typeof type == 'function' ) {
				type( settings, tn, msg );
			}
		}
		else if ( window.console && console.log ) {
			console.log( msg );
		}
	}
	
	
	/**
	 * See if a property is defined on one object, if so assign it to the other object
	 *  @param {object} ret target object
	 *  @param {object} src source object
	 *  @param {string} name property
	 *  @param {string} [mappedName] name to map too - optional, name used if not given
	 *  @memberof DataTable#oApi
	 */
	function _fnMap( ret, src, name, mappedName )
	{
		if ( $.isArray( name ) ) {
			$.each( name, function (i, val) {
				if ( $.isArray( val ) ) {
					_fnMap( ret, src, val[0], val[1] );
				}
				else {
					_fnMap( ret, src, val );
				}
			} );
	
			return;
		}
	
		if ( mappedName === undefined ) {
			mappedName = name;
		}
	
		if ( src[name] !== undefined ) {
			ret[mappedName] = src[name];
		}
	}
	
	
	/**
	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	 * shallow copy arrays. The reason we need to do this, is that we don't want to
	 * deep copy array init values (such as aaSorting) since the dev wouldn't be
	 * able to override them, but we do want to deep copy arrays.
	 *  @param {object} out Object to extend
	 *  @param {object} extender Object from which the properties will be applied to
	 *      out
	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	 *      independent copy with the exception of the `data` or `aaData` parameters
	 *      if they are present. This is so you can pass in a collection to
	 *      DataTables and have that used as your data source without breaking the
	 *      references
	 *  @returns {object} out Reference, just for convenience - out === the return.
	 *  @memberof DataTable#oApi
	 *  @todo This doesn't take account of arrays inside the deep copied objects.
	 */
	function _fnExtend( out, extender, breakRefs )
	{
		var val;
	
		for ( var prop in extender ) {
			if ( extender.hasOwnProperty(prop) ) {
				val = extender[prop];
	
				if ( $.isPlainObject( val ) ) {
					if ( ! $.isPlainObject( out[prop] ) ) {
						out[prop] = {};
					}
					$.extend( true, out[prop], val );
				}
				else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
					out[prop] = val.slice();
				}
				else {
					out[prop] = val;
				}
			}
		}
	
		return out;
	}
	
	
	/**
	 * Bind an event handers to allow a click or return key to activate the callback.
	 * This is good for accessibility since a return on the keyboard will have the
	 * same effect as a click, if the element has focus.
	 *  @param {element} n Element to bind the action to
	 *  @param {object} oData Data object to pass to the triggered function
	 *  @param {function} fn Callback function for when the event is triggered
	 *  @memberof DataTable#oApi
	 */
	function _fnBindAction( n, oData, fn )
	{
		$(n)
			.on( 'click.DT', oData, function (e) {
					n.blur(); // Remove focus outline for mouse users
					fn(e);
				} )
			.on( 'keypress.DT', oData, function (e){
					if ( e.which === 13 ) {
						e.preventDefault();
						fn(e);
					}
				} )
			.on( 'selectstart.DT', function () {
					/* Take the brutal approach to cancelling text selection */
					return false;
				} );
	}
	
	
	/**
	 * Register a callback function. Easily allows a callback function to be added to
	 * an array store of callback functions that can then all be called together.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	 *  @param {function} fn Function to be called back
	 *  @param {string} sName Identifying name for the callback (i.e. a label)
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackReg( oSettings, sStore, fn, sName )
	{
		if ( fn )
		{
			oSettings[sStore].push( {
				"fn": fn,
				"sName": sName
			} );
		}
	}
	
	
	/**
	 * Fire callback functions and trigger events. Note that the loop over the
	 * callback array store is done backwards! Further note that you do not want to
	 * fire off triggers in time sensitive applications (for example cell creation)
	 * as its slow.
	 *  @param {object} settings dataTables settings object
	 *  @param {string} callbackArr Name of the array storage for the callbacks in
	 *      oSettings
	 *  @param {string} eventName Name of the jQuery custom event to trigger. If
	 *      null no trigger is fired
	 *  @param {array} args Array of arguments to pass to the callback function /
	 *      trigger
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackFire( settings, callbackArr, eventName, args )
	{
		var ret = [];
	
		if ( callbackArr ) {
			ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
				return val.fn.apply( settings.oInstance, args );
			} );
		}
	
		if ( eventName !== null ) {
			var e = $.Event( eventName+'.dt' );
	
			$(settings.nTable).trigger( e, args );
	
			ret.push( e.result );
		}
	
		return ret;
	}
	
	
	function _fnLengthOverflow ( settings )
	{
		var
			start = settings._iDisplayStart,
			end = settings.fnDisplayEnd(),
			len = settings._iDisplayLength;
	
		/* If we have space to show extra rows (backing up from the end point - then do so */
		if ( start >= end )
		{
			start = end - len;
		}
	
		// Keep the start record on the current page
		start -= (start % len);
	
		if ( len === -1 || start < 0 )
		{
			start = 0;
		}
	
		settings._iDisplayStart = start;
	}
	
	
	function _fnRenderer( settings, type )
	{
		var renderer = settings.renderer;
		var host = DataTable.ext.renderer[type];
	
		if ( $.isPlainObject( renderer ) && renderer[type] ) {
			// Specific renderer for this type. If available use it, otherwise use
			// the default.
			return host[renderer[type]] || host._;
		}
		else if ( typeof renderer === 'string' ) {
			// Common renderer - if there is one available for this type use it,
			// otherwise use the default
			return host[renderer] || host._;
		}
	
		// Use the default
		return host._;
	}
	
	
	/**
	 * Detect the data source being used for the table. Used to simplify the code
	 * a little (ajax) and to make it compress a little smaller.
	 *
	 *  @param {object} settings dataTables settings object
	 *  @returns {string} Data source
	 *  @memberof DataTable#oApi
	 */
	function _fnDataSource ( settings )
	{
		if ( settings.oFeatures.bServerSide ) {
			return 'ssp';
		}
		else if ( settings.ajax || settings.sAjaxSource ) {
			return 'ajax';
		}
		return 'dom';
	}
	

	
	
	/**
	 * Computed structure of the DataTables API, defined by the options passed to
	 * `DataTable.Api.register()` when building the API.
	 *
	 * The structure is built in order to speed creation and extension of the Api
	 * objects since the extensions are effectively pre-parsed.
	 *
	 * The array is an array of objects with the following structure, where this
	 * base array represents the Api prototype base:
	 *
	 *     [
	 *       {
	 *         name:      'data'                -- string   - Property name
	 *         val:       function () {},       -- function - Api method (or undefined if just an object
	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	 *       },
	 *       {
	 *         name:     'row'
	 *         val:       {},
	 *         methodExt: [ ... ],
	 *         propExt:   [
	 *           {
	 *             name:      'data'
	 *             val:       function () {},
	 *             methodExt: [ ... ],
	 *             propExt:   [ ... ]
	 *           },
	 *           ...
	 *         ]
	 *       }
	 *     ]
	 *
	 * @type {Array}
	 * @ignore
	 */
	var __apiStruct = [];
	
	
	/**
	 * `Array.prototype` reference.
	 *
	 * @type object
	 * @ignore
	 */
	var __arrayProto = Array.prototype;
	
	
	/**
	 * Abstraction for `context` parameter of the `Api` constructor to allow it to
	 * take several different forms for ease of use.
	 *
	 * Each of the input parameter types will be converted to a DataTables settings
	 * object where possible.
	 *
	 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	 *   of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 *   * `DataTables.Api` - API instance
	 * @return {array|null} Matching DataTables settings objects. `null` or
	 *   `undefined` is returned if no matching DataTable is found.
	 * @ignore
	 */
	var _toSettings = function ( mixed )
	{
		var idx, jq;
		var settings = DataTable.settings;
		var tables = $.map( settings, function (el, i) {
			return el.nTable;
		} );
	
		if ( ! mixed ) {
			return [];
		}
		else if ( mixed.nTable && mixed.oApi ) {
			// DataTables settings object
			return [ mixed ];
		}
		else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
			// Table node
			idx = $.inArray( mixed, tables );
			return idx !== -1 ? [ settings[idx] ] : null;
		}
		else if ( mixed && typeof mixed.settings === 'function' ) {
			return mixed.settings().toArray();
		}
		else if ( typeof mixed === 'string' ) {
			// jQuery selector
			jq = $(mixed);
		}
		else if ( mixed instanceof $ ) {
			// jQuery object (also DataTables instance)
			jq = mixed;
		}
	
		if ( jq ) {
			return jq.map( function(i) {
				idx = $.inArray( this, tables );
				return idx !== -1 ? settings[idx] : null;
			} ).toArray();
		}
	};
	
	
	/**
	 * DataTables API class - used to control and interface with  one or more
	 * DataTables enhanced tables.
	 *
	 * The API class is heavily based on jQuery, presenting a chainable interface
	 * that you can use to interact with tables. Each instance of the API class has
	 * a "context" - i.e. the tables that it will operate on. This could be a single
	 * table, all tables on a page or a sub-set thereof.
	 *
	 * Additionally the API is designed to allow you to easily work with the data in
	 * the tables, retrieving and manipulating it as required. This is done by
	 * presenting the API class as an array like interface. The contents of the
	 * array depend upon the actions requested by each method (for example
	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	 * return an array of objects or arrays depending upon your table's
	 * configuration). The API object has a number of array like methods (`push`,
	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	 * `unique` etc) to assist your working with the data held in a table.
	 *
	 * Most methods (those which return an Api instance) are chainable, which means
	 * the return from a method call also has all of the methods available that the
	 * top level object had. For example, these two calls are equivalent:
	 *
	 *     // Not chained
	 *     api.row.add( {...} );
	 *     api.draw();
	 *
	 *     // Chained
	 *     api.row.add( {...} ).draw();
	 *
	 * @class DataTable.Api
	 * @param {array|object|string|jQuery} context DataTable identifier. This is
	 *   used to define which DataTables enhanced tables this API will operate on.
	 *   Can be one of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 * @param {array} [data] Data to initialise the Api instance with.
	 *
	 * @example
	 *   // Direct initialisation during DataTables construction
	 *   var api = $('#example').DataTable();
	 *
	 * @example
	 *   // Initialisation using a DataTables jQuery object
	 *   var api = $('#example').dataTable().api();
	 *
	 * @example
	 *   // Initialisation as a constructor
	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	 */
	_Api = function ( context, data )
	{
		if ( ! (this instanceof _Api) ) {
			return new _Api( context, data );
		}
	
		var settings = [];
		var ctxSettings = function ( o ) {
			var a = _toSettings( o );
			if ( a ) {
				settings = settings.concat( a );
			}
		};
	
		if ( $.isArray( context ) ) {
			for ( var i=0, ien=context.length ; i<ien ; i++ ) {
				ctxSettings( context[i] );
			}
		}
		else {
			ctxSettings( context );
		}
	
		// Remove duplicates
		this.context = _unique( settings );
	
		// Initial data
		if ( data ) {
			$.merge( this, data );
		}
	
		// selector
		this.selector = {
			rows: null,
			cols: null,
			opts: null
		};
	
		_Api.extend( this, this, __apiStruct );
	};
	
	DataTable.Api = _Api;
	
	// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
	// isPlainObject.
	$.extend( _Api.prototype, {
		any: function ()
		{
			return this.count() !== 0;
		},
	
	
		concat:  __arrayProto.concat,
	
	
		context: [], // array of table settings objects
	
	
		count: function ()
		{
			return this.flatten().length;
		},
	
	
		each: function ( fn )
		{
			for ( var i=0, ien=this.length ; i<ien; i++ ) {
				fn.call( this, this[i], i, this );
			}
	
			return this;
		},
	
	
		eq: function ( idx )
		{
			var ctx = this.context;
	
			return ctx.length > idx ?
				new _Api( ctx[idx], this[idx] ) :
				null;
		},
	
	
		filter: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.filter ) {
				a = __arrayProto.filter.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					if ( fn.call( this, this[i], i, this ) ) {
						a.push( this[i] );
					}
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		flatten: function ()
		{
			var a = [];
			return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
		},
	
	
		join:    __arrayProto.join,
	
	
		indexOf: __arrayProto.indexOf || function (obj, start)
		{
			for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
				if ( this[i] === obj ) {
					return i;
				}
			}
			return -1;
		},
	
		iterator: function ( flatten, type, fn, alwaysNew ) {
			var
				a = [], ret,
				i, ien, j, jen,
				context = this.context,
				rows, items, item,
				selector = this.selector;
	
			// Argument shifting
			if ( typeof flatten === 'string' ) {
				alwaysNew = fn;
				fn = type;
				type = flatten;
				flatten = false;
			}
	
			for ( i=0, ien=context.length ; i<ien ; i++ ) {
				var apiInst = new _Api( context[i] );
	
				if ( type === 'table' ) {
					ret = fn.call( apiInst, context[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'columns' || type === 'rows' ) {
					// this has same length as context - one entry for each table
					ret = fn.call( apiInst, context[i], this[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
					// columns and rows share the same structure.
					// 'this' is an array of column indexes for each context
					items = this[i];
	
					if ( type === 'column-rows' ) {
						rows = _selector_row_indexes( context[i], selector.opts );
					}
	
					for ( j=0, jen=items.length ; j<jen ; j++ ) {
						item = items[j];
	
						if ( type === 'cell' ) {
							ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
						}
						else {
							ret = fn.call( apiInst, context[i], item, i, j, rows );
						}
	
						if ( ret !== undefined ) {
							a.push( ret );
						}
					}
				}
			}
	
			if ( a.length || alwaysNew ) {
				var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
				var apiSelector = api.selector;
				apiSelector.rows = selector.rows;
				apiSelector.cols = selector.cols;
				apiSelector.opts = selector.opts;
				return api;
			}
			return this;
		},
	
	
		lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
		{
			// Bit cheeky...
			return this.indexOf.apply( this.toArray.reverse(), arguments );
		},
	
	
		length:  0,
	
	
		map: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.map ) {
				a = __arrayProto.map.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					a.push( fn.call( this, this[i], i ) );
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		pluck: function ( prop )
		{
			return this.map( function ( el ) {
				return el[ prop ];
			} );
		},
	
		pop:     __arrayProto.pop,
	
	
		push:    __arrayProto.push,
	
	
		// Does not return an API instance
		reduce: __arrayProto.reduce || function ( fn, init )
		{
			return _fnReduce( this, fn, init, 0, this.length, 1 );
		},
	
	
		reduceRight: __arrayProto.reduceRight || function ( fn, init )
		{
			return _fnReduce( this, fn, init, this.length-1, -1, -1 );
		},
	
	
		reverse: __arrayProto.reverse,
	
	
		// Object with rows, columns and opts
		selector: null,
	
	
		shift:   __arrayProto.shift,
	
	
		sort:    __arrayProto.sort, // ? name - order?
	
	
		splice:  __arrayProto.splice,
	
	
		toArray: function ()
		{
			return __arrayProto.slice.call( this );
		},
	
	
		to$: function ()
		{
			return $( this );
		},
	
	
		toJQuery: function ()
		{
			return $( this );
		},
	
	
		unique: function ()
		{
			return new _Api( this.context, _unique(this) );
		},
	
	
		unshift: __arrayProto.unshift
	} );
	
	
	_Api.extend = function ( scope, obj, ext )
	{
		// Only extend API instances and static properties of the API
		if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
			return;
		}
	
		var
			i, ien,
			j, jen,
			struct, inner,
			methodScoping = function ( scope, fn, struc ) {
				return function () {
					var ret = fn.apply( scope, arguments );
	
					// Method extension
					_Api.extend( ret, ret, struc.methodExt );
					return ret;
				};
			};
	
		for ( i=0, ien=ext.length ; i<ien ; i++ ) {
			struct = ext[i];
	
			// Value
			obj[ struct.name ] = typeof struct.val === 'function' ?
				methodScoping( scope, struct.val, struct ) :
				$.isPlainObject( struct.val ) ?
					{} :
					struct.val;
	
			obj[ struct.name ].__dt_wrapper = true;
	
			// Property extension
			_Api.extend( scope, obj[ struct.name ], struct.propExt );
		}
	};
	
	
	// @todo - Is there need for an augment function?
	// _Api.augment = function ( inst, name )
	// {
	// 	// Find src object in the structure from the name
	// 	var parts = name.split('.');
	
	// 	_Api.extend( inst, obj );
	// };
	
	
	//     [
	//       {
	//         name:      'data'                -- string   - Property name
	//         val:       function () {},       -- function - Api method (or undefined if just an object
	//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	//       },
	//       {
	//         name:     'row'
	//         val:       {},
	//         methodExt: [ ... ],
	//         propExt:   [
	//           {
	//             name:      'data'
	//             val:       function () {},
	//             methodExt: [ ... ],
	//             propExt:   [ ... ]
	//           },
	//           ...
	//         ]
	//       }
	//     ]
	
	_Api.register = _api_register = function ( name, val )
	{
		if ( $.isArray( name ) ) {
			for ( var j=0, jen=name.length ; j<jen ; j++ ) {
				_Api.register( name[j], val );
			}
			return;
		}
	
		var
			i, ien,
			heir = name.split('.'),
			struct = __apiStruct,
			key, method;
	
		var find = function ( src, name ) {
			for ( var i=0, ien=src.length ; i<ien ; i++ ) {
				if ( src[i].name === name ) {
					return src[i];
				}
			}
			return null;
		};
	
		for ( i=0, ien=heir.length ; i<ien ; i++ ) {
			method = heir[i].indexOf('()') !== -1;
			key = method ?
				heir[i].replace('()', '') :
				heir[i];
	
			var src = find( struct, key );
			if ( ! src ) {
				src = {
					name:      key,
					val:       {},
					methodExt: [],
					propExt:   []
				};
				struct.push( src );
			}
	
			if ( i === ien-1 ) {
				src.val = val;
			}
			else {
				struct = method ?
					src.methodExt :
					src.propExt;
			}
		}
	};
	
	
	_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
		_Api.register( pluralName, val );
	
		_Api.register( singularName, function () {
			var ret = val.apply( this, arguments );
	
			if ( ret === this ) {
				// Returned item is the API instance that was passed in, return it
				return this;
			}
			else if ( ret instanceof _Api ) {
				// New API instance returned, want the value from the first item
				// in the returned array for the singular result.
				return ret.length ?
					$.isArray( ret[0] ) ?
						new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
						ret[0] :
					undefined;
			}
	
			// Non-API return - just fire it back
			return ret;
		} );
	};
	
	
	/**
	 * Selector for HTML tables. Apply the given selector to the give array of
	 * DataTables settings objects.
	 *
	 * @param {string|integer} [selector] jQuery selector string or integer
	 * @param  {array} Array of DataTables settings objects to be filtered
	 * @return {array}
	 * @ignore
	 */
	var __table_selector = function ( selector, a )
	{
		// Integer is used to pick out a table by index
		if ( typeof selector === 'number' ) {
			return [ a[ selector ] ];
		}
	
		// Perform a jQuery selector on the table nodes
		var nodes = $.map( a, function (el, i) {
			return el.nTable;
		} );
	
		return $(nodes)
			.filter( selector )
			.map( function (i) {
				// Need to translate back from the table node to the settings
				var idx = $.inArray( this, nodes );
				return a[ idx ];
			} )
			.toArray();
	};
	
	
	
	/**
	 * Context selector for the API's context (i.e. the tables the API instance
	 * refers to.
	 *
	 * @name    DataTable.Api#tables
	 * @param {string|integer} [selector] Selector to pick which tables the iterator
	 *   should operate on. If not given, all tables in the current context are
	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	 *   select multiple tables or as an integer to select a single table.
	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	 */
	_api_register( 'tables()', function ( selector ) {
		// A new instance is created if there was a selector specified
		return selector ?
			new _Api( __table_selector( selector, this.context ) ) :
			this;
	} );
	
	
	_api_register( 'table()', function ( selector ) {
		var tables = this.tables( selector );
		var ctx = tables.context;
	
		// Truncate to the first matched table
		return ctx.length ?
			new _Api( ctx[0] ) :
			tables;
	} );
	
	
	_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTable;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().body()', 'table().body()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTBody;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().header()', 'table().header()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTHead;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTFoot;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTableWrapper;
		}, 1 );
	} );
	
	
	
	/**
	 * Redraw the tables in the current context.
	 */
	_api_register( 'draw()', function ( paging ) {
		return this.iterator( 'table', function ( settings ) {
			if ( paging === 'page' ) {
				_fnDraw( settings );
			}
			else {
				if ( typeof paging === 'string' ) {
					paging = paging === 'full-hold' ?
						false :
						true;
				}
	
				_fnReDraw( settings, paging===false );
			}
		} );
	} );
	
	
	
	/**
	 * Get the current page index.
	 *
	 * @return {integer} Current page index (zero based)
	 *//**
	 * Set the current page.
	 *
	 * Note that if you attempt to show a page which does not exist, DataTables will
	 * not throw an error, but rather reset the paging.
	 *
	 * @param {integer|string} action The paging action to take. This can be one of:
	 *  * `integer` - The page index to jump to
	 *  * `string` - An action to take:
	 *    * `first` - Jump to first page.
	 *    * `next` - Jump to the next page
	 *    * `previous` - Jump to previous page
	 *    * `last` - Jump to the last page.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page()', function ( action ) {
		if ( action === undefined ) {
			return this.page.info().page; // not an expensive call
		}
	
		// else, have an action to take on all tables
		return this.iterator( 'table', function ( settings ) {
			_fnPageChange( settings, action );
		} );
	} );
	
	
	/**
	 * Paging information for the first table in the current context.
	 *
	 * If you require paging information for another table, use the `table()` method
	 * with a suitable selector.
	 *
	 * @return {object} Object with the following properties set:
	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	 *  * `pages` - Total number of pages
	 *  * `start` - Display index for the first record shown on the current page
	 *  * `end` - Display index for the last record shown on the current page
	 *  * `length` - Display length (number of records). Note that generally `start
	 *    + length = end`, but this is not always true, for example if there are
	 *    only 2 records to show on the final page, with a length of 10.
	 *  * `recordsTotal` - Full data set length
	 *  * `recordsDisplay` - Data set length once the current filtering criterion
	 *    are applied.
	 */
	_api_register( 'page.info()', function ( action ) {
		if ( this.context.length === 0 ) {
			return undefined;
		}
	
		var
			settings   = this.context[0],
			start      = settings._iDisplayStart,
			len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
			visRecords = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return {
			"page":           all ? 0 : Math.floor( start / len ),
			"pages":          all ? 1 : Math.ceil( visRecords / len ),
			"start":          start,
			"end":            settings.fnDisplayEnd(),
			"length":         len,
			"recordsTotal":   settings.fnRecordsTotal(),
			"recordsDisplay": visRecords,
			"serverSide":     _fnDataSource( settings ) === 'ssp'
		};
	} );
	
	
	/**
	 * Get the current page length.
	 *
	 * @return {integer} Current page length. Note `-1` indicates that all records
	 *   are to be shown.
	 *//**
	 * Set the current page length.
	 *
	 * @param {integer} Page length to set. Use `-1` to show all records.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page.len()', function ( len ) {
		// Note that we can't call this function 'length()' because `length`
		// is a Javascript property of functions which defines how many arguments
		// the function expects.
		if ( len === undefined ) {
			return this.context.length !== 0 ?
				this.context[0]._iDisplayLength :
				undefined;
		}
	
		// else, set the page length
		return this.iterator( 'table', function ( settings ) {
			_fnLengthChange( settings, len );
		} );
	} );
	
	
	
	var __reload = function ( settings, holdPosition, callback ) {
		// Use the draw event to trigger a callback
		if ( callback ) {
			var api = new _Api( settings );
	
			api.one( 'draw', function () {
				callback( api.ajax.json() );
			} );
		}
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			_fnReDraw( settings, holdPosition );
		}
		else {
			_fnProcessingDisplay( settings, true );
	
			// Cancel an existing request
			var xhr = settings.jqXHR;
			if ( xhr && xhr.readyState !== 4 ) {
				xhr.abort();
			}
	
			// Trigger xhr
			_fnBuildAjax( settings, [], function( json ) {
				_fnClearTable( settings );
	
				var data = _fnAjaxDataSrc( settings, json );
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					_fnAddData( settings, data[i] );
				}
	
				_fnReDraw( settings, holdPosition );
				_fnProcessingDisplay( settings, false );
			} );
		}
	};
	
	
	/**
	 * Get the JSON response from the last Ajax request that DataTables made to the
	 * server. Note that this returns the JSON from the first table in the current
	 * context.
	 *
	 * @return {object} JSON received from the server.
	 */
	_api_register( 'ajax.json()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].json;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Get the data submitted in the last Ajax request
	 */
	_api_register( 'ajax.params()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].oAjaxData;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Reload tables from the Ajax data source. Note that this function will
	 * automatically re-draw the table when the remote data has been loaded.
	 *
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	 *   position. A full re-sort and re-filter is performed when this method is
	 *   called, which is why the pagination reset is the default action.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
		return this.iterator( 'table', function (settings) {
			__reload( settings, resetPaging===false, callback );
		} );
	} );
	
	
	/**
	 * Get the current Ajax URL. Note that this returns the URL from the first
	 * table in the current context.
	 *
	 * @return {string} Current Ajax source URL
	 *//**
	 * Set the Ajax URL. Note that this will set the URL for all tables in the
	 * current context.
	 *
	 * @param {string} url URL to set.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url()', function ( url ) {
		var ctx = this.context;
	
		if ( url === undefined ) {
			// get
			if ( ctx.length === 0 ) {
				return undefined;
			}
			ctx = ctx[0];
	
			return ctx.ajax ?
				$.isPlainObject( ctx.ajax ) ?
					ctx.ajax.url :
					ctx.ajax :
				ctx.sAjaxSource;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( $.isPlainObject( settings.ajax ) ) {
				settings.ajax.url = url;
			}
			else {
				settings.ajax = url;
			}
			// No need to consider sAjaxSource here since DataTables gives priority
			// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
			// value of `sAjaxSource` redundant.
		} );
	} );
	
	
	/**
	 * Load data from the newly set Ajax URL. Note that this method is only
	 * available when `ajax.url()` is used to set a URL. Additionally, this method
	 * has the same effect as calling `ajax.reload()` but is provided for
	 * convenience when setting a new URL. Like `ajax.reload()` it will
	 * automatically redraw the table once the remote data has been loaded.
	 *
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
		// Same as a reload, but makes sense to present it for easy access after a
		// url change
		return this.iterator( 'table', function ( ctx ) {
			__reload( ctx, resetPaging===false, callback );
		} );
	} );
	
	
	
	
	var _selector_run = function ( type, selector, selectFn, settings, opts )
	{
		var
			out = [], res,
			a, i, ien, j, jen,
			selectorType = typeof selector;
	
		// Can't just check for isArray here, as an API or jQuery instance might be
		// given with their array like look
		if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
			selector = [ selector ];
		}
	
		for ( i=0, ien=selector.length ; i<ien ; i++ ) {
			// Only split on simple strings - complex expressions will be jQuery selectors
			a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
				selector[i].split(',') :
				[ selector[i] ];
	
			for ( j=0, jen=a.length ; j<jen ; j++ ) {
				res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
	
				if ( res && res.length ) {
					out = out.concat( res );
				}
			}
		}
	
		// selector extensions
		var ext = _ext.selector[ type ];
		if ( ext.length ) {
			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
				out = ext[i]( settings, opts, out );
			}
		}
	
		return _unique( out );
	};
	
	
	var _selector_opts = function ( opts )
	{
		if ( ! opts ) {
			opts = {};
		}
	
		// Backwards compatibility for 1.9- which used the terminology filter rather
		// than search
		if ( opts.filter && opts.search === undefined ) {
			opts.search = opts.filter;
		}
	
		return $.extend( {
			search: 'none',
			order: 'current',
			page: 'all'
		}, opts );
	};
	
	
	var _selector_first = function ( inst )
	{
		// Reduce the API instance to the first item found
		for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
			if ( inst[i].length > 0 ) {
				// Assign the first element to the first item in the instance
				// and truncate the instance and context
				inst[0] = inst[i];
				inst[0].length = 1;
				inst.length = 1;
				inst.context = [ inst.context[i] ];
	
				return inst;
			}
		}
	
		// Not found - return an empty instance
		inst.length = 0;
		return inst;
	};
	
	
	var _selector_row_indexes = function ( settings, opts )
	{
		var
			i, ien, tmp, a=[],
			displayFiltered = settings.aiDisplay,
			displayMaster = settings.aiDisplayMaster;
	
		var
			search = opts.search,  // none, applied, removed
			order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
			page   = opts.page;    // all, current
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			// In server-side processing mode, most options are irrelevant since
			// rows not shown don't exist and the index order is the applied order
			// Removed is a special case - for consistency just return an empty
			// array
			return search === 'removed' ?
				[] :
				_range( 0, displayMaster.length );
		}
		else if ( page == 'current' ) {
			// Current page implies that order=current and fitler=applied, since it is
			// fairly senseless otherwise, regardless of what order and search actually
			// are
			for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
				a.push( displayFiltered[i] );
			}
		}
		else if ( order == 'current' || order == 'applied' ) {
			a = search == 'none' ?
				displayMaster.slice() :                      // no search
				search == 'applied' ?
					displayFiltered.slice() :                // applied search
					$.map( displayMaster, function (el, i) { // removed search
						return $.inArray( el, displayFiltered ) === -1 ? el : null;
					} );
		}
		else if ( order == 'index' || order == 'original' ) {
			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				if ( search == 'none' ) {
					a.push( i );
				}
				else { // applied | removed
					tmp = $.inArray( i, displayFiltered );
	
					if ((tmp === -1 && search == 'removed') ||
						(tmp >= 0   && search == 'applied') )
					{
						a.push( i );
					}
				}
			}
		}
	
		return a;
	};
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Rows
	 *
	 * {}          - no selector - use all available rows
	 * {integer}   - row aoData index
	 * {node}      - TR node
	 * {string}    - jQuery selector to apply to the TR elements
	 * {array}     - jQuery array of nodes, or simply an array of TR nodes
	 *
	 */
	
	
	var __row_selector = function ( settings, selector, opts )
	{
		var rows;
		var run = function ( sel ) {
			var selInt = _intVal( sel );
			var i, ien;
	
			// Short cut - selector is a number and no options provided (default is
			// all records, so no need to check if the index is in there, since it
			// must be - dev error if the index doesn't exist).
			if ( selInt !== null && ! opts ) {
				return [ selInt ];
			}
	
			if ( ! rows ) {
				rows = _selector_row_indexes( settings, opts );
			}
	
			if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
				// Selector - integer
				return [ selInt ];
			}
			else if ( sel === null || sel === undefined || sel === '' ) {
				// Selector - none
				return rows;
			}
	
			// Selector - function
			if ( typeof sel === 'function' ) {
				return $.map( rows, function (idx) {
					var row = settings.aoData[ idx ];
					return sel( idx, row._aData, row.nTr ) ? idx : null;
				} );
			}
	
			// Get nodes in the order from the `rows` array with null values removed
			var nodes = _removeEmpty(
				_pluck_order( settings.aoData, rows, 'nTr' )
			);
	
			// Selector - node
			if ( sel.nodeName ) {
				if ( sel._DT_RowIndex !== undefined ) {
					return [ sel._DT_RowIndex ]; // Property added by DT for fast lookup
				}
				else if ( sel._DT_CellIndex ) {
					return [ sel._DT_CellIndex.row ];
				}
				else {
					var host = $(sel).closest('*[data-dt-row]');
					return host.length ?
						[ host.data('dt-row') ] :
						[];
				}
			}
	
			// ID selector. Want to always be able to select rows by id, regardless
			// of if the tr element has been created or not, so can't rely upon
			// jQuery here - hence a custom implementation. This does not match
			// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
			// but to select it using a CSS selector engine (like Sizzle or
			// querySelect) it would need to need to be escaped for some characters.
			// DataTables simplifies this for row selectors since you can select
			// only a row. A # indicates an id any anything that follows is the id -
			// unescaped.
			if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
				// get row index from id
				var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
				if ( rowObj !== undefined ) {
					return [ rowObj.idx ];
				}
	
				// need to fall through to jQuery in case there is DOM id that
				// matches
			}
	
			// Selector - jQuery selector string, array of nodes or jQuery object/
			// As jQuery's .filter() allows jQuery objects to be passed in filter,
			// it also allows arrays, so this will cope with all three options
			return $(nodes)
				.filter( sel )
				.map( function () {
					return this._DT_RowIndex;
				} )
				.toArray();
		};
	
		return _selector_run( 'row', selector, run, settings, opts );
	};
	
	
	_api_register( 'rows()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __row_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in __row_selector?
		inst.selector.rows = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_register( 'rows().nodes()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return settings.aoData[ row ].nTr || undefined;
		}, 1 );
	} );
	
	_api_register( 'rows().data()', function () {
		return this.iterator( true, 'rows', function ( settings, rows ) {
			return _pluck_order( settings.aoData, rows, '_aData' );
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
		return this.iterator( 'row', function ( settings, row ) {
			var r = settings.aoData[ row ];
			return type === 'search' ? r._aFilterData : r._aSortData;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
		return this.iterator( 'row', function ( settings, row ) {
			_fnInvalidate( settings, row, src );
		} );
	} );
	
	_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return row;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
		var a = [];
		var context = this.context;
	
		// `iterator` will drop undefined values, but in this case we want them
		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
			for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
				var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
				a.push( (hash === true ? '#' : '' )+ id );
			}
		}
	
		return new _Api( context, a );
	} );
	
	_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
		var that = this;
	
		this.iterator( 'row', function ( settings, row, thatIdx ) {
			var data = settings.aoData;
			var rowData = data[ row ];
			var i, ien, j, jen;
			var loopRow, loopCells;
	
			data.splice( row, 1 );
	
			// Update the cached indexes
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				loopRow = data[i];
				loopCells = loopRow.anCells;
	
				// Rows
				if ( loopRow.nTr !== null ) {
					loopRow.nTr._DT_RowIndex = i;
				}
	
				// Cells
				if ( loopCells !== null ) {
					for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
						loopCells[j]._DT_CellIndex.row = i;
					}
				}
			}
	
			// Delete from the display arrays
			_fnDeleteIndex( settings.aiDisplayMaster, row );
			_fnDeleteIndex( settings.aiDisplay, row );
			_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
	
			// Check for an 'overflow' they case for displaying the table
			_fnLengthOverflow( settings );
	
			// Remove the row's ID reference if there is one
			var id = settings.rowIdFn( rowData._aData );
			if ( id !== undefined ) {
				delete settings.aIds[ id ];
			}
		} );
	
		this.iterator( 'table', function ( settings ) {
			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				settings.aoData[i].idx = i;
			}
		} );
	
		return this;
	} );
	
	
	_api_register( 'rows.add()', function ( rows ) {
		var newRows = this.iterator( 'table', function ( settings ) {
				var row, i, ien;
				var out = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
						out.push( _fnAddTr( settings, row )[0] );
					}
					else {
						out.push( _fnAddData( settings, row ) );
					}
				}
	
				return out;
			}, 1 );
	
		// Return an Api.rows() extended instance, so rows().nodes() etc can be used
		var modRows = this.rows( -1 );
		modRows.pop();
		$.merge( modRows, newRows );
	
		return modRows;
	} );
	
	
	
	
	
	/**
	 *
	 */
	_api_register( 'row()', function ( selector, opts ) {
		return _selector_first( this.rows( selector, opts ) );
	} );
	
	
	_api_register( 'row().data()', function ( data ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// Get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._aData :
				undefined;
		}
	
		// Set
		ctx[0].aoData[ this[0] ]._aData = data;
	
		// Automatically invalidate
		_fnInvalidate( ctx[0], this[0], 'data' );
	
		return this;
	} );
	
	
	_api_register( 'row().node()', function () {
		var ctx = this.context;
	
		return ctx.length && this.length ?
			ctx[0].aoData[ this[0] ].nTr || null :
			null;
	} );
	
	
	_api_register( 'row.add()', function ( row ) {
		// Allow a jQuery object to be passed in - only a single row is added from
		// it though - the first element in the set
		if ( row instanceof $ && row.length ) {
			row = row[0];
		}
	
		var rows = this.iterator( 'table', function ( settings ) {
			if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
				return _fnAddTr( settings, row )[0];
			}
			return _fnAddData( settings, row );
		} );
	
		// Return an Api.rows() extended instance, with the newly added row selected
		return this.row( rows[0] );
	} );
	
	
	
	var __details_add = function ( ctx, row, data, klass )
	{
		// Convert to array of TR elements
		var rows = [];
		var addRow = function ( r, k ) {
			// Recursion to allow for arrays of jQuery objects
			if ( $.isArray( r ) || r instanceof $ ) {
				for ( var i=0, ien=r.length ; i<ien ; i++ ) {
					addRow( r[i], k );
				}
				return;
			}
	
			// If we get a TR element, then just add it directly - up to the dev
			// to add the correct number of columns etc
			if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
				rows.push( r );
			}
			else {
				// Otherwise create a row with a wrapper
				var created = $('<tr><td/></tr>').addClass( k );
				$('td', created)
					.addClass( k )
					.html( r )
					[0].colSpan = _fnVisbleColumns( ctx );
	
				rows.push( created[0] );
			}
		};
	
		addRow( data, klass );
	
		if ( row._details ) {
			row._details.detach();
		}
	
		row._details = $(rows);
	
		// If the children were already shown, that state should be retained
		if ( row._detailsShow ) {
			row._details.insertAfter( row.nTr );
		}
	};
	
	
	var __details_remove = function ( api, idx )
	{
		var ctx = api.context;
	
		if ( ctx.length ) {
			var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
	
			if ( row && row._details ) {
				row._details.remove();
	
				row._detailsShow = undefined;
				row._details = undefined;
			}
		}
	};
	
	
	var __details_display = function ( api, show ) {
		var ctx = api.context;
	
		if ( ctx.length && api.length ) {
			var row = ctx[0].aoData[ api[0] ];
	
			if ( row._details ) {
				row._detailsShow = show;
	
				if ( show ) {
					row._details.insertAfter( row.nTr );
				}
				else {
					row._details.detach();
				}
	
				__details_events( ctx[0] );
			}
		}
	};
	
	
	var __details_events = function ( settings )
	{
		var api = new _Api( settings );
		var namespace = '.dt.DT_details';
		var drawEvent = 'draw'+namespace;
		var colvisEvent = 'column-visibility'+namespace;
		var destroyEvent = 'destroy'+namespace;
		var data = settings.aoData;
	
		api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
	
		if ( _pluck( data, '_details' ).length > 0 ) {
			// On each draw, insert the required elements into the document
			api.on( drawEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				api.rows( {page:'current'} ).eq(0).each( function (idx) {
					// Internal data grab
					var row = data[ idx ];
	
					if ( row._detailsShow ) {
						row._details.insertAfter( row.nTr );
					}
				} );
			} );
	
			// Column visibility change - update the colspan
			api.on( colvisEvent, function ( e, ctx, idx, vis ) {
				if ( settings !== ctx ) {
					return;
				}
	
				// Update the colspan for the details rows (note, only if it already has
				// a colspan)
				var row, visible = _fnVisbleColumns( ctx );
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					row = data[i];
	
					if ( row._details ) {
						row._details.children('td[colspan]').attr('colspan', visible );
					}
				}
			} );
	
			// Table destroyed - nuke any child rows
			api.on( destroyEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					if ( data[i]._details ) {
						__details_remove( api, i );
					}
				}
			} );
		}
	};
	
	// Strings for the method names to help minification
	var _emp = '';
	var _child_obj = _emp+'row().child';
	var _child_mth = _child_obj+'()';
	
	// data can be:
	//  tr
	//  string
	//  jQuery or array of any of the above
	_api_register( _child_mth, function ( data, klass ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._details :
				undefined;
		}
		else if ( data === true ) {
			// show
			this.child.show();
		}
		else if ( data === false ) {
			// remove
			__details_remove( this );
		}
		else if ( ctx.length && this.length ) {
			// set
			__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
		}
	
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.show()',
		_child_mth+'.show()' // only when `child()` was called with parameters (without
	], function ( show ) {   // it returns an object and this method is not executed)
		__details_display( this, true );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.hide()',
		_child_mth+'.hide()' // only when `child()` was called with parameters (without
	], function () {         // it returns an object and this method is not executed)
		__details_display( this, false );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.remove()',
		_child_mth+'.remove()' // only when `child()` was called with parameters (without
	], function () {           // it returns an object and this method is not executed)
		__details_remove( this );
		return this;
	} );
	
	
	_api_register( _child_obj+'.isShown()', function () {
		var ctx = this.context;
	
		if ( ctx.length && this.length ) {
			// _detailsShown as false or undefined will fall through to return false
			return ctx[0].aoData[ this[0] ]._detailsShow || false;
		}
		return false;
	} );
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Columns
	 *
	 * {integer}           - column index (>=0 count from left, <0 count from right)
	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	 * "{string}:name"     - column name
	 * "{string}"          - jQuery selector on column header nodes
	 *
	 */
	
	// can be an array of these items, comma separated list, or an array of comma
	// separated lists
	
	var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
	
	
	// r1 and r2 are redundant - but it means that the parameters match for the
	// iterator callback in columns().data()
	var __columnData = function ( settings, column, r1, r2, rows ) {
		var a = [];
		for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
			a.push( _fnGetCellData( settings, rows[row], column ) );
		}
		return a;
	};
	
	
	var __column_selector = function ( settings, selector, opts )
	{
		var
			columns = settings.aoColumns,
			names = _pluck( columns, 'sName' ),
			nodes = _pluck( columns, 'nTh' );
	
		var run = function ( s ) {
			var selInt = _intVal( s );
	
			// Selector - all
			if ( s === '' ) {
				return _range( columns.length );
			}
	
			// Selector - index
			if ( selInt !== null ) {
				return [ selInt >= 0 ?
					selInt : // Count from left
					columns.length + selInt // Count from right (+ because its a negative value)
				];
			}
	
			// Selector = function
			if ( typeof s === 'function' ) {
				var rows = _selector_row_indexes( settings, opts );
	
				return $.map( columns, function (col, idx) {
					return s(
							idx,
							__columnData( settings, idx, 0, 0, rows ),
							nodes[ idx ]
						) ? idx : null;
				} );
			}
	
			// jQuery or string selector
			var match = typeof s === 'string' ?
				s.match( __re_column_selector ) :
				'';
	
			if ( match ) {
				switch( match[2] ) {
					case 'visIdx':
					case 'visible':
						var idx = parseInt( match[1], 10 );
						// Visible index given, convert to column index
						if ( idx < 0 ) {
							// Counting from the right
							var visColumns = $.map( columns, function (col,i) {
								return col.bVisible ? i : null;
							} );
							return [ visColumns[ visColumns.length + idx ] ];
						}
						// Counting from the left
						return [ _fnVisibleToColumnIndex( settings, idx ) ];
	
					case 'name':
						// match by name. `names` is column index complete and in order
						return $.map( names, function (name, i) {
							return name === match[1] ? i : null;
						} );
	
					default:
						return [];
				}
			}
	
			// Cell in the table body
			if ( s.nodeName && s._DT_CellIndex ) {
				return [ s._DT_CellIndex.column ];
			}
	
			// jQuery selector on the TH elements for the columns
			var jqResult = $( nodes )
				.filter( s )
				.map( function () {
					return $.inArray( this, nodes ); // `nodes` is column index complete and in order
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise a node which might have a `dt-column` data attribute, or be
			// a child or such an element
			var host = $(s).closest('*[data-dt-column]');
			return host.length ?
				[ host.data('dt-column') ] :
				[];
		};
	
		return _selector_run( 'column', selector, run, settings, opts );
	};
	
	
	var __setColumnVis = function ( settings, column, vis ) {
		var
			cols = settings.aoColumns,
			col  = cols[ column ],
			data = settings.aoData,
			row, cells, i, ien, tr;
	
		// Get
		if ( vis === undefined ) {
			return col.bVisible;
		}
	
		// Set
		// No change
		if ( col.bVisible === vis ) {
			return;
		}
	
		if ( vis ) {
			// Insert column
			// Need to decide if we should use appendChild or insertBefore
			var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
	
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				tr = data[i].nTr;
				cells = data[i].anCells;
	
				if ( tr ) {
					// insertBefore can act like appendChild if 2nd arg is null
					tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
				}
			}
		}
		else {
			// Remove column
			$( _pluck( settings.aoData, 'anCells', column ) ).detach();
		}
	
		// Common actions
		col.bVisible = vis;
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		_fnSaveState( settings );
	};
	
	
	_api_register( 'columns()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __column_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in _row_selector?
		inst.selector.cols = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTh;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTf;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().data()', 'column().data()', function () {
		return this.iterator( 'column-rows', __columnData, 1 );
	} );
	
	_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].mData;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows,
				type === 'search' ? '_aFilterData' : '_aSortData', column
			);
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
		var ret = this.iterator( 'column', function ( settings, column ) {
			if ( vis === undefined ) {
				return settings.aoColumns[ column ].bVisible;
			} // else
			__setColumnVis( settings, column, vis );
		} );
	
		// Group the column visibility changes
		if ( vis !== undefined ) {
			// Second loop once the first is done for events
			this.iterator( 'column', function ( settings, column ) {
				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
			} );
	
			if ( calc === undefined || calc ) {
				this.columns.adjust();
			}
		}
	
		return ret;
	} );
	
	_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
		return this.iterator( 'column', function ( settings, column ) {
			return type === 'visible' ?
				_fnColumnIndexToVisible( settings, column ) :
				column;
		}, 1 );
	} );
	
	_api_register( 'columns.adjust()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnAdjustColumnSizing( settings );
		}, 1 );
	} );
	
	_api_register( 'column.index()', function ( type, idx ) {
		if ( this.context.length !== 0 ) {
			var ctx = this.context[0];
	
			if ( type === 'fromVisible' || type === 'toData' ) {
				return _fnVisibleToColumnIndex( ctx, idx );
			}
			else if ( type === 'fromData' || type === 'toVisible' ) {
				return _fnColumnIndexToVisible( ctx, idx );
			}
		}
	} );
	
	_api_register( 'column()', function ( selector, opts ) {
		return _selector_first( this.columns( selector, opts ) );
	} );
	
	
	
	var __cell_selector = function ( settings, selector, opts )
	{
		var data = settings.aoData;
		var rows = _selector_row_indexes( settings, opts );
		var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
		var allCells = $( [].concat.apply([], cells) );
		var row;
		var columns = settings.aoColumns.length;
		var a, i, ien, j, o, host;
	
		var run = function ( s ) {
			var fnSelector = typeof s === 'function';
	
			if ( s === null || s === undefined || fnSelector ) {
				// All cells and function selectors
				a = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					for ( j=0 ; j<columns ; j++ ) {
						o = {
							row: row,
							column: j
						};
	
						if ( fnSelector ) {
							// Selector - function
							host = data[ row ];
	
							if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
								a.push( o );
							}
						}
						else {
							// Selector - all
							a.push( o );
						}
					}
				}
	
				return a;
			}
			
			// Selector - index
			if ( $.isPlainObject( s ) ) {
				return [s];
			}
	
			// Selector - jQuery filtered cells
			var jqResult = allCells
				.filter( s )
				.map( function (i, el) {
					return { // use a new object, in case someone changes the values
						row:    el._DT_CellIndex.row,
						column: el._DT_CellIndex.column
	 				};
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise the selector is a node, and there is one last option - the
			// element might be a child of an element which has dt-row and dt-column
			// data attributes
			host = $(s).closest('*[data-dt-row]');
			return host.length ?
				[ {
					row: host.data('dt-row'),
					column: host.data('dt-column')
				} ] :
				[];
		};
	
		return _selector_run( 'cell', selector, run, settings, opts );
	};
	
	
	
	
	_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
		// Argument shifting
		if ( $.isPlainObject( rowSelector ) ) {
			// Indexes
			if ( rowSelector.row === undefined ) {
				// Selector options in first parameter
				opts = rowSelector;
				rowSelector = null;
			}
			else {
				// Cell index objects in first parameter
				opts = columnSelector;
				columnSelector = null;
			}
		}
		if ( $.isPlainObject( columnSelector ) ) {
			opts = columnSelector;
			columnSelector = null;
		}
	
		// Cell selector
		if ( columnSelector === null || columnSelector === undefined ) {
			return this.iterator( 'table', function ( settings ) {
				return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
			} );
		}
	
		// Row + column selector
		var columns = this.columns( columnSelector, opts );
		var rows = this.rows( rowSelector, opts );
		var a, i, ien, j, jen;
	
		var cells = this.iterator( 'table', function ( settings, idx ) {
			a = [];
	
			for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
				for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
					a.push( {
						row:    rows[idx][i],
						column: columns[idx][j]
					} );
				}
			}
	
			return a;
		}, 1 );
	
		$.extend( cells.selector, {
			cols: columnSelector,
			rows: rowSelector,
			opts: opts
		} );
	
		return cells;
	} );
	
	
	_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			var data = settings.aoData[ row ];
	
			return data && data.anCells ?
				data.anCells[ column ] :
				undefined;
		}, 1 );
	} );
	
	
	_api_register( 'cells().data()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
		type = type === 'search' ? '_aFilterData' : '_aSortData';
	
		return this.iterator( 'cell', function ( settings, row, column ) {
			return settings.aoData[ row ][ type ][ column ];
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column, type );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return {
				row: row,
				column: column,
				columnVisible: _fnColumnIndexToVisible( settings, column )
			};
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			_fnInvalidate( settings, row, src, column );
		} );
	} );
	
	
	
	_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
		return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
	} );
	
	
	_api_register( 'cell().data()', function ( data ) {
		var ctx = this.context;
		var cell = this[0];
	
		if ( data === undefined ) {
			// Get
			return ctx.length && cell.length ?
				_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
				undefined;
		}
	
		// Set
		_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
		_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
	
		return this;
	} );
	
	
	
	/**
	 * Get current ordering (sorting) that has been applied to the table.
	 *
	 * @returns {array} 2D array containing the sorting information for the first
	 *   table in the current context. Each element in the parent array represents
	 *   a column being sorted upon (i.e. multi-sorting with two columns would have
	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	 *   the column index that the sorting condition applies to, the second is the
	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	 *   index of the sorting order from the `column.sorting` initialisation array.
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {integer} order Column index to sort upon.
	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 1D array of sorting information to be applied.
	 * @param {array} [...] Optional additional sorting conditions
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 2D array of sorting information to be applied.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order()', function ( order, dir ) {
		var ctx = this.context;
	
		if ( order === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].aaSorting :
				undefined;
		}
	
		// set
		if ( typeof order === 'number' ) {
			// Simple column / direction passed in
			order = [ [ order, dir ] ];
		}
		else if ( order.length && ! $.isArray( order[0] ) ) {
			// Arguments passed in (list of 1D arrays)
			order = Array.prototype.slice.call( arguments );
		}
		// otherwise a 2D array was passed in
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSorting = order.slice();
		} );
	} );
	
	
	/**
	 * Attach a sort listener to an element for a given column
	 *
	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	 *   listener to. This can take the form of a single DOM node, a jQuery
	 *   collection of nodes or a jQuery selector which will identify the node(s).
	 * @param {integer} column the column that a click on this node will sort on
	 * @param {function} [callback] callback function when sort is run
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order.listener()', function ( node, column, callback ) {
		return this.iterator( 'table', function ( settings ) {
			_fnSortAttachListener( settings, node, column, callback );
		} );
	} );
	
	
	_api_register( 'order.fixed()', function ( set ) {
		if ( ! set ) {
			var ctx = this.context;
			var fixed = ctx.length ?
				ctx[0].aaSortingFixed :
				undefined;
	
			return $.isArray( fixed ) ?
				{ pre: fixed } :
				fixed;
		}
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSortingFixed = $.extend( true, {}, set );
		} );
	} );
	
	
	// Order by the selected column(s)
	_api_register( [
		'columns().order()',
		'column().order()'
	], function ( dir ) {
		var that = this;
	
		return this.iterator( 'table', function ( settings, i ) {
			var sort = [];
	
			$.each( that[i], function (j, col) {
				sort.push( [ col, dir ] );
			} );
	
			settings.aaSorting = sort;
		} );
	} );
	
	
	
	_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
		var ctx = this.context;
	
		if ( input === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].oPreviousSearch.sSearch :
				undefined;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( ! settings.oFeatures.bFilter ) {
				return;
			}
	
			_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
				"sSearch": input+"",
				"bRegex":  regex === null ? false : regex,
				"bSmart":  smart === null ? true  : smart,
				"bCaseInsensitive": caseInsen === null ? true : caseInsen
			} ), 1 );
		} );
	} );
	
	
	_api_registerPlural(
		'columns().search()',
		'column().search()',
		function ( input, regex, smart, caseInsen ) {
			return this.iterator( 'column', function ( settings, column ) {
				var preSearch = settings.aoPreSearchCols;
	
				if ( input === undefined ) {
					// get
					return preSearch[ column ].sSearch;
				}
	
				// set
				if ( ! settings.oFeatures.bFilter ) {
					return;
				}
	
				$.extend( preSearch[ column ], {
					"sSearch": input+"",
					"bRegex":  regex === null ? false : regex,
					"bSmart":  smart === null ? true  : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				} );
	
				_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
			} );
		}
	);
	
	/*
	 * State API methods
	 */
	
	_api_register( 'state()', function () {
		return this.context.length ?
			this.context[0].oSavedState :
			null;
	} );
	
	
	_api_register( 'state.clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			// Save an empty object
			settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
		} );
	} );
	
	
	_api_register( 'state.loaded()', function () {
		return this.context.length ?
			this.context[0].oLoadedState :
			null;
	} );
	
	
	_api_register( 'state.save()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnSaveState( settings );
		} );
	} );
	
	
	
	/**
	 * Provide a common method for plug-ins to check the version of DataTables being
	 * used, in order to ensure compatibility.
	 *
	 *  @param {string} version Version string to check for, in the format "X.Y.Z".
	 *    Note that the formats "X" and "X.Y" are also acceptable.
	 *  @returns {boolean} true if this version of DataTables is greater or equal to
	 *    the required version, or false if this version of DataTales is not
	 *    suitable
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	 */
	DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
	{
		var aThis = DataTable.version.split('.');
		var aThat = version.split('.');
		var iThis, iThat;
	
		for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
			iThis = parseInt( aThis[i], 10 ) || 0;
			iThat = parseInt( aThat[i], 10 ) || 0;
	
			// Parts are the same, keep comparing
			if (iThis === iThat) {
				continue;
			}
	
			// Parts are different, return immediately
			return iThis > iThat;
		}
	
		return true;
	};
	
	
	/**
	 * Check if a `<table>` node is a DataTable table already or not.
	 *
	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	 *      selector for the table to test. Note that if more than more than one
	 *      table is passed on, only the first will be checked
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	 *      $('#example').dataTable();
	 *    }
	 */
	DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
	{
		var t = $(table).get(0);
		var is = false;
	
		if ( table instanceof DataTable.Api ) {
			return true;
		}
	
		$.each( DataTable.settings, function (i, o) {
			var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
			var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
	
			if ( o.nTable === t || head === t || foot === t ) {
				is = true;
			}
		} );
	
		return is;
	};
	
	
	/**
	 * Get all DataTable tables that have been initialised - optionally you can
	 * select to get only currently visible tables.
	 *
	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	 *    or visible tables only.
	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	 *    DataTables
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    $.each( $.fn.dataTable.tables(true), function () {
	 *      $(table).DataTable().columns.adjust();
	 *    } );
	 */
	DataTable.tables = DataTable.fnTables = function ( visible )
	{
		var api = false;
	
		if ( $.isPlainObject( visible ) ) {
			api = visible.api;
			visible = visible.visible;
		}
	
		var a = $.map( DataTable.settings, function (o) {
			if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
				return o.nTable;
			}
		} );
	
		return api ?
			new _Api( a ) :
			a;
	};
	
	
	/**
	 * Convert from camel case parameters to Hungarian notation. This is made public
	 * for the extensions to provide the same ability as DataTables core to accept
	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	 * parameters.
	 *
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 */
	DataTable.camelToHungarian = _fnCamelToHungarian;
	
	
	
	/**
	 *
	 */
	_api_register( '$()', function ( selector, opts ) {
		var
			rows   = this.rows( opts ).nodes(), // Get all rows
			jqRows = $(rows);
	
		return $( [].concat(
			jqRows.filter( selector ).toArray(),
			jqRows.find( selector ).toArray()
		) );
	} );
	
	
	// jQuery functions to operate on the tables
	$.each( [ 'on', 'one', 'off' ], function (i, key) {
		_api_register( key+'()', function ( /* event, handler */ ) {
			var args = Array.prototype.slice.call(arguments);
	
			// Add the `dt` namespace automatically if it isn't already present
			args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
				return ! e.match(/\.dt\b/) ?
					e+'.dt' :
					e;
				} ).join( ' ' );
	
			var inst = $( this.tables().nodes() );
			inst[key].apply( inst, args );
			return this;
		} );
	} );
	
	
	_api_register( 'clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnClearTable( settings );
		} );
	} );
	
	
	_api_register( 'settings()', function () {
		return new _Api( this.context, this.context );
	} );
	
	
	_api_register( 'init()', function () {
		var ctx = this.context;
		return ctx.length ? ctx[0].oInit : null;
	} );
	
	
	_api_register( 'data()', function () {
		return this.iterator( 'table', function ( settings ) {
			return _pluck( settings.aoData, '_aData' );
		} ).flatten();
	} );
	
	
	_api_register( 'destroy()', function ( remove ) {
		remove = remove || false;
	
		return this.iterator( 'table', function ( settings ) {
			var orig      = settings.nTableWrapper.parentNode;
			var classes   = settings.oClasses;
			var table     = settings.nTable;
			var tbody     = settings.nTBody;
			var thead     = settings.nTHead;
			var tfoot     = settings.nTFoot;
			var jqTable   = $(table);
			var jqTbody   = $(tbody);
			var jqWrapper = $(settings.nTableWrapper);
			var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
			var i, ien;
	
			// Flag to note that the table is currently being destroyed - no action
			// should be taken
			settings.bDestroying = true;
	
			// Fire off the destroy callbacks for plug-ins etc
			_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
	
			// If not being removed from the document, make all columns visible
			if ( ! remove ) {
				new _Api( settings ).columns().visible( true );
			}
	
			// Blitz all `DT` namespaced events (these are internal events, the
			// lowercase, `dt` events are user subscribed and they are responsible
			// for removing them
			jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
			$(window).off('.DT-'+settings.sInstance);
	
			// When scrolling we had to break the table up - restore it
			if ( table != thead.parentNode ) {
				jqTable.children('thead').detach();
				jqTable.append( thead );
			}
	
			if ( tfoot && table != tfoot.parentNode ) {
				jqTable.children('tfoot').detach();
				jqTable.append( tfoot );
			}
	
			settings.aaSorting = [];
			settings.aaSortingFixed = [];
			_fnSortingClasses( settings );
	
			$( rows ).removeClass( settings.asStripeClasses.join(' ') );
	
			$('th, td', thead).removeClass( classes.sSortable+' '+
				classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
			);
	
			if ( settings.bJUI ) {
				$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();
				$('th, td', thead).each( function () {
					var wrapper = $('div.'+classes.sSortJUIWrapper, this);
					$(this).append( wrapper.contents() );
					wrapper.detach();
				} );
			}
	
			// Add the TR elements back into the table in their original order
			jqTbody.children().detach();
			jqTbody.append( rows );
	
			// Remove the DataTables generated nodes, events and classes
			var removedMethod = remove ? 'remove' : 'detach';
			jqTable[ removedMethod ]();
			jqWrapper[ removedMethod ]();
	
			// If we need to reattach the table to the document
			if ( ! remove && orig ) {
				// insertBefore acts like appendChild if !arg[1]
				orig.insertBefore( table, settings.nTableReinsertBefore );
	
				// Restore the width of the original table - was read from the style property,
				// so we can restore directly to that
				jqTable
					.css( 'width', settings.sDestroyWidth )
					.removeClass( classes.sTable );
	
				// If the were originally stripe classes - then we add them back here.
				// Note this is not fool proof (for example if not all rows had stripe
				// classes - but it's a good effort without getting carried away
				ien = settings.asDestroyStripes.length;
	
				if ( ien ) {
					jqTbody.children().each( function (i) {
						$(this).addClass( settings.asDestroyStripes[i % ien] );
					} );
				}
			}
	
			/* Remove the settings object from the settings array */
			var idx = $.inArray( settings, DataTable.settings );
			if ( idx !== -1 ) {
				DataTable.settings.splice( idx, 1 );
			}
		} );
	} );
	
	
	// Add the `every()` method for rows, columns and cells in a compact form
	$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
		_api_register( type+'s().every()', function ( fn ) {
			var opts = this.selector.opts;
			var api = this;
	
			return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
				// Rows and columns:
				//  arg1 - index
				//  arg2 - table counter
				//  arg3 - loop counter
				//  arg4 - undefined
				// Cells:
				//  arg1 - row index
				//  arg2 - column index
				//  arg3 - table counter
				//  arg4 - loop counter
				fn.call(
					api[ type ](
						arg1,
						type==='cell' ? arg2 : opts,
						type==='cell' ? opts : undefined
					),
					arg1, arg2, arg3, arg4
				);
			} );
		} );
	} );
	
	
	// i18n method for extensions to be able to use the language object from the
	// DataTable
	_api_register( 'i18n()', function ( token, def, plural ) {
		var ctx = this.context[0];
		var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
	
		if ( resolved === undefined ) {
			resolved = def;
		}
	
		if ( plural !== undefined && $.isPlainObject( resolved ) ) {
			resolved = resolved[ plural ] !== undefined ?
				resolved[ plural ] :
				resolved._;
		}
	
		return resolved.replace( '%d', plural ); // nb: plural might be undefined,
	} );

	/**
	 * Version string for plug-ins to check compatibility. Allowed format is
	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	 * only for non-release builds. See http://semver.org/ for more information.
	 *  @member
	 *  @type string
	 *  @default Version number
	 */
	DataTable.version = "1.10.13";

	/**
	 * Private data store, containing all of the settings objects that are
	 * created for the tables on a given page.
	 *
	 * Note that the `DataTable.settings` object is aliased to
	 * `jQuery.fn.dataTableExt` through which it may be accessed and
	 * manipulated, or `jQuery.fn.dataTable.settings`.
	 *  @member
	 *  @type array
	 *  @default []
	 *  @private
	 */
	DataTable.settings = [];

	/**
	 * Object models container, for the various models that DataTables has
	 * available to it. These models define the objects that are used to hold
	 * the active state and configuration of the table.
	 *  @namespace
	 */
	DataTable.models = {};
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * search information for the global filter and individual column filters.
	 *  @namespace
	 */
	DataTable.models.oSearch = {
		/**
		 * Flag to indicate if the filtering should be case insensitive or not
		 *  @type boolean
		 *  @default true
		 */
		"bCaseInsensitive": true,
	
		/**
		 * Applied search term
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sSearch": "",
	
		/**
		 * Flag to indicate if the search term should be interpreted as a
		 * regular expression (true) or not (false) and therefore and special
		 * regex characters escaped.
		 *  @type boolean
		 *  @default false
		 */
		"bRegex": false,
	
		/**
		 * Flag to indicate if DataTables is to use its smart filtering or not.
		 *  @type boolean
		 *  @default true
		 */
		"bSmart": true
	};
	
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * each individual row. This is the object format used for the settings
	 * aoData array.
	 *  @namespace
	 */
	DataTable.models.oRow = {
		/**
		 * TR element for the row
		 *  @type node
		 *  @default null
		 */
		"nTr": null,
	
		/**
		 * Array of TD elements for each row. This is null until the row has been
		 * created.
		 *  @type array nodes
		 *  @default []
		 */
		"anCells": null,
	
		/**
		 * Data object from the original data source for the row. This is either
		 * an array if using the traditional form of DataTables, or an object if
		 * using mData options. The exact type will depend on the passed in
		 * data from the data source, or will be an array if using DOM a data
		 * source.
		 *  @type array|object
		 *  @default []
		 */
		"_aData": [],
	
		/**
		 * Sorting data cache - this array is ostensibly the same length as the
		 * number of columns (although each index is generated only as it is
		 * needed), and holds the data that is used for sorting each column in the
		 * row. We do this cache generation at the start of the sort in order that
		 * the formatting of the sort data need be done only once for each cell
		 * per sort. This array should not be read from or written to by anything
		 * other than the master sorting methods.
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aSortData": null,
	
		/**
		 * Per cell filtering data cache. As per the sort data cache, used to
		 * increase the performance of the filtering in DataTables
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aFilterData": null,
	
		/**
		 * Filtering data cache. This is the same as the cell filtering cache, but
		 * in this case a string rather than an array. This is easily computed with
		 * a join on `_aFilterData`, but is provided as a cache so the join isn't
		 * needed on every search (memory traded for performance)
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_sFilterRow": null,
	
		/**
		 * Cache of the class name that DataTables has applied to the row, so we
		 * can quickly look at this variable rather than needing to do a DOM check
		 * on className for the nTr property.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *  @private
		 */
		"_sRowStripe": "",
	
		/**
		 * Denote if the original data source was from the DOM, or the data source
		 * object. This is used for invalidating data, so DataTables can
		 * automatically read data from the original source, unless uninstructed
		 * otherwise.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"src": null,
	
		/**
		 * Index in the aoData array. This saves an indexOf lookup when we have the
		 * object, but want to know the index
		 *  @type integer
		 *  @default -1
		 *  @private
		 */
		"idx": -1
	};
	
	
	/**
	 * Template object for the column information object in DataTables. This object
	 * is held in the settings aoColumns array and contains all the information that
	 * DataTables needs about each individual column.
	 *
	 * Note that this object is related to {@link DataTable.defaults.column}
	 * but this one is the internal data store for DataTables's cache of columns.
	 * It should NOT be manipulated outside of DataTables. Any configuration should
	 * be done through the initialisation options.
	 *  @namespace
	 */
	DataTable.models.oColumn = {
		/**
		 * Column index. This could be worked out on-the-fly with $.inArray, but it
		 * is faster to just hold it as a variable
		 *  @type integer
		 *  @default null
		 */
		"idx": null,
	
		/**
		 * A list of the columns that sorting should occur on when this column
		 * is sorted. That this property is an array allows multi-column sorting
		 * to be defined for a column (for example first name / last name columns
		 * would benefit from this). The values are integers pointing to the
		 * columns to be sorted on (typically it will be a single integer pointing
		 * at itself, but that doesn't need to be the case).
		 *  @type array
		 */
		"aDataSort": null,
	
		/**
		 * Define the sorting directions that are applied to the column, in sequence
		 * as the column is repeatedly sorted upon - i.e. the first value is used
		 * as the sorting direction when the column if first sorted (clicked on).
		 * Sort it again (click again) and it will move on to the next index.
		 * Repeat until loop.
		 *  @type array
		 */
		"asSorting": null,
	
		/**
		 * Flag to indicate if the column is searchable, and thus should be included
		 * in the filtering or not.
		 *  @type boolean
		 */
		"bSearchable": null,
	
		/**
		 * Flag to indicate if the column is sortable or not.
		 *  @type boolean
		 */
		"bSortable": null,
	
		/**
		 * Flag to indicate if the column is currently visible in the table or not
		 *  @type boolean
		 */
		"bVisible": null,
	
		/**
		 * Store for manual type assignment using the `column.type` option. This
		 * is held in store so we can manipulate the column's `sType` property.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"_sManualType": null,
	
		/**
		 * Flag to indicate if HTML5 data attributes should be used as the data
		 * source for filtering or sorting. True is either are.
		 *  @type boolean
		 *  @default false
		 *  @private
		 */
		"_bAttrSrc": false,
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} nTd The TD node that has been created
		 *  @param {*} sData The Data for the cell
		 *  @param {array|object} oData The data for the whole row
		 *  @param {int} iRow The row index for the aoData data store
		 *  @default null
		 */
		"fnCreatedCell": null,
	
		/**
		 * Function to get data from a cell in a column. You should <b>never</b>
		 * access data directly through _aData internally in DataTables - always use
		 * the method attached to this property. It allows mData to function as
		 * required. This function is automatically assigned by the column
		 * initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {string} sSpecific The specific data type you want to get -
		 *    'display', 'type' 'filter' 'sort'
		 *  @returns {*} The data for the cell from the given row's data
		 *  @default null
		 */
		"fnGetData": null,
	
		/**
		 * Function to set data for a cell in the column. You should <b>never</b>
		 * set the data directly to _aData internally in DataTables - always use
		 * this method. It allows mData to function as required. This function
		 * is automatically assigned by the column initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {*} sValue Value to set
		 *  @default null
		 */
		"fnSetData": null,
	
		/**
		 * Property to read the value for the cells in the column from the data
		 * source array / object. If null, then the default content is used, if a
		 * function is given then the return from the function is used.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mData": null,
	
		/**
		 * Partner property to mData which is used (only when defined) to get
		 * the data - i.e. it is basically the same as mData, but without the
		 * 'set' option, and also the data fed to it is the result from mData.
		 * This is the rendering method to match the data method of mData.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mRender": null,
	
		/**
		 * Unique header TH/TD element for this column - this is what the sorting
		 * listener is attached to (if sorting is enabled.)
		 *  @type node
		 *  @default null
		 */
		"nTh": null,
	
		/**
		 * Unique footer TH/TD element for this column (if there is one). Not used
		 * in DataTables as such, but can be used for plug-ins to reference the
		 * footer for each column.
		 *  @type node
		 *  @default null
		 */
		"nTf": null,
	
		/**
		 * The class to apply to all TD elements in the table's TBODY for the column
		 *  @type string
		 *  @default null
		 */
		"sClass": null,
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 *  @type string
		 */
		"sContentPadding": null,
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because mData
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 */
		"sDefaultContent": null,
	
		/**
		 * Name for the column, allowing reference to the column by name as well as
		 * by index (needs a lookup to work by name).
		 *  @type string
		 */
		"sName": null,
	
		/**
		 * Custom sorting data type - defines which of the available plug-ins in
		 * afnSortData the custom sorting will use - if any is defined.
		 *  @type string
		 *  @default std
		 */
		"sSortDataType": 'std',
	
		/**
		 * Class to be applied to the header element when sorting on this column
		 *  @type string
		 *  @default null
		 */
		"sSortingClass": null,
	
		/**
		 * Class to be applied to the header element when sorting on this column -
		 * when jQuery UI theming is used.
		 *  @type string
		 *  @default null
		 */
		"sSortingClassJUI": null,
	
		/**
		 * Title of the column - what is seen in the TH element (nTh).
		 *  @type string
		 */
		"sTitle": null,
	
		/**
		 * Column sorting and filtering type
		 *  @type string
		 *  @default null
		 */
		"sType": null,
	
		/**
		 * Width of the column
		 *  @type string
		 *  @default null
		 */
		"sWidth": null,
	
		/**
		 * Width of the column when it was first "encountered"
		 *  @type string
		 *  @default null
		 */
		"sWidthOrig": null
	};
	
	
	/*
	 * Developer note: The properties of the object below are given in Hungarian
	 * notation, that was used as the interface for DataTables prior to v1.10, however
	 * from v1.10 onwards the primary interface is camel case. In order to avoid
	 * breaking backwards compatibility utterly with this change, the Hungarian
	 * version is still, internally the primary interface, but is is not documented
	 * - hence the @name tags in each doc comment. This allows a Javascript function
	 * to create a map from Hungarian notation to camel case (going the other direction
	 * would require each property to be listed, which would at around 3K to the size
	 * of DataTables, while this method is about a 0.5K hit.
	 *
	 * Ultimately this does pave the way for Hungarian notation to be dropped
	 * completely, but that is a massive amount of work and will break current
	 * installs (therefore is on-hold until v2).
	 */
	
	/**
	 * Initialisation options that can be given to DataTables at initialisation
	 * time.
	 *  @namespace
	 */
	DataTable.defaults = {
		/**
		 * An array of data to use for the table, passed in at initialisation which
		 * will be used in preference to any data which is already in the DOM. This is
		 * particularly useful for constructing tables purely in Javascript, for
		 * example with a custom Ajax call.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.data
		 *
		 *  @example
		 *    // Using a 2D array data source
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine" },
		 *          { "title": "Browser" },
		 *          { "title": "Platform" },
		 *          { "title": "Version" },
		 *          { "title": "Grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using an array of objects as a data source (`data`)
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 4.0",
		 *            "platform": "Win 95+",
		 *            "version":  4,
		 *            "grade":    "X"
		 *          },
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 5.0",
		 *            "platform": "Win 95+",
		 *            "version":  5,
		 *            "grade":    "C"
		 *          }
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine",   "data": "engine" },
		 *          { "title": "Browser",  "data": "browser" },
		 *          { "title": "Platform", "data": "platform" },
		 *          { "title": "Version",  "data": "version" },
		 *          { "title": "Grade",    "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"aaData": null,
	
	
		/**
		 * If ordering is enabled, then DataTables will perform a first pass sort on
		 * initialisation. You can define which column(s) the sort is performed
		 * upon, and the sorting direction, with this variable. The `sorting` array
		 * should contain an array for each column to be sorted initially containing
		 * the column's index and a direction string ('asc' or 'desc').
		 *  @type array
		 *  @default [[0,'asc']]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.order
		 *
		 *  @example
		 *    // Sort by 3rd column first, and then 4th column
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": [[2,'asc'], [3,'desc']]
		 *      } );
		 *    } );
		 *
		 *    // No initial sorting
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": []
		 *      } );
		 *    } );
		 */
		"aaSorting": [[0,'asc']],
	
	
		/**
		 * This parameter is basically identical to the `sorting` parameter, but
		 * cannot be overridden by user interaction with the table. What this means
		 * is that you could have a column (visible or hidden) which the sorting
		 * will always be forced on first - any sorting after that (from the user)
		 * will then be performed as required. This can be useful for grouping rows
		 * together.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.orderFixed
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderFixed": [[0,'asc']]
		 *      } );
		 *    } )
		 */
		"aaSortingFixed": [],
	
	
		/**
		 * DataTables can be instructed to load data to display in the table from a
		 * Ajax source. This option defines how that Ajax call is made and where to.
		 *
		 * The `ajax` property has three different modes of operation, depending on
		 * how it is defined. These are:
		 *
		 * * `string` - Set the URL from where the data should be loaded from.
		 * * `object` - Define properties for `jQuery.ajax`.
		 * * `function` - Custom data get function
		 *
		 * `string`
		 * --------
		 *
		 * As a string, the `ajax` property simply defines the URL from which
		 * DataTables will load data.
		 *
		 * `object`
		 * --------
		 *
		 * As an object, the parameters in the object are passed to
		 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
		 * of the Ajax request. DataTables has a number of default parameters which
		 * you can override using this option. Please refer to the jQuery
		 * documentation for a full description of the options available, although
		 * the following parameters provide additional options in DataTables or
		 * require special consideration:
		 *
		 * * `data` - As with jQuery, `data` can be provided as an object, but it
		 *   can also be used as a function to manipulate the data DataTables sends
		 *   to the server. The function takes a single parameter, an object of
		 *   parameters with the values that DataTables has readied for sending. An
		 *   object may be returned which will be merged into the DataTables
		 *   defaults, or you can add the items to the object that was passed in and
		 *   not return anything from the function. This supersedes `fnServerParams`
		 *   from DataTables 1.9-.
		 *
		 * * `dataSrc` - By default DataTables will look for the property `data` (or
		 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
		 *   from an Ajax source or for server-side processing - this parameter
		 *   allows that property to be changed. You can use Javascript dotted
		 *   object notation to get a data source for multiple levels of nesting, or
		 *   it my be used as a function. As a function it takes a single parameter,
		 *   the JSON returned from the server, which can be manipulated as
		 *   required, with the returned value being that used by DataTables as the
		 *   data source for the table. This supersedes `sAjaxDataProp` from
		 *   DataTables 1.9-.
		 *
		 * * `success` - Should not be overridden it is used internally in
		 *   DataTables. To manipulate / transform the data returned by the server
		 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
		 *
		 * `function`
		 * ----------
		 *
		 * As a function, making the Ajax call is left up to yourself allowing
		 * complete control of the Ajax request. Indeed, if desired, a method other
		 * than Ajax could be used to obtain the required data, such as Web storage
		 * or an AIR database.
		 *
		 * The function is given four parameters and no return is required. The
		 * parameters are:
		 *
		 * 1. _object_ - Data to send to the server
		 * 2. _function_ - Callback function that must be executed when the required
		 *    data has been obtained. That data should be passed into the callback
		 *    as the only parameter
		 * 3. _object_ - DataTables settings object for the table
		 *
		 * Note that this supersedes `fnServerData` from DataTables 1.9-.
		 *
		 *  @type string|object|function
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.ajax
		 *  @since 1.10.0
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax.
		 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
		 *   $('#example').dataTable( {
		 *     "ajax": "data.json"
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
		 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": "tableData"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
		 *   // from a plain array rather than an array in an object
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": ""
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Manipulate the data returned from the server - add a link to data
		 *   // (note this can, should, be done using `render` for the column - this
		 *   // is just a simple example of how the data can be manipulated).
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": function ( json ) {
		 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
		 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
		 *         }
		 *         return json;
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Add data to the request
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "data": function ( d ) {
		 *         return {
		 *           "extra_search": $('#extra').val()
		 *         };
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Send request as POST
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "type": "POST"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get the data from localStorage (could interface with a form for
		 *   // adding, editing and removing rows).
		 *   $('#example').dataTable( {
		 *     "ajax": function (data, callback, settings) {
		 *       callback(
		 *         JSON.parse( localStorage.getItem('dataTablesData') )
		 *       );
		 *     }
		 *   } );
		 */
		"ajax": null,
	
	
		/**
		 * This parameter allows you to readily specify the entries in the length drop
		 * down menu that DataTables shows when pagination is enabled. It can be
		 * either a 1D array of options which will be used for both the displayed
		 * option and the value, or a 2D array which will use the array in the first
		 * position as the value, and the array in the second position as the
		 * displayed options (useful for language strings such as 'All').
		 *
		 * Note that the `pageLength` property will be automatically set to the
		 * first value given in this array, unless `pageLength` is also provided.
		 *  @type array
		 *  @default [ 10, 25, 50, 100 ]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.lengthMenu
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
		 *      } );
		 *    } );
		 */
		"aLengthMenu": [ 10, 25, 50, 100 ],
	
	
		/**
		 * The `columns` option in the initialisation parameter allows you to define
		 * details about the way individual columns behave. For a full list of
		 * column options that can be set, please see
		 * {@link DataTable.defaults.column}. Note that if you use `columns` to
		 * define your columns, you must have an entry in the array for every single
		 * column that you have in your table (these can be null if you don't which
		 * to specify any options).
		 *  @member
		 *
		 *  @name DataTable.defaults.column
		 */
		"aoColumns": null,
	
		/**
		 * Very similar to `columns`, `columnDefs` allows you to target a specific
		 * column, multiple columns, or all columns, using the `targets` property of
		 * each object in the array. This allows great flexibility when creating
		 * tables, as the `columnDefs` arrays can be of any length, targeting the
		 * columns you specifically want. `columnDefs` may use any of the column
		 * options available: {@link DataTable.defaults.column}, but it _must_
		 * have `targets` defined in each object in the array. Values in the `targets`
		 * array may be:
		 *   <ul>
		 *     <li>a string - class name will be matched on the TH for the column</li>
		 *     <li>0 or a positive integer - column index counting from the left</li>
		 *     <li>a negative integer - column index counting from the right</li>
		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
		 *   </ul>
		 *  @member
		 *
		 *  @name DataTable.defaults.columnDefs
		 */
		"aoColumnDefs": null,
	
	
		/**
		 * Basically the same as `search`, this parameter defines the individual column
		 * filtering state at initialisation time. The array must be of the same size
		 * as the number of columns, and each element be an object with the parameters
		 * `search` and `escapeRegex` (the latter is optional). 'null' is also
		 * accepted and the default will be used.
		 *  @type array
		 *  @default []
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.searchCols
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchCols": [
		 *          null,
		 *          { "search": "My filter" },
		 *          null,
		 *          { "search": "^[0-9]", "escapeRegex": false }
		 *        ]
		 *      } );
		 *    } )
		 */
		"aoSearchCols": [],
	
	
		/**
		 * An array of CSS classes that should be applied to displayed rows. This
		 * array may be of any length, and DataTables will apply each class
		 * sequentially, looping when required.
		 *  @type array
		 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
		 *    options</i>
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.stripeClasses
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
		 *      } );
		 *    } )
		 */
		"asStripeClasses": null,
	
	
		/**
		 * Enable or disable automatic column width calculation. This can be disabled
		 * as an optimisation (it takes some time to calculate the widths) if the
		 * tables widths are passed in using `columns`.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.autoWidth
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "autoWidth": false
		 *      } );
		 *    } );
		 */
		"bAutoWidth": true,
	
	
		/**
		 * Deferred rendering can provide DataTables with a huge speed boost when you
		 * are using an Ajax or JS data source for the table. This option, when set to
		 * true, will cause DataTables to defer the creation of the table elements for
		 * each row until they are needed for a draw - saving a significant amount of
		 * time.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.deferRender
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajax": "sources/arrays.txt",
		 *        "deferRender": true
		 *      } );
		 *    } );
		 */
		"bDeferRender": false,
	
	
		/**
		 * Replace a DataTable which matches the given selector and replace it with
		 * one which has the properties of the new initialisation object passed. If no
		 * table matches the selector, then the new DataTable will be constructed as
		 * per normal.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.destroy
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "srollY": "200px",
		 *        "paginate": false
		 *      } );
		 *
		 *      // Some time later....
		 *      $('#example').dataTable( {
		 *        "filter": false,
		 *        "destroy": true
		 *      } );
		 *    } );
		 */
		"bDestroy": false,
	
	
		/**
		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
		 * that it allows the end user to input multiple words (space separated) and
		 * will match a row containing those words, even if not in the order that was
		 * specified (this allow matching across multiple columns). Note that if you
		 * wish to use filtering in DataTables this must remain 'true' - to remove the
		 * default filtering input box and retain filtering abilities, please use
		 * {@link DataTable.defaults.dom}.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.searching
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "searching": false
		 *      } );
		 *    } );
		 */
		"bFilter": true,
	
	
		/**
		 * Enable or disable the table information display. This shows information
		 * about the data that is currently visible on the page, including information
		 * about filtered data if that action is being performed.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.info
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "info": false
		 *      } );
		 *    } );
		 */
		"bInfo": true,
	
	
		/**
		 * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
		 * slightly different and additional mark-up from what DataTables has
		 * traditionally used).
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.jQueryUI
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "jQueryUI": true
		 *      } );
		 *    } );
		 */
		"bJQueryUI": false,
	
	
		/**
		 * Allows the end user to select the size of a formatted page from a select
		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.lengthChange
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "lengthChange": false
		 *      } );
		 *    } );
		 */
		"bLengthChange": true,
	
	
		/**
		 * Enable or disable pagination.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.paging
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "paging": false
		 *      } );
		 *    } );
		 */
		"bPaginate": true,
	
	
		/**
		 * Enable or disable the display of a 'processing' indicator when the table is
		 * being processed (e.g. a sort). This is particularly useful for tables with
		 * large amounts of data where it can take a noticeable amount of time to sort
		 * the entries.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.processing
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "processing": true
		 *      } );
		 *    } );
		 */
		"bProcessing": false,
	
	
		/**
		 * Retrieve the DataTables object for the given selector. Note that if the
		 * table has already been initialised, this parameter will cause DataTables
		 * to simply return the object that has already been set up - it will not take
		 * account of any changes you might have made to the initialisation object
		 * passed to DataTables (setting this parameter to true is an acknowledgement
		 * that you understand this). `destroy` can be used to reinitialise a table if
		 * you need.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.retrieve
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      initTable();
		 *      tableActions();
		 *    } );
		 *
		 *    function initTable ()
		 *    {
		 *      return $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false,
		 *        "retrieve": true
		 *      } );
		 *    }
		 *
		 *    function tableActions ()
		 *    {
		 *      var table = initTable();
		 *      // perform API operations with oTable
		 *    }
		 */
		"bRetrieve": false,
	
	
		/**
		 * When vertical (y) scrolling is enabled, DataTables will force the height of
		 * the table's viewport to the given height at all times (useful for layout).
		 * However, this can look odd when filtering data down to a small data set,
		 * and the footer is left "floating" further down. This parameter (when
		 * enabled) will cause DataTables to collapse the table's viewport down when
		 * the result set will fit within the given Y height.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollCollapse
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200",
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"bScrollCollapse": false,
	
	
		/**
		 * Configure DataTables to use server-side processing. Note that the
		 * `ajax` parameter must also be given in order to give DataTables a
		 * source to obtain the required data for each draw.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverSide
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "xhr.php"
		 *      } );
		 *    } );
		 */
		"bServerSide": false,
	
	
		/**
		 * Enable or disable sorting of columns. Sorting of individual columns can be
		 * disabled by the `sortable` option for each column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.ordering
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "ordering": false
		 *      } );
		 *    } );
		 */
		"bSort": true,
	
	
		/**
		 * Enable or display DataTables' ability to sort multiple columns at the
		 * same time (activated by shift-click by the user).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderMulti
		 *
		 *  @example
		 *    // Disable multiple column sorting ability
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderMulti": false
		 *      } );
		 *    } );
		 */
		"bSortMulti": true,
	
	
		/**
		 * Allows control over whether DataTables should use the top (true) unique
		 * cell that is found for a single column, or the bottom (false - default).
		 * This is useful when using complex headers.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderCellsTop
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderCellsTop": true
		 *      } );
		 *    } );
		 */
		"bSortCellsTop": false,
	
	
		/**
		 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
		 * `sorting\_3` to the columns which are currently being sorted on. This is
		 * presented as a feature switch as it can increase processing time (while
		 * classes are removed and added) so for large data sets you might want to
		 * turn this off.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.orderClasses
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderClasses": false
		 *      } );
		 *    } );
		 */
		"bSortClasses": true,
	
	
		/**
		 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
		 * used to save table display information such as pagination information,
		 * display length, filtering and sorting. As such when the end user reloads
		 * the page the display display will match what thy had previously set up.
		 *
		 * Due to the use of `localStorage` the default state saving is not supported
		 * in IE6 or 7. If state saving is required in those browsers, use
		 * `stateSaveCallback` to provide a storage solution such as cookies.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.stateSave
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "stateSave": true
		 *      } );
		 *    } );
		 */
		"bStateSave": false,
	
	
		/**
		 * This function is called when a TR element is created (and all TD child
		 * elements have been inserted), or registered if using a DOM source, allowing
		 * manipulation of the TR element (adding classes etc).
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} dataIndex The index of this row in the internal aoData array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.createdRow
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "createdRow": function( row, data, dataIndex ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" )
		 *          {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnCreatedRow": null,
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify any aspect you want about the created DOM.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.drawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "drawCallback": function( settings ) {
		 *          alert( 'DataTables has redrawn the table' );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnDrawCallback": null,
	
	
		/**
		 * Identical to fnHeaderCallback() but for the table footer this function
		 * allows you to modify the table footer on every 'draw' event.
		 *  @type function
		 *  @param {node} foot "TR" element for the footer
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.footerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "footerCallback": function( tfoot, data, start, end, display ) {
		 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
		 *        }
		 *      } );
		 *    } )
		 */
		"fnFooterCallback": null,
	
	
		/**
		 * When rendering large numbers in the information element for the table
		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
		 * to have a comma separator for the 'thousands' units (e.g. 1 million is
		 * rendered as "1,000,000") to help readability for the end user. This
		 * function will override the default method DataTables uses.
		 *  @type function
		 *  @member
		 *  @param {int} toFormat number to be formatted
		 *  @returns {string} formatted string for DataTables to show the number
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.formatNumber
		 *
		 *  @example
		 *    // Format a number using a single quote for the separator (note that
		 *    // this can also be done with the language.thousands option)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "formatNumber": function ( toFormat ) {
		 *          return toFormat.toString().replace(
		 *            /\B(?=(\d{3})+(?!\d))/g, "'"
		 *          );
		 *        };
		 *      } );
		 *    } );
		 */
		"fnFormatNumber": function ( toFormat ) {
			return toFormat.toString().replace(
				/\B(?=(\d{3})+(?!\d))/g,
				this.oLanguage.sThousands
			);
		},
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify the header row. This can be used to calculate and
		 * display useful information about the table.
		 *  @type function
		 *  @param {node} head "TR" element for the header
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.headerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "fheaderCallback": function( head, data, start, end, display ) {
		 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
		 *        }
		 *      } );
		 *    } )
		 */
		"fnHeaderCallback": null,
	
	
		/**
		 * The information element can be used to convey information about the current
		 * state of the table. Although the internationalisation options presented by
		 * DataTables are quite capable of dealing with most customisations, there may
		 * be times where you wish to customise the string further. This callback
		 * allows you to do exactly that.
		 *  @type function
		 *  @param {object} oSettings DataTables settings object
		 *  @param {int} start Starting position in data for the draw
		 *  @param {int} end End position in data for the draw
		 *  @param {int} max Total number of rows in the table (regardless of
		 *    filtering)
		 *  @param {int} total Total number of rows in the data set, after filtering
		 *  @param {string} pre The string that DataTables has formatted using it's
		 *    own rules
		 *  @returns {string} The string to be displayed in the information element.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.infoCallback
		 *
		 *  @example
		 *    $('#example').dataTable( {
		 *      "infoCallback": function( settings, start, end, max, total, pre ) {
		 *        return start +" to "+ end;
		 *      }
		 *    } );
		 */
		"fnInfoCallback": null,
	
	
		/**
		 * Called when the table has been initialised. Normally DataTables will
		 * initialise sequentially and there will be no need for this function,
		 * however, this does not hold true when using external language information
		 * since that is obtained using an async XHR call.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} json The JSON object request from the server - only
		 *    present if client-side Ajax sourced data is used
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.initComplete
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "initComplete": function(settings, json) {
		 *          alert( 'DataTables has finished its initialisation.' );
		 *        }
		 *      } );
		 *    } )
		 */
		"fnInitComplete": null,
	
	
		/**
		 * Called at the very start of each table draw and can be used to cancel the
		 * draw by returning false, any other return (including undefined) results in
		 * the full draw occurring).
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @returns {boolean} False will cancel the draw, anything else (including no
		 *    return) will allow it to complete.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.preDrawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "preDrawCallback": function( settings ) {
		 *          if ( $('#test').val() == 1 ) {
		 *            return false;
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnPreDrawCallback": null,
	
	
		/**
		 * This function allows you to 'post process' each row after it have been
		 * generated for each table draw, but before it is rendered on screen. This
		 * function might be used for setting the row class name etc.
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} displayIndex The display index for the current table draw
		 *  @param {int} displayIndexFull The index of the data in the full list of
		 *    rows (after filtering)
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.rowCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" ) {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnRowCallback": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * This parameter allows you to override the default function which obtains
		 * the data from the server so something more suitable for your application.
		 * For example you could use POST data, or pull information from a Gears or
		 * AIR database.
		 *  @type function
		 *  @member
		 *  @param {string} source HTTP source to obtain the data from (`ajax`)
		 *  @param {array} data A key/value pair object containing the data to send
		 *    to the server
		 *  @param {function} callback to be called on completion of the data get
		 *    process that will draw the data on the page.
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverData
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerData": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 *  It is often useful to send extra data to the server when making an Ajax
		 * request - for example custom filtering information, and this callback
		 * function makes it trivial to send extra information to the server. The
		 * passed in parameter is the data set that has been constructed by
		 * DataTables, and you can add to this or modify it as you require.
		 *  @type function
		 *  @param {array} data Data array (array of objects which are name/value
		 *    pairs) that has been constructed by DataTables and will be sent to the
		 *    server. In the case of Ajax sourced data with server-side processing
		 *    this will be an empty array, for server-side processing there will be a
		 *    significant number of parameters!
		 *  @returns {undefined} Ensure that you modify the data array passed in,
		 *    as this is passed by reference.
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverParams
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerParams": null,
	
	
		/**
		 * Load the table state. With this function you can define from where, and how, the
		 * state of a table is loaded. By default DataTables will load from `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} callback Callback that can be executed when done. It
		 *    should be passed the loaded state object.
		 *  @return {object} The DataTables state object to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadCallback": function (settings, callback) {
		 *          $.ajax( {
		 *            "url": "/state_load",
		 *            "dataType": "json",
		 *            "success": function (json) {
		 *              callback( json );
		 *            }
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadCallback": function ( settings ) {
			try {
				return JSON.parse(
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
						'DataTables_'+settings.sInstance+'_'+location.pathname
					)
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the saved state prior to loading that state.
		 * This callback is called when the table is loading state from the stored data, but
		 * prior to the settings object being modified by the saved state. Note that for
		 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
		 * a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that is to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never loaded
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Disallow state loading by returning false
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          return false;
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadParams": null,
	
	
		/**
		 * Callback that is called when the state has been loaded from the state saving method
		 * and the DataTables settings object has been modified as a result of the loaded state.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that was loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoaded
		 *
		 *  @example
		 *    // Show an alert with the filtering value that was saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoaded": function (settings, data) {
		 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoaded": null,
	
	
		/**
		 * Save the table state. This function allows you to define where and how the state
		 * information for the table is stored By default DataTables will use `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveCallback": function (settings, data) {
		 *          // Send an Ajax request to the server with the state object
		 *          $.ajax( {
		 *            "url": "/state_save",
		 *            "data": data,
		 *            "dataType": "json",
		 *            "method": "POST"
		 *            "success": function () {}
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveCallback": function ( settings, data ) {
			try {
				(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
					'DataTables_'+settings.sInstance+'_'+location.pathname,
					JSON.stringify( data )
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the state to be saved. Called when the table
		 * has changed state a new state save is required. This method allows modification of
		 * the state saving object prior to actually doing the save, including addition or
		 * other state properties or modification. Note that for plug-in authors, you should
		 * use the `stateSaveParams` event to save parameters for a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveParams": null,
	
	
		/**
		 * Duration for which the saved state information is considered valid. After this period
		 * has elapsed the state will be returned to the default.
		 * Value is given in seconds.
		 *  @type int
		 *  @default 7200 <i>(2 hours)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.stateDuration
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateDuration": 60*60*24; // 1 day
		 *      } );
		 *    } )
		 */
		"iStateDuration": 7200,
	
	
		/**
		 * When enabled DataTables will not make a request to the server for the first
		 * page draw - rather it will use the data already on the page (no sorting etc
		 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
		 * is used to indicate that deferred loading is required, but it is also used
		 * to tell DataTables how many records there are in the full table (allowing
		 * the information element and pagination to be displayed correctly). In the case
		 * where a filtering is applied to the table on initial load, this can be
		 * indicated by giving the parameter as an array, where the first element is
		 * the number of records available after filtering and the second element is the
		 * number of records without filtering (allowing the table information element
		 * to be shown correctly).
		 *  @type int | array
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.deferLoading
		 *
		 *  @example
		 *    // 57 records available in the table, no filtering applied
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": 57
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": [ 57, 100 ],
		 *        "search": {
		 *          "search": "my_filter"
		 *        }
		 *      } );
		 *    } );
		 */
		"iDeferLoading": null,
	
	
		/**
		 * Number of rows to display on a single page when using pagination. If
		 * feature enabled (`lengthChange`) then the end user will be able to override
		 * this to a custom setting using a pop-up menu.
		 *  @type int
		 *  @default 10
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pageLength
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pageLength": 50
		 *      } );
		 *    } )
		 */
		"iDisplayLength": 10,
	
	
		/**
		 * Define the starting point for data display when using DataTables with
		 * pagination. Note that this parameter is the number of records, rather than
		 * the page number, so if you have 10 records per page and want to start on
		 * the third page, it should be "20".
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.displayStart
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "displayStart": 20
		 *      } );
		 *    } )
		 */
		"iDisplayStart": 0,
	
	
		/**
		 * By default DataTables allows keyboard navigation of the table (sorting, paging,
		 * and filtering) by adding a `tabindex` attribute to the required elements. This
		 * allows you to tab through the controls and press the enter key to activate them.
		 * The tabindex is default 0, meaning that the tab follows the flow of the document.
		 * You can overrule this using this parameter if you wish. Use a value of -1 to
		 * disable built-in keyboard navigation.
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.tabIndex
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "tabIndex": 1
		 *      } );
		 *    } );
		 */
		"iTabIndex": 0,
	
	
		/**
		 * Classes that DataTables assigns to the various components and features
		 * that it adds to the HTML table. This allows classes to be configured
		 * during initialisation in addition to through the static
		 * {@link DataTable.ext.oStdClasses} object).
		 *  @namespace
		 *  @name DataTable.defaults.classes
		 */
		"oClasses": {},
	
	
		/**
		 * All strings that DataTables uses in the user interface that it creates
		 * are defined in this object, allowing you to modified them individually or
		 * completely replace them all as required.
		 *  @namespace
		 *  @name DataTable.defaults.language
		 */
		"oLanguage": {
			/**
			 * Strings that are used for WAI-ARIA labels and controls only (these are not
			 * actually visible on the page, but will be read by screenreaders, and thus
			 * must be internationalised as well).
			 *  @namespace
			 *  @name DataTable.defaults.language.aria
			 */
			"oAria": {
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted ascending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortAscending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortAscending": " - click/return to sort ascending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortAscending": ": activate to sort column ascending",
	
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted descending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortDescending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortDescending": " - click/return to sort descending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortDescending": ": activate to sort column descending"
			},
	
			/**
			 * Pagination string used by DataTables for the built-in pagination
			 * control types.
			 *  @namespace
			 *  @name DataTable.defaults.language.paginate
			 */
			"oPaginate": {
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the first page.
				 *  @type string
				 *  @default First
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.first
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "first": "First page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sFirst": "First",
	
	
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the last page.
				 *  @type string
				 *  @default Last
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.last
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "last": "Last page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sLast": "Last",
	
	
				/**
				 * Text to use for the 'next' pagination button (to take the user to the
				 * next page).
				 *  @type string
				 *  @default Next
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.next
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "next": "Next page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sNext": "Next",
	
	
				/**
				 * Text to use for the 'previous' pagination button (to take the user to
				 * the previous page).
				 *  @type string
				 *  @default Previous
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.previous
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "previous": "Previous page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sPrevious": "Previous"
			},
	
			/**
			 * This string is shown in preference to `zeroRecords` when the table is
			 * empty of data (regardless of filtering). Note that this is an optional
			 * parameter - if it is not given, the value of `zeroRecords` will be used
			 * instead (either the default or given value).
			 *  @type string
			 *  @default No data available in table
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.emptyTable
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "emptyTable": "No data available in table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sEmptyTable": "No data available in table",
	
	
			/**
			 * This string gives information to the end user about the information
			 * that is current on display on the page. The following tokens can be
			 * used in the string and will be dynamically replaced as the table
			 * display updates. This tokens can be placed anywhere in the string, or
			 * removed as needed by the language requires:
			 *
			 * * `\_START\_` - Display index of the first record on the current page
			 * * `\_END\_` - Display index of the last record on the current page
			 * * `\_TOTAL\_` - Number of records in the table after filtering
			 * * `\_MAX\_` - Number of records in the table without filtering
			 * * `\_PAGE\_` - Current page number
			 * * `\_PAGES\_` - Total number of pages of data in the table
			 *
			 *  @type string
			 *  @default Showing _START_ to _END_ of _TOTAL_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.info
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "info": "Showing page _PAGE_ of _PAGES_"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
	
	
			/**
			 * Display information string for when the table is empty. Typically the
			 * format of this string should match `info`.
			 *  @type string
			 *  @default Showing 0 to 0 of 0 entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoEmpty
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoEmpty": "No entries to show"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoEmpty": "Showing 0 to 0 of 0 entries",
	
	
			/**
			 * When a user filters the information in a table, this string is appended
			 * to the information (`info`) to give an idea of how strong the filtering
			 * is. The variable _MAX_ is dynamically updated.
			 *  @type string
			 *  @default (filtered from _MAX_ total entries)
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoFiltered
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoFiltered": " - filtering from _MAX_ records"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoFiltered": "(filtered from _MAX_ total entries)",
	
	
			/**
			 * If can be useful to append extra information to the info string at times,
			 * and this variable does exactly that. This information will be appended to
			 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
			 * being used) at all times.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoPostFix
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoPostFix": "All records shown are derived from real information."
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoPostFix": "",
	
	
			/**
			 * This decimal place operator is a little different from the other
			 * language options since DataTables doesn't output floating point
			 * numbers, so it won't ever use this for display of a number. Rather,
			 * what this parameter does is modify the sort methods of the table so
			 * that numbers which are in a format which has a character other than
			 * a period (`.`) as a decimal place will be sorted numerically.
			 *
			 * Note that numbers with different decimal places cannot be shown in
			 * the same table and still be sortable, the table must be consistent.
			 * However, multiple different tables on the page can use different
			 * decimal place characters.
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.decimal
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "decimal": ","
			 *          "thousands": "."
			 *        }
			 *      } );
			 *    } );
			 */
			"sDecimal": "",
	
	
			/**
			 * DataTables has a build in number formatter (`formatNumber`) which is
			 * used to format large numbers that are used in the table information.
			 * By default a comma is used, but this can be trivially changed to any
			 * character you wish with this parameter.
			 *  @type string
			 *  @default ,
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.thousands
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "thousands": "'"
			 *        }
			 *      } );
			 *    } );
			 */
			"sThousands": ",",
	
	
			/**
			 * Detail the action that will be taken when the drop down menu for the
			 * pagination length option is changed. The '_MENU_' variable is replaced
			 * with a default select list of 10, 25, 50 and 100, and can be replaced
			 * with a custom select box if required.
			 *  @type string
			 *  @default Show _MENU_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.lengthMenu
			 *
			 *  @example
			 *    // Language change only
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": "Display _MENU_ records"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Language and options change
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": 'Display <select>'+
			 *            '<option value="10">10</option>'+
			 *            '<option value="20">20</option>'+
			 *            '<option value="30">30</option>'+
			 *            '<option value="40">40</option>'+
			 *            '<option value="50">50</option>'+
			 *            '<option value="-1">All</option>'+
			 *            '</select> records'
			 *        }
			 *      } );
			 *    } );
			 */
			"sLengthMenu": "Show _MENU_ entries",
	
	
			/**
			 * When using Ajax sourced data and during the first draw when DataTables is
			 * gathering the data, this message is shown in an empty row in the table to
			 * indicate to the end user the the data is being loaded. Note that this
			 * parameter is not used when loading data by server-side processing, just
			 * Ajax sourced data with client-side processing.
			 *  @type string
			 *  @default Loading...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.loadingRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "loadingRecords": "Please wait - loading..."
			 *        }
			 *      } );
			 *    } );
			 */
			"sLoadingRecords": "Loading...",
	
	
			/**
			 * Text which is displayed when the table is processing a user action
			 * (usually a sort command or similar).
			 *  @type string
			 *  @default Processing...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.processing
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "processing": "DataTables is currently busy"
			 *        }
			 *      } );
			 *    } );
			 */
			"sProcessing": "Processing...",
	
	
			/**
			 * Details the actions that will be taken when the user types into the
			 * filtering input text box. The variable "_INPUT_", if used in the string,
			 * is replaced with the HTML text box for the filtering input allowing
			 * control over where it appears in the string. If "_INPUT_" is not given
			 * then the input box is appended to the string automatically.
			 *  @type string
			 *  @default Search:
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.search
			 *
			 *  @example
			 *    // Input text box will be appended at the end automatically
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Filter records:"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Specify where the filter should appear
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Apply filter _INPUT_ to table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sSearch": "Search:",
	
	
			/**
			 * Assign a `placeholder` attribute to the search `input` element
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.searchPlaceholder
			 */
			"sSearchPlaceholder": "",
	
	
			/**
			 * All of the language information can be stored in a file on the
			 * server-side, which DataTables will look up if this parameter is passed.
			 * It must store the URL of the language file, which is in a JSON format,
			 * and the object has the same properties as the oLanguage object in the
			 * initialiser object (i.e. the above parameters). Please refer to one of
			 * the example language files to see how this works in action.
			 *  @type string
			 *  @default <i>Empty string - i.e. disabled</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.url
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
			 *        }
			 *      } );
			 *    } );
			 */
			"sUrl": "",
	
	
			/**
			 * Text shown inside the table records when the is no information to be
			 * displayed after filtering. `emptyTable` is shown when there is simply no
			 * information in the table at all (regardless of filtering).
			 *  @type string
			 *  @default No matching records found
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.zeroRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "zeroRecords": "No records to display"
			 *        }
			 *      } );
			 *    } );
			 */
			"sZeroRecords": "No matching records found"
		},
	
	
		/**
		 * This parameter allows you to have define the global filtering state at
		 * initialisation time. As an object the `search` parameter must be
		 * defined, but all other parameters are optional. When `regex` is true,
		 * the search string will be treated as a regular expression, when false
		 * (default) it will be treated as a straight string. When `smart`
		 * DataTables will use it's smart filtering methods (to word match at
		 * any point in the data), when false this will not be done.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.search
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "search": {"search": "Initial search"}
		 *      } );
		 *    } )
		 */
		"oSearch": $.extend( {}, DataTable.models.oSearch ),
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * By default DataTables will look for the property `data` (or `aaData` for
		 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
		 * source or for server-side processing - this parameter allows that
		 * property to be changed. You can use Javascript dotted object notation to
		 * get a data source for multiple levels of nesting.
		 *  @type string
		 *  @default data
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxDataProp
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxDataProp": "data",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * You can instruct DataTables to load data from an external
		 * source using this parameter (use aData if you want to pass data in you
		 * already have). Simply provide a url a JSON object can be obtained from.
		 *  @type string
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxSource
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxSource": null,
	
	
		/**
		 * This initialisation variable allows you to specify exactly where in the
		 * DOM you want DataTables to inject the various controls it adds to the page
		 * (for example you might want the pagination controls at the top of the
		 * table). DIV elements (with or without a custom class) can also be added to
		 * aid styling. The follow syntax is used:
		 *   <ul>
		 *     <li>The following options are allowed:
		 *       <ul>
		 *         <li>'l' - Length changing</li>
		 *         <li>'f' - Filtering input</li>
		 *         <li>'t' - The table!</li>
		 *         <li>'i' - Information</li>
		 *         <li>'p' - Pagination</li>
		 *         <li>'r' - pRocessing</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following constants are allowed:
		 *       <ul>
		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following syntax is expected:
		 *       <ul>
		 *         <li>'&lt;' and '&gt;' - div elements</li>
		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
		 *       </ul>
		 *     </li>
		 *     <li>Examples:
		 *       <ul>
		 *         <li>'&lt;"wrapper"flipt&gt;'</li>
		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
		 *       </ul>
		 *     </li>
		 *   </ul>
		 *  @type string
		 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
		 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.dom
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
		 *      } );
		 *    } );
		 */
		"sDom": "lfrtip",
	
	
		/**
		 * Search delay option. This will throttle full table searches that use the
		 * DataTables provided search input element (it does not effect calls to
		 * `dt-api search()`, providing a delay before the search is made.
		 *  @type integer
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.searchDelay
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchDelay": 200
		 *      } );
		 *    } )
		 */
		"searchDelay": null,
	
	
		/**
		 * DataTables features six different built-in options for the buttons to
		 * display for pagination control:
		 *
		 * * `numbers` - Page number buttons only
		 * * `simple` - 'Previous' and 'Next' buttons only
		 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
		 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
		 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
		 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
		 *  
		 * Further methods can be added using {@link DataTable.ext.oPagination}.
		 *  @type string
		 *  @default simple_numbers
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pagingType
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pagingType": "full_numbers"
		 *      } );
		 *    } )
		 */
		"sPaginationType": "simple_numbers",
	
	
		/**
		 * Enable horizontal scrolling. When a table is too wide to fit into a
		 * certain layout, or you have a large number of columns in the table, you
		 * can enable x-scrolling to show the table in a viewport, which can be
		 * scrolled. This property can be `true` which will allow the table to
		 * scroll horizontally when needed, or any CSS unit, or a number (in which
		 * case it will be treated as a pixel measurement). Setting as simply `true`
		 * is recommended.
		 *  @type boolean|string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollX
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": true,
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"sScrollX": "",
	
	
		/**
		 * This property can be used to force a DataTable to use more width than it
		 * might otherwise do when x-scrolling is enabled. For example if you have a
		 * table which requires to be well spaced, this parameter is useful for
		 * "over-sizing" the table, and thus forcing scrolling. This property can by
		 * any CSS unit, or a number (in which case it will be treated as a pixel
		 * measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollXInner
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": "100%",
		 *        "scrollXInner": "110%"
		 *      } );
		 *    } );
		 */
		"sScrollXInner": "",
	
	
		/**
		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
		 * to the given height, and enable scrolling for any data which overflows the
		 * current viewport. This can be used as an alternative to paging to display
		 * a lot of data in a small area (although paging and scrolling can both be
		 * enabled at the same time). This property can be any CSS unit, or a number
		 * (in which case it will be treated as a pixel measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollY
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false
		 *      } );
		 *    } );
		 */
		"sScrollY": "",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * Set the HTTP method that is used to make the Ajax call for server-side
		 * processing or Ajax sourced data.
		 *  @type string
		 *  @default GET
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverMethod
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sServerMethod": "GET",
	
	
		/**
		 * DataTables makes use of renderers when displaying HTML elements for
		 * a table. These renderers can be added or modified by plug-ins to
		 * generate suitable mark-up for a site. For example the Bootstrap
		 * integration plug-in for DataTables uses a paging button renderer to
		 * display pagination buttons in the mark-up required by Bootstrap.
		 *
		 * For further information about the renderers available see
		 * DataTable.ext.renderer
		 *  @type string|object
		 *  @default null
		 *
		 *  @name DataTable.defaults.renderer
		 *
		 */
		"renderer": null,
	
	
		/**
		 * Set the data property name that DataTables should use to get a row's id
		 * to set as the `id` property in the node.
		 *  @type string
		 *  @default DT_RowId
		 *
		 *  @name DataTable.defaults.rowId
		 */
		"rowId": "DT_RowId"
	};
	
	_fnHungarianMap( DataTable.defaults );
	
	
	
	/*
	 * Developer note - See note in model.defaults.js about the use of Hungarian
	 * notation and camel case.
	 */
	
	/**
	 * Column options that can be given to DataTables at initialisation time.
	 *  @namespace
	 */
	DataTable.defaults.column = {
		/**
		 * Define which column(s) an order will occur on for this column. This
		 * allows a column's ordering to take multiple columns into account when
		 * doing a sort or use the data from a different column. For example first
		 * name / last name columns make sense to do a multi-column sort over the
		 * two columns.
		 *  @type array|int
		 *  @default null <i>Takes the value of the column index automatically</i>
		 *
		 *  @name DataTable.defaults.column.orderData
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
		 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
		 *          { "orderData": 2, "targets": [ 2 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderData": [ 0, 1 ] },
		 *          { "orderData": [ 1, 0 ] },
		 *          { "orderData": 2 },
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"aDataSort": null,
		"iDataSort": -1,
	
	
		/**
		 * You can control the default ordering direction, and even alter the
		 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
		 * using this parameter.
		 *  @type array
		 *  @default [ 'asc', 'desc' ]
		 *
		 *  @name DataTable.defaults.column.orderSequence
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
		 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          { "orderSequence": [ "asc" ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ] },
		 *          { "orderSequence": [ "desc" ] },
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"asSorting": [ 'asc', 'desc' ],
	
	
		/**
		 * Enable or disable filtering on the data in this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.searchable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "searchable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "searchable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSearchable": true,
	
	
		/**
		 * Enable or disable ordering on this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.orderable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSortable": true,
	
	
		/**
		 * Enable or disable the display of this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.visible
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "visible": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "visible": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bVisible": true,
	
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} td The TD node that has been created
		 *  @param {*} cellData The Data for the cell
		 *  @param {array|object} rowData The data for the whole row
		 *  @param {int} row The row index for the aoData data store
		 *  @param {int} col The column index for aoColumns
		 *
		 *  @name DataTable.defaults.column.createdCell
		 *  @dtopt Columns
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [3],
		 *          "createdCell": function (td, cellData, rowData, row, col) {
		 *            if ( cellData == "1.7" ) {
		 *              $(td).css('color', 'blue')
		 *            }
		 *          }
		 *        } ]
		 *      });
		 *    } );
		 */
		"fnCreatedCell": null,
	
	
		/**
		 * This parameter has been replaced by `data` in DataTables to ensure naming
		 * consistency. `dataProp` can still be used, as there is backwards
		 * compatibility in DataTables for this option, but it is strongly
		 * recommended that you use `data` in preference to `dataProp`.
		 *  @name DataTable.defaults.column.dataProp
		 */
	
	
		/**
		 * This property can be used to read data from any data source property,
		 * including deeply nested objects / properties. `data` can be given in a
		 * number of different ways which effect its behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object. Note that
		 *      function notation is recommended for use in `render` rather than
		 *      `data` as it is much simpler to use as a renderer.
		 * * `null` - use the original data source for the row rather than plucking
		 *   data directly from it. This action has effects on two other
		 *   initialisation options:
		 *    * `defaultContent` - When null is given as the `data` option and
		 *      `defaultContent` is specified for the column, the value defined by
		 *      `defaultContent` will be used for the cell.
		 *    * `render` - When null is used for the `data` option and the `render`
		 *      option is specified for the column, the whole data source for the
		 *      row is used for the renderer.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * `{array|object}` The data source for the row
		 *      * `{string}` The type call data requested - this will be 'set' when
		 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
		 *        when gathering data. Note that when `undefined` is given for the
		 *        type DataTables expects to get the raw data for the object back<
		 *      * `{*}` Data to set when the second parameter is 'set'.
		 *    * Return:
		 *      * The return value from the function is not required when 'set' is
		 *        the type of call, but otherwise the return is what will be used
		 *        for the data requested.
		 *
		 * Note that `data` is a getter and setter option. If you just require
		 * formatting of data for output, you will likely want to use `render` which
		 * is simply a getter and thus simpler to use.
		 *
		 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
		 * name change reflects the flexibility of this property and is consistent
		 * with the naming of mRender. If 'mDataProp' is given, then it will still
		 * be used by DataTables, as it automatically maps the old name to the new
		 * if required.
		 *
		 *  @type string|int|function|null
		 *  @default null <i>Use automatically calculated column index</i>
		 *
		 *  @name DataTable.defaults.column.data
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Read table data from objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {value},
		 *    //      "version": {value},
		 *    //      "grade": {value}
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/objects.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform" },
		 *          { "data": "version" },
		 *          { "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Read information from deeply nested objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {
		 *    //         "inner": {value}
		 *    //      },
		 *    //      "details": [
		 *    //         {value}, {value}
		 *    //      ]
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform.inner" },
		 *          { "data": "platform.details.0" },
		 *          { "data": "platform.details.1" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `data` as a function to provide different information for
		 *    // sorting, filtering and display. In this case, currency (price)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": function ( source, type, val ) {
		 *            if (type === 'set') {
		 *              source.price = val;
		 *              // Store the computed dislay and filter values for efficiency
		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
		 *              return;
		 *            }
		 *            else if (type === 'display') {
		 *              return source.price_display;
		 *            }
		 *            else if (type === 'filter') {
		 *              return source.price_filter;
		 *            }
		 *            // 'sort', 'type' and undefined all just use the integer
		 *            return source.price;
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using default content
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null,
		 *          "defaultContent": "Click to edit"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using array notation - outputting a list from an array
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "name[, ]"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 */
		"mData": null,
	
	
		/**
		 * This property is the rendering partner to `data` and it is suggested that
		 * when you want to manipulate data for display (including filtering,
		 * sorting etc) without altering the underlying data for the table, use this
		 * property. `render` can be considered to be the the read only companion to
		 * `data` which is read / write (then as such more complex). Like `data`
		 * this option can be given in a number of different ways to effect its
		 * behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object.
		 * * `object` - use different data for the different data types requested by
		 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
		 *   of the object is the data type the property refers to and the value can
		 *   defined using an integer, string or function using the same rules as
		 *   `render` normally does. Note that an `_` option _must_ be specified.
		 *   This is the default value to use if you haven't specified a value for
		 *   the data type requested by DataTables.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * {array|object} The data source for the row (based on `data`)
		 *      * {string} The type call data requested - this will be 'filter',
		 *        'display', 'type' or 'sort'.
		 *      * {array|object} The full data source for the row (not based on
		 *        `data`)
		 *    * Return:
		 *      * The return value from the function is what will be used for the
		 *        data requested.
		 *
		 *  @type string|int|function|object|null
		 *  @default null Use the data source value.
		 *
		 *  @name DataTable.defaults.column.render
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Create a comma separated list from an array of objects
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          {
		 *            "data": "platform",
		 *            "render": "[, ].name"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Execute a function to obtain data
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": "browserName()"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // As an object, extracting different data for the different types
		 *    // This would be used with a data source such as:
		 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
		 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
		 *    // (which has both forms) is used for filtering for if a user inputs either format, while
		 *    // the formatted phone number is the one that is shown in the table.
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": {
		 *            "_": "phone",
		 *            "filter": "phone_filter",
		 *            "display": "phone_display"
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Use as a function to create a link from the data source
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "download_link",
		 *          "render": function ( data, type, full ) {
		 *            return '<a href="'+data+'">Download</a>';
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 */
		"mRender": null,
	
	
		/**
		 * Change the cell type created for the column - either TD cells or TH cells. This
		 * can be useful as TH cells have semantic meaning in the table body, allowing them
		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
		 *  @type string
		 *  @default td
		 *
		 *  @name DataTable.defaults.column.cellType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Make the first column use TH cells
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "cellType": "th"
		 *        } ]
		 *      } );
		 *    } );
		 */
		"sCellType": "td",
	
	
		/**
		 * Class to give to each cell in this column.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.class
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "class": "my_class", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "class": "my_class" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sClass": "",
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 * Generally you shouldn't need this!
		 *  @type string
		 *  @default <i>Empty string<i>
		 *
		 *  @name DataTable.defaults.column.contentPadding
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "contentPadding": "mmm"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sContentPadding": "",
	
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because `data`
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 *
		 *  @name DataTable.defaults.column.defaultContent
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit",
		 *            "targets": [ -1 ]
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sDefaultContent": null,
	
	
		/**
		 * This parameter is only used in DataTables' server-side processing. It can
		 * be exceptionally useful to know what columns are being displayed on the
		 * client side, and to map these to database fields. When defined, the names
		 * also allow DataTables to reorder information from the server if it comes
		 * back in an unexpected order (i.e. if you switch your columns around on the
		 * client-side, your server-side code does not also need updating).
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.name
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "name": "engine", "targets": [ 0 ] },
		 *          { "name": "browser", "targets": [ 1 ] },
		 *          { "name": "platform", "targets": [ 2 ] },
		 *          { "name": "version", "targets": [ 3 ] },
		 *          { "name": "grade", "targets": [ 4 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "name": "engine" },
		 *          { "name": "browser" },
		 *          { "name": "platform" },
		 *          { "name": "version" },
		 *          { "name": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sName": "",
	
	
		/**
		 * Defines a data source type for the ordering which can be used to read
		 * real-time information from the table (updating the internally cached
		 * version) prior to ordering. This allows ordering to occur on user
		 * editable elements such as form inputs.
		 *  @type string
		 *  @default std
		 *
		 *  @name DataTable.defaults.column.orderDataType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
		 *          { "type": "numeric", "targets": [ 3 ] },
		 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
		 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          { "orderDataType": "dom-text" },
		 *          { "orderDataType": "dom-text", "type": "numeric" },
		 *          { "orderDataType": "dom-select" },
		 *          { "orderDataType": "dom-checkbox" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sSortDataType": "std",
	
	
		/**
		 * The title of this column.
		 *  @type string
		 *  @default null <i>Derived from the 'TH' value for this column in the
		 *    original HTML table.</i>
		 *
		 *  @name DataTable.defaults.column.title
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "title": "My column title", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "title": "My column title" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sTitle": null,
	
	
		/**
		 * The type allows you to specify how the data for this column will be
		 * ordered. Four types (string, numeric, date and html (which will strip
		 * HTML tags before ordering)) are currently available. Note that only date
		 * formats understood by Javascript's Date() object will be accepted as type
		 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
		 * 'numeric', 'date' or 'html' (by default). Further types can be adding
		 * through plug-ins.
		 *  @type string
		 *  @default null <i>Auto-detected from raw data</i>
		 *
		 *  @name DataTable.defaults.column.type
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "type": "html", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "type": "html" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sType": null,
	
	
		/**
		 * Defining the width of the column, this parameter may take any CSS value
		 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
		 * been given a specific width through this interface ensuring that the table
		 * remains readable.
		 *  @type string
		 *  @default null <i>Automatic</i>
		 *
		 *  @name DataTable.defaults.column.width
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "width": "20%", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "width": "20%" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sWidth": null
	};
	
	_fnHungarianMap( DataTable.defaults.column );
	
	
	
	/**
	 * DataTables settings object - this holds all the information needed for a
	 * given table, including configuration, data and current application of the
	 * table options. DataTables does not have a single instance for each DataTable
	 * with the settings attached to that instance, but rather instances of the
	 * DataTable "class" are created on-the-fly as needed (typically by a
	 * $().dataTable() call) and the settings object is then applied to that
	 * instance.
	 *
	 * Note that this object is related to {@link DataTable.defaults} but this
	 * one is the internal data store for DataTables's cache of columns. It should
	 * NOT be manipulated outside of DataTables. Any configuration should be done
	 * through the initialisation options.
	 *  @namespace
	 *  @todo Really should attach the settings object to individual instances so we
	 *    don't need to create new instances on each $().dataTable() call (if the
	 *    table already exists). It would also save passing oSettings around and
	 *    into every single function. However, this is a very significant
	 *    architecture change for DataTables and will almost certainly break
	 *    backwards compatibility with older installations. This is something that
	 *    will be done in 2.0.
	 */
	DataTable.models.oSettings = {
		/**
		 * Primary features of DataTables and their enablement state.
		 *  @namespace
		 */
		"oFeatures": {
	
			/**
			 * Flag to say if DataTables should automatically try to calculate the
			 * optimum table and columns widths (true) or not (false).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bAutoWidth": null,
	
			/**
			 * Delay the creation of TR and TD elements until they are actually
			 * needed by a driven page draw. This can give a significant speed
			 * increase for Ajax source and Javascript source data, but makes no
			 * difference at all fro DOM and server-side processing tables.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bDeferRender": null,
	
			/**
			 * Enable filtering on the table or not. Note that if this is disabled
			 * then there is no filtering at all on the table, including fnFilter.
			 * To just remove the filtering input use sDom and remove the 'f' option.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bFilter": null,
	
			/**
			 * Table information element (the 'Showing x of y records' div) enable
			 * flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bInfo": null,
	
			/**
			 * Present a user control allowing the end user to change the page size
			 * when pagination is enabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bLengthChange": null,
	
			/**
			 * Pagination enabled or not. Note that if this is disabled then length
			 * changing must also be disabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bPaginate": null,
	
			/**
			 * Processing indicator enable flag whenever DataTables is enacting a
			 * user request - typically an Ajax request for server-side processing.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bProcessing": null,
	
			/**
			 * Server-side processing enabled flag - when enabled DataTables will
			 * get all data from the server for every draw - there is no filtering,
			 * sorting or paging done on the client-side.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bServerSide": null,
	
			/**
			 * Sorting enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSort": null,
	
			/**
			 * Multi-column sorting
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortMulti": null,
	
			/**
			 * Apply a class to the columns which are being sorted to provide a
			 * visual highlight or not. This can slow things down when enabled since
			 * there is a lot of DOM interaction.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortClasses": null,
	
			/**
			 * State saving enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bStateSave": null
		},
	
	
		/**
		 * Scrolling settings for a table.
		 *  @namespace
		 */
		"oScroll": {
			/**
			 * When the table is shorter in height than sScrollY, collapse the
			 * table container down to the height of the table (when true).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bCollapse": null,
	
			/**
			 * Width of the scrollbar for the web-browser's platform. Calculated
			 * during table initialisation.
			 *  @type int
			 *  @default 0
			 */
			"iBarWidth": 0,
	
			/**
			 * Viewport width for horizontal scrolling. Horizontal scrolling is
			 * disabled if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sX": null,
	
			/**
			 * Width to expand the table to when using x-scrolling. Typically you
			 * should not need to use this.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @deprecated
			 */
			"sXInner": null,
	
			/**
			 * Viewport height for vertical scrolling. Vertical scrolling is disabled
			 * if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sY": null
		},
	
		/**
		 * Language information for the table.
		 *  @namespace
		 *  @extends DataTable.defaults.oLanguage
		 */
		"oLanguage": {
			/**
			 * Information callback function. See
			 * {@link DataTable.defaults.fnInfoCallback}
			 *  @type function
			 *  @default null
			 */
			"fnInfoCallback": null
		},
	
		/**
		 * Browser support parameters
		 *  @namespace
		 */
		"oBrowser": {
			/**
			 * Indicate if the browser incorrectly calculates width:100% inside a
			 * scrolling element (IE6/7)
			 *  @type boolean
			 *  @default false
			 */
			"bScrollOversize": false,
	
			/**
			 * Determine if the vertical scrollbar is on the right or left of the
			 * scrolling container - needed for rtl language layout, although not
			 * all browsers move the scrollbar (Safari).
			 *  @type boolean
			 *  @default false
			 */
			"bScrollbarLeft": false,
	
			/**
			 * Flag for if `getBoundingClientRect` is fully supported or not
			 *  @type boolean
			 *  @default false
			 */
			"bBounding": false,
	
			/**
			 * Browser scrollbar width
			 *  @type integer
			 *  @default 0
			 */
			"barWidth": 0
		},
	
	
		"ajax": null,
	
	
		/**
		 * Array referencing the nodes which are used for the features. The
		 * parameters of this object match what is allowed by sDom - i.e.
		 *   <ul>
		 *     <li>'l' - Length changing</li>
		 *     <li>'f' - Filtering input</li>
		 *     <li>'t' - The table!</li>
		 *     <li>'i' - Information</li>
		 *     <li>'p' - Pagination</li>
		 *     <li>'r' - pRocessing</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aanFeatures": [],
	
		/**
		 * Store data information - see {@link DataTable.models.oRow} for detailed
		 * information.
		 *  @type array
		 *  @default []
		 */
		"aoData": [],
	
		/**
		 * Array of indexes which are in the current display (after filtering etc)
		 *  @type array
		 *  @default []
		 */
		"aiDisplay": [],
	
		/**
		 * Array of indexes for display - no filtering
		 *  @type array
		 *  @default []
		 */
		"aiDisplayMaster": [],
	
		/**
		 * Map of row ids to data indexes
		 *  @type object
		 *  @default {}
		 */
		"aIds": {},
	
		/**
		 * Store information about each column that is in use
		 *  @type array
		 *  @default []
		 */
		"aoColumns": [],
	
		/**
		 * Store information about the table's header
		 *  @type array
		 *  @default []
		 */
		"aoHeader": [],
	
		/**
		 * Store information about the table's footer
		 *  @type array
		 *  @default []
		 */
		"aoFooter": [],
	
		/**
		 * Store the applied global search information in case we want to force a
		 * research or compare the old search to a new one.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 */
		"oPreviousSearch": {},
	
		/**
		 * Store the applied search for each column - see
		 * {@link DataTable.models.oSearch} for the format that is used for the
		 * filtering information for each column.
		 *  @type array
		 *  @default []
		 */
		"aoPreSearchCols": [],
	
		/**
		 * Sorting that is applied to the table. Note that the inner arrays are
		 * used in the following manner:
		 * <ul>
		 *   <li>Index 0 - column number</li>
		 *   <li>Index 1 - current sorting direction</li>
		 * </ul>
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @todo These inner arrays should really be objects
		 */
		"aaSorting": null,
	
		/**
		 * Sorting that is always applied to the table (i.e. prefixed in front of
		 * aaSorting).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aaSortingFixed": [],
	
		/**
		 * Classes to use for the striping of a table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"asStripeClasses": null,
	
		/**
		 * If restoring a table - we should restore its striping classes as well
		 *  @type array
		 *  @default []
		 */
		"asDestroyStripes": [],
	
		/**
		 * If restoring a table - we should restore its width
		 *  @type int
		 *  @default 0
		 */
		"sDestroyWidth": 0,
	
		/**
		 * Callback functions array for every time a row is inserted (i.e. on a draw).
		 *  @type array
		 *  @default []
		 */
		"aoRowCallback": [],
	
		/**
		 * Callback functions for the header on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoHeaderCallback": [],
	
		/**
		 * Callback function for the footer on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoFooterCallback": [],
	
		/**
		 * Array of callback functions for draw callback functions
		 *  @type array
		 *  @default []
		 */
		"aoDrawCallback": [],
	
		/**
		 * Array of callback functions for row created function
		 *  @type array
		 *  @default []
		 */
		"aoRowCreatedCallback": [],
	
		/**
		 * Callback functions for just before the table is redrawn. A return of
		 * false will be used to cancel the draw.
		 *  @type array
		 *  @default []
		 */
		"aoPreDrawCallback": [],
	
		/**
		 * Callback functions for when the table has been initialised.
		 *  @type array
		 *  @default []
		 */
		"aoInitComplete": [],
	
	
		/**
		 * Callbacks for modifying the settings to be stored for state saving, prior to
		 * saving state.
		 *  @type array
		 *  @default []
		 */
		"aoStateSaveParams": [],
	
		/**
		 * Callbacks for modifying the settings that have been stored for state saving
		 * prior to using the stored values to restore the state.
		 *  @type array
		 *  @default []
		 */
		"aoStateLoadParams": [],
	
		/**
		 * Callbacks for operating on the settings object once the saved state has been
		 * loaded
		 *  @type array
		 *  @default []
		 */
		"aoStateLoaded": [],
	
		/**
		 * Cache the table ID for quick access
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sTableId": "",
	
		/**
		 * The TABLE node for the main table
		 *  @type node
		 *  @default null
		 */
		"nTable": null,
	
		/**
		 * Permanent ref to the thead element
		 *  @type node
		 *  @default null
		 */
		"nTHead": null,
	
		/**
		 * Permanent ref to the tfoot element - if it exists
		 *  @type node
		 *  @default null
		 */
		"nTFoot": null,
	
		/**
		 * Permanent ref to the tbody element
		 *  @type node
		 *  @default null
		 */
		"nTBody": null,
	
		/**
		 * Cache the wrapper node (contains all DataTables controlled elements)
		 *  @type node
		 *  @default null
		 */
		"nTableWrapper": null,
	
		/**
		 * Indicate if when using server-side processing the loading of data
		 * should be deferred until the second draw.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 *  @default false
		 */
		"bDeferLoading": false,
	
		/**
		 * Indicate if all required information has been read in
		 *  @type boolean
		 *  @default false
		 */
		"bInitialised": false,
	
		/**
		 * Information about open rows. Each object in the array has the parameters
		 * 'nTr' and 'nParent'
		 *  @type array
		 *  @default []
		 */
		"aoOpenRows": [],
	
		/**
		 * Dictate the positioning of DataTables' control elements - see
		 * {@link DataTable.model.oInit.sDom}.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sDom": null,
	
		/**
		 * Search delay (in mS)
		 *  @type integer
		 *  @default null
		 */
		"searchDelay": null,
	
		/**
		 * Which type of pagination should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default two_button
		 */
		"sPaginationType": "two_button",
	
		/**
		 * The state duration (for `stateSave`) in seconds.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type int
		 *  @default 0
		 */
		"iStateDuration": 0,
	
		/**
		 * Array of callback functions for state saving. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the JSON string to save that has been thus far created. Returns
		 *       a JSON string to be inserted into a json object
		 *       (i.e. '"param": [ 0, 1, 2]')</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateSave": [],
	
		/**
		 * Array of callback functions for state loading. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the object stored. May return false to cancel state loading</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateLoad": [],
	
		/**
		 * State that was saved. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oSavedState": null,
	
		/**
		 * State that was loaded. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oLoadedState": null,
	
		/**
		 * Source url for AJAX data for the table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sAjaxSource": null,
	
		/**
		 * Property from a given object from which to read the table data from. This
		 * can be an empty string (when not server-side processing), in which case
		 * it is  assumed an an array is given directly.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sAjaxDataProp": null,
	
		/**
		 * Note if draw should be blocked while getting data
		 *  @type boolean
		 *  @default true
		 */
		"bAjaxDataGet": true,
	
		/**
		 * The last jQuery XHR object that was used for server-side data gathering.
		 * This can be used for working with the XHR information in one of the
		 * callbacks
		 *  @type object
		 *  @default null
		 */
		"jqXHR": null,
	
		/**
		 * JSON returned from the server in the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"json": undefined,
	
		/**
		 * Data submitted as part of the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"oAjaxData": undefined,
	
		/**
		 * Function to get the server-side data.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnServerData": null,
	
		/**
		 * Functions which are called prior to sending an Ajax request so extra
		 * parameters can easily be sent to the server
		 *  @type array
		 *  @default []
		 */
		"aoServerParams": [],
	
		/**
		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
		 * required).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sServerMethod": null,
	
		/**
		 * Format numbers for display.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnFormatNumber": null,
	
		/**
		 * List of options that can be used for the user selectable length menu.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aLengthMenu": null,
	
		/**
		 * Counter for the draws that the table does. Also used as a tracker for
		 * server-side processing
		 *  @type int
		 *  @default 0
		 */
		"iDraw": 0,
	
		/**
		 * Indicate if a redraw is being done - useful for Ajax
		 *  @type boolean
		 *  @default false
		 */
		"bDrawing": false,
	
		/**
		 * Draw index (iDraw) of the last error when parsing the returned data
		 *  @type int
		 *  @default -1
		 */
		"iDrawError": -1,
	
		/**
		 * Paging display length
		 *  @type int
		 *  @default 10
		 */
		"_iDisplayLength": 10,
	
		/**
		 * Paging start point - aiDisplay index
		 *  @type int
		 *  @default 0
		 */
		"_iDisplayStart": 0,
	
		/**
		 * Server-side processing - number of records in the result set
		 * (i.e. before filtering), Use fnRecordsTotal rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type int
		 *  @default 0
		 *  @private
		 */
		"_iRecordsTotal": 0,
	
		/**
		 * Server-side processing - number of records in the current display set
		 * (i.e. after filtering). Use fnRecordsDisplay rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type boolean
		 *  @default 0
		 *  @private
		 */
		"_iRecordsDisplay": 0,
	
		/**
		 * Flag to indicate if jQuery UI marking and classes should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bJUI": null,
	
		/**
		 * The classes to use for the table
		 *  @type object
		 *  @default {}
		 */
		"oClasses": {},
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if filtering has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bFiltered": false,
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if sorting has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bSorted": false,
	
		/**
		 * Indicate that if multiple rows are in the header and there is more than
		 * one unique cell per column, if the top one (true) or bottom one (false)
		 * should be used for sorting / title by DataTables.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bSortCellsTop": null,
	
		/**
		 * Initialisation object that is used for the table
		 *  @type object
		 *  @default null
		 */
		"oInit": null,
	
		/**
		 * Destroy callback functions - for plug-ins to attach themselves to the
		 * destroy so they can clean up markup and events.
		 *  @type array
		 *  @default []
		 */
		"aoDestroyCallback": [],
	
	
		/**
		 * Get the number of records in the current record set, before filtering
		 *  @type function
		 */
		"fnRecordsTotal": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsTotal * 1 :
				this.aiDisplayMaster.length;
		},
	
		/**
		 * Get the number of records in the current record set, after filtering
		 *  @type function
		 */
		"fnRecordsDisplay": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsDisplay * 1 :
				this.aiDisplay.length;
		},
	
		/**
		 * Get the display end point - aiDisplay index
		 *  @type function
		 */
		"fnDisplayEnd": function ()
		{
			var
				len      = this._iDisplayLength,
				start    = this._iDisplayStart,
				calc     = start + len,
				records  = this.aiDisplay.length,
				features = this.oFeatures,
				paginate = features.bPaginate;
	
			if ( features.bServerSide ) {
				return paginate === false || len === -1 ?
					start + records :
					Math.min( start+len, this._iRecordsDisplay );
			}
			else {
				return ! paginate || calc>records || len===-1 ?
					records :
					calc;
			}
		},
	
		/**
		 * The DataTables object for this table
		 *  @type object
		 *  @default null
		 */
		"oInstance": null,
	
		/**
		 * Unique identifier for each instance of the DataTables object. If there
		 * is an ID on the table node, then it takes that value, otherwise an
		 * incrementing internal counter is used.
		 *  @type string
		 *  @default null
		 */
		"sInstance": null,
	
		/**
		 * tabindex attribute value that is added to DataTables control elements, allowing
		 * keyboard navigation of the table and its controls.
		 */
		"iTabIndex": 0,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollHead": null,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollFoot": null,
	
		/**
		 * Last applied sort
		 *  @type array
		 *  @default []
		 */
		"aLastSort": [],
	
		/**
		 * Stored plug-in instances
		 *  @type object
		 *  @default {}
		 */
		"oPlugins": {},
	
		/**
		 * Function used to get a row's id from the row's data
		 *  @type function
		 *  @default null
		 */
		"rowIdFn": null,
	
		/**
		 * Data location where to store a row's id
		 *  @type string
		 *  @default null
		 */
		"rowId": null
	};

	/**
	 * Extension object for DataTables that is used to provide all extension
	 * options.
	 *
	 * Note that the `DataTable.ext` object is available through
	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	 *  @namespace
	 *  @extends DataTable.models.ext
	 */
	
	
	/**
	 * DataTables extensions
	 * 
	 * This namespace acts as a collection area for plug-ins that can be used to
	 * extend DataTables capabilities. Indeed many of the build in methods
	 * use this method to provide their own capabilities (sorting methods for
	 * example).
	 *
	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	 * reasons
	 *
	 *  @namespace
	 */
	DataTable.ext = _ext = {
		/**
		 * Buttons. For use with the Buttons extension for DataTables. This is
		 * defined here so other extensions can define buttons regardless of load
		 * order. It is _not_ used by DataTables core.
		 *
		 *  @type object
		 *  @default {}
		 */
		buttons: {},
	
	
		/**
		 * Element class names
		 *
		 *  @type object
		 *  @default {}
		 */
		classes: {},
	
	
		/**
		 * DataTables build type (expanded by the download builder)
		 *
		 *  @type string
		 */
		builder: "-source-",
	
	
		/**
		 * Error reporting.
		 * 
		 * How should DataTables report an error. Can take the value 'alert',
		 * 'throw', 'none' or a function.
		 *
		 *  @type string|function
		 *  @default alert
		 */
		errMode: "alert",
	
	
		/**
		 * Feature plug-ins.
		 * 
		 * This is an array of objects which describe the feature plug-ins that are
		 * available to DataTables. These feature plug-ins are then available for
		 * use through the `dom` initialisation option.
		 * 
		 * Each feature plug-in is described by an object which must have the
		 * following properties:
		 * 
		 * * `fnInit` - function that is used to initialise the plug-in,
		 * * `cFeature` - a character so the feature can be enabled by the `dom`
		 *   instillation option. This is case sensitive.
		 *
		 * The `fnInit` function has the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 *
		 * And the following return is expected:
		 * 
		 * * {node|null} The element which contains your feature. Note that the
		 *   return may also be void if your plug-in does not require to inject any
		 *   DOM elements into DataTables control (`dom`) - for example this might
		 *   be useful when developing a plug-in which allows table control via
		 *   keyboard entry
		 *
		 *  @type array
		 *
		 *  @example
		 *    $.fn.dataTable.ext.features.push( {
		 *      "fnInit": function( oSettings ) {
		 *        return new TableTools( { "oDTSettings": oSettings } );
		 *      },
		 *      "cFeature": "T"
		 *    } );
		 */
		feature: [],
	
	
		/**
		 * Row searching.
		 * 
		 * This method of searching is complimentary to the default type based
		 * searching, and a lot more comprehensive as it allows you complete control
		 * over the searching logic. Each element in this array is a function
		 * (parameters described below) that is called for every row in the table,
		 * and your logic decides if it should be included in the searching data set
		 * or not.
		 *
		 * Searching functions have the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{array|object}` Data for the row to be processed (same as the
		 *    original format that was passed in as the data source, or an array
		 *    from a DOM data source
		 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
		 *    can be useful to retrieve the `TR` element if you need DOM interaction.
		 *
		 * And the following return is expected:
		 *
		 * * {boolean} Include the row in the searched result set (true) or not
		 *   (false)
		 *
		 * Note that as with the main search ability in DataTables, technically this
		 * is "filtering", since it is subtractive. However, for consistency in
		 * naming we call it searching here.
		 *
		 *  @type array
		 *  @default []
		 *
		 *  @example
		 *    // The following example shows custom search being applied to the
		 *    // fourth column (i.e. the data[3] index) based on two input values
		 *    // from the end-user, matching the data in a certain range.
		 *    $.fn.dataTable.ext.search.push(
		 *      function( settings, data, dataIndex ) {
		 *        var min = document.getElementById('min').value * 1;
		 *        var max = document.getElementById('max').value * 1;
		 *        var version = data[3] == "-" ? 0 : data[3]*1;
		 *
		 *        if ( min == "" && max == "" ) {
		 *          return true;
		 *        }
		 *        else if ( min == "" && version < max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && "" == max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && version < max ) {
		 *          return true;
		 *        }
		 *        return false;
		 *      }
		 *    );
		 */
		search: [],
	
	
		/**
		 * Selector extensions
		 *
		 * The `selector` option can be used to extend the options available for the
		 * selector modifier options (`selector-modifier` object data type) that
		 * each of the three built in selector types offer (row, column and cell +
		 * their plural counterparts). For example the Select extension uses this
		 * mechanism to provide an option to select only rows, columns and cells
		 * that have been marked as selected by the end user (`{selected: true}`),
		 * which can be used in conjunction with the existing built in selector
		 * options.
		 *
		 * Each property is an array to which functions can be pushed. The functions
		 * take three attributes:
		 *
		 * * Settings object for the host table
		 * * Options object (`selector-modifier` object type)
		 * * Array of selected item indexes
		 *
		 * The return is an array of the resulting item indexes after the custom
		 * selector has been applied.
		 *
		 *  @type object
		 */
		selector: {
			cell: [],
			column: [],
			row: []
		},
	
	
		/**
		 * Internal functions, exposed for used in plug-ins.
		 * 
		 * Please note that you should not need to use the internal methods for
		 * anything other than a plug-in (and even then, try to avoid if possible).
		 * The internal function may change between releases.
		 *
		 *  @type object
		 *  @default {}
		 */
		internal: {},
	
	
		/**
		 * Legacy configuration options. Enable and disable legacy options that
		 * are available in DataTables.
		 *
		 *  @type object
		 */
		legacy: {
			/**
			 * Enable / disable DataTables 1.9 compatible server-side processing
			 * requests
			 *
			 *  @type boolean
			 *  @default null
			 */
			ajax: null
		},
	
	
		/**
		 * Pagination plug-in methods.
		 * 
		 * Each entry in this object is a function and defines which buttons should
		 * be shown by the pagination rendering method that is used for the table:
		 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
		 * buttons are displayed in the document, while the functions here tell it
		 * what buttons to display. This is done by returning an array of button
		 * descriptions (what each button will do).
		 *
		 * Pagination types (the four built in options and any additional plug-in
		 * options defined here) can be used through the `paginationType`
		 * initialisation parameter.
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{int} page` The current page index
		 * 2. `{int} pages` The number of pages in the table
		 *
		 * Each function is expected to return an array where each element of the
		 * array can be one of:
		 *
		 * * `first` - Jump to first page when activated
		 * * `last` - Jump to last page when activated
		 * * `previous` - Show previous page when activated
		 * * `next` - Show next page when activated
		 * * `{int}` - Show page of the index given
		 * * `{array}` - A nested array containing the above elements to add a
		 *   containing 'DIV' element (might be useful for styling).
		 *
		 * Note that DataTables v1.9- used this object slightly differently whereby
		 * an object with two functions would be defined for each plug-in. That
		 * ability is still supported by DataTables 1.10+ to provide backwards
		 * compatibility, but this option of use is now decremented and no longer
		 * documented in DataTables 1.10+.
		 *
		 *  @type object
		 *  @default {}
		 *
		 *  @example
		 *    // Show previous, next and current page buttons only
		 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
		 *      return [ 'previous', page, 'next' ];
		 *    };
		 */
		pager: {},
	
	
		renderer: {
			pageButton: {},
			header: {}
		},
	
	
		/**
		 * Ordering plug-ins - custom data source
		 * 
		 * The extension options for ordering of data available here is complimentary
		 * to the default type based ordering that DataTables typically uses. It
		 * allows much greater control over the the data that is being used to
		 * order a column, but is necessarily therefore more complex.
		 * 
		 * This type of ordering is useful if you want to do ordering based on data
		 * live from the DOM (for example the contents of an 'input' element) rather
		 * than just the static string that DataTables knows of.
		 * 
		 * The way these plug-ins work is that you create an array of the values you
		 * wish to be ordering for the column in question and then return that
		 * array. The data in the array much be in the index order of the rows in
		 * the table (not the currently ordering order!). Which order data gathering
		 * function is run here depends on the `dt-init columns.orderDataType`
		 * parameter that is used for the column (if any).
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{int}` Target column index
		 *
		 * Each function is expected to return an array:
		 *
		 * * `{array}` Data for the column to be ordering upon
		 *
		 *  @type array
		 *
		 *  @example
		 *    // Ordering using `input` node values
		 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
		 *    {
		 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
		 *        return $('input', td).val();
		 *      } );
		 *    }
		 */
		order: {},
	
	
		/**
		 * Type based plug-ins.
		 *
		 * Each column in DataTables has a type assigned to it, either by automatic
		 * detection or by direct assignment using the `type` option for the column.
		 * The type of a column will effect how it is ordering and search (plug-ins
		 * can also make use of the column type if required).
		 *
		 * @namespace
		 */
		type: {
			/**
			 * Type detection functions.
			 *
			 * The functions defined in this object are used to automatically detect
			 * a column's type, making initialisation of DataTables super easy, even
			 * when complex data is in the table.
			 *
			 * The functions defined take two parameters:
			 *
		     *  1. `{*}` Data from the column cell to be analysed
		     *  2. `{settings}` DataTables settings object. This can be used to
		     *     perform context specific type detection - for example detection
		     *     based on language settings such as using a comma for a decimal
		     *     place. Generally speaking the options from the settings will not
		     *     be required
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Data type detected, or null if unknown (and thus
			 *   pass it on to the other type detection functions.
			 *
			 *  @type array
			 *
			 *  @example
			 *    // Currency type detection plug-in:
			 *    $.fn.dataTable.ext.type.detect.push(
			 *      function ( data, settings ) {
			 *        // Check the numeric part
			 *        if ( ! $.isNumeric( data.substring(1) ) ) {
			 *          return null;
			 *        }
			 *
			 *        // Check prefixed by currency
			 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
			 *          return 'currency';
			 *        }
			 *        return null;
			 *      }
			 *    );
			 */
			detect: [],
	
	
			/**
			 * Type based search formatting.
			 *
			 * The type based searching functions can be used to pre-format the
			 * data to be search on. For example, it can be used to strip HTML
			 * tags or to de-format telephone numbers for numeric only searching.
			 *
			 * Note that is a search is not defined for a column of a given type,
			 * no search formatting will be performed.
			 * 
			 * Pre-processing of searching data plug-ins - When you assign the sType
			 * for a column (or have it automatically detected for you by DataTables
			 * or a type detection plug-in), you will typically be using this for
			 * custom sorting, but it can also be used to provide custom searching
			 * by allowing you to pre-processing the data and returning the data in
			 * the format that should be searched upon. This is done by adding
			 * functions this object with a parameter name which matches the sType
			 * for that target column. This is the corollary of <i>afnSortData</i>
			 * for searching data.
			 *
			 * The functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for searching
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Formatted string that will be used for the searching.
			 *
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
			 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
			 *    }
			 */
			search: {},
	
	
			/**
			 * Type based ordering.
			 *
			 * The column type tells DataTables what ordering to apply to the table
			 * when a column is sorted upon. The order for each type that is defined,
			 * is defined by the functions available in this object.
			 *
			 * Each ordering option can be described by three properties added to
			 * this object:
			 *
			 * * `{type}-pre` - Pre-formatting function
			 * * `{type}-asc` - Ascending order function
			 * * `{type}-desc` - Descending order function
			 *
			 * All three can be used together, only `{type}-pre` or only
			 * `{type}-asc` and `{type}-desc` together. It is generally recommended
			 * that only `{type}-pre` is used, as this provides the optimal
			 * implementation in terms of speed, although the others are provided
			 * for compatibility with existing Javascript sort functions.
			 *
			 * `{type}-pre`: Functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for ordering
			 *
			 * And return:
			 *
			 * * `{*}` Data to be sorted upon
			 *
			 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
			 * functions, taking two parameters:
			 *
		     *  1. `{*}` Data to compare to the second parameter
		     *  2. `{*}` Data to compare to the first parameter
			 *
			 * And returning:
			 *
			 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
			 *   than the second parameter, ===0 if the two parameters are equal and
			 *   >0 if the first parameter should be sorted height than the second
			 *   parameter.
			 * 
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    // Numeric ordering of formatted numbers with a pre-formatter
			 *    $.extend( $.fn.dataTable.ext.type.order, {
			 *      "string-pre": function(x) {
			 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
			 *        return parseFloat( a );
			 *      }
			 *    } );
			 *
			 *  @example
			 *    // Case-sensitive string ordering, with no pre-formatting method
			 *    $.extend( $.fn.dataTable.ext.order, {
			 *      "string-case-asc": function(x,y) {
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			 *      },
			 *      "string-case-desc": function(x,y) {
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			 *      }
			 *    } );
			 */
			order: {}
		},
	
		/**
		 * Unique DataTables instance counter
		 *
		 * @type int
		 * @private
		 */
		_unique: 0,
	
	
		//
		// Depreciated
		// The following properties are retained for backwards compatiblity only.
		// The should not be used in new projects and will be removed in a future
		// version
		//
	
		/**
		 * Version check function.
		 *  @type function
		 *  @depreciated Since 1.10
		 */
		fnVersionCheck: DataTable.fnVersionCheck,
	
	
		/**
		 * Index for what 'this' index API functions should use
		 *  @type int
		 *  @deprecated Since v1.10
		 */
		iApiIndex: 0,
	
	
		/**
		 * jQuery UI class container
		 *  @type object
		 *  @deprecated Since v1.10
		 */
		oJUIClasses: {},
	
	
		/**
		 * Software version
		 *  @type string
		 *  @deprecated Since v1.10
		 */
		sVersion: DataTable.version
	};
	
	
	//
	// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
	//
	$.extend( _ext, {
		afnFiltering: _ext.search,
		aTypes:       _ext.type.detect,
		ofnSearch:    _ext.type.search,
		oSort:        _ext.type.order,
		afnSortData:  _ext.order,
		aoFeatures:   _ext.feature,
		oApi:         _ext.internal,
		oStdClasses:  _ext.classes,
		oPagination:  _ext.pager
	} );
	
	
	$.extend( DataTable.ext.classes, {
		"sTable": "dataTable",
		"sNoFooter": "no-footer",
	
		/* Paging buttons */
		"sPageButton": "paginate_button",
		"sPageButtonActive": "current",
		"sPageButtonDisabled": "disabled",
	
		/* Striping classes */
		"sStripeOdd": "odd",
		"sStripeEven": "even",
	
		/* Empty row */
		"sRowEmpty": "dataTables_empty",
	
		/* Features */
		"sWrapper": "dataTables_wrapper",
		"sFilter": "dataTables_filter",
		"sInfo": "dataTables_info",
		"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
		"sLength": "dataTables_length",
		"sProcessing": "dataTables_processing",
	
		/* Sorting */
		"sSortAsc": "sorting_asc",
		"sSortDesc": "sorting_desc",
		"sSortable": "sorting", /* Sortable in both directions */
		"sSortableAsc": "sorting_asc_disabled",
		"sSortableDesc": "sorting_desc_disabled",
		"sSortableNone": "sorting_disabled",
		"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
	
		/* Filtering */
		"sFilterInput": "",
	
		/* Page length */
		"sLengthSelect": "",
	
		/* Scrolling */
		"sScrollWrapper": "dataTables_scroll",
		"sScrollHead": "dataTables_scrollHead",
		"sScrollHeadInner": "dataTables_scrollHeadInner",
		"sScrollBody": "dataTables_scrollBody",
		"sScrollFoot": "dataTables_scrollFoot",
		"sScrollFootInner": "dataTables_scrollFootInner",
	
		/* Misc */
		"sHeaderTH": "",
		"sFooterTH": "",
	
		// Deprecated
		"sSortJUIAsc": "",
		"sSortJUIDesc": "",
		"sSortJUI": "",
		"sSortJUIAscAllowed": "",
		"sSortJUIDescAllowed": "",
		"sSortJUIWrapper": "",
		"sSortIcon": "",
		"sJUIHeader": "",
		"sJUIFooter": ""
	} );
	
	
	(function() {
	
	// Reused strings for better compression. Closure compiler appears to have a
	// weird edge case where it is trying to expand strings rather than use the
	// variable version. This results in about 200 bytes being added, for very
	// little preference benefit since it this run on script load only.
	var _empty = '';
	_empty = '';
	
	var _stateDefault = _empty + 'ui-state-default';
	var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';
	var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';
	
	$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {
		/* Full numbers paging buttons */
		"sPageButton":         "fg-button ui-button "+_stateDefault,
		"sPageButtonActive":   "ui-state-disabled",
		"sPageButtonDisabled": "ui-state-disabled",
	
		/* Features */
		"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+
			"ui-buttonset-multi paging_", /* Note that the type is postfixed */
	
		/* Sorting */
		"sSortAsc":            _stateDefault+" sorting_asc",
		"sSortDesc":           _stateDefault+" sorting_desc",
		"sSortable":           _stateDefault+" sorting",
		"sSortableAsc":        _stateDefault+" sorting_asc_disabled",
		"sSortableDesc":       _stateDefault+" sorting_desc_disabled",
		"sSortableNone":       _stateDefault+" sorting_disabled",
		"sSortJUIAsc":         _sortIcon+"triangle-1-n",
		"sSortJUIDesc":        _sortIcon+"triangle-1-s",
		"sSortJUI":            _sortIcon+"carat-2-n-s",
		"sSortJUIAscAllowed":  _sortIcon+"carat-1-n",
		"sSortJUIDescAllowed": _sortIcon+"carat-1-s",
		"sSortJUIWrapper":     "DataTables_sort_wrapper",
		"sSortIcon":           "DataTables_sort_icon",
	
		/* Scrolling */
		"sScrollHead": "dataTables_scrollHead "+_stateDefault,
		"sScrollFoot": "dataTables_scrollFoot "+_stateDefault,
	
		/* Misc */
		"sHeaderTH":  _stateDefault,
		"sFooterTH":  _stateDefault,
		"sJUIHeader": _headerFooter+" ui-corner-tl ui-corner-tr",
		"sJUIFooter": _headerFooter+" ui-corner-bl ui-corner-br"
	} );
	
	}());
	
	
	
	var extPagination = DataTable.ext.pager;
	
	function _numbers ( page, pages ) {
		var
			numbers = [],
			buttons = extPagination.numbers_length,
			half = Math.floor( buttons / 2 ),
			i = 1;
	
		if ( pages <= buttons ) {
			numbers = _range( 0, pages );
		}
		else if ( page <= half ) {
			numbers = _range( 0, buttons-2 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
		}
		else if ( page >= pages - 1 - half ) {
			numbers = _range( pages-(buttons-2), pages );
			numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
			numbers.splice( 0, 0, 0 );
		}
		else {
			numbers = _range( page-half+2, page+half-1 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
			numbers.splice( 0, 0, 'ellipsis' );
			numbers.splice( 0, 0, 0 );
		}
	
		numbers.DT_el = 'span';
		return numbers;
	}
	
	
	$.extend( extPagination, {
		simple: function ( page, pages ) {
			return [ 'previous', 'next' ];
		},
	
		full: function ( page, pages ) {
			return [  'first', 'previous', 'next', 'last' ];
		},
	
		numbers: function ( page, pages ) {
			return [ _numbers(page, pages) ];
		},
	
		simple_numbers: function ( page, pages ) {
			return [ 'previous', _numbers(page, pages), 'next' ];
		},
	
		full_numbers: function ( page, pages ) {
			return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
		},
		
		first_last_numbers: function (page, pages) {
	 		return ['first', _numbers(page, pages), 'last'];
	 	},
	
		// For testing and plug-ins to use
		_numbers: _numbers,
	
		// Number of number buttons (including ellipsis) to show. _Must be odd!_
		numbers_length: 7
	} );
	
	
	$.extend( true, DataTable.ext.renderer, {
		pageButton: {
			_: function ( settings, host, idx, buttons, page, pages ) {
				var classes = settings.oClasses;
				var lang = settings.oLanguage.oPaginate;
				var aria = settings.oLanguage.oAria.paginate || {};
				var btnDisplay, btnClass, counter=0;
	
				var attach = function( container, buttons ) {
					var i, ien, node, button;
					var clickHandler = function ( e ) {
						_fnPageChange( settings, e.data.action, true );
					};
	
					for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
						button = buttons[i];
	
						if ( $.isArray( button ) ) {
							var inner = $( '<'+(button.DT_el || 'div')+'/>' )
								.appendTo( container );
							attach( inner, button );
						}
						else {
							btnDisplay = null;
							btnClass = '';
	
							switch ( button ) {
								case 'ellipsis':
									container.append('<span class="ellipsis">&#x2026;</span>');
									break;
	
								case 'first':
									btnDisplay = lang.sFirst;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'previous':
									btnDisplay = lang.sPrevious;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'next':
									btnDisplay = lang.sNext;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'last':
									btnDisplay = lang.sLast;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								default:
									btnDisplay = button + 1;
									btnClass = page === button ?
										classes.sPageButtonActive : '';
									break;
							}
	
							if ( btnDisplay !== null ) {
								node = $('<a>', {
										'class': classes.sPageButton+' '+btnClass,
										'aria-controls': settings.sTableId,
										'aria-label': aria[ button ],
										'data-dt-idx': counter,
										'tabindex': settings.iTabIndex,
										'id': idx === 0 && typeof button === 'string' ?
											settings.sTableId +'_'+ button :
											null
									} )
									.html( btnDisplay )
									.appendTo( container );
	
								_fnBindAction(
									node, {action: button}, clickHandler
								);
	
								counter++;
							}
						}
					}
				};
	
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame. Try / catch the error. Not good for
				// accessibility, but neither are frames.
				var activeEl;
	
				try {
					// Because this approach is destroying and recreating the paging
					// elements, focus is lost on the select button which is bad for
					// accessibility. So we want to restore focus once the draw has
					// completed
					activeEl = $(host).find(document.activeElement).data('dt-idx');
				}
				catch (e) {}
	
				attach( $(host).empty(), buttons );
	
				if ( activeEl !== undefined ) {
					$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
				}
			}
		}
	} );
	
	
	
	// Built in type detection. See model.ext.aTypes for information about
	// what is required from this methods.
	$.extend( DataTable.ext.type.detect, [
		// Plain numbers - first since V8 detects some plain numbers as dates
		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal ) ? 'num'+decimal : null;
		},
	
		// Dates (only those recognised by the browser's Date.parse)
		function ( d, settings )
		{
			// V8 tries _very_ hard to make a string passed into `Date.parse()`
			// valid, so we need to use a regex to restrict date formats. Use a
			// plug-in for anything other than ISO8601 style strings
			if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
				return null;
			}
			var parsed = Date.parse(d);
			return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
		},
	
		// Formatted numbers
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
		},
	
		// HTML numeric
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
		},
	
		// HTML numeric, formatted
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
		},
	
		// HTML (this is strict checking - there must be html)
		function ( d, settings )
		{
			return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
				'html' : null;
		}
	] );
	
	
	
	// Filter formatting functions. See model.ext.ofnSearch for information about
	// what is required from these methods.
	// 
	// Note that additional search methods are added for the html numbers and
	// html formatted numbers by `_addNumericSort()` when we know what the decimal
	// place is
	
	
	$.extend( DataTable.ext.type.search, {
		html: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data
						.replace( _re_new_lines, " " )
						.replace( _re_html, "" ) :
					'';
		},
	
		string: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data.replace( _re_new_lines, " " ) :
					data;
		}
	} );
	
	
	
	var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
		if ( d !== 0 && (!d || d === '-') ) {
			return -Infinity;
		}
	
		// If a decimal place other than `.` is used, it needs to be given to the
		// function so we can detect it and replace with a `.` which is the only
		// decimal place Javascript recognises - it is not locale aware.
		if ( decimalPlace ) {
			d = _numToDecimal( d, decimalPlace );
		}
	
		if ( d.replace ) {
			if ( re1 ) {
				d = d.replace( re1, '' );
			}
	
			if ( re2 ) {
				d = d.replace( re2, '' );
			}
		}
	
		return d * 1;
	};
	
	
	// Add the numeric 'deformatting' functions for sorting and search. This is done
	// in a function to provide an easy ability for the language options to add
	// additional methods if a non-period decimal place is used.
	function _addNumericSort ( decimalPlace ) {
		$.each(
			{
				// Plain numbers
				"num": function ( d ) {
					return __numericReplace( d, decimalPlace );
				},
	
				// Formatted numbers
				"num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_formatted_numeric );
				},
	
				// HTML numeric
				"html-num": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html );
				},
	
				// HTML numeric, formatted
				"html-num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
				}
			},
			function ( key, fn ) {
				// Add the ordering method
				_ext.type.order[ key+decimalPlace+'-pre' ] = fn;
	
				// For HTML types add a search formatter that will strip the HTML
				if ( key.match(/^html\-/) ) {
					_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
				}
			}
		);
	}
	
	
	// Default sort methods
	$.extend( _ext.type.order, {
		// Dates
		"date-pre": function ( d ) {
			return Date.parse( d ) || -Infinity;
		},
	
		// html
		"html-pre": function ( a ) {
			return _empty(a) ?
				'' :
				a.replace ?
					a.replace( /<.*?>/g, "" ).toLowerCase() :
					a+'';
		},
	
		// string
		"string-pre": function ( a ) {
			// This is a little complex, but faster than always calling toString,
			// http://jsperf.com/tostring-v-check
			return _empty(a) ?
				'' :
				typeof a === 'string' ?
					a.toLowerCase() :
					! a.toString ?
						'' :
						a.toString();
		},
	
		// string-asc and -desc are retained only for compatibility with the old
		// sort methods
		"string-asc": function ( x, y ) {
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		},
	
		"string-desc": function ( x, y ) {
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));
		}
	} );
	
	
	// Numeric sorting types - order doesn't matter here
	_addNumericSort( '' );
	
	
	$.extend( true, DataTable.ext.renderer, {
		header: {
			_: function ( settings, cell, column, classes ) {
				// No additional mark-up required
				// Attach a sort listener to update on sort - note that using the
				// `DT` namespace will allow the event to be removed automatically
				// on destroy, while the `dt` namespaced event is the one we are
				// listening for
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) { // need to check this this is the host
						return;               // table, not a nested one
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass(
							column.sSortingClass +' '+
							classes.sSortAsc +' '+
							classes.sSortDesc
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
				} );
			},
	
			jqueryui: function ( settings, cell, column, classes ) {
				$('<div/>')
					.addClass( classes.sSortJUIWrapper )
					.append( cell.contents() )
					.append( $('<span/>')
						.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
					)
					.appendTo( cell );
	
				// Attach a sort listener to update on sort
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) {
						return;
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
	
					cell
						.find( 'span.'+classes.sSortIcon )
						.removeClass(
							classes.sSortJUIAsc +" "+
							classes.sSortJUIDesc +" "+
							classes.sSortJUI +" "+
							classes.sSortJUIAscAllowed +" "+
							classes.sSortJUIDescAllowed
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortJUIDesc :
								column.sSortingClassJUI
						);
				} );
			}
		}
	} );
	
	/*
	 * Public helper functions. These aren't used internally by DataTables, or
	 * called by any of the options passed into DataTables, but they can be used
	 * externally by developers working with DataTables. They are helper functions
	 * to make working with DataTables a little bit easier.
	 */
	
	var __htmlEscapeEntities = function ( d ) {
		return typeof d === 'string' ?
			d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') :
			d;
	};
	
	/**
	 * Helpers for `columns.render`.
	 *
	 * The options defined here can be used with the `columns.render` initialisation
	 * option to provide a display renderer. The following functions are defined:
	 *
	 * * `number` - Will format numeric data (defined by `columns.data`) for
	 *   display, retaining the original unformatted data for sorting and filtering.
	 *   It takes 5 parameters:
	 *   * `string` - Thousands grouping separator
	 *   * `string` - Decimal point indicator
	 *   * `integer` - Number of decimal points to show
	 *   * `string` (optional) - Prefix.
	 *   * `string` (optional) - Postfix (/suffix).
	 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
	 *   parameters.
	 *
	 * @example
	 *   // Column definition using the number renderer
	 *   {
	 *     data: "salary",
	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	 *   }
	 *
	 * @namespace
	 */
	DataTable.render = {
		number: function ( thousands, decimal, precision, prefix, postfix ) {
			return {
				display: function ( d ) {
					if ( typeof d !== 'number' && typeof d !== 'string' ) {
						return d;
					}
	
					var negative = d < 0 ? '-' : '';
					var flo = parseFloat( d );
	
					// If NaN then there isn't much formatting that we can do - just
					// return immediately, escaping any HTML (this was supposed to
					// be a number after all)
					if ( isNaN( flo ) ) {
						return __htmlEscapeEntities( d );
					}
	
					flo = flo.toFixed( precision );
					d = Math.abs( flo );
	
					var intPart = parseInt( d, 10 );
					var floatPart = precision ?
						decimal+(d - intPart).toFixed( precision ).substring( 2 ):
						'';
	
					return negative + (prefix||'') +
						intPart.toString().replace(
							/\B(?=(\d{3})+(?!\d))/g, thousands
						) +
						floatPart +
						(postfix||'');
				}
			};
		},
	
		text: function () {
			return {
				display: __htmlEscapeEntities
			};
		}
	};
	
	
	/*
	 * This is really a good bit rubbish this method of exposing the internal methods
	 * publicly... - To be fixed in 2.0 using methods on the prototype
	 */
	
	
	/**
	 * Create a wrapper function for exporting an internal functions to an external API.
	 *  @param {string} fn API function name
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#internal
	 */
	function _fnExternApiFunc (fn)
	{
		return function() {
			var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
				Array.prototype.slice.call(arguments)
			);
			return DataTable.ext.internal[fn].apply( this, args );
		};
	}
	
	
	/**
	 * Reference to internal functions for use by plug-in developers. Note that
	 * these methods are references to internal functions and are considered to be
	 * private. If you use these methods, be aware that they are liable to change
	 * between versions.
	 *  @namespace
	 */
	$.extend( DataTable.ext.internal, {
		_fnExternApiFunc: _fnExternApiFunc,
		_fnBuildAjax: _fnBuildAjax,
		_fnAjaxUpdate: _fnAjaxUpdate,
		_fnAjaxParameters: _fnAjaxParameters,
		_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
		_fnAjaxDataSrc: _fnAjaxDataSrc,
		_fnAddColumn: _fnAddColumn,
		_fnColumnOptions: _fnColumnOptions,
		_fnAdjustColumnSizing: _fnAdjustColumnSizing,
		_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
		_fnColumnIndexToVisible: _fnColumnIndexToVisible,
		_fnVisbleColumns: _fnVisbleColumns,
		_fnGetColumns: _fnGetColumns,
		_fnColumnTypes: _fnColumnTypes,
		_fnApplyColumnDefs: _fnApplyColumnDefs,
		_fnHungarianMap: _fnHungarianMap,
		_fnCamelToHungarian: _fnCamelToHungarian,
		_fnLanguageCompat: _fnLanguageCompat,
		_fnBrowserDetect: _fnBrowserDetect,
		_fnAddData: _fnAddData,
		_fnAddTr: _fnAddTr,
		_fnNodeToDataIndex: _fnNodeToDataIndex,
		_fnNodeToColumnIndex: _fnNodeToColumnIndex,
		_fnGetCellData: _fnGetCellData,
		_fnSetCellData: _fnSetCellData,
		_fnSplitObjNotation: _fnSplitObjNotation,
		_fnGetObjectDataFn: _fnGetObjectDataFn,
		_fnSetObjectDataFn: _fnSetObjectDataFn,
		_fnGetDataMaster: _fnGetDataMaster,
		_fnClearTable: _fnClearTable,
		_fnDeleteIndex: _fnDeleteIndex,
		_fnInvalidate: _fnInvalidate,
		_fnGetRowElements: _fnGetRowElements,
		_fnCreateTr: _fnCreateTr,
		_fnBuildHead: _fnBuildHead,
		_fnDrawHead: _fnDrawHead,
		_fnDraw: _fnDraw,
		_fnReDraw: _fnReDraw,
		_fnAddOptionsHtml: _fnAddOptionsHtml,
		_fnDetectHeader: _fnDetectHeader,
		_fnGetUniqueThs: _fnGetUniqueThs,
		_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
		_fnFilterComplete: _fnFilterComplete,
		_fnFilterCustom: _fnFilterCustom,
		_fnFilterColumn: _fnFilterColumn,
		_fnFilter: _fnFilter,
		_fnFilterCreateSearch: _fnFilterCreateSearch,
		_fnEscapeRegex: _fnEscapeRegex,
		_fnFilterData: _fnFilterData,
		_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
		_fnUpdateInfo: _fnUpdateInfo,
		_fnInfoMacros: _fnInfoMacros,
		_fnInitialise: _fnInitialise,
		_fnInitComplete: _fnInitComplete,
		_fnLengthChange: _fnLengthChange,
		_fnFeatureHtmlLength: _fnFeatureHtmlLength,
		_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
		_fnPageChange: _fnPageChange,
		_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
		_fnProcessingDisplay: _fnProcessingDisplay,
		_fnFeatureHtmlTable: _fnFeatureHtmlTable,
		_fnScrollDraw: _fnScrollDraw,
		_fnApplyToChildren: _fnApplyToChildren,
		_fnCalculateColumnWidths: _fnCalculateColumnWidths,
		_fnThrottle: _fnThrottle,
		_fnConvertToWidth: _fnConvertToWidth,
		_fnGetWidestNode: _fnGetWidestNode,
		_fnGetMaxLenString: _fnGetMaxLenString,
		_fnStringToCss: _fnStringToCss,
		_fnSortFlatten: _fnSortFlatten,
		_fnSort: _fnSort,
		_fnSortAria: _fnSortAria,
		_fnSortListener: _fnSortListener,
		_fnSortAttachListener: _fnSortAttachListener,
		_fnSortingClasses: _fnSortingClasses,
		_fnSortData: _fnSortData,
		_fnSaveState: _fnSaveState,
		_fnLoadState: _fnLoadState,
		_fnSettingsFromNode: _fnSettingsFromNode,
		_fnLog: _fnLog,
		_fnMap: _fnMap,
		_fnBindAction: _fnBindAction,
		_fnCallbackReg: _fnCallbackReg,
		_fnCallbackFire: _fnCallbackFire,
		_fnLengthOverflow: _fnLengthOverflow,
		_fnRenderer: _fnRenderer,
		_fnDataSource: _fnDataSource,
		_fnRowAttributes: _fnRowAttributes,
		_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
		                                // in 1.10, so this dead-end function is
		                                // added to prevent errors
	} );
	

	// jQuery access
	$.fn.dataTable = DataTable;

	// Provide access to the host jQuery object (circular reference)
	DataTable.$ = $;

	// Legacy aliases
	$.fn.dataTableSettings = DataTable.settings;
	$.fn.dataTableExt = DataTable.ext;

	// With a capital `D` we return a DataTables API instance rather than a
	// jQuery object
	$.fn.DataTable = function ( opts ) {
		return $(this).dataTable( opts ).api();
	};

	// All properties that are available to $.fn.dataTable should also be
	// available on $.fn.DataTable
	$.each( DataTable, function ( prop, val ) {
		$.fn.DataTable[ prop ] = val;
	} );


	// Information about events fired by DataTables - for documentation.
	/**
	 * Draw event, fired whenever the table is redrawn on the page, at the same
	 * point as fnDrawCallback. This may be useful for binding events or
	 * performing calculations when the table is altered at all.
	 *  @name DataTable#draw.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Search event, fired when the searching applied to the table (using the
	 * built-in global search, or column filters) is altered.
	 *  @name DataTable#search.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page change event, fired when the paging of the table is altered.
	 *  @name DataTable#page.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Order event, fired when the ordering applied to the table is altered.
	 *  @name DataTable#order.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * DataTables initialisation complete event, fired when the table is fully
	 * drawn, including Ajax data loaded, if Ajax data is required.
	 *  @name DataTable#init.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The JSON object request from the server - only
	 *    present if client-side Ajax sourced data is used</li></ol>
	 */

	/**
	 * State save event, fired when the table has changed state a new state save
	 * is required. This event allows modification of the state saving object
	 * prior to actually doing the save, including addition or other state
	 * properties (for plug-ins) or modification of a DataTables core property.
	 *  @name DataTable#stateSaveParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The state information to be saved
	 */

	/**
	 * State load event, fired when the table is loading state from the stored
	 * data, but prior to the settings object being modified by the saved state
	 * - allowing modification of the saved state is required or loading of
	 * state for a plug-in.
	 *  @name DataTable#stateLoadParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * State loaded event, fired when state has been loaded from stored data and
	 * the settings object has been modified by the loaded data.
	 *  @name DataTable#stateLoaded.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * Processing event, fired when DataTables is doing some kind of processing
	 * (be it, order, searcg or anything else). It can be used to indicate to
	 * the end user that there is something happening, or that something has
	 * finished.
	 *  @name DataTable#processing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	 */

	/**
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	 * request to made to the server for new data. This event is called before
	 * DataTables processed the returned data, so it can also be used to pre-
	 * process the data returned from the server, if needed.
	 *
	 * Note that this trigger is called in `fnServerData`, if you override
	 * `fnServerData` and which to use this event, you need to trigger it in you
	 * success function.
	 *  @name DataTable#xhr.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {object} json JSON returned from the server
	 *
	 *  @example
	 *     // Use a custom property returned from the server in another DOM element
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       $('#status').html( json.status );
	 *     } );
	 *
	 *  @example
	 *     // Pre-process the data returned from the server
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	 *       }
	 *       // Note no return - manipulate the data directly in the JSON object.
	 *     } );
	 */

	/**
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	 * or passing the bDestroy:true parameter in the initialisation object. This
	 * can be used to remove bound events, added DOM nodes, etc.
	 *  @name DataTable#destroy.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page length change event, fired when number of records to show on each
	 * page (the length) is changed.
	 *  @name DataTable#length.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {integer} len New length
	 */

	/**
	 * Column sizing has changed.
	 *  @name DataTable#column-sizing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Column visibility has changed.
	 *  @name DataTable#column-visibility.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {int} column Column index
	 *  @param {bool} vis `false` if column now hidden, or `true` if visible
	 */

	return $.fn.dataTable;
}));

/*! DataTables Bootstrap 3 integration
 * ©2011-2014 SpryMedia Ltd - datatables.net/license
 */

/**
 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
 * DataTables 1.10 or newer.
 *
 * This file sets the defaults and adds options to DataTables to style its
 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
 * for further information.
 */
(function(window, document, undefined){

var factory = function( $, DataTable ) {
"use strict";


/* Set the defaults for DataTables initialisation */
$.extend( true, DataTable.defaults, {
	dom:
		"<'row'<'col-sm-6'l><'col-sm-6'f>>" +
		"<'row'<'col-sm-12'tr>>" +
		"<'row'<'col-sm-5'i><'col-sm-7'p>>",
	renderer: 'bootstrap'
} );


/* Default class modification */
$.extend( DataTable.ext.classes, {
	sWrapper:      "dataTables_wrapper form-inline dt-bootstrap",
	sFilterInput:  "form-control input-sm",
	sLengthSelect: "form-control input-sm"
} );


/* Bootstrap paging button renderer */
DataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {
	var api     = new DataTable.Api( settings );
	var classes = settings.oClasses;
	var lang    = settings.oLanguage.oPaginate;
	var btnDisplay, btnClass, counter=0;

	var attach = function( container, buttons ) {
		var i, ien, node, button;
		var clickHandler = function ( e ) {
			e.preventDefault();
			if ( !$(e.currentTarget).hasClass('disabled') ) {
				api.page( e.data.action ).draw( false );
			}
		};

		for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
			button = buttons[i];

			if ( $.isArray( button ) ) {
				attach( container, button );
			}
			else {
				btnDisplay = '';
				btnClass = '';

				switch ( button ) {
					case 'ellipsis':
						btnDisplay = '&hellip;';
						btnClass = 'disabled';
						break;

					case 'first':
						btnDisplay = lang.sFirst;
						btnClass = button + (page > 0 ?
							'' : ' disabled');
						break;

					case 'previous':
						btnDisplay = lang.sPrevious;
						btnClass = button + (page > 0 ?
							'' : ' disabled');
						break;

					case 'next':
						btnDisplay = lang.sNext;
						btnClass = button + (page < pages-1 ?
							'' : ' disabled');
						break;

					case 'last':
						btnDisplay = lang.sLast;
						btnClass = button + (page < pages-1 ?
							'' : ' disabled');
						break;

					default:
						btnDisplay = button + 1;
						btnClass = page === button ?
							'active' : '';
						break;
				}

				if ( btnDisplay ) {
					node = $('<li>', {
							'class': classes.sPageButton+' '+btnClass,
							'id': idx === 0 && typeof button === 'string' ?
								settings.sTableId +'_'+ button :
								null
						} )
						.append( $('<a>', {
								'href': '#',
								'aria-controls': settings.sTableId,
								'data-dt-idx': counter,
								'tabindex': settings.iTabIndex
							} )
							.html( btnDisplay )
						)
						.appendTo( container );

					settings.oApi._fnBindAction(
						node, {action: button}, clickHandler
					);

					counter++;
				}
			}
		}
	};

	// IE9 throws an 'unknown error' if document.activeElement is used
	// inside an iframe or frame. 
	var activeEl;

	try {
		// Because this approach is destroying and recreating the paging
		// elements, focus is lost on the select button which is bad for
		// accessibility. So we want to restore focus once the draw has
		// completed
		activeEl = $(document.activeElement).data('dt-idx');
	}
	catch (e) {}

	attach(
		$(host).empty().html('<ul class="pagination"/>').children('ul'),
		buttons
	);

	if ( activeEl ) {
		$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
	}
};


/*
 * TableTools Bootstrap compatibility
 * Required TableTools 2.1+
 */
if ( DataTable.TableTools ) {
	// Set the classes that TableTools uses to something suitable for Bootstrap
	$.extend( true, DataTable.TableTools.classes, {
		"container": "DTTT btn-group",
		"buttons": {
			"normal": "btn btn-default",
			"disabled": "disabled"
		},
		"collection": {
			"container": "DTTT_dropdown dropdown-menu",
			"buttons": {
				"normal": "",
				"disabled": "disabled"
			}
		},
		"print": {
			"info": "DTTT_print_info"
		},
		"select": {
			"row": "active"
		}
	} );

	// Have the collection use a bootstrap compatible drop down
	$.extend( true, DataTable.TableTools.DEFAULTS.oTags, {
		"collection": {
			"container": "ul",
			"button": "li",
			"liner": "a"
		}
	} );
}

}; // /factory


// Define as an AMD module if possible
if ( typeof define === 'function' && define.amd ) {
	define( ['jquery', 'datatables'], factory );
}
else if ( typeof exports === 'object' ) {
    // Node/CommonJS
    factory( require('jquery'), require('datatables') );
}
else if ( jQuery ) {
	// Otherwise simply initialise as normal, stopping multiple evaluation
	factory( jQuery, jQuery.fn.dataTable );
}


})(window, document);


/*! Responsive 1.0.6
 * 2014-2015 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     Responsive
 * @description Responsive tables plug-in for DataTables
 * @version     1.0.6
 * @file        dataTables.responsive.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2014-2015 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

(function(window, document, undefined) {


var factory = function( $, DataTable ) {
"use strict";

/**
 * Responsive is a plug-in for the DataTables library that makes use of
 * DataTables' ability to change the visibility of columns, changing the
 * visibility of columns so the displayed columns fit into the table container.
 * The end result is that complex tables will be dynamically adjusted to fit
 * into the viewport, be it on a desktop, tablet or mobile browser.
 *
 * Responsive for DataTables has two modes of operation, which can used
 * individually or combined:
 *
 * * Class name based control - columns assigned class names that match the
 *   breakpoint logic can be shown / hidden as required for each breakpoint.
 * * Automatic control - columns are automatically hidden when there is no
 *   room left to display them. Columns removed from the right.
 *
 * In additional to column visibility control, Responsive also has built into
 * options to use DataTables' child row display to show / hide the information
 * from the table that has been hidden. There are also two modes of operation
 * for this child row display:
 *
 * * Inline - when the control element that the user can use to show / hide
 *   child rows is displayed inside the first column of the table.
 * * Column - where a whole column is dedicated to be the show / hide control.
 *
 * Initialisation of Responsive is performed by:
 *
 * * Adding the class `responsive` or `dt-responsive` to the table. In this case
 *   Responsive will automatically be initialised with the default configuration
 *   options when the DataTable is created.
 * * Using the `responsive` option in the DataTables configuration options. This
 *   can also be used to specify the configuration options, or simply set to
 *   `true` to use the defaults.
 *
 *  @class
 *  @param {object} settings DataTables settings object for the host table
 *  @param {object} [opts] Configuration options
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.10.1+
 *
 *  @example
 *      $('#example').DataTable( {
 *        responsive: true
 *      } );
 *    } );
 */
var Responsive = function ( settings, opts ) {
	// Sanity check that we are using DataTables 1.10 or newer
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.1' ) ) {
		throw 'DataTables Responsive requires DataTables 1.10.1 or newer';
	}

	this.s = {
		dt: new DataTable.Api( settings ),
		columns: []
	};

	// Check if responsive has already been initialised on this table
	if ( this.s.dt.settings()[0].responsive ) {
		return;
	}

	// details is an object, but for simplicity the user can give it as a string
	if ( opts && typeof opts.details === 'string' ) {
		opts.details = { type: opts.details };
	}

	this.c = $.extend( true, {}, Responsive.defaults, DataTable.defaults.responsive, opts );
	settings.responsive = this;
	this._constructor();
};

Responsive.prototype = {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialise the Responsive instance
	 *
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;

		dt.settings()[0]._responsive = this;

		// Use DataTables' private throttle function to avoid processor thrashing
		$(window).on( 'resize.dtr orientationchange.dtr', dt.settings()[0].oApi._fnThrottle( function () {
			that._resize();
		} ) );

		// Destroy event handler
		dt.on( 'destroy.dtr', function () {
			$(window).off( 'resize.dtr orientationchange.dtr draw.dtr' );
		} );

		// Reorder the breakpoints array here in case they have been added out
		// of order
		this.c.breakpoints.sort( function (a, b) {
			return a.width < b.width ? 1 :
				a.width > b.width ? -1 : 0;
		} );

		// Determine which columns are already hidden, and should therefore
		// remain hidden. todo - should this be done? See thread 22677
		//
		// this.s.alwaysHidden = dt.columns(':hidden').indexes();

		this._classLogic();
		this._resizeAuto();

		// Details handler
		var details = this.c.details;
		if ( details.type ) {
			that._detailsInit();
			this._detailsVis();

			dt.on( 'column-visibility.dtr', function () {
				that._detailsVis();
			} );

			// Redraw the details box on each draw. This is used until
			// DataTables implements a native `updated` event for rows
			dt.on( 'draw.dtr', function () {
				dt.rows( {page: 'current'} ).iterator( 'row', function ( settings, idx ) {
					var row = dt.row( idx );

					if ( row.child.isShown() ) {
						var info = that.c.details.renderer( dt, idx );
						row.child( info, 'child' ).show();
					}
				} );
			} );

			$(dt.table().node()).addClass( 'dtr-'+details.type );
		}

		// First pass - draw the table for the current viewport size
		this._resize();
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Calculate the visibility for the columns in a table for a given
	 * breakpoint. The result is pre-determined based on the class logic if
	 * class names are used to control all columns, but the width of the table
	 * is also used if there are columns which are to be automatically shown
	 * and hidden.
	 *
	 * @param  {string} breakpoint Breakpoint name to use for the calculation
	 * @return {array} Array of boolean values initiating the visibility of each
	 *   column.
	 *  @private
	 */
	_columnsVisiblity: function ( breakpoint )
	{
		var dt = this.s.dt;
		var columns = this.s.columns;
		var i, ien;

		// Class logic - determine which columns are in this breakpoint based
		// on the classes. If no class control (i.e. `auto`) then `-` is used
		// to indicate this to the rest of the function
		var display = $.map( columns, function ( col ) {
			return col.auto && col.minWidth === null ?
				false :
				col.auto === true ?
					'-' :
					$.inArray( breakpoint, col.includeIn ) !== -1;
		} );

		// Auto column control - first pass: how much width is taken by the
		// ones that must be included from the non-auto columns
		var requiredWidth = 0;
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( display[i] === true ) {
				requiredWidth += columns[i].minWidth;
			}
		}

		// Second pass, use up any remaining width for other columns. For
		// scrolling tables we need to subtract the width of the scrollbar. It
		// may not be requires which makes this sub-optimal, but it would
		// require another full redraw to make complete use of those extra few
		// pixels
		var scrolling = dt.settings()[0].oScroll;
		var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
		var widthAvailable = dt.table().container().offsetWidth - bar;
		var usedWidth = widthAvailable - requiredWidth;

		// Control column needs to always be included. This makes it sub-
		// optimal in terms of using the available with, but to stop layout
		// thrashing or overflow. Also we need to account for the control column
		// width first so we know how much width is available for the other
		// columns, since the control column might not be the first one shown
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				usedWidth -= columns[i].minWidth;
			}
		}

		// Allow columns to be shown (counting from the left) until we run out
		// of room
		var empty = false;
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( display[i] === '-' && ! columns[i].control ) {
				// Once we've found a column that won't fit we don't let any
				// others display either, or columns might disappear in the
				// middle of the table
				if ( empty || usedWidth - columns[i].minWidth < 0 ) {
					empty = true;
					display[i] = false;
				}
				else {
					display[i] = true;
				}

				usedWidth -= columns[i].minWidth;
			}
		}

		// Determine if the 'control' column should be shown (if there is one).
		// This is the case when there is a hidden column (that is not the
		// control column). The two loops look inefficient here, but they are
		// trivial and will fly through. We need to know the outcome from the
		// first , before the action in the second can be taken
		var showControl = false;

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( ! columns[i].control && ! columns[i].never && ! display[i] ) {
				showControl = true;
				break;
			}
		}

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				display[i] = showControl;
			}
		}

		// Finally we need to make sure that there is at least one column that
		// is visible
		if ( $.inArray( true, display ) === -1 ) {
			display[0] = true;
		}

		return display;
	},


	/**
	 * Create the internal `columns` array with information about the columns
	 * for the table. This includes determining which breakpoints the column
	 * will appear in, based upon class names in the column, which makes up the
	 * vast majority of this method.
	 *
	 * @private
	 */
	_classLogic: function ()
	{
		var that = this;
		var calc = {};
		var breakpoints = this.c.breakpoints;
		var columns = this.s.dt.columns().eq(0).map( function (i) {
			var className = this.column(i).header().className;

			return {
				className: className,
				includeIn: [],
				auto:      false,
				control:   false,
				never:     className.match(/\bnever\b/) ? true : false
			};
		} );

		// Simply add a breakpoint to `includeIn` array, ensuring that there are
		// no duplicates
		var add = function ( colIdx, name ) {
			var includeIn = columns[ colIdx ].includeIn;

			if ( $.inArray( name, includeIn ) === -1 ) {
				includeIn.push( name );
			}
		};

		var column = function ( colIdx, name, operator, matched ) {
			var size, i, ien;

			if ( ! operator ) {
				columns[ colIdx ].includeIn.push( name );
			}
			else if ( operator === 'max-' ) {
				// Add this breakpoint and all smaller
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width <= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'min-' ) {
				// Add this breakpoint and all larger
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width >= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'not-' ) {
				// Add all but this breakpoint (xxx need extra information)

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].name.indexOf( matched ) === -1 ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
		};

		// Loop over each column and determine if it has a responsive control
		// class
		columns.each( function ( col, i ) {
			var classNames = col.className.split(' ');
			var hasClass = false;

			// Split the class name up so multiple rules can be applied if needed
			for ( var k=0, ken=classNames.length ; k<ken ; k++ ) {
				var className = $.trim( classNames[k] );

				if ( className === 'all' ) {
					// Include in all
					hasClass = true;
					col.includeIn = $.map( breakpoints, function (a) {
						return a.name;
					} );
					return;
				}
				else if ( className === 'none' || className === 'never' ) {
					// Include in none (default) and no auto
					hasClass = true;
					return;
				}
				else if ( className === 'control' ) {
					// Special column that is only visible, when one of the other
					// columns is hidden. This is used for the details control
					hasClass = true;
					col.control = true;
					return;
				}

				$.each( breakpoints, function ( j, breakpoint ) {
					// Does this column have a class that matches this breakpoint?
					var brokenPoint = breakpoint.name.split('-');
					var re = new RegExp( '(min\\-|max\\-|not\\-)?('+brokenPoint[0]+')(\\-[_a-zA-Z0-9])?' );
					var match = className.match( re );

					if ( match ) {
						hasClass = true;

						if ( match[2] === brokenPoint[0] && match[3] === '-'+brokenPoint[1] ) {
							// Class name matches breakpoint name fully
							column( i, breakpoint.name, match[1], match[2]+match[3] );
						}
						else if ( match[2] === brokenPoint[0] && ! match[3] ) {
							// Class name matched primary breakpoint name with no qualifier
							column( i, breakpoint.name, match[1], match[2] );
						}
					}
				} );
			}

			// If there was no control class, then automatic sizing is used
			if ( ! hasClass ) {
				col.auto = true;
			}
		} );

		this.s.columns = columns;
	},


	/**
	 * Initialisation for the details handler
	 *
	 * @private
	 */
	_detailsInit: function ()
	{
		var that    = this;
		var dt      = this.s.dt;
		var details = this.c.details;

		// The inline type always uses the first child as the target
		if ( details.type === 'inline' ) {
			details.target = 'td:first-child';
		}

		// type.target can be a string jQuery selector or a column index
		var target   = details.target;
		var selector = typeof target === 'string' ? target : 'td';

		// Click handler to show / hide the details rows when they are available
		$( dt.table().body() ).on( 'click', selector, function (e) {
			// If the table is not collapsed (i.e. there is no hidden columns)
			// then take no action
			if ( ! $(dt.table().node()).hasClass('collapsed' ) ) {
				return;
			}

			// Check that the row is actually a DataTable's controlled node
			if ( ! dt.row( $(this).closest('tr') ).length ) {
				return;
			}

			// For column index, we determine if we should act or not in the
			// handler - otherwise it is already okay
			if ( typeof target === 'number' ) {
				var targetIdx = target < 0 ?
					dt.columns().eq(0).length + target :
					target;

				if ( dt.cell( this ).index().column !== targetIdx ) {
					return;
				}
			}

			// $().closest() includes itself in its check
			var row = dt.row( $(this).closest('tr') );

			if ( row.child.isShown() ) {
				row.child( false );
				$( row.node() ).removeClass( 'parent' );
			}
			else {
				var info = that.c.details.renderer( dt, row[0] );
				row.child( info, 'child' ).show();
				$( row.node() ).addClass( 'parent' );
			}
		} );
	},


	/**
	 * Update the child rows in the table whenever the column visibility changes
	 *
	 * @private
	 */
	_detailsVis: function ()
	{
		var that = this;
		var dt = this.s.dt;

		// Find how many columns are hidden
		var hiddenColumns = dt.columns().indexes().filter( function ( idx ) {
			var col = dt.column( idx );

			if ( col.visible() ) {
				return null;
			}

			// Only counts as hidden if it doesn't have the `never` class
			return $( col.header() ).hasClass( 'never' ) ? null : idx;
		} );
		var haveHidden = true;

		if ( hiddenColumns.length === 0 || ( hiddenColumns.length === 1 && this.s.columns[ hiddenColumns[0] ].control ) ) {
			haveHidden = false;
		}

		if ( haveHidden ) {
			// Show all existing child rows
			dt.rows( { page: 'current' } ).eq(0).each( function (idx) {
				var row = dt.row( idx );

				if ( row.child() ) {
					var info = that.c.details.renderer( dt, row[0] );

					// The renderer can return false to have no child row
					if ( info === false ) {
						row.child.hide();
					}
					else {
						row.child( info, 'child' ).show();
					}
				}
			} );
		}
		else {
			// Hide all existing child rows
			dt.rows( { page: 'current' } ).eq(0).each( function (idx) {
				dt.row( idx ).child.hide();
			} );
		}
	},


	/**
	 * Find a breakpoint object from a name
	 * @param  {string} name Breakpoint name to find
	 * @return {object}      Breakpoint description object
	 */
	_find: function ( name )
	{
		var breakpoints = this.c.breakpoints;

		for ( var i=0, ien=breakpoints.length ; i<ien ; i++ ) {
			if ( breakpoints[i].name === name ) {
				return breakpoints[i];
			}
		}
	},


	/**
	 * Alter the table display for a resized viewport. This involves first
	 * determining what breakpoint the window currently is in, getting the
	 * column visibilities to apply and then setting them.
	 *
	 * @private
	 */
	_resize: function ()
	{
		var dt = this.s.dt;
		var width = $(window).width();
		var breakpoints = this.c.breakpoints;
		var breakpoint = breakpoints[0].name;
		var columns = this.s.columns;
		var i, ien;

		// Determine what breakpoint we are currently at
		for ( i=breakpoints.length-1 ; i>=0 ; i-- ) {
			if ( width <= breakpoints[i].width ) {
				breakpoint = breakpoints[i].name;
				break;
			}
		}
		
		// Show the columns for that break point
		var columnsVis = this._columnsVisiblity( breakpoint );

		// Set the class before the column visibility is changed so event
		// listeners know what the state is. Need to determine if there are
		// any columns that are not visible but can be shown
		var collapsedClass = false;
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columnsVis[i] === false && ! columns[i].never ) {
				collapsedClass = true;
				break;
			}
		}

		$( dt.table().node() ).toggleClass('collapsed', collapsedClass );

		dt.columns().eq(0).each( function ( colIdx, i ) {
			dt.column( colIdx ).visible( columnsVis[i] );
		} );
	},


	/**
	 * Determine the width of each column in the table so the auto column hiding
	 * has that information to work with. This method is never going to be 100%
	 * perfect since column widths can change slightly per page, but without
	 * seriously compromising performance this is quite effective.
	 *
	 * @private
	 */
	_resizeAuto: function ()
	{
		var dt = this.s.dt;
		var columns = this.s.columns;

		// Are we allowed to do auto sizing?
		if ( ! this.c.auto ) {
			return;
		}

		// Are there any columns that actually need auto-sizing, or do they all
		// have classes defined
		if ( $.inArray( true, $.map( columns, function (c) { return c.auto; } ) ) === -1 ) {
			return;
		}

		// Clone the table with the current data in it
		var tableWidth   = dt.table().node().offsetWidth;
		var columnWidths = dt.columns;
		var clonedTable  = dt.table().node().cloneNode( false );
		var clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );
		var clonedBody   = $( dt.table().body().cloneNode( false ) ).appendTo( clonedTable );

		$( dt.table().footer() ).clone( false ).appendTo( clonedTable );

		// This is a bit slow, but we need to get a clone of each row that
		// includes all columns. As such, try to do this as little as possible.
		dt.rows( { page: 'current' } ).indexes().flatten().each( function ( idx ) {
			var clone = dt.row( idx ).node().cloneNode( true );
			
			if ( dt.columns( ':hidden' ).flatten().length ) {
				$(clone).append( dt.cells( idx, ':hidden' ).nodes().to$().clone() );
			}

			$(clone).appendTo( clonedBody );
		} );

		var cells = dt.columns().header().to$().clone( false );
		$('<tr/>')
			.append( cells )
			.appendTo( clonedHeader );

		// In the inline case extra padding is applied to the first column to
		// give space for the show / hide icon. We need to use this in the
		// calculation
		if ( this.c.details.type === 'inline' ) {
			$(clonedTable).addClass( 'dtr-inline collapsed' );
		}

		var inserted = $('<div/>')
			.css( {
				width: 1,
				height: 1,
				overflow: 'hidden'
			} )
			.append( clonedTable );

		// Remove columns which are not to be included
		inserted.find('th.never, td.never').remove();

		inserted.insertBefore( dt.table().node() );

		// The cloned header now contains the smallest that each column can be
		dt.columns().eq(0).each( function ( idx ) {
			columns[idx].minWidth = cells[ idx ].offsetWidth || 0;
		} );

		inserted.remove();
	}
};


/**
 * List of default breakpoints. Each item in the array is an object with two
 * properties:
 *
 * * `name` - the breakpoint name.
 * * `width` - the breakpoint width
 *
 * @name Responsive.breakpoints
 * @static
 */
Responsive.breakpoints = [
	{ name: 'desktop',  width: Infinity },
	{ name: 'tablet-l', width: 1024 },
	{ name: 'tablet-p', width: 768 },
	{ name: 'mobile-l', width: 480 },
	{ name: 'mobile-p', width: 320 }
];


/**
 * Responsive default settings for initialisation
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.defaults = {
	/**
	 * List of breakpoints for the instance. Note that this means that each
	 * instance can have its own breakpoints. Additionally, the breakpoints
	 * cannot be changed once an instance has been creased.
	 *
	 * @type {Array}
	 * @default Takes the value of `Responsive.breakpoints`
	 */
	breakpoints: Responsive.breakpoints,

	/**
	 * Enable / disable auto hiding calculations. It can help to increase
	 * performance slightly if you disable this option, but all columns would
	 * need to have breakpoint classes assigned to them
	 *
	 * @type {Boolean}
	 * @default  `true`
	 */
	auto: true,

	/**
	 * Details control. If given as a string value, the `type` property of the
	 * default object is set to that value, and the defaults used for the rest
	 * of the object - this is for ease of implementation.
	 *
	 * The object consists of the following properties:
	 *
	 * * `renderer` - function that is called for display of the child row data.
	 *   The default function will show the data from the hidden columns
	 * * `target` - Used as the selector for what objects to attach the child
	 *   open / close to
	 * * `type` - `false` to disable the details display, `inline` or `column`
	 *   for the two control types
	 *
	 * @type {Object|string}
	 */
	details: {
		renderer: function ( api, rowIdx ) {
			var data = api.cells( rowIdx, ':hidden' ).eq(0).map( function ( cell ) {
				var header = $( api.column( cell.column ).header() );
				var idx = api.cell( cell ).index();

				if ( header.hasClass( 'control' ) || header.hasClass( 'never' ) ) {
					return '';
				}

				// Use a non-public DT API method to render the data for display
				// This needs to be updated when DT adds a suitable method for
				// this type of data retrieval
				var dtPrivate = api.settings()[0];
				var cellData = dtPrivate.oApi._fnGetCellData(
					dtPrivate, idx.row, idx.column, 'display'
				);
				var title = header.text();
				if ( title ) {
					title = title + ':';
				}

				return '<li data-dtr-index="'+idx.column+'">'+
						'<span class="dtr-title">'+
							title+
						'</span> '+
						'<span class="dtr-data">'+
							cellData+
						'</span>'+
					'</li>';
			} ).toArray().join('');

			return data ?
				$('<ul data-dtr-index="'+rowIdx+'"/>').append( data ) :
				false;
		},

		target: 0,

		type: 'inline'
	}
};


/*
 * API
 */
var Api = $.fn.dataTable.Api;

// Doesn't do anything - work around for a bug in DT... Not documented
Api.register( 'responsive()', function () {
	return this;
} );

Api.register( 'responsive.index()', function ( li ) {
	li = $(li);

	return {
		column: li.data('dtr-index'),
		row:    li.parent().data('dtr-index')
	};
} );

Api.register( 'responsive.rebuild()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._classLogic();
		}
	} );
} );

Api.register( 'responsive.recalc()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._resizeAuto();
			ctx._responsive._resize();
		}
	} );
} );


/**
 * Version information
 *
 * @name Responsive.version
 * @static
 */
Responsive.version = '1.0.6';


$.fn.dataTable.Responsive = Responsive;
$.fn.DataTable.Responsive = Responsive;

// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'init.dt.dtr', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	if ( $(settings.nTable).hasClass( 'responsive' ) ||
		 $(settings.nTable).hasClass( 'dt-responsive' ) ||
		 settings.oInit.responsive ||
		 DataTable.defaults.responsive
	) {
		var init = settings.oInit.responsive;

		if ( init !== false ) {
			new Responsive( settings, $.isPlainObject( init ) ? init : {}  );
		}
	}
} );

return Responsive;
}; // /factory


// Define as an AMD module if possible
if ( typeof define === 'function' && define.amd ) {
	define( ['jquery', 'datatables'], factory );
}
else if ( typeof exports === 'object' ) {
    // Node/CommonJS
    factory( require('jquery'), require('datatables') );
}
else if ( jQuery && !jQuery.fn.dataTable.Responsive ) {
	// Otherwise simply initialise as normal, stopping multiple evaluation
	factory( jQuery, jQuery.fn.dataTable );
}


})(window, document);

/* Set the defaults for DataTables initialisation */

function getOrderBy(element)
{
    var orderByVal = $(element).attr('data-order-by');

    var orderBy = ['created_at', 'desc'];
    if (!(orderByVal == 'false' || orderByVal == false || orderByVal == undefined)) {
        var pieces = orderByVal.split('|');
        if (pieces.length == 1) {
            orderBy = [pieces[0], 'asc'];
        }
        else if (pieces.length == 2) {
            orderBy = [pieces[0], pieces[1]];
        }
    }

    return orderBy;
}

// ==================================================
// fancyBox v3.1.28
//
// Licensed GPLv3 for open source use
// or fancyBox Commercial License for commercial use
//
// http://fancyapps.com/fancybox/
// Copyright 2017 fancyApps
//
// ==================================================
!function(t,e,n,o){"use strict";function i(t){var e=t.currentTarget,o=t.data?t.data.options:{},i=o.selector?n(o.selector):t.data?t.data.items:[],a=n(e).attr("data-fancybox")||"",s=0,r=n.fancybox.getInstance();t.preventDefault(),r&&r.current.opts.$orig.is(e)||(a?(i=i.length?i.filter('[data-fancybox="'+a+'"]'):n('[data-fancybox="'+a+'"]'),s=i.index(e),s<0&&(s=0)):i=[e],n.fancybox.open(i,o,s))}if(n){if(n.fn.fancybox)return void n.error("fancyBox already initialized");var a={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!1,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","close"],idleTime:4,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><button data-fancybox-prev title="{{PREV}}" class="fancybox-button fancybox-button--left"></button><div class="fancybox-infobar__body"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><button data-fancybox-next title="{{NEXT}}" class="fancybox-button fancybox-button--right"></button></div><div class="fancybox-toolbar">{{BUTTONS}}</div><div class="fancybox-navigation"><button data-fancybox-prev title="{{PREV}}" class="fancybox-arrow fancybox-arrow--left" /><button data-fancybox-next title="{{NEXT}}" class="fancybox-arrow fancybox-arrow--right" /></div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"></button>',fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"></button>',thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>'},parentEl:"body",autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder"}}},s=n(t),r=n(e),c=0,l=function(t){return t&&t.hasOwnProperty&&t instanceof n},u=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),d=function(){var t,n=e.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(n.style[t]!==o)return i[t]}(),f=function(t){return t&&t.length&&t[0].offsetHeight},h=function(t,o,i){var s=this;s.opts=n.extend(!0,{index:i},a,o||{}),o&&n.isArray(o.buttons)&&(s.opts.buttons=o.buttons),s.id=s.opts.id||++c,s.group=[],s.currIndex=parseInt(s.opts.index,10)||0,s.prevIndex=null,s.prevPos=null,s.currPos=0,s.firstRun=null,s.createGroup(t),s.group.length&&(s.$lastFocus=n(e.activeElement).blur(),s.slides={},s.init(t))};n.extend(h.prototype,{init:function(){var t,e,o,i=this,a=i.group[i.currIndex].opts;i.scrollTop=r.scrollTop(),i.scrollLeft=r.scrollLeft(),n.fancybox.getInstance()||n.fancybox.isMobile||"hidden"===n("body").css("overflow")||(t=n("body").width(),n("html").addClass("fancybox-enabled"),t=n("body").width()-t,t>1&&n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar, .fancybox-enabled body { margin-right: '+t+"px; }</style>")),o="",n.each(a.buttons,function(t,e){o+=a.btnTpl[e]||""}),e=n(i.translate(i,a.baseTpl.replace("{{BUTTONS}}",o))).addClass("fancybox-is-hidden").attr("id","fancybox-container-"+i.id).addClass(a.baseClass).data("FancyBox",i).prependTo(a.parentEl),i.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption"].forEach(function(t){i.$refs[t]=e.find(".fancybox-"+t)}),(!a.arrows||i.group.length<2)&&e.find(".fancybox-navigation").remove(),a.infobar||i.$refs.infobar.remove(),a.toolbar||i.$refs.toolbar.remove(),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang];return e.replace(/\{\{(\w+)\}\}/g,function(t,e){var i=n[e];return i===o?t:i})},createGroup:function(t){var e=this,i=n.makeArray(t);n.each(i,function(t,i){var a,s,r,c,l={},u={},d=[];n.isPlainObject(i)?(l=i,u=i.opts||i):"object"===n.type(i)&&n(i).length?(a=n(i),d=a.data(),u="options"in d?d.options:{},u="object"===n.type(u)?u:{},l.src="src"in d?d.src:u.src||a.attr("href"),["width","height","thumb","type","filter"].forEach(function(t){t in d&&(u[t]=d[t])}),"srcset"in d&&(u.image={srcset:d.srcset}),u.$orig=a,l.type||l.src||(l.type="inline",l.src=i)):l={type:"html",src:i+""},l.opts=n.extend(!0,{},e.opts,u),n.fancybox.isMobile&&(l.opts=n.extend(!0,{},l.opts,l.opts.mobile)),s=l.type||l.opts.type,r=l.src||"",!s&&r&&(r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":r.match(/\.(pdf)((\?|#).*)?$/i)?s="pdf":"#"===r.charAt(0)&&(s="inline")),l.type=s,l.index=e.group.length,l.opts.$orig&&!l.opts.$orig.length&&delete l.opts.$orig,!l.opts.$thumb&&l.opts.$orig&&(l.opts.$thumb=l.opts.$orig.find("img:first")),l.opts.$thumb&&!l.opts.$thumb.length&&delete l.opts.$thumb,"function"===n.type(l.opts.caption)?l.opts.caption=l.opts.caption.apply(i,[e,l]):"caption"in d&&(l.opts.caption=d.caption),l.opts.caption=l.opts.caption===o?"":l.opts.caption+"","ajax"===s&&(c=r.split(/\s+/,2),c.length>1&&(l.src=c.shift(),l.opts.filter=c.shift())),"auto"==l.opts.smallBtn&&(n.inArray(s,["html","inline","ajax"])>-1?(l.opts.toolbar=!1,l.opts.smallBtn=!0):l.opts.smallBtn=!1),"pdf"===s&&(l.type="iframe",l.opts.iframe.preload=!1),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),e.group.push(l)})},addEvents:function(){var o=this;o.removeEvents(),o.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),o.close(t)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),o.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),o.next()}),s.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?u(function(){o.update()}):(o.$refs.stage.hide(),setTimeout(function(){o.$refs.stage.show(),o.update()},500))}),r.on("focusin.fb",function(t){var i=n.fancybox?n.fancybox.getInstance():null;i.isClosing||!i.current||!i.current.opts.trapFocus||n(t.target).hasClass("fancybox-container")||n(t.target).is(e)||i&&"fixed"!==n(t.target).css("position")&&!i.$refs.container.has(t.target).length&&(t.stopPropagation(),i.focus(),s.scrollTop(o.scrollTop).scrollLeft(o.scrollLeft))}),r.on("keydown.fb",function(t){var e=o.current,i=t.keyCode||t.which;if(e&&e.opts.keyboard&&!n(t.target).is("input")&&!n(t.target).is("textarea"))return 8===i||27===i?(t.preventDefault(),void o.close(t)):37===i||38===i?(t.preventDefault(),void o.previous()):39===i||40===i?(t.preventDefault(),void o.next()):void o.trigger("afterKeydown",t,i)}),o.group[o.currIndex].opts.idleTime&&(o.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseenter.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(){o.idleSecondsCounter=0,o.isIdle&&o.showControls(),o.isIdle=!1}),o.idleInterval=t.setInterval(function(){o.idleSecondsCounter++,o.idleSecondsCounter>=o.group[o.currIndex].opts.idleTime&&(o.isIdle=!0,o.idleSecondsCounter=0,o.hideControls())},1e3))},removeEvents:function(){var e=this;s.off("orientationchange.fb resize.fb"),r.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),e.idleInterval&&(t.clearInterval(e.idleInterval),e.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,e,i){var a,s,r,c,l,u,d,h=this,p=h.group.length;if(!(h.isSliding||h.isClosing||h.isAnimating&&h.firstRun)){if(t=parseInt(t,10),s=h.current?h.current.opts.loop:h.opts.loop,!s&&(t<0||t>=p))return!1;if(a=h.firstRun=null===h.firstRun,!(p<2&&!a&&h.isSliding)){if(c=h.current,h.prevIndex=h.currIndex,h.prevPos=h.currPos,r=h.createSlide(t),p>1&&((s||r.index>0)&&h.createSlide(t-1),(s||r.index<p-1)&&h.createSlide(t+1)),h.current=r,h.currIndex=r.index,h.currPos=r.pos,h.trigger("beforeShow",a),h.updateControls(),u=n.fancybox.getTranslate(r.$slide),r.isMoved=(0!==u.left||0!==u.top)&&!r.$slide.hasClass("fancybox-animated"),r.forcedDuration=o,n.isNumeric(e)?r.forcedDuration=e:e=r.opts[a?"animationDuration":"transitionDuration"],e=parseInt(e,10),a)return r.opts.animationEffect&&e&&h.$refs.container.css("transition-duration",e+"ms"),h.$refs.container.removeClass("fancybox-is-hidden"),f(h.$refs.container),h.$refs.container.addClass("fancybox-is-open"),r.$slide.addClass("fancybox-slide--current"),h.loadSlide(r),void h.preload();n.each(h.slides,function(t,e){n.fancybox.stop(e.$slide)}),r.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),r.isMoved?(l=Math.round(r.$slide.width()),n.each(h.slides,function(t,o){var i=o.pos-r.pos;n.fancybox.animate(o.$slide,{top:0,left:i*l+i*o.opts.gutter},e,function(){o.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),o.pos===h.currPos&&(r.isMoved=!1,h.complete())})})):h.$refs.stage.children().removeAttr("style"),r.isLoaded?h.revealContent(r):h.loadSlide(r),h.preload(),c.pos!==r.pos&&(d="fancybox-slide--"+(c.pos>r.pos?"next":"previous"),c.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),c.isComplete=!1,e&&(r.isMoved||r.opts.transitionEffect)&&(r.isMoved?c.$slide.addClass(d):(d="fancybox-animated "+d+" fancybox-fx-"+r.opts.transitionEffect,n.fancybox.animate(c.$slide,d,e,function(){c.$slide.removeClass(d).removeAttr("style")}))))}}},createSlide:function(t){var e,o,i=this;return o=t%i.group.length,o=o<0?i.group.length+o:o,!i.slides[t]&&i.group[o]&&(e=n('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[t]=n.extend(!0,{},i.group[o],{pos:t,$slide:e,isLoaded:!1}),i.updateSlide(i.slides[t])),i.slides[t]},scaleToActual:function(t,e,i){var a,s,r,c,l,u=this,d=u.current,f=d.$content,h=parseInt(d.$slide.width(),10),p=parseInt(d.$slide.height(),10),g=d.width,b=d.height;"image"!=d.type||d.hasError||!f||u.isAnimating||(n.fancybox.stop(f),u.isAnimating=!0,t=t===o?.5*h:t,e=e===o?.5*p:e,a=n.fancybox.getTranslate(f),c=g/a.width,l=b/a.height,s=.5*h-.5*g,r=.5*p-.5*b,g>h&&(s=a.left*c-(t*c-t),s>0&&(s=0),s<h-g&&(s=h-g)),b>p&&(r=a.top*l-(e*l-e),r>0&&(r=0),r<p-b&&(r=p-b)),u.updateCursor(g,b),n.fancybox.animate(f,{top:r,left:s,scaleX:c,scaleY:l},i||330,function(){u.isAnimating=!1}),u.SlideShow&&u.SlideShow.isActive&&u.SlideShow.stop())},scaleToFit:function(t){var e,o=this,i=o.current,a=i.$content;"image"!=i.type||i.hasError||!a||o.isAnimating||(n.fancybox.stop(a),o.isAnimating=!0,e=o.getFitPos(i),o.updateCursor(e.width,e.height),n.fancybox.animate(a,{top:e.top,left:e.left,scaleX:e.width/a.width(),scaleY:e.height/a.height()},t||330,function(){o.isAnimating=!1}))},getFitPos:function(t){var e,o,i,a,r,c=this,l=t.$content,u=t.width,d=t.height,f=t.opts.margin;return!(!l||!l.length||!u&&!d)&&("number"===n.type(f)&&(f=[f,f]),2==f.length&&(f=[f[0],f[1],f[0],f[1]]),s.width()<800&&(f=[0,0,0,0]),e=parseInt(c.$refs.stage.width(),10)-(f[1]+f[3]),o=parseInt(c.$refs.stage.height(),10)-(f[0]+f[2]),i=Math.min(1,e/u,o/d),a=Math.floor(i*u),r=Math.floor(i*d),{top:Math.floor(.5*(o-r))+f[0],left:Math.floor(.5*(e-a))+f[3],width:a,height:r})},update:function(){var t=this;n.each(t.slides,function(e,n){t.updateSlide(n)})},updateSlide:function(t){var e=this,o=t.$content;o&&(t.width||t.height)&&(n.fancybox.stop(o),n.fancybox.setTranslate(o,e.getFitPos(t)),t.pos===e.currPos&&e.updateCursor()),t.$slide.trigger("refresh"),e.trigger("onUpdate",t)},updateCursor:function(t,e){var n,i=this,a=i.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");i.current&&!i.isClosing&&(i.isZoomable()?(a.addClass("fancybox-is-zoomable"),n=t!==o&&e!==o?t<i.current.width&&e<i.current.height:i.isScaledDown(),n?a.addClass("fancybox-can-zoomIn"):i.current.opts.touch?a.addClass("fancybox-can-drag"):a.addClass("fancybox-can-zoomOut")):i.current.opts.touch&&a.addClass("fancybox-can-drag"))},isZoomable:function(){var t,e=this,o=e.current;if(o&&!e.isClosing)return!!("image"===o.type&&o.isLoaded&&!o.hasError&&("zoom"===o.opts.clickContent||n.isFunction(o.opts.clickContent)&&"zoom"===o.opts.clickContent(o))&&(t=e.getFitPos(o),o.width>t.width||o.height>t.height))},isScaledDown:function(){var t=this,e=t.current,o=e.$content,i=!1;return o&&(i=n.fancybox.getTranslate(o),i=i.width<e.width||i.height<e.height),i},canPan:function(){var t=this,e=t.current,n=e.$content,o=!1;return n&&(o=t.getFitPos(e),o=Math.abs(n.width()-o.width)>1||Math.abs(n.height()-o.height)>1),o},loadSlide:function(t){var e,o,i,a=this;if(!t.isLoading&&!t.isLoaded){switch(t.isLoading=!0,a.trigger("beforeLoad",t),e=t.type,o=t.$slide,o.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(e||"unknown")).addClass(t.opts.slideClass),e){case"image":a.setImage(t);break;case"iframe":a.setIframe(t);break;case"html":a.setContent(t,t.src||t.content);break;case"inline":n(t.src).length?a.setContent(t,n(t.src)):a.setError(t);break;case"ajax":a.showLoading(t),i=n.ajax(n.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,n){"success"===n&&a.setContent(t,e)},error:function(e,n){e&&"abort"!==n&&a.setError(t)}})),o.one("onReset",function(){i.abort()});break;default:a.setError(t)}return!0}},setImage:function(e){var o,i,a,s,r=this,c=e.opts.image.srcset;if(c){a=t.devicePixelRatio||1,s=t.innerWidth*a,i=c.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,n){var o=parseInt(t.substring(0,t.length-1),10);return 0===n?e.url=t:void(o&&(e.value=o,e.postfix=t[t.length-1]))}),e}),i.sort(function(t,e){return t.value-e.value});for(var l=0;l<i.length;l++){var u=i[l];if("w"===u.postfix&&u.value>=s||"x"===u.postfix&&u.value>=a){o=u;break}}!o&&i.length&&(o=i[i.length-1]),o&&(e.src=o.url,e.width&&e.height&&"w"==o.postfix&&(e.height=e.width/e.height*o.value,e.width=o.value))}e.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide),e.opts.preload!==!1&&e.opts.width&&e.opts.height&&(e.opts.thumb||e.opts.$thumb)?(e.width=e.opts.width,e.height=e.opts.height,e.$ghost=n("<img />").one("error",function(){n(this).remove(),e.$ghost=null,r.setBigImage(e)}).one("load",function(){r.afterLoad(e),r.setBigImage(e)}).addClass("fancybox-image").appendTo(e.$content).attr("src",e.opts.thumb||e.opts.$thumb.attr("src"))):r.setBigImage(e)},setBigImage:function(t){var e=this,o=n("<img />");t.$image=o.one("error",function(){e.setError(t)}).one("load",function(){clearTimeout(t.timouts),t.timouts=null,e.isClosing||(t.width=this.naturalWidth,t.height=this.naturalHeight,t.opts.image.srcset&&o.attr("sizes","100vw").attr("srcset",t.opts.image.srcset),e.hideLoading(t),t.$ghost?t.timouts=setTimeout(function(){t.timouts=null,t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))):e.afterLoad(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(o[0].complete||"complete"==o[0].readyState)&&o[0].naturalWidth&&o[0].naturalHeight?o.trigger("load"):o[0].error?o.trigger("error"):t.timouts=setTimeout(function(){o[0].complete||t.hasError||e.showLoading(t)},100)},setIframe:function(t){var e,i=this,a=t.opts.iframe,s=t.$slide;t.$content=n('<div class="fancybox-content'+(a.preload?" fancybox-is-hidden":"")+'"></div>').css(a.css).appendTo(s),e=n(a.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(a.attr).appendTo(t.$content),a.preload?(i.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),i.afterLoad(t)}),s.on("refresh.fb",function(){var n,i,s,r=t.$content,c=a.css.width,l=a.css.height;if(1===e[0].isReady){try{i=e.contents(),s=i.find("body")}catch(t){}s&&s.length&&(c===o&&(n=e[0].contentWindow.document.documentElement.scrollWidth,c=Math.ceil(s.outerWidth(!0)+(r.width()-n)),c+=r.outerWidth()-r.innerWidth()),l===o&&(l=Math.ceil(s.outerHeight(!0)),l+=r.outerHeight()-r.innerHeight()),c&&r.width(c),l&&r.height(l)),r.removeClass("fancybox-is-hidden")}})):this.afterLoad(t),e.attr("src",t.src),t.opts.smallBtn===!0&&t.$content.prepend(i.translate(t,t.opts.btnTpl.smallBtn)),s.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(t){}n(this).empty(),t.isLoaded=!1})},setContent:function(t,e){var o=this;o.isClosing||(o.hideLoading(t),t.$slide.empty(),l(e)&&e.parent().length?(e.parent(".fancybox-slide--inline").trigger("onReset"),t.$placeholder=n("<div></div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===n.type(e)&&(e=n("<div>").append(n.trim(e)).contents(),3===e[0].nodeType&&(e=n("<div>").html(e))),t.opts.filter&&(e=n("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){t.$placeholder&&(t.$placeholder.after(e.hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1)}),t.$content=n(e).appendTo(t.$slide),t.opts.smallBtn&&!t.$smallBtn&&(t.$smallBtn=n(o.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content.filter("div").first())),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.removeClass("fancybox-slide--"+t.type),this.setContent(t,this.translate(t,t.opts.errorTpl))},showLoading:function(t){var e=this;t=t||e.current,t&&!t.$spinner&&(t.$spinner=n(e.opts.spinnerTpl).appendTo(t.$slide))},hideLoading:function(t){var e=this;t=t||e.current,t&&t.$spinner&&(t.$spinner.remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.revealContent(t))},revealContent:function(t){var e,i,a,s,r,c=this,l=t.$slide,u=!1;return e=t.opts[c.firstRun?"animationEffect":"transitionEffect"],a=t.opts[c.firstRun?"animationDuration":"transitionDuration"],a=parseInt(t.forcedDuration===o?a:t.forcedDuration,10),!t.isMoved&&t.pos===c.currPos&&a||(e=!1),"zoom"!==e||t.pos===c.currPos&&a&&"image"===t.type&&!t.hasError&&(u=c.getThumbPos(t))||(e="fade"),"zoom"===e?(r=c.getFitPos(t),r.scaleX=r.width/u.width,r.scaleY=r.height/u.height,delete r.width,delete r.height,s=t.opts.zoomOpacity,"auto"==s&&(s=Math.abs(t.width/t.height-u.width/u.height)>.1),s&&(u.opacity=.1,r.opacity=1),n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),u),f(t.$content),void n.fancybox.animate(t.$content,r,a,function(){c.complete()})):(c.updateSlide(t),e?(n.fancybox.stop(l),i="fancybox-animated fancybox-slide--"+(t.pos>c.prevPos?"next":"previous")+" fancybox-fx-"+e,l.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),t.$content.removeClass("fancybox-is-hidden"),f(l),void n.fancybox.animate(l,"fancybox-slide--current",a,function(e){l.removeClass(i).removeAttr("style"),t.pos===c.currPos&&c.complete()},!0)):(f(l),t.$content.removeClass("fancybox-is-hidden"),void(t.pos===c.currPos&&c.complete())))},getThumbPos:function(o){var i,a=this,s=!1,r=function(e){for(var o,i=e[0],a=i.getBoundingClientRect(),s=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||s.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return o=s.every(function(t){var e=Math.min(a.right,t.right)-Math.max(a.left,t.left),n=Math.min(a.bottom,t.bottom)-Math.max(a.top,t.top);return e>0&&n>0}),o&&a.bottom>0&&a.right>0&&a.left<n(t).width()&&a.top<n(t).height()},c=o.opts.$thumb,l=c?c.offset():0;return l&&c[0].ownerDocument===e&&r(c)&&(i=a.$refs.stage.offset(),s={top:l.top-i.top+parseFloat(c.css("border-top-width")||0),left:l.left-i.left+parseFloat(c.css("border-left-width")||0),width:c.width(),height:c.height(),scaleX:1,scaleY:1}),s},complete:function(){var t=this,o=t.current,i={};o.isMoved||!o.isLoaded||o.isComplete||(o.isComplete=!0,o.$slide.siblings().trigger("onReset"),f(o.$slide),o.$slide.addClass("fancybox-slide--complete"),n.each(t.slides,function(e,o){o.pos>=t.currPos-1&&o.pos<=t.currPos+1?i[o.pos]=o:o&&(n.fancybox.stop(o.$slide),o.$slide.off().remove())}),t.slides=i,t.updateCursor(),t.trigger("afterShow"),(n(e.activeElement).is("[disabled]")||o.opts.autoFocus&&"image"!=o.type&&"iframe"!==o.type)&&t.focus())},preload:function(){var t,e,n=this;n.group.length<2||(t=n.slides[n.currPos+1],e=n.slides[n.currPos-1],t&&"image"===t.type&&n.loadSlide(t),e&&"image"===e.type&&n.loadSlide(e))},focus:function(){var t,e=this.current;this.isClosing||(e&&e.isComplete&&(t=e.$slide.find("input[autofocus]:enabled:visible:first"),t.length||(t=e.$slide.find("button,:input,[tabindex],a").filter(":enabled:visible:first"))),t=t&&t.length?t:this.$refs.container,t.focus())},activate:function(){var t=this;n(".fancybox-container").each(function(){var e=n(this).data("FancyBox");e&&e.uid!==t.uid&&!e.isClosing&&e.trigger("onDeactivate")}),t.current&&(t.$refs.container.index()>0&&t.$refs.container.prependTo(e.body),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t,e){var o,i,a,s,r,c,l=this,f=l.current,h=function(){l.cleanUp(t)};return!l.isClosing&&(l.isClosing=!0,l.trigger("beforeClose",t)===!1?(l.isClosing=!1,u(function(){l.update()}),!1):(l.removeEvents(),f.timouts&&clearTimeout(f.timouts),a=f.$content,o=f.opts.animationEffect,i=n.isNumeric(e)?e:o?f.opts.animationDuration:0,f.$slide.off(d).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),f.$slide.siblings().trigger("onReset").remove(),i&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),l.hideLoading(f),l.hideControls(),l.updateCursor(),"zoom"!==o||t!==!0&&a&&i&&"image"===f.type&&!f.hasError&&(c=l.getThumbPos(f))||(o="fade"),"zoom"===o?(n.fancybox.stop(a),r=n.fancybox.getTranslate(a),r.width=r.width*r.scaleX,r.height=r.height*r.scaleY,s=f.opts.zoomOpacity,"auto"==s&&(s=Math.abs(f.width/f.height-c.width/c.height)>.1),s&&(c.opacity=0),r.scaleX=r.width/c.width,r.scaleY=r.height/c.height,r.width=c.width,r.height=c.height,n.fancybox.setTranslate(f.$content,r),n.fancybox.animate(f.$content,c,i,h),!0):(o&&i?t===!0?setTimeout(h,i):n.fancybox.animate(f.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+o,i,h):h(),!0)))},cleanUp:function(t){var e,o=this;o.current.$slide.trigger("onReset"),o.$refs.container.empty().remove(),o.trigger("afterClose",t),o.$lastFocus&&o.current.opts.backFocus&&o.$lastFocus.focus(),o.current=null,e=n.fancybox.getInstance(),e?e.activate():(s.scrollTop(o.scrollTop).scrollLeft(o.scrollLeft),n("html").removeClass("fancybox-enabled"),n("#fancybox-style-noscroll").remove())},trigger:function(t,e){var o,i=Array.prototype.slice.call(arguments,1),a=this,s=e&&e.opts?e:a.current;return s?i.unshift(s):s=a,i.unshift(a),n.isFunction(s.opts[t])&&(o=s.opts[t].apply(s,i)),o===!1?o:void("afterClose"===t?r.trigger(t+".fb",i):a.$refs.container.trigger(t+".fb",i))},updateControls:function(t){var e=this,o=e.current,i=o.index,a=o.opts,s=a.caption,r=e.$refs.caption;o.$slide.trigger("refresh"),e.$caption=s&&s.length?r.html(s):null,e.isHiddenControls||e.showControls(),n("[data-fancybox-count]").html(e.group.length),n("[data-fancybox-index]").html(i+1),n("[data-fancybox-prev]").prop("disabled",!a.loop&&i<=0),n("[data-fancybox-next]").prop("disabled",!a.loop&&i>=e.group.length-1)},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var t=this,e=t.current?t.current.opts:t.opts,n=t.$refs.container;t.isHiddenControls=!1,t.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&t.group.length>1)).toggleClass("fancybox-show-nav",!!(e.arrows&&t.group.length>1)).toggleClass("fancybox-is-modal",!!e.modal),t.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.1.28",defaults:a,getInstance:function(t){var e=n('.fancybox-container:not(".fancybox-is-closing"):first').data("FancyBox"),o=Array.prototype.slice.call(arguments,1);return e instanceof h&&("string"===n.type(t)?e[t].apply(e,o):"function"===n.type(t)&&t.apply(e,o),e)},open:function(t,e,n){return new h(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),t===!0&&this.close())},destroy:function(){this.close(!0),r.off("click.fb-start")},isMobile:e.createTouch!==o&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var n=e.createElement("div");return t.getComputedStyle&&t.getComputedStyle(n).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<11)}(),getTranslate:function(t){var e;if(!t||!t.length)return!1;if(e=t.eq(0).css("transform"),e&&e.indexOf("matrix")!==-1?(e=e.split("(")[1],e=e.split(")")[0],e=e.split(",")):e=[],e.length)e=e.length>10?[e[13],e[12],e[0],e[5]]:[e[5],e[4],e[0],e[3]],e=e.map(parseFloat);else{e=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i,o=n.exec(t.eq(0).attr("style"));o&&(e[0]=parseFloat(o[2]),e[1]=parseFloat(o[1]))}return{top:e[0],left:e[1],scaleX:e[2],scaleY:e[3],opacity:parseFloat(t.css("opacity")),width:t.width(),height:t.height()}},setTranslate:function(t,e){var n="",i={};if(t&&e)return e.left===o&&e.top===o||(n=(e.left===o?t.position().left:e.left)+"px, "+(e.top===o?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),e.scaleX!==o&&e.scaleY!==o&&(n=(n.length?n+" ":"")+"scale("+e.scaleX+", "+e.scaleY+")"),n.length&&(i.transform=n),e.opacity!==o&&(i.opacity=e.opacity),e.width!==o&&(i.width=e.width),e.height!==o&&(i.height=e.height),t.css(i)},animate:function(t,e,i,a,s){var r=d||"transitionend";n.isFunction(i)&&(a=i,i=null),n.isPlainObject(e)||t.removeAttr("style"),t.on(r,function(i){(!i||!i.originalEvent||t.is(i.originalEvent.target)&&"z-index"!=i.originalEvent.propertyName)&&(t.off(r),n.isPlainObject(e)?e.scaleX!==o&&e.scaleY!==o&&(t.css("transition-duration","0ms"),e.width=Math.round(t.width()*e.scaleX),e.height=Math.round(t.height()*e.scaleY),e.scaleX=1,e.scaleY=1,n.fancybox.setTranslate(t,e)):s!==!0&&t.removeClass(e),n.isFunction(a)&&a(i))}),n.isNumeric(i)&&t.css("transition-duration",i+"ms"),n.isPlainObject(e)?n.fancybox.setTranslate(t,e):t.addClass(e),t.data("timer",setTimeout(function(){t.trigger("transitionend")},i+16))},stop:function(t){clearTimeout(t.data("timer")),t.off(d)}},n.fn.fancybox=function(t){var e;return t=t||{},e=t.selector||!1,e?n("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},i):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},i),this},r.on("click.fb-start","[data-fancybox]",i)}}(window,document,window.jQuery||jQuery),function(t){"use strict";var e=function(e,n,o){if(e)return o=o||"","object"===t.type(o)&&(o=t.param(o,!0)),t.each(n,function(t,n){e=e.replace("$"+t,n||"")}),o.length&&(e+=(e.indexOf("?")>0?"&":"?")+o),e},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12])+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};t(document).on("onInit.fb",function(o,i){t.each(i.group,function(o,i){var a,s,r,c,l,u,d,f=i.src||"",h=!1;i.type||(a=t.extend(!0,{},n,i.opts.media),t.each(a,function(n,o){if(r=f.match(o.matcher),u={},d=n,r){if(h=o.type,o.paramPlace&&r[o.paramPlace]){l=r[o.paramPlace],"?"==l[0]&&(l=l.substring(1)),l=l.split("&");for(var a=0;a<l.length;++a){var p=l[a].split("=",2);2==p.length&&(u[p[0]]=decodeURIComponent(p[1].replace(/\+/g," ")))}}return c=t.extend(!0,{},o.params,i.opts[n],u),f="function"===t.type(o.url)?o.url.call(this,r,c,i):e(o.url,r,c),s="function"===t.type(o.thumb)?o.thumb.call(this,r,c,i):e(o.thumb,r),"vimeo"===d&&(f=f.replace("&%23","#")),!1}}),h?(i.src=f,i.type=h,i.opts.thumb||i.opts.$thumb&&i.opts.$thumb.length||(i.opts.thumb=s),"iframe"===h&&(t.extend(!0,i.opts,{
iframe:{preload:!1,attr:{scrolling:"no"}}}),i.contentProvider=d,i.opts.slideClass+=" fancybox-slide--"+("gmap_place"==d||"gmap_search"==d?"map":"video"))):i.type="image")})})}(window.jQuery),function(t,e,n){"use strict";var o=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),i=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)}}(),a=function(e){var n=[];e=e.originalEvent||e||t.e,e=e.touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e];for(var o in e)e[o].pageX?n.push({x:e[o].pageX,y:e[o].pageY}):e[o].clientX&&n.push({x:e[o].clientX,y:e[o].clientY});return n},s=function(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},r=function(t){if(t.is("a,button,input,select,textarea,label")||n.isFunction(t.get(0).onclick)||t.data("selectable"))return!0;for(var e=0,o=t[0].attributes,i=o.length;e<i;e++)if("data-fancybox-"===o[e].nodeName.substr(0,14))return!0;return!1},c=function(e){var n=t.getComputedStyle(e)["overflow-y"],o=t.getComputedStyle(e)["overflow-x"],i=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,a=("scroll"===o||"auto"===o)&&e.scrollWidth>e.clientWidth;return i||a},l=function(t){for(var e=!1;;){if(e=c(t.get(0)))break;if(t=t.parent(),!t.length||t.hasClass("fancybox-stage")||t.is("body"))break}return e},u=function(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(e,"ontouchstart"))};u.prototype.destroy=function(){this.$container.off(".fb.touch")},u.prototype.ontouchstart=function(o){var i=this,c=n(o.target),u=i.instance,d=u.current,f=d.$content,h="touchstart"==o.type;if(h&&i.$container.off("mousedown.fb.touch"),!d||i.instance.isAnimating||i.instance.isClosing)return o.stopPropagation(),void o.preventDefault();if((!o.originalEvent||2!=o.originalEvent.button)&&c.length&&!r(c)&&!r(c.parent())&&!(o.originalEvent.clientX>c[0].clientWidth+c.offset().left)&&(i.startPoints=a(o),i.startPoints&&!(i.startPoints.length>1&&u.isSliding))){if(i.$target=c,i.$content=f,i.canTap=!0,n(e).off(".fb.touch"),n(e).on(h?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(i,"ontouchend")),n(e).on(h?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(i,"ontouchmove")),!u.current.opts.touch&&!u.canPan()||!c.is(i.$stage)&&!i.$stage.find(c).length)return void(c.is("img")&&o.preventDefault());o.stopPropagation(),n.fancybox.isMobile&&(l(i.$target)||l(i.$target.parent()))||o.preventDefault(),i.canvasWidth=Math.round(d.$slide[0].clientWidth),i.canvasHeight=Math.round(d.$slide[0].clientHeight),i.startTime=(new Date).getTime(),i.distanceX=i.distanceY=i.distance=0,i.isPanning=!1,i.isSwiping=!1,i.isZooming=!1,i.sliderStartPos=i.sliderLastPos||{top:0,left:0},i.contentStartPos=n.fancybox.getTranslate(i.$content),i.contentLastPos=null,1!==i.startPoints.length||i.isZooming||(i.canTap=!u.isSliding,"image"===d.type&&(i.contentStartPos.width>i.canvasWidth+1||i.contentStartPos.height>i.canvasHeight+1)?(n.fancybox.stop(i.$content),i.$content.css("transition-duration","0ms"),i.isPanning=!0):i.isSwiping=!0,i.$container.addClass("fancybox-controls--isGrabbing")),2!==i.startPoints.length||u.isAnimating||d.hasError||"image"!==d.type||!d.isLoaded&&!d.$ghost||(i.isZooming=!0,i.isSwiping=!1,i.isPanning=!1,n.fancybox.stop(i.$content),i.$content.css("transition-duration","0ms"),i.centerPointStartX=.5*(i.startPoints[0].x+i.startPoints[1].x)-n(t).scrollLeft(),i.centerPointStartY=.5*(i.startPoints[0].y+i.startPoints[1].y)-n(t).scrollTop(),i.percentageOfImageAtPinchPointX=(i.centerPointStartX-i.contentStartPos.left)/i.contentStartPos.width,i.percentageOfImageAtPinchPointY=(i.centerPointStartY-i.contentStartPos.top)/i.contentStartPos.height,i.startDistanceBetweenFingers=s(i.startPoints[0],i.startPoints[1]))}},u.prototype.ontouchmove=function(t){var e=this;if(e.newPoints=a(t),n.fancybox.isMobile&&(l(e.$target)||l(e.$target.parent())))return t.stopPropagation(),void(e.canTap=!1);if((e.instance.current.opts.touch||e.instance.canPan())&&e.newPoints&&e.newPoints.length&&(e.distanceX=s(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=s(e.newPoints[0],e.startPoints[0],"y"),e.distance=s(e.newPoints[0],e.startPoints[0]),e.distance>0)){if(!e.$target.is(e.$stage)&&!e.$stage.find(e.$target).length)return;t.stopPropagation(),t.preventDefault(),e.isSwiping?e.onSwipe():e.isPanning?e.onPan():e.isZooming&&e.onZoom()}},u.prototype.onSwipe=function(){var e,a=this,s=a.isSwiping,r=a.sliderStartPos.left||0;s===!0?Math.abs(a.distance)>10&&(a.canTap=!1,a.instance.group.length<2&&a.instance.opts.touch.vertical?a.isSwiping="y":a.instance.isSliding||a.instance.opts.touch.vertical===!1||"auto"===a.instance.opts.touch.vertical&&n(t).width()>800?a.isSwiping="x":(e=Math.abs(180*Math.atan2(a.distanceY,a.distanceX)/Math.PI),a.isSwiping=e>45&&e<135?"y":"x"),a.instance.isSliding=a.isSwiping,a.startPoints=a.newPoints,n.each(a.instance.slides,function(t,e){n.fancybox.stop(e.$slide),e.$slide.css("transition-duration","0ms"),e.inTransition=!1,e.pos===a.instance.current.pos&&(a.sliderStartPos.left=n.fancybox.getTranslate(e.$slide).left)}),a.instance.SlideShow&&a.instance.SlideShow.isActive&&a.instance.SlideShow.stop()):("x"==s&&(a.distanceX>0&&(a.instance.group.length<2||0===a.instance.current.index&&!a.instance.current.opts.loop)?r+=Math.pow(a.distanceX,.8):a.distanceX<0&&(a.instance.group.length<2||a.instance.current.index===a.instance.group.length-1&&!a.instance.current.opts.loop)?r-=Math.pow(-a.distanceX,.8):r+=a.distanceX),a.sliderLastPos={top:"x"==s?0:a.sliderStartPos.top+a.distanceY,left:r},a.requestId&&(i(a.requestId),a.requestId=null),a.requestId=o(function(){a.sliderLastPos&&(n.each(a.instance.slides,function(t,e){var o=e.pos-a.instance.currPos;n.fancybox.setTranslate(e.$slide,{top:a.sliderLastPos.top,left:a.sliderLastPos.left+o*a.canvasWidth+o*e.opts.gutter})}),a.$container.addClass("fancybox-is-sliding"))}))},u.prototype.onPan=function(){var t,e,a,s=this;s.canTap=!1,t=s.contentStartPos.width>s.canvasWidth?s.contentStartPos.left+s.distanceX:s.contentStartPos.left,e=s.contentStartPos.top+s.distanceY,a=s.limitMovement(t,e,s.contentStartPos.width,s.contentStartPos.height),a.scaleX=s.contentStartPos.scaleX,a.scaleY=s.contentStartPos.scaleY,s.contentLastPos=a,s.requestId&&(i(s.requestId),s.requestId=null),s.requestId=o(function(){n.fancybox.setTranslate(s.$content,s.contentLastPos)})},u.prototype.limitMovement=function(t,e,n,o){var i,a,s,r,c=this,l=c.canvasWidth,u=c.canvasHeight,d=c.contentStartPos.left,f=c.contentStartPos.top,h=c.distanceX,p=c.distanceY;return i=Math.max(0,.5*l-.5*n),a=Math.max(0,.5*u-.5*o),s=Math.min(l-n,.5*l-.5*n),r=Math.min(u-o,.5*u-.5*o),n>l&&(h>0&&t>i&&(t=i-1+Math.pow(-i+d+h,.8)||0),h<0&&t<s&&(t=s+1-Math.pow(s-d-h,.8)||0)),o>u&&(p>0&&e>a&&(e=a-1+Math.pow(-a+f+p,.8)||0),p<0&&e<r&&(e=r+1-Math.pow(r-f-p,.8)||0)),{top:e,left:t}},u.prototype.limitPosition=function(t,e,n,o){var i=this,a=i.canvasWidth,s=i.canvasHeight;return n>a?(t=t>0?0:t,t=t<a-n?a-n:t):t=Math.max(0,a/2-n/2),o>s?(e=e>0?0:e,e=e<s-o?s-o:e):e=Math.max(0,s/2-o/2),{top:e,left:t}},u.prototype.onZoom=function(){var e=this,a=e.contentStartPos.width,r=e.contentStartPos.height,c=e.contentStartPos.left,l=e.contentStartPos.top,u=s(e.newPoints[0],e.newPoints[1]),d=u/e.startDistanceBetweenFingers,f=Math.floor(a*d),h=Math.floor(r*d),p=(a-f)*e.percentageOfImageAtPinchPointX,g=(r-h)*e.percentageOfImageAtPinchPointY,b=(e.newPoints[0].x+e.newPoints[1].x)/2-n(t).scrollLeft(),m=(e.newPoints[0].y+e.newPoints[1].y)/2-n(t).scrollTop(),y=b-e.centerPointStartX,v=m-e.centerPointStartY,x=c+(p+y),w=l+(g+v),$={top:w,left:x,scaleX:e.contentStartPos.scaleX*d,scaleY:e.contentStartPos.scaleY*d};e.canTap=!1,e.newWidth=f,e.newHeight=h,e.contentLastPos=$,e.requestId&&(i(e.requestId),e.requestId=null),e.requestId=o(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)})},u.prototype.ontouchend=function(t){var o=this,s=Math.max((new Date).getTime()-o.startTime,1),r=o.isSwiping,c=o.isPanning,l=o.isZooming;return o.endPoints=a(t),o.$container.removeClass("fancybox-controls--isGrabbing"),n(e).off(".fb.touch"),o.requestId&&(i(o.requestId),o.requestId=null),o.isSwiping=!1,o.isPanning=!1,o.isZooming=!1,o.canTap?o.onTap(t):(o.speed=366,o.velocityX=o.distanceX/s*.5,o.velocityY=o.distanceY/s*.5,o.speedX=Math.max(.5*o.speed,Math.min(1.5*o.speed,1/Math.abs(o.velocityX)*o.speed)),void(c?o.endPanning():l?o.endZooming():o.endSwiping(r)))},u.prototype.endSwiping=function(t){var e=this,o=!1;e.instance.isSliding=!1,e.sliderLastPos=null,"y"==t&&Math.abs(e.distanceY)>50?(n.fancybox.animate(e.instance.current.$slide,{top:e.sliderStartPos.top+e.distanceY+150*e.velocityY,opacity:0},150),o=e.instance.close(!0,300)):"x"==t&&e.distanceX>50&&e.instance.group.length>1?o=e.instance.previous(e.speedX):"x"==t&&e.distanceX<-50&&e.instance.group.length>1&&(o=e.instance.next(e.speedX)),o!==!1||"x"!=t&&"y"!=t||e.instance.jumpTo(e.instance.current.index,150),e.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var t,e,o,i=this;i.contentLastPos&&(i.instance.current.opts.touch.momentum===!1?(t=i.contentLastPos.left,e=i.contentLastPos.top):(t=i.contentLastPos.left+i.velocityX*i.speed,e=i.contentLastPos.top+i.velocityY*i.speed),o=i.limitPosition(t,e,i.contentStartPos.width,i.contentStartPos.height),o.width=i.contentStartPos.width,o.height=i.contentStartPos.height,n.fancybox.animate(i.$content,o,330))},u.prototype.endZooming=function(){var t,e,o,i,a=this,s=a.instance.current,r=a.newWidth,c=a.newHeight;a.contentLastPos&&(t=a.contentLastPos.left,e=a.contentLastPos.top,i={top:e,left:t,width:r,height:c,scaleX:1,scaleY:1},n.fancybox.setTranslate(a.$content,i),r<a.canvasWidth&&c<a.canvasHeight?a.instance.scaleToFit(150):r>s.width||c>s.height?a.instance.scaleToActual(a.centerPointStartX,a.centerPointStartY,150):(o=a.limitPosition(t,e,r,c),n.fancybox.setTranslate(a.content,n.fancybox.getTranslate(a.$content)),n.fancybox.animate(a.$content,o,150)))},u.prototype.onTap=function(t){var e,o=this,i=n(t.target),s=o.instance,r=s.current,c=t&&a(t)||o.startPoints,l=c[0]?c[0].x-o.$stage.offset().left:0,u=c[0]?c[0].y-o.$stage.offset().top:0,d=function(e){var i=r.opts[e];if(n.isFunction(i)&&(i=i.apply(s,[r,t])),i)switch(i){case"close":s.close(o.startEvent);break;case"toggleControls":s.toggleControls(!0);break;case"next":s.next();break;case"nextOrClose":s.group.length>1?s.next():s.close(o.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,u):s.group.length<2&&s.close(o.startEvent))}};if(!(t.originalEvent&&2==t.originalEvent.button||s.isSliding||l>i[0].clientWidth+i.offset().left)){if(i.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))e="Outside";else if(i.is(".fancybox-slide"))e="Slide";else{if(!s.current.$content||!s.current.$content.has(t.target).length)return;e="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,Math.abs(l-o.tapX)>50||Math.abs(u-o.tapY)>50||s.isSliding)return this;d("dblclick"+e)}else o.tapX=l,o.tapY=u,r.opts["dblclick"+e]&&r.opts["dblclick"+e]!==r.opts["click"+e]?o.tapped=setTimeout(function(){o.tapped=null,d("click"+e)},300):d("click"+e);return this}},n(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new u(e))}),n(e).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,window.jQuery),function(t,e){"use strict";var n=function(t){this.instance=t,this.init()};e.extend(n.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var t=this;t.$button=t.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),(t.instance.group.length<2||!t.instance.group[t.instance.currIndex].opts.slideShow)&&t.$button.hide()},set:function(){var t=this;t.instance&&t.instance.current&&(t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.instance.next()},t.instance.current.opts.slideShow.speed||t.speed):(t.stop(),t.instance.idleSecondsCounter=0,t.instance.showControls())},clear:function(){var t=this;clearTimeout(t.timer),t.timer=null},start:function(){var t=this,e=t.instance.current;t.instance&&e&&(e.opts.loop||e.index<t.instance.group.length-1)&&(t.isActive=!0,t.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_STOP).addClass("fancybox-button--pause"),e.isComplete&&t.set())},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_START).removeClass("fancybox-button--pause"),t.isActive=!1},toggle:function(){var t=this;t.isActive?t.stop():t.start()}}),e(t).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,o){var i=e&&e.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear()},"afterShow.fb":function(t,e,n){var o=e&&e.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(n,o,i,a,s){var r=o&&o.SlideShow;!r||!i.opts.slideShow||80!==s&&32!==s||e(t.activeElement).is("button,a,input")||(a.preventDefault(),r.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var n=e&&e.SlideShow;n&&n.stop()}}),e(t).on("visibilitychange",function(){var n=e.fancybox.getInstance(),o=n&&n.SlideShow;o&&o.isActive&&(t.hidden?o.clear():o.set())})}(document,window.jQuery),function(t,e){"use strict";var n=function(){var e,n,o,i=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],a={};for(n=0;n<i.length;n++)if(e=i[n],e&&e[1]in t){for(o=0;o<e.length;o++)a[i[0][o]]=e[o];return a}return!1}();if(!n)return void(e&&e.fancybox&&(e.fancybox.defaults.btnTpl.fullScreen=!1));var o={request:function(e){e=e||t.documentElement,e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[n.exitFullscreen]()},toggle:function(e){e=e||t.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(t[n.fullscreenElement])},enabled:function(){return Boolean(t[n.fullscreenEnabled])}};e(t).on({"onInit.fb":function(t,e){var n,i=e.$refs.toolbar.find("[data-fancybox-fullscreen]");e&&!e.FullScreen&&e.group[e.currIndex].opts.fullScreen?(n=e.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),o.toggle(n[0])}),e.opts.fullScreen&&e.opts.fullScreen.autoStart===!0&&o.request(n[0]),e.FullScreen=o):i.hide()},"afterKeydown.fb":function(t,e,n,o,i){e&&e.FullScreen&&70===i&&(o.preventDefault(),e.FullScreen.toggle(e.$refs.container[0]))},"beforeClose.fb":function(t){t&&t.FullScreen&&o.exit()}}),e(t).on(n.fullscreenchange,function(){var t=e.fancybox.getInstance();t.current&&"image"===t.current.type&&t.isAnimating&&(t.current.$content.css("transition","none"),t.isAnimating=!1,t.update(!0,!0,0)),t.trigger("onFullscreenChange",o.isFullscreen())})}(document,window.jQuery),function(t,e){"use strict";var n=function(t){this.instance=t,this.init()};e.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var t=this,e=t.instance.group[0],n=t.instance.group[1];t.$button=t.instance.$refs.toolbar.find("[data-fancybox-thumbs]"),t.instance.group.length>1&&t.instance.group[t.instance.currIndex].opts.thumbs&&("image"==e.type||e.opts.thumb||e.opts.$thumb)&&("image"==n.type||n.opts.thumb||n.opts.$thumb)?(t.$button.on("click",function(){t.toggle()}),t.isActive=!0):(t.$button.hide(),t.isActive=!1)},create:function(){var t,n,o=this.instance;this.$grid=e('<div class="fancybox-thumbs"></div>').appendTo(o.$refs.container),t="<ul>",e.each(o.group,function(e,o){n=o.opts.thumb||(o.opts.$thumb?o.opts.$thumb.attr("src"):null),n||"image"!==o.type||(n=o.src),n&&n.length&&(t+='<li data-index="'+e+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),t+="</ul>",this.$list=e(t).appendTo(this.$grid).on("click","li",function(){o.jumpTo(e(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var t,n,o,i,a=e(this).parent().removeClass("fancybox-thumbs-loading"),s=a.outerWidth(),r=a.outerHeight();t=this.naturalWidth||this.width,n=this.naturalHeight||this.height,o=t/s,i=n/r,o>=1&&i>=1&&(o>i?(t/=i,n=r):(t=s,n/=o)),e(this).css({width:Math.floor(t),height:Math.floor(n),"margin-top":Math.min(0,Math.floor(.3*r-.3*n)),"margin-left":Math.min(0,Math.floor(.5*s-.5*t))}).show()}).each(function(){this.src=e(this).data("src")})},focus:function(){this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus()):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),e(t).on({"onInit.fb":function(t,e){e&&!e.Thumbs&&(e.Thumbs=new n(e))},"beforeShow.fb":function(t,e,n,o){var i=e&&e.Thumbs;if(i&&i.isActive){if(n.modal)return i.$button.hide(),void i.hide();o&&n.opts.thumbs.autoStart===!0&&i.show(),i.isVisible&&i.focus()}},"afterKeydown.fb":function(t,e,n,o,i){var a=e&&e.Thumbs;a&&a.isActive&&71===i&&(o.preventDefault(),a.toggle())},"beforeClose.fb":function(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&e.opts.thumbs.hideOnClose!==!1&&n.close()}})}(document,window.jQuery),function(t,e,n){"use strict";function o(){var t=e.location.hash.substr(1),n=t.split("-"),o=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,i=n.join("-");return o<1&&(o=1),{hash:t,index:o,gallery:i}}function i(t){var e;""!==t.gallery&&(e=n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1),e.length||(e=n("#"+n.escapeSelector(t.gallery))),e.length&&(s=!1,e.trigger("click")))}function a(t){var e;return!!t&&(e=t.current?t.current.opts:t.opts,e.hash||(e.$orig?e.$orig.data("fancybox"):""))}n.escapeSelector||(n.escapeSelector=function(t){var e=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,n=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t};return(t+"").replace(e,n)});var s=!0,r=null,c=null;n(function(){setTimeout(function(){n.fancybox.defaults.hash!==!1&&(n(t).on({"onInit.fb":function(t,e){var n,i;e.group[e.currIndex].opts.hash!==!1&&(n=o(),i=a(e),i&&n.gallery&&i==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(n,o,i){var l;i&&i.opts.hash!==!1&&(l=a(o),l&&""!==l&&(e.location.hash.indexOf(l)<0&&(o.opts.origHash=e.location.hash),r=l+(o.group.length>1?"-"+(i.index+1):""),"replaceState"in e.history?(c&&clearTimeout(c),c=setTimeout(function(){e.history[s?"pushState":"replaceState"]({},t.title,e.location.pathname+e.location.search+"#"+r),c=null,s=!1},300)):e.location.hash=r))},"beforeClose.fb":function(o,i,s){var l,u;c&&clearTimeout(c),s.opts.hash!==!1&&(l=a(i),u=i&&i.opts.origHash?i.opts.origHash:"",l&&""!==l&&("replaceState"in history?e.history.replaceState({},t.title,e.location.pathname+e.location.search+u):(e.location.hash=u,n(e).scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))),r=null)}}),n(e).on("hashchange.fb",function(){var t=o();n.fancybox.getInstance()?!r||r===t.gallery+"-"+t.index||1===t.index&&r==t.gallery||(r=null,n.fancybox.close()):""!==t.gallery&&i(t)}),i(o()))},50)})}(document,window,window.jQuery);
/*! lazysizes - v4.0.0-rc4 */
!function(a,b){var c=b(a,a.document);a.lazySizes=c,"object"==typeof module&&module.exports&&(module.exports=c)}(window,function(a,b){"use strict";if(b.getElementsByClassName){var c,d,e=b.documentElement,f=a.Date,g=a.HTMLPictureElement,h="addEventListener",i="getAttribute",j=a[h],k=a.setTimeout,l=a.requestAnimationFrame||k,m=a.requestIdleCallback,n=/^picture$/i,o=["load","error","lazyincluded","_lazyloaded"],p={},q=Array.prototype.forEach,r=function(a,b){return p[b]||(p[b]=new RegExp("(\\s|^)"+b+"(\\s|$)")),p[b].test(a[i]("class")||"")&&p[b]},s=function(a,b){r(a,b)||a.setAttribute("class",(a[i]("class")||"").trim()+" "+b)},t=function(a,b){var c;(c=r(a,b))&&a.setAttribute("class",(a[i]("class")||"").replace(c," "))},u=function(a,b,c){var d=c?h:"removeEventListener";c&&u(a,b),o.forEach(function(c){a[d](c,b)})},v=function(a,d,e,f,g){var h=b.createEvent("CustomEvent");return e||(e={}),e.instance=c,h.initCustomEvent(d,!f,!g,e),a.dispatchEvent(h),h},w=function(b,c){var e;!g&&(e=a.picturefill||d.pf)?e({reevaluate:!0,elements:[b]}):c&&c.src&&(b.src=c.src)},x=function(a,b){return(getComputedStyle(a,null)||{})[b]},y=function(a,b,c){for(c=c||a.offsetWidth;c<d.minSize&&b&&!a._lazysizesWidth;)c=b.offsetWidth,b=b.parentNode;return c},z=function(){var a,c,d=[],e=[],f=d,g=function(){var b=f;for(f=d.length?e:d,a=!0,c=!1;b.length;)b.shift()();a=!1},h=function(d,e){a&&!e?d.apply(this,arguments):(f.push(d),c||(c=!0,(b.hidden?k:l)(g)))};return h._lsFlush=g,h}(),A=function(a,b){return b?function(){z(a)}:function(){var b=this,c=arguments;z(function(){a.apply(b,c)})}},B=function(a){var b,c=0,d=125,e=666,g=e,h=function(){b=!1,c=f.now(),a()},i=m?function(){m(h,{timeout:g}),g!==e&&(g=e)}:A(function(){k(h)},!0);return function(a){var e;(a=a===!0)&&(g=44),b||(b=!0,e=d-(f.now()-c),0>e&&(e=0),a||9>e&&m?i():k(i,e))}},C=function(a){var b,c,d=99,e=function(){b=null,a()},g=function(){var a=f.now()-c;d>a?k(g,d-a):(m||e)(e)};return function(){c=f.now(),b||(b=k(g,d))}},D=function(){var g,l,m,o,p,y,D,F,G,H,I,J,K,L,M=/^img$/i,N=/^iframe$/i,O="onscroll"in a&&!/glebot/.test(navigator.userAgent),P=0,Q=0,R=0,S=-1,T=function(a){R--,a&&a.target&&u(a.target,T),(!a||0>R||!a.target)&&(R=0)},U=function(a,c){var d,f=a,g="hidden"==x(b.body,"visibility")||"hidden"!=x(a,"visibility");for(F-=c,I+=c,G-=c,H+=c;g&&(f=f.offsetParent)&&f!=b.body&&f!=e;)g=(x(f,"opacity")||1)>0,g&&"visible"!=x(f,"overflow")&&(d=f.getBoundingClientRect(),g=H>d.left&&G<d.right&&I>d.top-1&&F<d.bottom+1);return g},V=function(){var a,f,h,j,k,m,n,p,q,r=c.elements;if((o=d.loadMode)&&8>R&&(a=r.length)){f=0,S++,null==K&&("expand"in d||(d.expand=e.clientHeight>500&&e.clientWidth>500?500:370),J=d.expand,K=J*d.expFactor),K>Q&&1>R&&S>2&&o>2&&!b.hidden?(Q=K,S=0):Q=o>1&&S>1&&6>R?J:P;for(;a>f;f++)if(r[f]&&!r[f]._lazyRace)if(O)if((p=r[f][i]("data-expand"))&&(m=1*p)||(m=Q),q!==m&&(y=innerWidth+m*L,D=innerHeight+m,n=-1*m,q=m),h=r[f].getBoundingClientRect(),(I=h.bottom)>=n&&(F=h.top)<=D&&(H=h.right)>=n*L&&(G=h.left)<=y&&(I||H||G||F)&&(d.loadHidden||"hidden"!=x(r[f],"visibility"))&&(l&&3>R&&!p&&(3>o||4>S)||U(r[f],m))){if(ba(r[f]),k=!0,R>9)break}else!k&&l&&!j&&4>R&&4>S&&o>2&&(g[0]||d.preloadAfterLoad)&&(g[0]||!p&&(I||H||G||F||"auto"!=r[f][i](d.sizesAttr)))&&(j=g[0]||r[f]);else ba(r[f]);j&&!k&&ba(j)}},W=B(V),X=function(a){s(a.target,d.loadedClass),t(a.target,d.loadingClass),u(a.target,Z),v(a.target,"lazyloaded")},Y=A(X),Z=function(a){Y({target:a.target})},$=function(a,b){try{a.contentWindow.location.replace(b)}catch(c){a.src=b}},_=function(a){var b,c=a[i](d.srcsetAttr);(b=d.customMedia[a[i]("data-media")||a[i]("media")])&&a.setAttribute("media",b),c&&a.setAttribute("srcset",c)},aa=A(function(a,b,c,e,f){var g,h,j,l,o,p;(o=v(a,"lazybeforeunveil",b)).defaultPrevented||(e&&(c?s(a,d.autosizesClass):a.setAttribute("sizes",e)),h=a[i](d.srcsetAttr),g=a[i](d.srcAttr),f&&(j=a.parentNode,l=j&&n.test(j.nodeName||"")),p=b.firesLoad||"src"in a&&(h||g||l),o={target:a},p&&(u(a,T,!0),clearTimeout(m),m=k(T,2500),s(a,d.loadingClass),u(a,Z,!0)),l&&q.call(j.getElementsByTagName("source"),_),h?a.setAttribute("srcset",h):g&&!l&&(N.test(a.nodeName)?$(a,g):a.src=g),f&&(h||l)&&w(a,{src:g})),a._lazyRace&&delete a._lazyRace,t(a,d.lazyClass),z(function(){(!p||a.complete&&a.naturalWidth>1)&&(p?T(o):R--,X(o))},!0)}),ba=function(a){var b,c=M.test(a.nodeName),e=c&&(a[i](d.sizesAttr)||a[i]("sizes")),f="auto"==e;(!f&&l||!c||!a[i]("src")&&!a.srcset||a.complete||r(a,d.errorClass)||!r(a,d.lazyClass))&&(b=v(a,"lazyunveilread").detail,f&&E.updateElem(a,!0,a.offsetWidth),a._lazyRace=!0,R++,aa(a,b,f,e,c))},ca=function(){if(!l){if(f.now()-p<999)return void k(ca,999);var a=C(function(){d.loadMode=3,W()});l=!0,d.loadMode=3,W(),j("scroll",function(){3==d.loadMode&&(d.loadMode=2),a()},!0)}};return{_:function(){p=f.now(),c.elements=b.getElementsByClassName(d.lazyClass),g=b.getElementsByClassName(d.lazyClass+" "+d.preloadClass),L=d.hFac,j("scroll",W,!0),j("resize",W,!0),a.MutationObserver?new MutationObserver(W).observe(e,{childList:!0,subtree:!0,attributes:!0}):(e[h]("DOMNodeInserted",W,!0),e[h]("DOMAttrModified",W,!0),setInterval(W,999)),j("hashchange",W,!0),["focus","mouseover","click","load","transitionend","animationend","webkitAnimationEnd"].forEach(function(a){b[h](a,W,!0)}),/d$|^c/.test(b.readyState)?ca():(j("load",ca),b[h]("DOMContentLoaded",W),k(ca,2e4)),c.elements.length?(V(),z._lsFlush()):W()},checkElems:W,unveil:ba}}(),E=function(){var a,c=A(function(a,b,c,d){var e,f,g;if(a._lazysizesWidth=d,d+="px",a.setAttribute("sizes",d),n.test(b.nodeName||""))for(e=b.getElementsByTagName("source"),f=0,g=e.length;g>f;f++)e[f].setAttribute("sizes",d);c.detail.dataAttr||w(a,c.detail)}),e=function(a,b,d){var e,f=a.parentNode;f&&(d=y(a,f,d),e=v(a,"lazybeforesizes",{width:d,dataAttr:!!b}),e.defaultPrevented||(d=e.detail.width,d&&d!==a._lazysizesWidth&&c(a,f,e,d)))},f=function(){var b,c=a.length;if(c)for(b=0;c>b;b++)e(a[b])},g=C(f);return{_:function(){a=b.getElementsByClassName(d.autosizesClass),j("resize",g)},checkElems:g,updateElem:e}}(),F=function(){F.i||(F.i=!0,E._(),D._())};return function(){var b,c={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0};d=a.lazySizesConfig||a.lazysizesConfig||{};for(b in c)b in d||(d[b]=c[b]);a.lazySizesConfig=d,k(function(){d.init&&F()})}(),c={cfg:d,autoSizer:E,loader:D,init:F,uP:w,aC:s,rC:t,hC:r,fire:v,gW:y,rAF:z}}});
/**
 * @videojs/http-streaming
 * @version 1.5.1
 * @copyright 2018 Brightcove, Inc
 * @license Apache-2.0
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('video.js')) :
	typeof define === 'function' && define.amd ? define(['exports', 'video.js'], factory) :
	(factory((global.videojsHttpStreaming = {}),global.videojs));
}(this, (function (exports,videojs) { 'use strict';

	videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var empty = {};

	var empty$1 = /*#__PURE__*/Object.freeze({
		default: empty
	});

	var minDoc = ( empty$1 && empty ) || empty$1;

	var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : {};

	var doccy;

	if (typeof document !== 'undefined') {
	    doccy = document;
	} else {
	    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }
	}

	var document_1 = doccy;

	var urlToolkit = createCommonjsModule(function (module, exports) {
	  // see https://tools.ietf.org/html/rfc1808

	  /* jshint ignore:start */
	  (function (root) {
	    /* jshint ignore:end */

	    var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/\;?#]*)?(.*?)??(;.*?)?(\?.*?)?(#.*?)?$/;
	    var FIRST_SEGMENT_REGEX = /^([^\/;?#]*)(.*)$/;
	    var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
	    var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g;

	    var URLToolkit = { // jshint ignore:line
	      // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
	      // E.g
	      // With opts.alwaysNormalize = false (default, spec compliant)
	      // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
	      // With opts.alwaysNormalize = true (not spec compliant)
	      // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
	      buildAbsoluteURL: function buildAbsoluteURL(baseURL, relativeURL, opts) {
	        opts = opts || {};
	        // remove any remaining space and CRLF
	        baseURL = baseURL.trim();
	        relativeURL = relativeURL.trim();
	        if (!relativeURL) {
	          // 2a) If the embedded URL is entirely empty, it inherits the
	          // entire base URL (i.e., is set equal to the base URL)
	          // and we are done.
	          if (!opts.alwaysNormalize) {
	            return baseURL;
	          }
	          var basePartsForNormalise = this.parseURL(baseURL);
	          if (!basePartsForNormalise) {
	            throw new Error('Error trying to parse base URL.');
	          }
	          basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
	          return URLToolkit.buildURLFromParts(basePartsForNormalise);
	        }
	        var relativeParts = this.parseURL(relativeURL);
	        if (!relativeParts) {
	          throw new Error('Error trying to parse relative URL.');
	        }
	        if (relativeParts.scheme) {
	          // 2b) If the embedded URL starts with a scheme name, it is
	          // interpreted as an absolute URL and we are done.
	          if (!opts.alwaysNormalize) {
	            return relativeURL;
	          }
	          relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
	          return URLToolkit.buildURLFromParts(relativeParts);
	        }
	        var baseParts = this.parseURL(baseURL);
	        if (!baseParts) {
	          throw new Error('Error trying to parse base URL.');
	        }
	        if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
	          // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
	          // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
	          var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
	          baseParts.netLoc = pathParts[1];
	          baseParts.path = pathParts[2];
	        }
	        if (baseParts.netLoc && !baseParts.path) {
	          baseParts.path = '/';
	        }
	        var builtParts = {
	          // 2c) Otherwise, the embedded URL inherits the scheme of
	          // the base URL.
	          scheme: baseParts.scheme,
	          netLoc: relativeParts.netLoc,
	          path: null,
	          params: relativeParts.params,
	          query: relativeParts.query,
	          fragment: relativeParts.fragment
	        };
	        if (!relativeParts.netLoc) {
	          // 3) If the embedded URL's <net_loc> is non-empty, we skip to
	          // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
	          // (if any) of the base URL.
	          builtParts.netLoc = baseParts.netLoc;
	          // 4) If the embedded URL path is preceded by a slash "/", the
	          // path is not relative and we skip to Step 7.
	          if (relativeParts.path[0] !== '/') {
	            if (!relativeParts.path) {
	              // 5) If the embedded URL path is empty (and not preceded by a
	              // slash), then the embedded URL inherits the base URL path
	              builtParts.path = baseParts.path;
	              // 5a) if the embedded URL's <params> is non-empty, we skip to
	              // step 7; otherwise, it inherits the <params> of the base
	              // URL (if any) and
	              if (!relativeParts.params) {
	                builtParts.params = baseParts.params;
	                // 5b) if the embedded URL's <query> is non-empty, we skip to
	                // step 7; otherwise, it inherits the <query> of the base
	                // URL (if any) and we skip to step 7.
	                if (!relativeParts.query) {
	                  builtParts.query = baseParts.query;
	                }
	              }
	            } else {
	              // 6) The last segment of the base URL's path (anything
	              // following the rightmost slash "/", or the entire path if no
	              // slash is present) is removed and the embedded URL's path is
	              // appended in its place.
	              var baseURLPath = baseParts.path;
	              var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;
	              builtParts.path = URLToolkit.normalizePath(newPath);
	            }
	          }
	        }
	        if (builtParts.path === null) {
	          builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
	        }
	        return URLToolkit.buildURLFromParts(builtParts);
	      },
	      parseURL: function parseURL(url) {
	        var parts = URL_REGEX.exec(url);
	        if (!parts) {
	          return null;
	        }
	        return {
	          scheme: parts[1] || '',
	          netLoc: parts[2] || '',
	          path: parts[3] || '',
	          params: parts[4] || '',
	          query: parts[5] || '',
	          fragment: parts[6] || ''
	        };
	      },
	      normalizePath: function normalizePath(path) {
	        // The following operations are
	        // then applied, in order, to the new path:
	        // 6a) All occurrences of "./", where "." is a complete path
	        // segment, are removed.
	        // 6b) If the path ends with "." as a complete path segment,
	        // that "." is removed.
	        path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
	        // 6c) All occurrences of "<segment>/../", where <segment> is a
	        // complete path segment not equal to "..", are removed.
	        // Removal of these path segments is performed iteratively,
	        // removing the leftmost matching pattern on each iteration,
	        // until no matching pattern remains.
	        // 6d) If the path ends with "<segment>/..", where <segment> is a
	        // complete path segment not equal to "..", that
	        // "<segment>/.." is removed.
	        while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line
	        return path.split('').reverse().join('');
	      },
	      buildURLFromParts: function buildURLFromParts(parts) {
	        return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
	      }
	    };

	    /* jshint ignore:start */
	    module.exports = URLToolkit;
	  })(commonjsGlobal);
	  /* jshint ignore:end */
	});

	var win;

	if (typeof window !== "undefined") {
	    win = window;
	} else if (typeof commonjsGlobal !== "undefined") {
	    win = commonjsGlobal;
	} else if (typeof self !== "undefined") {
	    win = self;
	} else {
	    win = {};
	}

	var window_1 = win;

	/**
	 * @file resolve-url.js
	 */

	var resolveUrl = function resolveUrl(baseURL, relativeURL) {
	  // return early if we don't need to resolve
	  if (/^[a-z]+:/i.test(relativeURL)) {
	    return relativeURL;
	  }

	  // if the base URL is relative then combine with the current location
	  if (!/\/\//i.test(baseURL)) {
	    baseURL = urlToolkit.buildAbsoluteURL(window_1.location.href, baseURL);
	  }

	  return urlToolkit.buildAbsoluteURL(baseURL, relativeURL);
	};

	var classCallCheck = function classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	var inherits = function inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	/**
	 * @file stream.js
	 */
	/**
	 * A lightweight readable stream implemention that handles event dispatching.
	 *
	 * @class Stream
	 */
	var Stream = function () {
	  function Stream() {
	    classCallCheck(this, Stream);

	    this.listeners = {};
	  }

	  /**
	   * Add a listener for a specified event type.
	   *
	   * @param {String} type the event name
	   * @param {Function} listener the callback to be invoked when an event of
	   * the specified type occurs
	   */

	  Stream.prototype.on = function on(type, listener) {
	    if (!this.listeners[type]) {
	      this.listeners[type] = [];
	    }
	    this.listeners[type].push(listener);
	  };

	  /**
	   * Remove a listener for a specified event type.
	   *
	   * @param {String} type the event name
	   * @param {Function} listener  a function previously registered for this
	   * type of event through `on`
	   * @return {Boolean} if we could turn it off or not
	   */

	  Stream.prototype.off = function off(type, listener) {
	    if (!this.listeners[type]) {
	      return false;
	    }

	    var index = this.listeners[type].indexOf(listener);

	    this.listeners[type].splice(index, 1);
	    return index > -1;
	  };

	  /**
	   * Trigger an event of the specified type on this stream. Any additional
	   * arguments to this function are passed as parameters to event listeners.
	   *
	   * @param {String} type the event name
	   */

	  Stream.prototype.trigger = function trigger(type) {
	    var callbacks = this.listeners[type];
	    var i = void 0;
	    var length = void 0;
	    var args = void 0;

	    if (!callbacks) {
	      return;
	    }
	    // Slicing the arguments on every invocation of this method
	    // can add a significant amount of overhead. Avoid the
	    // intermediate object creation for the common case of a
	    // single callback argument
	    if (arguments.length === 2) {
	      length = callbacks.length;
	      for (i = 0; i < length; ++i) {
	        callbacks[i].call(this, arguments[1]);
	      }
	    } else {
	      args = Array.prototype.slice.call(arguments, 1);
	      length = callbacks.length;
	      for (i = 0; i < length; ++i) {
	        callbacks[i].apply(this, args);
	      }
	    }
	  };

	  /**
	   * Destroys the stream and cleans up.
	   */

	  Stream.prototype.dispose = function dispose() {
	    this.listeners = {};
	  };
	  /**
	   * Forwards all `data` events on this stream to the destination stream. The
	   * destination stream should provide a method `push` to receive the data
	   * events as they arrive.
	   *
	   * @param {Stream} destination the stream that will receive all `data` events
	   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
	   */

	  Stream.prototype.pipe = function pipe(destination) {
	    this.on('data', function (data) {
	      destination.push(data);
	    });
	  };

	  return Stream;
	}();

	/**
	 * @file m3u8/line-stream.js
	 */
	/**
	 * A stream that buffers string input and generates a `data` event for each
	 * line.
	 *
	 * @class LineStream
	 * @extends Stream
	 */

	var LineStream = function (_Stream) {
	  inherits(LineStream, _Stream);

	  function LineStream() {
	    classCallCheck(this, LineStream);

	    var _this = possibleConstructorReturn(this, _Stream.call(this));

	    _this.buffer = '';
	    return _this;
	  }

	  /**
	   * Add new data to be parsed.
	   *
	   * @param {String} data the text to process
	   */

	  LineStream.prototype.push = function push(data) {
	    var nextNewline = void 0;

	    this.buffer += data;
	    nextNewline = this.buffer.indexOf('\n');

	    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\n')) {
	      this.trigger('data', this.buffer.substring(0, nextNewline));
	      this.buffer = this.buffer.substring(nextNewline + 1);
	    }
	  };

	  return LineStream;
	}(Stream);

	/**
	 * @file m3u8/parse-stream.js
	 */
	/**
	 * "forgiving" attribute list psuedo-grammar:
	 * attributes -> keyvalue (',' keyvalue)*
	 * keyvalue   -> key '=' value
	 * key        -> [^=]*
	 * value      -> '"' [^"]* '"' | [^,]*
	 */
	var attributeSeparator = function attributeSeparator() {
	  var key = '[^=]*';
	  var value = '"[^"]*"|[^,]*';
	  var keyvalue = '(?:' + key + ')=(?:' + value + ')';

	  return new RegExp('(?:^|,)(' + keyvalue + ')');
	};

	/**
	 * Parse attributes from a line given the seperator
	 *
	 * @param {String} attributes the attibute line to parse
	 */
	var parseAttributes = function parseAttributes(attributes) {
	  // split the string using attributes as the separator
	  var attrs = attributes.split(attributeSeparator());
	  var result = {};
	  var i = attrs.length;
	  var attr = void 0;

	  while (i--) {
	    // filter out unmatched portions of the string
	    if (attrs[i] === '') {
	      continue;
	    }

	    // split the key and value
	    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);
	    // trim whitespace and remove optional quotes around the value
	    attr[0] = attr[0].replace(/^\s+|\s+$/g, '');
	    attr[1] = attr[1].replace(/^\s+|\s+$/g, '');
	    attr[1] = attr[1].replace(/^['"](.*)['"]$/g, '$1');
	    result[attr[0]] = attr[1];
	  }
	  return result;
	};

	/**
	 * A line-level M3U8 parser event stream. It expects to receive input one
	 * line at a time and performs a context-free parse of its contents. A stream
	 * interpretation of a manifest can be useful if the manifest is expected to
	 * be too large to fit comfortably into memory or the entirety of the input
	 * is not immediately available. Otherwise, it's probably much easier to work
	 * with a regular `Parser` object.
	 *
	 * Produces `data` events with an object that captures the parser's
	 * interpretation of the input. That object has a property `tag` that is one
	 * of `uri`, `comment`, or `tag`. URIs only have a single additional
	 * property, `line`, which captures the entirety of the input without
	 * interpretation. Comments similarly have a single additional property
	 * `text` which is the input without the leading `#`.
	 *
	 * Tags always have a property `tagType` which is the lower-cased version of
	 * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,
	 * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized
	 * tags are given the tag type `unknown` and a single additional property
	 * `data` with the remainder of the input.
	 *
	 * @class ParseStream
	 * @extends Stream
	 */

	var ParseStream = function (_Stream) {
	  inherits(ParseStream, _Stream);

	  function ParseStream() {
	    classCallCheck(this, ParseStream);

	    var _this = possibleConstructorReturn(this, _Stream.call(this));

	    _this.customParsers = [];
	    return _this;
	  }

	  /**
	   * Parses an additional line of input.
	   *
	   * @param {String} line a single line of an M3U8 file to parse
	   */

	  ParseStream.prototype.push = function push(line) {
	    var match = void 0;
	    var event = void 0;

	    // strip whitespace
	    line = line.replace(/^[\u0000\s]+|[\u0000\s]+$/g, '');
	    if (line.length === 0) {
	      // ignore empty lines
	      return;
	    }

	    // URIs
	    if (line[0] !== '#') {
	      this.trigger('data', {
	        type: 'uri',
	        uri: line
	      });
	      return;
	    }

	    for (var i = 0; i < this.customParsers.length; i++) {
	      if (this.customParsers[i].call(this, line)) {
	        return;
	      }
	    }

	    // Comments
	    if (line.indexOf('#EXT') !== 0) {
	      this.trigger('data', {
	        type: 'comment',
	        text: line.slice(1)
	      });
	      return;
	    }

	    // strip off any carriage returns here so the regex matching
	    // doesn't have to account for them.
	    line = line.replace('\r', '');

	    // Tags
	    match = /^#EXTM3U/.exec(line);
	    if (match) {
	      this.trigger('data', {
	        type: 'tag',
	        tagType: 'm3u'
	      });
	      return;
	    }
	    match = /^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'inf'
	      };
	      if (match[1]) {
	        event.duration = parseFloat(match[1]);
	      }
	      if (match[2]) {
	        event.title = match[2];
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'targetduration'
	      };
	      if (match[1]) {
	        event.duration = parseInt(match[1], 10);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'totalduration'
	      };
	      if (match[1]) {
	        event.duration = parseInt(match[1], 10);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'version'
	      };
	      if (match[1]) {
	        event.version = parseInt(match[1], 10);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'media-sequence'
	      };
	      if (match[1]) {
	        event.number = parseInt(match[1], 10);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'discontinuity-sequence'
	      };
	      if (match[1]) {
	        event.number = parseInt(match[1], 10);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'playlist-type'
	      };
	      if (match[1]) {
	        event.playlistType = match[1];
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'byterange'
	      };
	      if (match[1]) {
	        event.length = parseInt(match[1], 10);
	      }
	      if (match[2]) {
	        event.offset = parseInt(match[2], 10);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'allow-cache'
	      };
	      if (match[1]) {
	        event.allowed = !/NO/.test(match[1]);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-MAP:?(.*)$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'map'
	      };

	      if (match[1]) {
	        var attributes = parseAttributes(match[1]);

	        if (attributes.URI) {
	          event.uri = attributes.URI;
	        }
	        if (attributes.BYTERANGE) {
	          var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),
	              length = _attributes$BYTERANGE[0],
	              offset = _attributes$BYTERANGE[1];

	          event.byterange = {};
	          if (length) {
	            event.byterange.length = parseInt(length, 10);
	          }
	          if (offset) {
	            event.byterange.offset = parseInt(offset, 10);
	          }
	        }
	      }

	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'stream-inf'
	      };
	      if (match[1]) {
	        event.attributes = parseAttributes(match[1]);

	        if (event.attributes.RESOLUTION) {
	          var split = event.attributes.RESOLUTION.split('x');
	          var resolution = {};

	          if (split[0]) {
	            resolution.width = parseInt(split[0], 10);
	          }
	          if (split[1]) {
	            resolution.height = parseInt(split[1], 10);
	          }
	          event.attributes.RESOLUTION = resolution;
	        }
	        if (event.attributes.BANDWIDTH) {
	          event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);
	        }
	        if (event.attributes['PROGRAM-ID']) {
	          event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);
	        }
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'media'
	      };
	      if (match[1]) {
	        event.attributes = parseAttributes(match[1]);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-ENDLIST/.exec(line);
	    if (match) {
	      this.trigger('data', {
	        type: 'tag',
	        tagType: 'endlist'
	      });
	      return;
	    }
	    match = /^#EXT-X-DISCONTINUITY/.exec(line);
	    if (match) {
	      this.trigger('data', {
	        type: 'tag',
	        tagType: 'discontinuity'
	      });
	      return;
	    }
	    match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'program-date-time'
	      };
	      if (match[1]) {
	        event.dateTimeString = match[1];
	        event.dateTimeObject = new Date(match[1]);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-KEY:?(.*)$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'key'
	      };
	      if (match[1]) {
	        event.attributes = parseAttributes(match[1]);
	        // parse the IV string into a Uint32Array
	        if (event.attributes.IV) {
	          if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {
	            event.attributes.IV = event.attributes.IV.substring(2);
	          }

	          event.attributes.IV = event.attributes.IV.match(/.{8}/g);
	          event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);
	          event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);
	          event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);
	          event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);
	          event.attributes.IV = new Uint32Array(event.attributes.IV);
	        }
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-START:?(.*)$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'start'
	      };
	      if (match[1]) {
	        event.attributes = parseAttributes(match[1]);

	        event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);
	        event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'cue-out-cont'
	      };
	      if (match[1]) {
	        event.data = match[1];
	      } else {
	        event.data = '';
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'cue-out'
	      };
	      if (match[1]) {
	        event.data = match[1];
	      } else {
	        event.data = '';
	      }
	      this.trigger('data', event);
	      return;
	    }
	    match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);
	    if (match) {
	      event = {
	        type: 'tag',
	        tagType: 'cue-in'
	      };
	      if (match[1]) {
	        event.data = match[1];
	      } else {
	        event.data = '';
	      }
	      this.trigger('data', event);
	      return;
	    }

	    // unknown tag type
	    this.trigger('data', {
	      type: 'tag',
	      data: line.slice(4)
	    });
	  };

	  /**
	   * Add a parser for custom headers
	   *
	   * @param {Object}   options              a map of options for the added parser
	   * @param {RegExp}   options.expression   a regular expression to match the custom header
	   * @param {string}   options.customType   the custom type to register to the output
	   * @param {Function} [options.dataParser] function to parse the line into an object
	   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
	   */

	  ParseStream.prototype.addParser = function addParser(_ref) {
	    var _this2 = this;

	    var expression = _ref.expression,
	        customType = _ref.customType,
	        dataParser = _ref.dataParser,
	        segment = _ref.segment;

	    if (typeof dataParser !== 'function') {
	      dataParser = function dataParser(line) {
	        return line;
	      };
	    }
	    this.customParsers.push(function (line) {
	      var match = expression.exec(line);

	      if (match) {
	        _this2.trigger('data', {
	          type: 'custom',
	          data: dataParser(line),
	          customType: customType,
	          segment: segment
	        });
	        return true;
	      }
	    });
	  };

	  return ParseStream;
	}(Stream);

	/**
	 * @file m3u8/parser.js
	 */
	/**
	 * A parser for M3U8 files. The current interpretation of the input is
	 * exposed as a property `manifest` on parser objects. It's just two lines to
	 * create and parse a manifest once you have the contents available as a string:
	 *
	 * ```js
	 * var parser = new m3u8.Parser();
	 * parser.push(xhr.responseText);
	 * ```
	 *
	 * New input can later be applied to update the manifest object by calling
	 * `push` again.
	 *
	 * The parser attempts to create a usable manifest object even if the
	 * underlying input is somewhat nonsensical. It emits `info` and `warning`
	 * events during the parse if it encounters input that seems invalid or
	 * requires some property of the manifest object to be defaulted.
	 *
	 * @class Parser
	 * @extends Stream
	 */

	var Parser = function (_Stream) {
	  inherits(Parser, _Stream);

	  function Parser() {
	    classCallCheck(this, Parser);

	    var _this = possibleConstructorReturn(this, _Stream.call(this));

	    _this.lineStream = new LineStream();
	    _this.parseStream = new ParseStream();
	    _this.lineStream.pipe(_this.parseStream);

	    /* eslint-disable consistent-this */
	    var self = _this;
	    /* eslint-enable consistent-this */
	    var uris = [];
	    var currentUri = {};
	    // if specified, the active EXT-X-MAP definition
	    var currentMap = void 0;
	    // if specified, the active decryption key
	    var _key = void 0;
	    var noop = function noop() {};
	    var defaultMediaGroups = {
	      'AUDIO': {},
	      'VIDEO': {},
	      'CLOSED-CAPTIONS': {},
	      'SUBTITLES': {}
	    };
	    // group segments into numbered timelines delineated by discontinuities
	    var currentTimeline = 0;

	    // the manifest is empty until the parse stream begins delivering data
	    _this.manifest = {
	      allowCache: true,
	      discontinuityStarts: [],
	      segments: []
	    };

	    // update the manifest with the m3u8 entry from the parse stream
	    _this.parseStream.on('data', function (entry) {
	      var mediaGroup = void 0;
	      var rendition = void 0;

	      ({
	        tag: function tag() {
	          // switch based on the tag type
	          (({
	            'allow-cache': function allowCache() {
	              this.manifest.allowCache = entry.allowed;
	              if (!('allowed' in entry)) {
	                this.trigger('info', {
	                  message: 'defaulting allowCache to YES'
	                });
	                this.manifest.allowCache = true;
	              }
	            },
	            byterange: function byterange() {
	              var byterange = {};

	              if ('length' in entry) {
	                currentUri.byterange = byterange;
	                byterange.length = entry.length;

	                if (!('offset' in entry)) {
	                  this.trigger('info', {
	                    message: 'defaulting offset to zero'
	                  });
	                  entry.offset = 0;
	                }
	              }
	              if ('offset' in entry) {
	                currentUri.byterange = byterange;
	                byterange.offset = entry.offset;
	              }
	            },
	            endlist: function endlist() {
	              this.manifest.endList = true;
	            },
	            inf: function inf() {
	              if (!('mediaSequence' in this.manifest)) {
	                this.manifest.mediaSequence = 0;
	                this.trigger('info', {
	                  message: 'defaulting media sequence to zero'
	                });
	              }
	              if (!('discontinuitySequence' in this.manifest)) {
	                this.manifest.discontinuitySequence = 0;
	                this.trigger('info', {
	                  message: 'defaulting discontinuity sequence to zero'
	                });
	              }
	              if (entry.duration > 0) {
	                currentUri.duration = entry.duration;
	              }

	              if (entry.duration === 0) {
	                currentUri.duration = 0.01;
	                this.trigger('info', {
	                  message: 'updating zero segment duration to a small value'
	                });
	              }

	              this.manifest.segments = uris;
	            },
	            key: function key() {
	              if (!entry.attributes) {
	                this.trigger('warn', {
	                  message: 'ignoring key declaration without attribute list'
	                });
	                return;
	              }
	              // clear the active encryption key
	              if (entry.attributes.METHOD === 'NONE') {
	                _key = null;
	                return;
	              }
	              if (!entry.attributes.URI) {
	                this.trigger('warn', {
	                  message: 'ignoring key declaration without URI'
	                });
	                return;
	              }
	              if (!entry.attributes.METHOD) {
	                this.trigger('warn', {
	                  message: 'defaulting key method to AES-128'
	                });
	              }

	              // setup an encryption key for upcoming segments
	              _key = {
	                method: entry.attributes.METHOD || 'AES-128',
	                uri: entry.attributes.URI
	              };

	              if (typeof entry.attributes.IV !== 'undefined') {
	                _key.iv = entry.attributes.IV;
	              }
	            },
	            'media-sequence': function mediaSequence() {
	              if (!isFinite(entry.number)) {
	                this.trigger('warn', {
	                  message: 'ignoring invalid media sequence: ' + entry.number
	                });
	                return;
	              }
	              this.manifest.mediaSequence = entry.number;
	            },
	            'discontinuity-sequence': function discontinuitySequence() {
	              if (!isFinite(entry.number)) {
	                this.trigger('warn', {
	                  message: 'ignoring invalid discontinuity sequence: ' + entry.number
	                });
	                return;
	              }
	              this.manifest.discontinuitySequence = entry.number;
	              currentTimeline = entry.number;
	            },
	            'playlist-type': function playlistType() {
	              if (!/VOD|EVENT/.test(entry.playlistType)) {
	                this.trigger('warn', {
	                  message: 'ignoring unknown playlist type: ' + entry.playlist
	                });
	                return;
	              }
	              this.manifest.playlistType = entry.playlistType;
	            },
	            map: function map() {
	              currentMap = {};
	              if (entry.uri) {
	                currentMap.uri = entry.uri;
	              }
	              if (entry.byterange) {
	                currentMap.byterange = entry.byterange;
	              }
	            },
	            'stream-inf': function streamInf() {
	              this.manifest.playlists = uris;
	              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;

	              if (!entry.attributes) {
	                this.trigger('warn', {
	                  message: 'ignoring empty stream-inf attributes'
	                });
	                return;
	              }

	              if (!currentUri.attributes) {
	                currentUri.attributes = {};
	              }
	              _extends(currentUri.attributes, entry.attributes);
	            },
	            media: function media() {
	              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;

	              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {
	                this.trigger('warn', {
	                  message: 'ignoring incomplete or missing media group'
	                });
	                return;
	              }

	              // find the media group, creating defaults as necessary
	              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];

	              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};
	              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];

	              // collect the rendition metadata
	              rendition = {
	                'default': /yes/i.test(entry.attributes.DEFAULT)
	              };
	              if (rendition['default']) {
	                rendition.autoselect = true;
	              } else {
	                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);
	              }
	              if (entry.attributes.LANGUAGE) {
	                rendition.language = entry.attributes.LANGUAGE;
	              }
	              if (entry.attributes.URI) {
	                rendition.uri = entry.attributes.URI;
	              }
	              if (entry.attributes['INSTREAM-ID']) {
	                rendition.instreamId = entry.attributes['INSTREAM-ID'];
	              }
	              if (entry.attributes.CHARACTERISTICS) {
	                rendition.characteristics = entry.attributes.CHARACTERISTICS;
	              }
	              if (entry.attributes.FORCED) {
	                rendition.forced = /yes/i.test(entry.attributes.FORCED);
	              }

	              // insert the new rendition
	              mediaGroup[entry.attributes.NAME] = rendition;
	            },
	            discontinuity: function discontinuity() {
	              currentTimeline += 1;
	              currentUri.discontinuity = true;
	              this.manifest.discontinuityStarts.push(uris.length);
	            },
	            'program-date-time': function programDateTime() {
	              if (typeof this.manifest.dateTimeString === 'undefined') {
	                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards
	                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag
	                // to the manifest object
	                // TODO: Consider removing this in future major version
	                this.manifest.dateTimeString = entry.dateTimeString;
	                this.manifest.dateTimeObject = entry.dateTimeObject;
	              }

	              currentUri.dateTimeString = entry.dateTimeString;
	              currentUri.dateTimeObject = entry.dateTimeObject;
	            },
	            targetduration: function targetduration() {
	              if (!isFinite(entry.duration) || entry.duration < 0) {
	                this.trigger('warn', {
	                  message: 'ignoring invalid target duration: ' + entry.duration
	                });
	                return;
	              }
	              this.manifest.targetDuration = entry.duration;
	            },
	            totalduration: function totalduration() {
	              if (!isFinite(entry.duration) || entry.duration < 0) {
	                this.trigger('warn', {
	                  message: 'ignoring invalid total duration: ' + entry.duration
	                });
	                return;
	              }
	              this.manifest.totalDuration = entry.duration;
	            },
	            start: function start() {
	              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {
	                this.trigger('warn', {
	                  message: 'ignoring start declaration without appropriate attribute list'
	                });
	                return;
	              }
	              this.manifest.start = {
	                timeOffset: entry.attributes['TIME-OFFSET'],
	                precise: entry.attributes.PRECISE
	              };
	            },
	            'cue-out': function cueOut() {
	              currentUri.cueOut = entry.data;
	            },
	            'cue-out-cont': function cueOutCont() {
	              currentUri.cueOutCont = entry.data;
	            },
	            'cue-in': function cueIn() {
	              currentUri.cueIn = entry.data;
	            }
	          })[entry.tagType] || noop).call(self);
	        },
	        uri: function uri() {
	          currentUri.uri = entry.uri;
	          uris.push(currentUri);

	          // if no explicit duration was declared, use the target duration
	          if (this.manifest.targetDuration && !('duration' in currentUri)) {
	            this.trigger('warn', {
	              message: 'defaulting segment duration to the target duration'
	            });
	            currentUri.duration = this.manifest.targetDuration;
	          }
	          // annotate with encryption information, if necessary
	          if (_key) {
	            currentUri.key = _key;
	          }
	          currentUri.timeline = currentTimeline;
	          // annotate with initialization segment information, if necessary
	          if (currentMap) {
	            currentUri.map = currentMap;
	          }

	          // prepare for the next URI
	          currentUri = {};
	        },
	        comment: function comment() {
	          // comments are not important for playback
	        },
	        custom: function custom() {
	          // if this is segment-level data attach the output to the segment
	          if (entry.segment) {
	            currentUri.custom = currentUri.custom || {};
	            currentUri.custom[entry.customType] = entry.data;
	            // if this is manifest-level data attach to the top level manifest object
	          } else {
	            this.manifest.custom = this.manifest.custom || {};
	            this.manifest.custom[entry.customType] = entry.data;
	          }
	        }
	      })[entry.type].call(self);
	    });
	    return _this;
	  }

	  /**
	   * Parse the input string and update the manifest object.
	   *
	   * @param {String} chunk a potentially incomplete portion of the manifest
	   */

	  Parser.prototype.push = function push(chunk) {
	    this.lineStream.push(chunk);
	  };

	  /**
	   * Flush any remaining input. This can be handy if the last line of an M3U8
	   * manifest did not contain a trailing newline but the file has been
	   * completely received.
	   */

	  Parser.prototype.end = function end() {
	    // flush any buffered input
	    this.lineStream.push('\n');
	  };
	  /**
	   * Add an additional parser for non-standard tags
	   *
	   * @param {Object}   options              a map of options for the added parser
	   * @param {RegExp}   options.expression   a regular expression to match the custom header
	   * @param {string}   options.type         the type to register to the output
	   * @param {Function} [options.dataParser] function to parse the line into an object
	   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
	   */

	  Parser.prototype.addParser = function addParser(options) {
	    this.parseStream.addParser(options);
	  };

	  return Parser;
	}(Stream);

	var classCallCheck$1 = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	var get = function get(object, property, receiver) {
	  if (object === null) object = Function.prototype;
	  var desc = Object.getOwnPropertyDescriptor(object, property);

	  if (desc === undefined) {
	    var parent = Object.getPrototypeOf(object);

	    if (parent === null) {
	      return undefined;
	    } else {
	      return get(parent, property, receiver);
	    }
	  } else if ("value" in desc) {
	    return desc.value;
	  } else {
	    var getter = desc.get;

	    if (getter === undefined) {
	      return undefined;
	    }

	    return getter.call(receiver);
	  }
	};

	var inherits$1 = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	var possibleConstructorReturn$1 = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	var slicedToArray = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

	/**
	 * @file playlist-loader.js
	 *
	 * A state machine that manages the loading, caching, and updating of
	 * M3U8 playlists.
	 *
	 */

	var mergeOptions = videojs.mergeOptions,
	    EventTarget = videojs.EventTarget,
	    log = videojs.log;

	/**
	 * Loops through all supported media groups in master and calls the provided
	 * callback for each group
	 *
	 * @param {Object} master
	 *        The parsed master manifest object
	 * @param {Function} callback
	 *        Callback to call for each media group
	 */

	var forEachMediaGroup = function forEachMediaGroup(master, callback) {
	  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {
	    for (var groupKey in master.mediaGroups[mediaType]) {
	      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {
	        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];

	        callback(mediaProperties, mediaType, groupKey, labelKey);
	      }
	    }
	  });
	};

	/**
	  * Returns a new array of segments that is the result of merging
	  * properties from an older list of segments onto an updated
	  * list. No properties on the updated playlist will be overridden.
	  *
	  * @param {Array} original the outdated list of segments
	  * @param {Array} update the updated list of segments
	  * @param {Number=} offset the index of the first update
	  * segment in the original segment list. For non-live playlists,
	  * this should always be zero and does not need to be
	  * specified. For live playlists, it should be the difference
	  * between the media sequence numbers in the original and updated
	  * playlists.
	  * @return a list of merged segment objects
	  */
	var updateSegments = function updateSegments(original, update, offset) {
	  var result = update.slice();

	  offset = offset || 0;
	  var length = Math.min(original.length, update.length + offset);

	  for (var i = offset; i < length; i++) {
	    result[i - offset] = mergeOptions(original[i], result[i - offset]);
	  }
	  return result;
	};

	var resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {
	  if (!segment.resolvedUri) {
	    segment.resolvedUri = resolveUrl(baseUri, segment.uri);
	  }
	  if (segment.key && !segment.key.resolvedUri) {
	    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);
	  }
	  if (segment.map && !segment.map.resolvedUri) {
	    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);
	  }
	};

	/**
	  * Returns a new master playlist that is the result of merging an
	  * updated media playlist into the original version. If the
	  * updated media playlist does not match any of the playlist
	  * entries in the original master playlist, null is returned.
	  *
	  * @param {Object} master a parsed master M3U8 object
	  * @param {Object} media a parsed media M3U8 object
	  * @return {Object} a new object that represents the original
	  * master playlist with the updated media playlist merged in, or
	  * null if the merge produced no change.
	  */
	var updateMaster = function updateMaster(master, media) {
	  var result = mergeOptions(master, {});
	  var playlist = result.playlists[media.uri];

	  if (!playlist) {
	    return null;
	  }

	  // consider the playlist unchanged if the number of segments is equal and the media
	  // sequence number is unchanged
	  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {
	    return null;
	  }

	  var mergedPlaylist = mergeOptions(playlist, media);

	  // if the update could overlap existing segment information, merge the two segment lists
	  if (playlist.segments) {
	    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);
	  }

	  // resolve any segment URIs to prevent us from having to do it later
	  mergedPlaylist.segments.forEach(function (segment) {
	    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);
	  });

	  // TODO Right now in the playlists array there are two references to each playlist, one
	  // that is referenced by index, and one by URI. The index reference may no longer be
	  // necessary.
	  for (var i = 0; i < result.playlists.length; i++) {
	    if (result.playlists[i].uri === media.uri) {
	      result.playlists[i] = mergedPlaylist;
	    }
	  }
	  result.playlists[media.uri] = mergedPlaylist;

	  return result;
	};

	var setupMediaPlaylists = function setupMediaPlaylists(master) {
	  // setup by-URI lookups and resolve media playlist URIs
	  var i = master.playlists.length;

	  while (i--) {
	    var playlist = master.playlists[i];

	    master.playlists[playlist.uri] = playlist;
	    playlist.resolvedUri = resolveUrl(master.uri, playlist.uri);
	    playlist.id = i;

	    if (!playlist.attributes) {
	      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a
	      // BANDWIDTH attribute, we can play the stream without it. This means a poorly
	      // formatted master playlist may not have an attribute list. An attributes
	      // property is added here to prevent undefined references when we encounter
	      // this scenario.
	      playlist.attributes = {};

	      log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');
	    }
	  }
	};

	var resolveMediaGroupUris = function resolveMediaGroupUris(master) {
	  forEachMediaGroup(master, function (properties) {
	    if (properties.uri) {
	      properties.resolvedUri = resolveUrl(master.uri, properties.uri);
	    }
	  });
	};

	/**
	 * Calculates the time to wait before refreshing a live playlist
	 *
	 * @param {Object} media
	 *        The current media
	 * @param {Boolean} update
	 *        True if there were any updates from the last refresh, false otherwise
	 * @return {Number}
	 *         The time in ms to wait before refreshing the live playlist
	 */
	var refreshDelay = function refreshDelay(media, update) {
	  var lastSegment = media.segments[media.segments.length - 1];
	  var delay = void 0;

	  if (update && lastSegment && lastSegment.duration) {
	    delay = lastSegment.duration * 1000;
	  } else {
	    // if the playlist is unchanged since the last reload or last segment duration
	    // cannot be determined, try again after half the target duration
	    delay = (media.targetDuration || 10) * 500;
	  }
	  return delay;
	};

	/**
	 * Load a playlist from a remote location
	 *
	 * @class PlaylistLoader
	 * @extends Stream
	 * @param {String} srcUrl the url to start with
	 * @param {Boolean} withCredentials the withCredentials xhr option
	 * @constructor
	 */

	var PlaylistLoader = function (_EventTarget) {
	  inherits$1(PlaylistLoader, _EventTarget);

	  function PlaylistLoader(srcUrl, hls, withCredentials) {
	    classCallCheck$1(this, PlaylistLoader);

	    var _this = possibleConstructorReturn$1(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this));

	    _this.srcUrl = srcUrl;
	    _this.hls_ = hls;
	    _this.withCredentials = withCredentials;

	    if (!_this.srcUrl) {
	      throw new Error('A non-empty playlist URL is required');
	    }

	    // initialize the loader state
	    _this.state = 'HAVE_NOTHING';

	    // live playlist staleness timeout
	    _this.on('mediaupdatetimeout', function () {
	      if (_this.state !== 'HAVE_METADATA') {
	        // only refresh the media playlist if no other activity is going on
	        return;
	      }

	      _this.state = 'HAVE_CURRENT_METADATA';

	      _this.request = _this.hls_.xhr({
	        uri: resolveUrl(_this.master.uri, _this.media().uri),
	        withCredentials: _this.withCredentials
	      }, function (error, req) {
	        // disposed
	        if (!_this.request) {
	          return;
	        }

	        if (error) {
	          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');
	        }

	        _this.haveMetadata(_this.request, _this.media().uri);
	      });
	    });
	    return _this;
	  }

	  createClass(PlaylistLoader, [{
	    key: 'playlistRequestError',
	    value: function playlistRequestError(xhr, url, startingState) {
	      // any in-flight request is now finished
	      this.request = null;

	      if (startingState) {
	        this.state = startingState;
	      }

	      this.error = {
	        playlist: this.master.playlists[url],
	        status: xhr.status,
	        message: 'HLS playlist request error at URL: ' + url,
	        responseText: xhr.responseText,
	        code: xhr.status >= 500 ? 4 : 2
	      };

	      this.trigger('error');
	    }

	    // update the playlist loader's state in response to a new or
	    // updated playlist.

	  }, {
	    key: 'haveMetadata',
	    value: function haveMetadata(xhr, url) {
	      var _this2 = this;

	      // any in-flight request is now finished
	      this.request = null;
	      this.state = 'HAVE_METADATA';

	      var parser = new Parser();

	      parser.push(xhr.responseText);
	      parser.end();
	      parser.manifest.uri = url;
	      // m3u8-parser does not attach an attributes property to media playlists so make
	      // sure that the property is attached to avoid undefined reference errors
	      parser.manifest.attributes = parser.manifest.attributes || {};

	      // merge this playlist into the master
	      var update = updateMaster(this.master, parser.manifest);

	      this.targetDuration = parser.manifest.targetDuration;

	      if (update) {
	        this.master = update;
	        this.media_ = this.master.playlists[parser.manifest.uri];
	      } else {
	        this.trigger('playlistunchanged');
	      }

	      // refresh live playlists after a target duration passes
	      if (!this.media().endList) {
	        window_1.clearTimeout(this.mediaUpdateTimeout);
	        this.mediaUpdateTimeout = window_1.setTimeout(function () {
	          _this2.trigger('mediaupdatetimeout');
	        }, refreshDelay(this.media(), !!update));
	      }

	      this.trigger('loadedplaylist');
	    }

	    /**
	     * Abort any outstanding work and clean up.
	     */

	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      this.stopRequest();
	      window_1.clearTimeout(this.mediaUpdateTimeout);
	    }
	  }, {
	    key: 'stopRequest',
	    value: function stopRequest() {
	      if (this.request) {
	        var oldRequest = this.request;

	        this.request = null;
	        oldRequest.onreadystatechange = null;
	        oldRequest.abort();
	      }
	    }

	    /**
	     * When called without any arguments, returns the currently
	     * active media playlist. When called with a single argument,
	     * triggers the playlist loader to asynchronously switch to the
	     * specified media playlist. Calling this method while the
	     * loader is in the HAVE_NOTHING causes an error to be emitted
	     * but otherwise has no effect.
	     *
	     * @param {Object=} playlist the parsed media playlist
	     * object to switch to
	     * @return {Playlist} the current loaded media
	     */

	  }, {
	    key: 'media',
	    value: function media(playlist) {
	      var _this3 = this;

	      // getter
	      if (!playlist) {
	        return this.media_;
	      }

	      // setter
	      if (this.state === 'HAVE_NOTHING') {
	        throw new Error('Cannot switch media playlist from ' + this.state);
	      }

	      var startingState = this.state;

	      // find the playlist object if the target playlist has been
	      // specified by URI
	      if (typeof playlist === 'string') {
	        if (!this.master.playlists[playlist]) {
	          throw new Error('Unknown playlist URI: ' + playlist);
	        }
	        playlist = this.master.playlists[playlist];
	      }

	      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;

	      // switch to fully loaded playlists immediately
	      if (this.master.playlists[playlist.uri].endList) {
	        // abort outstanding playlist requests
	        if (this.request) {
	          this.request.onreadystatechange = null;
	          this.request.abort();
	          this.request = null;
	        }
	        this.state = 'HAVE_METADATA';
	        this.media_ = playlist;

	        // trigger media change if the active media has been updated
	        if (mediaChange) {
	          this.trigger('mediachanging');
	          this.trigger('mediachange');
	        }
	        return;
	      }

	      // switching to the active playlist is a no-op
	      if (!mediaChange) {
	        return;
	      }

	      this.state = 'SWITCHING_MEDIA';

	      // there is already an outstanding playlist request
	      if (this.request) {
	        if (resolveUrl(this.master.uri, playlist.uri) === this.request.url) {
	          // requesting to switch to the same playlist multiple times
	          // has no effect after the first
	          return;
	        }
	        this.request.onreadystatechange = null;
	        this.request.abort();
	        this.request = null;
	      }

	      // request the new playlist
	      if (this.media_) {
	        this.trigger('mediachanging');
	      }

	      this.request = this.hls_.xhr({
	        uri: resolveUrl(this.master.uri, playlist.uri),
	        withCredentials: this.withCredentials
	      }, function (error, req) {
	        // disposed
	        if (!_this3.request) {
	          return;
	        }

	        if (error) {
	          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);
	        }

	        _this3.haveMetadata(req, playlist.uri);

	        // fire loadedmetadata the first time a media playlist is loaded
	        if (startingState === 'HAVE_MASTER') {
	          _this3.trigger('loadedmetadata');
	        } else {
	          _this3.trigger('mediachange');
	        }
	      });
	    }

	    /**
	     * pause loading of the playlist
	     */

	  }, {
	    key: 'pause',
	    value: function pause() {
	      this.stopRequest();
	      window_1.clearTimeout(this.mediaUpdateTimeout);
	      if (this.state === 'HAVE_NOTHING') {
	        // If we pause the loader before any data has been retrieved, its as if we never
	        // started, so reset to an unstarted state.
	        this.started = false;
	      }
	      // Need to restore state now that no activity is happening
	      if (this.state === 'SWITCHING_MEDIA') {
	        // if the loader was in the process of switching media, it should either return to
	        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media
	        // playlist yet. This is determined by the existence of loader.media_
	        if (this.media_) {
	          this.state = 'HAVE_METADATA';
	        } else {
	          this.state = 'HAVE_MASTER';
	        }
	      } else if (this.state === 'HAVE_CURRENT_METADATA') {
	        this.state = 'HAVE_METADATA';
	      }
	    }

	    /**
	     * start loading of the playlist
	     */

	  }, {
	    key: 'load',
	    value: function load(isFinalRendition) {
	      var _this4 = this;

	      window_1.clearTimeout(this.mediaUpdateTimeout);

	      var media = this.media();

	      if (isFinalRendition) {
	        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;

	        this.mediaUpdateTimeout = window_1.setTimeout(function () {
	          return _this4.load();
	        }, delay);
	        return;
	      }

	      if (!this.started) {
	        this.start();
	        return;
	      }

	      if (media && !media.endList) {
	        this.trigger('mediaupdatetimeout');
	      } else {
	        this.trigger('loadedplaylist');
	      }
	    }

	    /**
	     * start loading of the playlist
	     */

	  }, {
	    key: 'start',
	    value: function start() {
	      var _this5 = this;

	      this.started = true;

	      // request the specified URL
	      this.request = this.hls_.xhr({
	        uri: this.srcUrl,
	        withCredentials: this.withCredentials
	      }, function (error, req) {
	        // disposed
	        if (!_this5.request) {
	          return;
	        }

	        // clear the loader's request reference
	        _this5.request = null;

	        if (error) {
	          _this5.error = {
	            status: req.status,
	            message: 'HLS playlist request error at URL: ' + _this5.srcUrl,
	            responseText: req.responseText,
	            // MEDIA_ERR_NETWORK
	            code: 2
	          };
	          if (_this5.state === 'HAVE_NOTHING') {
	            _this5.started = false;
	          }
	          return _this5.trigger('error');
	        }

	        var parser = new Parser();

	        parser.push(req.responseText);
	        parser.end();

	        _this5.state = 'HAVE_MASTER';

	        parser.manifest.uri = _this5.srcUrl;

	        // loaded a master playlist
	        if (parser.manifest.playlists) {
	          _this5.master = parser.manifest;

	          setupMediaPlaylists(_this5.master);
	          resolveMediaGroupUris(_this5.master);

	          _this5.trigger('loadedplaylist');
	          if (!_this5.request) {
	            // no media playlist was specifically selected so start
	            // from the first listed one
	            _this5.media(parser.manifest.playlists[0]);
	          }
	          return;
	        }

	        // loaded a media playlist
	        // infer a master playlist if none was previously requested
	        _this5.master = {
	          mediaGroups: {
	            'AUDIO': {},
	            'VIDEO': {},
	            'CLOSED-CAPTIONS': {},
	            'SUBTITLES': {}
	          },
	          uri: window_1.location.href,
	          playlists: [{
	            uri: _this5.srcUrl,
	            id: 0
	          }]
	        };
	        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];
	        _this5.master.playlists[0].resolvedUri = _this5.srcUrl;
	        // m3u8-parser does not attach an attributes property to media playlists so make
	        // sure that the property is attached to avoid undefined reference errors
	        _this5.master.playlists[0].attributes = _this5.master.playlists[0].attributes || {};
	        _this5.haveMetadata(req, _this5.srcUrl);
	        return _this5.trigger('loadedmetadata');
	      });
	    }
	  }]);
	  return PlaylistLoader;
	}(EventTarget);

	/**
	 * @file playlist.js
	 *
	 * Playlist related utilities.
	 */

	var createTimeRange = videojs.createTimeRange;

	/**
	 * walk backward until we find a duration we can use
	 * or return a failure
	 *
	 * @param {Playlist} playlist the playlist to walk through
	 * @param {Number} endSequence the mediaSequence to stop walking on
	 */

	var backwardDuration = function backwardDuration(playlist, endSequence) {
	  var result = 0;
	  var i = endSequence - playlist.mediaSequence;
	  // if a start time is available for segment immediately following
	  // the interval, use it
	  var segment = playlist.segments[i];

	  // Walk backward until we find the latest segment with timeline
	  // information that is earlier than endSequence
	  if (segment) {
	    if (typeof segment.start !== 'undefined') {
	      return { result: segment.start, precise: true };
	    }
	    if (typeof segment.end !== 'undefined') {
	      return {
	        result: segment.end - segment.duration,
	        precise: true
	      };
	    }
	  }
	  while (i--) {
	    segment = playlist.segments[i];
	    if (typeof segment.end !== 'undefined') {
	      return { result: result + segment.end, precise: true };
	    }

	    result += segment.duration;

	    if (typeof segment.start !== 'undefined') {
	      return { result: result + segment.start, precise: true };
	    }
	  }
	  return { result: result, precise: false };
	};

	/**
	 * walk forward until we find a duration we can use
	 * or return a failure
	 *
	 * @param {Playlist} playlist the playlist to walk through
	 * @param {Number} endSequence the mediaSequence to stop walking on
	 */
	var forwardDuration = function forwardDuration(playlist, endSequence) {
	  var result = 0;
	  var segment = void 0;
	  var i = endSequence - playlist.mediaSequence;
	  // Walk forward until we find the earliest segment with timeline
	  // information

	  for (; i < playlist.segments.length; i++) {
	    segment = playlist.segments[i];
	    if (typeof segment.start !== 'undefined') {
	      return {
	        result: segment.start - result,
	        precise: true
	      };
	    }

	    result += segment.duration;

	    if (typeof segment.end !== 'undefined') {
	      return {
	        result: segment.end - result,
	        precise: true
	      };
	    }
	  }
	  // indicate we didn't find a useful duration estimate
	  return { result: -1, precise: false };
	};

	/**
	  * Calculate the media duration from the segments associated with a
	  * playlist. The duration of a subinterval of the available segments
	  * may be calculated by specifying an end index.
	  *
	  * @param {Object} playlist a media playlist object
	  * @param {Number=} endSequence an exclusive upper boundary
	  * for the playlist.  Defaults to playlist length.
	  * @param {Number} expired the amount of time that has dropped
	  * off the front of the playlist in a live scenario
	  * @return {Number} the duration between the first available segment
	  * and end index.
	  */
	var intervalDuration = function intervalDuration(playlist, endSequence, expired) {
	  var backward = void 0;
	  var forward = void 0;

	  if (typeof endSequence === 'undefined') {
	    endSequence = playlist.mediaSequence + playlist.segments.length;
	  }

	  if (endSequence < playlist.mediaSequence) {
	    return 0;
	  }

	  // do a backward walk to estimate the duration
	  backward = backwardDuration(playlist, endSequence);
	  if (backward.precise) {
	    // if we were able to base our duration estimate on timing
	    // information provided directly from the Media Source, return
	    // it
	    return backward.result;
	  }

	  // walk forward to see if a precise duration estimate can be made
	  // that way
	  forward = forwardDuration(playlist, endSequence);
	  if (forward.precise) {
	    // we found a segment that has been buffered and so it's
	    // position is known precisely
	    return forward.result;
	  }

	  // return the less-precise, playlist-based duration estimate
	  return backward.result + expired;
	};

	/**
	  * Calculates the duration of a playlist. If a start and end index
	  * are specified, the duration will be for the subset of the media
	  * timeline between those two indices. The total duration for live
	  * playlists is always Infinity.
	  *
	  * @param {Object} playlist a media playlist object
	  * @param {Number=} endSequence an exclusive upper
	  * boundary for the playlist. Defaults to the playlist media
	  * sequence number plus its length.
	  * @param {Number=} expired the amount of time that has
	  * dropped off the front of the playlist in a live scenario
	  * @return {Number} the duration between the start index and end
	  * index.
	  */
	var duration = function duration(playlist, endSequence, expired) {
	  if (!playlist) {
	    return 0;
	  }

	  if (typeof expired !== 'number') {
	    expired = 0;
	  }

	  // if a slice of the total duration is not requested, use
	  // playlist-level duration indicators when they're present
	  if (typeof endSequence === 'undefined') {
	    // if present, use the duration specified in the playlist
	    if (playlist.totalDuration) {
	      return playlist.totalDuration;
	    }

	    // duration should be Infinity for live playlists
	    if (!playlist.endList) {
	      return window_1.Infinity;
	    }
	  }

	  // calculate the total duration based on the segment durations
	  return intervalDuration(playlist, endSequence, expired);
	};

	/**
	  * Calculate the time between two indexes in the current playlist
	  * neight the start- nor the end-index need to be within the current
	  * playlist in which case, the targetDuration of the playlist is used
	  * to approximate the durations of the segments
	  *
	  * @param {Object} playlist a media playlist object
	  * @param {Number} startIndex
	  * @param {Number} endIndex
	  * @return {Number} the number of seconds between startIndex and endIndex
	  */
	var sumDurations = function sumDurations(playlist, startIndex, endIndex) {
	  var durations = 0;

	  if (startIndex > endIndex) {
	    var _ref = [endIndex, startIndex];
	    startIndex = _ref[0];
	    endIndex = _ref[1];
	  }

	  if (startIndex < 0) {
	    for (var i = startIndex; i < Math.min(0, endIndex); i++) {
	      durations += playlist.targetDuration;
	    }
	    startIndex = 0;
	  }

	  for (var _i = startIndex; _i < endIndex; _i++) {
	    durations += playlist.segments[_i].duration;
	  }

	  return durations;
	};

	/**
	 * Determines the media index of the segment corresponding to the safe edge of the live
	 * window which is the duration of the last segment plus 2 target durations from the end
	 * of the playlist.
	 *
	 * @param {Object} playlist
	 *        a media playlist object
	 * @return {Number}
	 *         The media index of the segment at the safe live point. 0 if there is no "safe"
	 *         point.
	 * @function safeLiveIndex
	 */
	var safeLiveIndex = function safeLiveIndex(playlist) {
	  if (!playlist.segments.length) {
	    return 0;
	  }

	  var i = playlist.segments.length - 1;
	  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;
	  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;

	  while (i--) {
	    distanceFromEnd += playlist.segments[i].duration;

	    if (distanceFromEnd >= safeDistance) {
	      break;
	    }
	  }

	  return Math.max(0, i);
	};

	/**
	 * Calculates the playlist end time
	 *
	 * @param {Object} playlist a media playlist object
	 * @param {Number=} expired the amount of time that has
	 *                  dropped off the front of the playlist in a live scenario
	 * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the
	 *                        playlist end calculation should consider the safe live end
	 *                        (truncate the playlist end by three segments). This is normally
	 *                        used for calculating the end of the playlist's seekable range.
	 * @returns {Number} the end time of playlist
	 * @function playlistEnd
	 */
	var playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {
	  if (!playlist || !playlist.segments) {
	    return null;
	  }
	  if (playlist.endList) {
	    return duration(playlist);
	  }

	  if (expired === null) {
	    return null;
	  }

	  expired = expired || 0;

	  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;

	  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);
	};

	/**
	  * Calculates the interval of time that is currently seekable in a
	  * playlist. The returned time ranges are relative to the earliest
	  * moment in the specified playlist that is still available. A full
	  * seekable implementation for live streams would need to offset
	  * these values by the duration of content that has expired from the
	  * stream.
	  *
	  * @param {Object} playlist a media playlist object
	  * dropped off the front of the playlist in a live scenario
	  * @param {Number=} expired the amount of time that has
	  * dropped off the front of the playlist in a live scenario
	  * @return {TimeRanges} the periods of time that are valid targets
	  * for seeking
	  */
	var seekable = function seekable(playlist, expired) {
	  var useSafeLiveEnd = true;
	  var seekableStart = expired || 0;
	  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);

	  if (seekableEnd === null) {
	    return createTimeRange();
	  }
	  return createTimeRange(seekableStart, seekableEnd);
	};

	var isWholeNumber = function isWholeNumber(num) {
	  return num - Math.floor(num) === 0;
	};

	var roundSignificantDigit = function roundSignificantDigit(increment, num) {
	  // If we have a whole number, just add 1 to it
	  if (isWholeNumber(num)) {
	    return num + increment * 0.1;
	  }

	  var numDecimalDigits = num.toString().split('.')[1].length;

	  for (var i = 1; i <= numDecimalDigits; i++) {
	    var scale = Math.pow(10, i);
	    var temp = num * scale;

	    if (isWholeNumber(temp) || i === numDecimalDigits) {
	      return (temp + increment) / scale;
	    }
	  }
	};

	var ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);
	var floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);

	/**
	 * Determine the index and estimated starting time of the segment that
	 * contains a specified playback position in a media playlist.
	 *
	 * @param {Object} playlist the media playlist to query
	 * @param {Number} currentTime The number of seconds since the earliest
	 * possible position to determine the containing segment for
	 * @param {Number} startIndex
	 * @param {Number} startTime
	 * @return {Object}
	 */
	var getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {
	  var i = void 0;
	  var segment = void 0;
	  var numSegments = playlist.segments.length;

	  var time = currentTime - startTime;

	  if (time < 0) {
	    // Walk backward from startIndex in the playlist, adding durations
	    // until we find a segment that contains `time` and return it
	    if (startIndex > 0) {
	      for (i = startIndex - 1; i >= 0; i--) {
	        segment = playlist.segments[i];
	        time += floorLeastSignificantDigit(segment.duration);
	        if (time > 0) {
	          return {
	            mediaIndex: i,
	            startTime: startTime - sumDurations(playlist, startIndex, i)
	          };
	        }
	      }
	    }
	    // We were unable to find a good segment within the playlist
	    // so select the first segment
	    return {
	      mediaIndex: 0,
	      startTime: currentTime
	    };
	  }

	  // When startIndex is negative, we first walk forward to first segment
	  // adding target durations. If we "run out of time" before getting to
	  // the first segment, return the first segment
	  if (startIndex < 0) {
	    for (i = startIndex; i < 0; i++) {
	      time -= playlist.targetDuration;
	      if (time < 0) {
	        return {
	          mediaIndex: 0,
	          startTime: currentTime
	        };
	      }
	    }
	    startIndex = 0;
	  }

	  // Walk forward from startIndex in the playlist, subtracting durations
	  // until we find a segment that contains `time` and return it
	  for (i = startIndex; i < numSegments; i++) {
	    segment = playlist.segments[i];
	    time -= ceilLeastSignificantDigit(segment.duration);
	    if (time < 0) {
	      return {
	        mediaIndex: i,
	        startTime: startTime + sumDurations(playlist, startIndex, i)
	      };
	    }
	  }

	  // We are out of possible candidates so load the last one...
	  return {
	    mediaIndex: numSegments - 1,
	    startTime: currentTime
	  };
	};

	/**
	 * Check whether the playlist is blacklisted or not.
	 *
	 * @param {Object} playlist the media playlist object
	 * @return {boolean} whether the playlist is blacklisted or not
	 * @function isBlacklisted
	 */
	var isBlacklisted = function isBlacklisted(playlist) {
	  return playlist.excludeUntil && playlist.excludeUntil > Date.now();
	};

	/**
	 * Check whether the playlist is compatible with current playback configuration or has
	 * been blacklisted permanently for being incompatible.
	 *
	 * @param {Object} playlist the media playlist object
	 * @return {boolean} whether the playlist is incompatible or not
	 * @function isIncompatible
	 */
	var isIncompatible = function isIncompatible(playlist) {
	  return playlist.excludeUntil && playlist.excludeUntil === Infinity;
	};

	/**
	 * Check whether the playlist is enabled or not.
	 *
	 * @param {Object} playlist the media playlist object
	 * @return {boolean} whether the playlist is enabled or not
	 * @function isEnabled
	 */
	var isEnabled = function isEnabled(playlist) {
	  var blacklisted = isBlacklisted(playlist);

	  return !playlist.disabled && !blacklisted;
	};

	/**
	 * Check whether the playlist has been manually disabled through the representations api.
	 *
	 * @param {Object} playlist the media playlist object
	 * @return {boolean} whether the playlist is disabled manually or not
	 * @function isDisabled
	 */
	var isDisabled = function isDisabled(playlist) {
	  return playlist.disabled;
	};

	/**
	 * Returns whether the current playlist is an AES encrypted HLS stream
	 *
	 * @return {Boolean} true if it's an AES encrypted HLS stream
	 */
	var isAes = function isAes(media) {
	  for (var i = 0; i < media.segments.length; i++) {
	    if (media.segments[i].key) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Returns whether the current playlist contains fMP4
	 *
	 * @return {Boolean} true if the playlist contains fMP4
	 */
	var isFmp4 = function isFmp4(media) {
	  for (var i = 0; i < media.segments.length; i++) {
	    if (media.segments[i].map) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Checks if the playlist has a value for the specified attribute
	 *
	 * @param {String} attr
	 *        Attribute to check for
	 * @param {Object} playlist
	 *        The media playlist object
	 * @return {Boolean}
	 *         Whether the playlist contains a value for the attribute or not
	 * @function hasAttribute
	 */
	var hasAttribute = function hasAttribute(attr, playlist) {
	  return playlist.attributes && playlist.attributes[attr];
	};

	/**
	 * Estimates the time required to complete a segment download from the specified playlist
	 *
	 * @param {Number} segmentDuration
	 *        Duration of requested segment
	 * @param {Number} bandwidth
	 *        Current measured bandwidth of the player
	 * @param {Object} playlist
	 *        The media playlist object
	 * @param {Number=} bytesReceived
	 *        Number of bytes already received for the request. Defaults to 0
	 * @return {Number|NaN}
	 *         The estimated time to request the segment. NaN if bandwidth information for
	 *         the given playlist is unavailable
	 * @function estimateSegmentRequestTime
	 */
	var estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {
	  var bytesReceived = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

	  if (!hasAttribute('BANDWIDTH', playlist)) {
	    return NaN;
	  }

	  var size = segmentDuration * playlist.attributes.BANDWIDTH;

	  return (size - bytesReceived * 8) / bandwidth;
	};

	/*
	 * Returns whether the current playlist is the lowest rendition
	 *
	 * @return {Boolean} true if on lowest rendition
	 */
	var isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {
	  if (master.playlists.length === 1) {
	    return true;
	  }

	  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;

	  return master.playlists.filter(function (playlist) {
	    if (!isEnabled(playlist)) {
	      return false;
	    }

	    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;
	  }).length === 0;
	};

	// exports
	var Playlist = {
	  duration: duration,
	  seekable: seekable,
	  safeLiveIndex: safeLiveIndex,
	  getMediaInfoForTime: getMediaInfoForTime,
	  isEnabled: isEnabled,
	  isDisabled: isDisabled,
	  isBlacklisted: isBlacklisted,
	  isIncompatible: isIncompatible,
	  playlistEnd: playlistEnd,
	  isAes: isAes,
	  isFmp4: isFmp4,
	  hasAttribute: hasAttribute,
	  estimateSegmentRequestTime: estimateSegmentRequestTime,
	  isLowestEnabledRendition: isLowestEnabledRendition
	};

	/**
	 * @file xhr.js
	 */

	var videojsXHR = videojs.xhr,
	    mergeOptions$1 = videojs.mergeOptions;


	var xhrFactory = function xhrFactory() {
	  var xhr = function XhrFunction(options, callback) {
	    // Add a default timeout for all hls requests
	    options = mergeOptions$1({
	      timeout: 45e3
	    }, options);

	    // Allow an optional user-specified function to modify the option
	    // object before we construct the xhr request
	    var beforeRequest = XhrFunction.beforeRequest || videojs.Hls.xhr.beforeRequest;

	    if (beforeRequest && typeof beforeRequest === 'function') {
	      var newOptions = beforeRequest(options);

	      if (newOptions) {
	        options = newOptions;
	      }
	    }

	    var request = videojsXHR(options, function (error, response) {
	      var reqResponse = request.response;

	      if (!error && reqResponse) {
	        request.responseTime = Date.now();
	        request.roundTripTime = request.responseTime - request.requestTime;
	        request.bytesReceived = reqResponse.byteLength || reqResponse.length;
	        if (!request.bandwidth) {
	          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);
	        }
	      }

	      if (response.headers) {
	        request.responseHeaders = response.headers;
	      }

	      // videojs.xhr now uses a specific code on the error
	      // object to signal that a request has timed out instead
	      // of setting a boolean on the request object
	      if (error && error.code === 'ETIMEDOUT') {
	        request.timedout = true;
	      }

	      // videojs.xhr no longer considers status codes outside of 200 and 0
	      // (for file uris) to be errors, but the old XHR did, so emulate that
	      // behavior. Status 206 may be used in response to byterange requests.
	      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {
	        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));
	      }

	      callback(error, request);
	    });
	    var originalAbort = request.abort;

	    request.abort = function () {
	      request.aborted = true;
	      return originalAbort.apply(request, arguments);
	    };
	    request.uri = options.uri;
	    request.requestTime = Date.now();
	    return request;
	  };

	  return xhr;
	};

	/*
	 * pkcs7.pad
	 * https://github.com/brightcove/pkcs7
	 *
	 * Copyright (c) 2014 Brightcove
	 * Licensed under the apache2 license.
	 */

	/**
	 * Returns the subarray of a Uint8Array without PKCS#7 padding.
	 * @param padded {Uint8Array} unencrypted bytes that have been padded
	 * @return {Uint8Array} the unpadded bytes
	 * @see http://tools.ietf.org/html/rfc5652
	 */
	function unpad(padded) {
	  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
	}

	var classCallCheck$2 = function classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass$1 = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	var inherits$2 = function inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	var possibleConstructorReturn$2 = function possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	/**
	 * @file aes.js
	 *
	 * This file contains an adaptation of the AES decryption algorithm
	 * from the Standford Javascript Cryptography Library. That work is
	 * covered by the following copyright and permissions notice:
	 *
	 * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * 1. Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
	 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
	 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
	 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
	 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *
	 * The views and conclusions contained in the software and documentation
	 * are those of the authors and should not be interpreted as representing
	 * official policies, either expressed or implied, of the authors.
	 */

	/**
	 * Expand the S-box tables.
	 *
	 * @private
	 */
	var precompute = function precompute() {
	  var tables = [[[], [], [], [], []], [[], [], [], [], []]];
	  var encTable = tables[0];
	  var decTable = tables[1];
	  var sbox = encTable[4];
	  var sboxInv = decTable[4];
	  var i = void 0;
	  var x = void 0;
	  var xInv = void 0;
	  var d = [];
	  var th = [];
	  var x2 = void 0;
	  var x4 = void 0;
	  var x8 = void 0;
	  var s = void 0;
	  var tEnc = void 0;
	  var tDec = void 0;

	  // Compute double and third tables
	  for (i = 0; i < 256; i++) {
	    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
	  }

	  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {
	    // Compute sbox
	    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
	    s = s >> 8 ^ s & 255 ^ 99;
	    sbox[x] = s;
	    sboxInv[s] = x;

	    // Compute MixColumns
	    x8 = d[x4 = d[x2 = d[x]]];
	    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
	    tEnc = d[s] * 0x101 ^ s * 0x1010100;

	    for (i = 0; i < 4; i++) {
	      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
	      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
	    }
	  }

	  // Compactify. Considerable speedup on Firefox.
	  for (i = 0; i < 5; i++) {
	    encTable[i] = encTable[i].slice(0);
	    decTable[i] = decTable[i].slice(0);
	  }
	  return tables;
	};
	var aesTables = null;

	/**
	 * Schedule out an AES key for both encryption and decryption. This
	 * is a low-level class. Use a cipher mode to do bulk encryption.
	 *
	 * @class AES
	 * @param key {Array} The key as an array of 4, 6 or 8 words.
	 */

	var AES = function () {
	  function AES(key) {
	    classCallCheck$2(this, AES);

	    /**
	     * The expanded S-box and inverse S-box tables. These will be computed
	     * on the client so that we don't have to send them down the wire.
	     *
	     * There are two tables, _tables[0] is for encryption and
	     * _tables[1] is for decryption.
	     *
	     * The first 4 sub-tables are the expanded S-box with MixColumns. The
	     * last (_tables[01][4]) is the S-box itself.
	     *
	     * @private
	     */
	    // if we have yet to precompute the S-box tables
	    // do so now
	    if (!aesTables) {
	      aesTables = precompute();
	    }
	    // then make a copy of that object for use
	    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];
	    var i = void 0;
	    var j = void 0;
	    var tmp = void 0;
	    var encKey = void 0;
	    var decKey = void 0;
	    var sbox = this._tables[0][4];
	    var decTable = this._tables[1];
	    var keyLen = key.length;
	    var rcon = 1;

	    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {
	      throw new Error('Invalid aes key size');
	    }

	    encKey = key.slice(0);
	    decKey = [];
	    this._key = [encKey, decKey];

	    // schedule encryption keys
	    for (i = keyLen; i < 4 * keyLen + 28; i++) {
	      tmp = encKey[i - 1];

	      // apply sbox
	      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
	        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];

	        // shift rows and add rcon
	        if (i % keyLen === 0) {
	          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
	          rcon = rcon << 1 ^ (rcon >> 7) * 283;
	        }
	      }

	      encKey[i] = encKey[i - keyLen] ^ tmp;
	    }

	    // schedule decryption keys
	    for (j = 0; i; j++, i--) {
	      tmp = encKey[j & 3 ? i : i - 4];
	      if (i <= 4 || j < 4) {
	        decKey[j] = tmp;
	      } else {
	        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
	      }
	    }
	  }

	  /**
	   * Decrypt 16 bytes, specified as four 32-bit words.
	   *
	   * @param {Number} encrypted0 the first word to decrypt
	   * @param {Number} encrypted1 the second word to decrypt
	   * @param {Number} encrypted2 the third word to decrypt
	   * @param {Number} encrypted3 the fourth word to decrypt
	   * @param {Int32Array} out the array to write the decrypted words
	   * into
	   * @param {Number} offset the offset into the output array to start
	   * writing results
	   * @return {Array} The plaintext.
	   */

	  AES.prototype.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {
	    var key = this._key[1];
	    // state variables a,b,c,d are loaded with pre-whitened data
	    var a = encrypted0 ^ key[0];
	    var b = encrypted3 ^ key[1];
	    var c = encrypted2 ^ key[2];
	    var d = encrypted1 ^ key[3];
	    var a2 = void 0;
	    var b2 = void 0;
	    var c2 = void 0;

	    // key.length === 2 ?
	    var nInnerRounds = key.length / 4 - 2;
	    var i = void 0;
	    var kIndex = 4;
	    var table = this._tables[1];

	    // load up the tables
	    var table0 = table[0];
	    var table1 = table[1];
	    var table2 = table[2];
	    var table3 = table[3];
	    var sbox = table[4];

	    // Inner rounds. Cribbed from OpenSSL.
	    for (i = 0; i < nInnerRounds; i++) {
	      a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];
	      b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];
	      c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];
	      d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];
	      kIndex += 4;
	      a = a2;b = b2;c = c2;
	    }

	    // Last round.
	    for (i = 0; i < 4; i++) {
	      out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];
	      a2 = a;a = b;b = c;c = d;d = a2;
	    }
	  };

	  return AES;
	}();

	/**
	 * @file stream.js
	 */
	/**
	 * A lightweight readable stream implemention that handles event dispatching.
	 *
	 * @class Stream
	 */
	var Stream$1 = function () {
	  function Stream() {
	    classCallCheck$2(this, Stream);

	    this.listeners = {};
	  }

	  /**
	   * Add a listener for a specified event type.
	   *
	   * @param {String} type the event name
	   * @param {Function} listener the callback to be invoked when an event of
	   * the specified type occurs
	   */

	  Stream.prototype.on = function on(type, listener) {
	    if (!this.listeners[type]) {
	      this.listeners[type] = [];
	    }
	    this.listeners[type].push(listener);
	  };

	  /**
	   * Remove a listener for a specified event type.
	   *
	   * @param {String} type the event name
	   * @param {Function} listener  a function previously registered for this
	   * type of event through `on`
	   * @return {Boolean} if we could turn it off or not
	   */

	  Stream.prototype.off = function off(type, listener) {
	    if (!this.listeners[type]) {
	      return false;
	    }

	    var index = this.listeners[type].indexOf(listener);

	    this.listeners[type].splice(index, 1);
	    return index > -1;
	  };

	  /**
	   * Trigger an event of the specified type on this stream. Any additional
	   * arguments to this function are passed as parameters to event listeners.
	   *
	   * @param {String} type the event name
	   */

	  Stream.prototype.trigger = function trigger(type) {
	    var callbacks = this.listeners[type];

	    if (!callbacks) {
	      return;
	    }

	    // Slicing the arguments on every invocation of this method
	    // can add a significant amount of overhead. Avoid the
	    // intermediate object creation for the common case of a
	    // single callback argument
	    if (arguments.length === 2) {
	      var length = callbacks.length;

	      for (var i = 0; i < length; ++i) {
	        callbacks[i].call(this, arguments[1]);
	      }
	    } else {
	      var args = Array.prototype.slice.call(arguments, 1);
	      var _length = callbacks.length;

	      for (var _i = 0; _i < _length; ++_i) {
	        callbacks[_i].apply(this, args);
	      }
	    }
	  };

	  /**
	   * Destroys the stream and cleans up.
	   */

	  Stream.prototype.dispose = function dispose() {
	    this.listeners = {};
	  };
	  /**
	   * Forwards all `data` events on this stream to the destination stream. The
	   * destination stream should provide a method `push` to receive the data
	   * events as they arrive.
	   *
	   * @param {Stream} destination the stream that will receive all `data` events
	   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
	   */

	  Stream.prototype.pipe = function pipe(destination) {
	    this.on('data', function (data) {
	      destination.push(data);
	    });
	  };

	  return Stream;
	}();

	/**
	 * @file async-stream.js
	 */
	/**
	 * A wrapper around the Stream class to use setTiemout
	 * and run stream "jobs" Asynchronously
	 *
	 * @class AsyncStream
	 * @extends Stream
	 */

	var AsyncStream = function (_Stream) {
	  inherits$2(AsyncStream, _Stream);

	  function AsyncStream() {
	    classCallCheck$2(this, AsyncStream);

	    var _this = possibleConstructorReturn$2(this, _Stream.call(this, Stream$1));

	    _this.jobs = [];
	    _this.delay = 1;
	    _this.timeout_ = null;
	    return _this;
	  }

	  /**
	   * process an async job
	   *
	   * @private
	   */

	  AsyncStream.prototype.processJob_ = function processJob_() {
	    this.jobs.shift()();
	    if (this.jobs.length) {
	      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
	    } else {
	      this.timeout_ = null;
	    }
	  };

	  /**
	   * push a job into the stream
	   *
	   * @param {Function} job the job to push into the stream
	   */

	  AsyncStream.prototype.push = function push(job) {
	    this.jobs.push(job);
	    if (!this.timeout_) {
	      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
	    }
	  };

	  return AsyncStream;
	}(Stream$1);

	/**
	 * @file decrypter.js
	 *
	 * An asynchronous implementation of AES-128 CBC decryption with
	 * PKCS#7 padding.
	 */

	/**
	 * Convert network-order (big-endian) bytes into their little-endian
	 * representation.
	 */
	var ntoh = function ntoh(word) {
	  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
	};

	/**
	 * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.
	 *
	 * @param {Uint8Array} encrypted the encrypted bytes
	 * @param {Uint32Array} key the bytes of the decryption key
	 * @param {Uint32Array} initVector the initialization vector (IV) to
	 * use for the first round of CBC.
	 * @return {Uint8Array} the decrypted bytes
	 *
	 * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
	 * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
	 * @see https://tools.ietf.org/html/rfc2315
	 */
	var decrypt = function decrypt(encrypted, key, initVector) {
	  // word-level access to the encrypted bytes
	  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);

	  var decipher = new AES(Array.prototype.slice.call(key));

	  // byte and word-level access for the decrypted output
	  var decrypted = new Uint8Array(encrypted.byteLength);
	  var decrypted32 = new Int32Array(decrypted.buffer);

	  // temporary variables for working with the IV, encrypted, and
	  // decrypted data
	  var init0 = void 0;
	  var init1 = void 0;
	  var init2 = void 0;
	  var init3 = void 0;
	  var encrypted0 = void 0;
	  var encrypted1 = void 0;
	  var encrypted2 = void 0;
	  var encrypted3 = void 0;

	  // iteration variable
	  var wordIx = void 0;

	  // pull out the words of the IV to ensure we don't modify the
	  // passed-in reference and easier access
	  init0 = initVector[0];
	  init1 = initVector[1];
	  init2 = initVector[2];
	  init3 = initVector[3];

	  // decrypt four word sequences, applying cipher-block chaining (CBC)
	  // to each decrypted block
	  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {
	    // convert big-endian (network order) words into little-endian
	    // (javascript order)
	    encrypted0 = ntoh(encrypted32[wordIx]);
	    encrypted1 = ntoh(encrypted32[wordIx + 1]);
	    encrypted2 = ntoh(encrypted32[wordIx + 2]);
	    encrypted3 = ntoh(encrypted32[wordIx + 3]);

	    // decrypt the block
	    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);

	    // XOR with the IV, and restore network byte-order to obtain the
	    // plaintext
	    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);
	    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);
	    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);
	    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);

	    // setup the IV for the next round
	    init0 = encrypted0;
	    init1 = encrypted1;
	    init2 = encrypted2;
	    init3 = encrypted3;
	  }

	  return decrypted;
	};

	/**
	 * The `Decrypter` class that manages decryption of AES
	 * data through `AsyncStream` objects and the `decrypt`
	 * function
	 *
	 * @param {Uint8Array} encrypted the encrypted bytes
	 * @param {Uint32Array} key the bytes of the decryption key
	 * @param {Uint32Array} initVector the initialization vector (IV) to
	 * @param {Function} done the function to run when done
	 * @class Decrypter
	 */

	var Decrypter = function () {
	  function Decrypter(encrypted, key, initVector, done) {
	    classCallCheck$2(this, Decrypter);

	    var step = Decrypter.STEP;
	    var encrypted32 = new Int32Array(encrypted.buffer);
	    var decrypted = new Uint8Array(encrypted.byteLength);
	    var i = 0;

	    this.asyncStream_ = new AsyncStream();

	    // split up the encryption job and do the individual chunks asynchronously
	    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
	    for (i = step; i < encrypted32.length; i += step) {
	      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);
	      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
	    }
	    // invoke the done() callback when everything is finished
	    this.asyncStream_.push(function () {
	      // remove pkcs#7 padding from the decrypted bytes
	      done(null, unpad(decrypted));
	    });
	  }

	  /**
	   * a getter for step the maximum number of bytes to process at one time
	   *
	   * @return {Number} the value of step 32000
	   */

	  /**
	   * @private
	   */
	  Decrypter.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {
	    return function () {
	      var bytes = decrypt(encrypted, key, initVector);

	      decrypted.set(bytes, encrypted.byteOffset);
	    };
	  };

	  createClass$1(Decrypter, null, [{
	    key: 'STEP',
	    get: function get$$1() {
	      // 4 * 8000;
	      return 32000;
	    }
	  }]);
	  return Decrypter;
	}();

	/**
	 * @file bin-utils.js
	 */

	/**
	 * convert a TimeRange to text
	 *
	 * @param {TimeRange} range the timerange to use for conversion
	 * @param {Number} i the iterator on the range to convert
	 */
	var textRange = function textRange(range, i) {
	  return range.start(i) + '-' + range.end(i);
	};

	/**
	 * format a number as hex string
	 *
	 * @param {Number} e The number
	 * @param {Number} i the iterator
	 */
	var formatHexString = function formatHexString(e, i) {
	  var value = e.toString(16);

	  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');
	};
	var formatAsciiString = function formatAsciiString(e) {
	  if (e >= 0x20 && e < 0x7e) {
	    return String.fromCharCode(e);
	  }
	  return '.';
	};

	/**
	 * Creates an object for sending to a web worker modifying properties that are TypedArrays
	 * into a new object with seperated properties for the buffer, byteOffset, and byteLength.
	 *
	 * @param {Object} message
	 *        Object of properties and values to send to the web worker
	 * @return {Object}
	 *         Modified message with TypedArray values expanded
	 * @function createTransferableMessage
	 */
	var createTransferableMessage = function createTransferableMessage(message) {
	  var transferable = {};

	  Object.keys(message).forEach(function (key) {
	    var value = message[key];

	    if (ArrayBuffer.isView(value)) {
	      transferable[key] = {
	        bytes: value.buffer,
	        byteOffset: value.byteOffset,
	        byteLength: value.byteLength
	      };
	    } else {
	      transferable[key] = value;
	    }
	  });

	  return transferable;
	};

	/**
	 * Returns a unique string identifier for a media initialization
	 * segment.
	 */
	var initSegmentId = function initSegmentId(initSegment) {
	  var byterange = initSegment.byterange || {
	    length: Infinity,
	    offset: 0
	  };

	  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');
	};

	/**
	 * utils to help dump binary data to the console
	 */
	var hexDump = function hexDump(data) {
	  var bytes = Array.prototype.slice.call(data);
	  var step = 16;
	  var result = '';
	  var hex = void 0;
	  var ascii = void 0;

	  for (var j = 0; j < bytes.length / step; j++) {
	    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');
	    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');
	    result += hex + ' ' + ascii + '\n';
	  }

	  return result;
	};

	var tagDump = function tagDump(_ref) {
	  var bytes = _ref.bytes;
	  return hexDump(bytes);
	};

	var textRanges = function textRanges(ranges) {
	  var result = '';
	  var i = void 0;

	  for (i = 0; i < ranges.length; i++) {
	    result += textRange(ranges, i) + ' ';
	  }
	  return result;
	};

	var utils = /*#__PURE__*/Object.freeze({
		createTransferableMessage: createTransferableMessage,
		initSegmentId: initSegmentId,
		hexDump: hexDump,
		tagDump: tagDump,
		textRanges: textRanges
	});

	/**
	 * @file time.js
	 */

	/**
	 * Checks whether a given time is within a segment based on its start time
	 * and duration. For playerTime, the requested time is in seconds, for
	 * streamTime, the time is a Date object.
	 *
	 * @param {Date|Number} requestedTime Time to check is within a segment
	 * @param {"stream" | "player"} type Whether passing in a playerTime or streamTime
	 * @param {Date|Number} segmentStart The start time of the segment
	 * @param {Number} duration Segment duration in seconds
	 */
	var timeWithinSegment = function timeWithinSegment(requestedTime, type, segmentStart, duration) {
	  var endTime = void 0;

	  if (type === 'stream') {
	    endTime = new Date(duration * 1000 + segmentStart.getTime());

	    var requestedTimeString = requestedTime.toISOString();
	    var segmentTimeString = segmentStart.toISOString();
	    var endTimeString = endTime.toISOString();

	    return segmentTimeString <= requestedTimeString && requestedTimeString <= endTimeString;
	  } else if (type === 'player') {
	    endTime = duration + segmentStart;

	    return segmentStart <= requestedTime && requestedTime <= endTime;
	  }
	};

	/**
	 * Finds a segment that contains the time requested. This might be an estimate or
	 * an accurate match.
	 *
	 * @param {Date|Number} time The streamTime or playerTime to find a matching segment for
	 * @param {"stream" | "player"} type Either the playerTime or streamTime
	 * @param {Object} playlist A playlist object
	 * @return {Object} match
	 * @return {Object} match.segment The matched segment from the playlist
	 * @return {Date|Number} match.estimatedStart The estimated start time of the segment
	 * @return {"accurate" | "estimate"} match.type Whether the match is estimated or accurate
	 */
	var findSegmentForTime = function findSegmentForTime(time, type, playlist) {
	  if (!playlist.segments || playlist.segments.length === 0) {
	    return null;
	  }

	  if (type !== 'player' && type !== 'stream') {
	    return null;
	  }

	  var manifestTime = 0;

	  for (var i = 0; i < playlist.segments.length; i++) {
	    var segment = playlist.segments[i];
	    var estimatedEnd = manifestTime + segment.duration;
	    var segmentStart = void 0;
	    var estimatedStart = void 0;

	    if (type === 'player') {
	      segmentStart = segment.start;
	      estimatedStart = manifestTime;
	    } else {
	      // we can rely on the program date time being accurate
	      segmentStart = segment.dateTimeObject;
	      estimatedStart = segment.dateTimeObject;
	    }

	    var timeWithinSegmentEnd = typeof segment.start !== 'undefined' && typeof segment.end !== 'undefined' && timeWithinSegment(time, type, segmentStart, segment.end - segment.start);
	    var timeWithinSegmentDuration = timeWithinSegment(time, type, estimatedStart, segment.duration);

	    if (timeWithinSegmentEnd) {
	      return {
	        segment: segment,
	        estimatedStart: estimatedStart,
	        type: 'accurate'
	      };
	    } else if (timeWithinSegmentDuration) {
	      return {
	        segment: segment,
	        estimatedStart: estimatedStart,
	        type: 'estimate'
	      };
	    }

	    manifestTime = estimatedEnd;
	  }

	  return null;
	};

	/**
	 * Finds a segment that contains the given player time(in seconds).
	 *
	 * @param {Number} time The player time to find a match for
	 * @param {Object} playlist A playlist object to search within
	 */
	var findSegmentForPlayerTime = function findSegmentForPlayerTime(time, playlist) {
	  // Assumptions:
	  // - there will always be a segment.duration
	  // - we can start from zero
	  // - segments are in time order
	  // - segment.start and segment.end only come
	  //    from syncController

	  return findSegmentForTime(time, 'player', playlist);
	};

	/**
	 * Finds a segment that contains the stream time give as an ISO-8601 string.
	 *
	 * @param {String} streamTime The ISO-8601 streamTime to find a match for
	 * @param {Object} playlist A playlist object to search within
	 */
	var findSegmentForStreamTime = function findSegmentForStreamTime(streamTime, playlist) {
	  var dateTimeObject = void 0;

	  try {
	    dateTimeObject = new Date(streamTime);
	  } catch (e) {
	    // TODO something here?
	    return null;
	  }

	  // Assumptions:
	  //  - verifyProgramDateTimeTags has already been run
	  //  - live streams have been started
	  return findSegmentForTime(dateTimeObject, 'stream', playlist);
	};

	/**
	 * Gives the offset of the comparisonTimestamp from the streamTime timestamp in seconds.
	 * If the offset returned is positive, the streamTime occurs before the comparisonTimestamp.
	 * If the offset is negative, the streamTime occurs before the comparisonTimestamp.
	 *
	 * @param {String} comparisonTimeStamp An ISO-8601 timestamp to compare against
	 * @param {String} streamTime The streamTime as an ISO-8601 string
	 * @return {Number} offset
	 */
	var getOffsetFromTimestamp = function getOffsetFromTimestamp(comparisonTimeStamp, streamTime) {
	  var segmentDateTime = void 0;
	  var streamDateTime = void 0;

	  try {
	    segmentDateTime = new Date(comparisonTimeStamp);
	    streamDateTime = new Date(streamTime);
	  } catch (e) {
	    // TODO handle error
	  }

	  var segmentTimeEpoch = segmentDateTime.getTime();
	  var streamTimeEpoch = streamDateTime.getTime();

	  return (streamTimeEpoch - segmentTimeEpoch) / 1000;
	};

	/**
	 * Checks that all segments in this playlist have programDateTime tags.
	 *
	 * @param {Object} playlist A playlist object
	 */
	var verifyProgramDateTimeTags = function verifyProgramDateTimeTags(playlist) {
	  if (!playlist.segments || playlist.segments.length === 0) {
	    return false;
	  }

	  for (var i = 0; i < playlist.segments.length; i++) {
	    var segment = playlist.segments[i];

	    if (!segment.dateTimeObject) {
	      return false;
	    }
	  }

	  return true;
	};

	/**
	 * Returns the streamTime  of the media given a playlist and a playerTime.
	 * The playlist must have programDateTime tags for a programDateTime tag to be returned.
	 * If the segments containing the time requested have not been buffered yet, an estimate
	 * may be returned to the callback.
	 *
	 * @param {Object} args
	 * @param {Object} args.playlist A playlist object to search within
	 * @param {Number} time A playerTime in seconds
	 * @param {Function} callback(err, streamTime)
	 * @returns {String} err.message A detailed error message
	 * @returns {Object} streamTime
	 * @returns {Number} streamTime.mediaSeconds The streamTime in seconds
	 * @returns {String} streamTime.programDateTime The streamTime as an ISO-8601 String
	 */
	var getStreamTime = function getStreamTime(_ref) {
	  var playlist = _ref.playlist,
	      _ref$time = _ref.time,
	      time = _ref$time === undefined ? undefined : _ref$time,
	      callback = _ref.callback;


	  if (!callback) {
	    throw new Error('getStreamTime: callback must be provided');
	  }

	  if (!playlist || time === undefined) {
	    return callback({
	      message: 'getStreamTime: playlist and time must be provided'
	    });
	  }

	  var matchedSegment = findSegmentForPlayerTime(time, playlist);

	  if (!matchedSegment) {
	    return callback({
	      message: 'valid streamTime was not found'
	    });
	  }

	  if (matchedSegment.type === 'estimate') {
	    return callback({
	      message: 'Accurate streamTime could not be determined. Please seek to e.seekTime and try again',
	      seekTime: matchedSegment.estimatedStart
	    });
	  }

	  var streamTime = {
	    mediaSeconds: time
	  };

	  if (matchedSegment.segment.dateTimeObject) {
	    // TODO this is currently the time of the beginning of the
	    // segment. This still needs to be modified to be offset
	    // by the time requested.
	    streamTime.programDateTime = matchedSegment.segment.dateTimeObject.toISOString();
	  }

	  return callback(null, streamTime);
	};

	/**
	 * Seeks in the player to a time that matches the given streamTime ISO-8601 string.
	 *
	 * @param {Object} args
	 * @param {String} args.streamTime A streamTime to seek to as an ISO-8601 String
	 * @param {Object} args.playlist A playlist to look within
	 * @param {Number} args.retryCount The number of times to try for an accurate seek. Default is 2.
	 * @param {Function} args.seekTo A method to perform a seek
	 * @param {Boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.
	 * @param {Object} args.tech The tech to seek on
	 * @param {Function} args.callback(err, newTime) A callback to return the new time to
	 * @returns {String} err.message A detailed error message
	 * @returns {Number} newTime The exact time that was seeked to in seconds
	 */
	var seekToStreamTime = function seekToStreamTime(_ref2) {
	  var streamTime = _ref2.streamTime,
	      playlist = _ref2.playlist,
	      _ref2$retryCount = _ref2.retryCount,
	      retryCount = _ref2$retryCount === undefined ? 2 : _ref2$retryCount,
	      seekTo = _ref2.seekTo,
	      _ref2$pauseAfterSeek = _ref2.pauseAfterSeek,
	      pauseAfterSeek = _ref2$pauseAfterSeek === undefined ? true : _ref2$pauseAfterSeek,
	      tech = _ref2.tech,
	      callback = _ref2.callback;


	  if (!callback) {
	    throw new Error('seekToStreamTime: callback must be provided');
	  }

	  if (typeof streamTime === 'undefined' || !playlist || !seekTo) {
	    return callback({
	      message: 'seekToStreamTime: streamTime, seekTo and playlist must be provided'
	    });
	  }

	  if (!playlist.endList && !tech.hasStarted_) {
	    return callback({
	      message: 'player must be playing a live stream to start buffering'
	    });
	  }

	  if (!verifyProgramDateTimeTags(playlist)) {
	    return callback({
	      message: 'programDateTime tags must be provided in the manifest ' + playlist.resolvedUri
	    });
	  }

	  var matchedSegment = findSegmentForStreamTime(streamTime, playlist);

	  // no match
	  if (!matchedSegment) {
	    return callback({
	      message: streamTime + ' was not found in the stream'
	    });
	  }

	  if (matchedSegment.type === 'estimate') {
	    // we've run out of retries
	    if (retryCount === 0) {
	      return callback({
	        message: streamTime + ' is not buffered yet. Try again'
	      });
	    }

	    return seekToStreamTime({
	      streamTime: streamTime,
	      playlist: playlist,
	      retryCount: retryCount - 1,
	      seekTo: seekTo,
	      pauseAfterSeek: pauseAfterSeek,
	      tech: tech,
	      callback: callback
	    });
	  }

	  var segment = matchedSegment.segment;
	  var mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, streamTime);
	  var seekToTime = segment.start + mediaOffset;
	  var seekedCallback = function seekedCallback() {
	    return callback(null, tech.currentTime());
	  };

	  // listen for seeked event
	  tech.one('seeked', seekedCallback);
	  // pause before seeking as video.js will restore this state
	  if (pauseAfterSeek) {
	    tech.pause();
	  }
	  seekTo(seekToTime);
	};

	/**
	 * ranges
	 *
	 * Utilities for working with TimeRanges.
	 *
	 */

	// Fudge factor to account for TimeRanges rounding
	var TIME_FUDGE_FACTOR = 1 / 30;
	// Comparisons between time values such as current time and the end of the buffered range
	// can be misleading because of precision differences or when the current media has poorly
	// aligned audio and video, which can cause values to be slightly off from what you would
	// expect. This value is what we consider to be safe to use in such comparisons to account
	// for these scenarios.
	var SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;
	var filterRanges = function filterRanges(timeRanges, predicate) {
	  var results = [];
	  var i = void 0;

	  if (timeRanges && timeRanges.length) {
	    // Search for ranges that match the predicate
	    for (i = 0; i < timeRanges.length; i++) {
	      if (predicate(timeRanges.start(i), timeRanges.end(i))) {
	        results.push([timeRanges.start(i), timeRanges.end(i)]);
	      }
	    }
	  }

	  return videojs.createTimeRanges(results);
	};

	/**
	 * Attempts to find the buffered TimeRange that contains the specified
	 * time.
	 * @param {TimeRanges} buffered - the TimeRanges object to query
	 * @param {number} time  - the time to filter on.
	 * @returns {TimeRanges} a new TimeRanges object
	 */
	var findRange = function findRange(buffered, time) {
	  return filterRanges(buffered, function (start, end) {
	    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;
	  });
	};

	/**
	 * Returns the TimeRanges that begin later than the specified time.
	 * @param {TimeRanges} timeRanges - the TimeRanges object to query
	 * @param {number} time - the time to filter on.
	 * @returns {TimeRanges} a new TimeRanges object.
	 */
	var findNextRange = function findNextRange(timeRanges, time) {
	  return filterRanges(timeRanges, function (start) {
	    return start - TIME_FUDGE_FACTOR >= time;
	  });
	};

	/**
	 * Returns gaps within a list of TimeRanges
	 * @param {TimeRanges} buffered - the TimeRanges object
	 * @return {TimeRanges} a TimeRanges object of gaps
	 */
	var findGaps = function findGaps(buffered) {
	  if (buffered.length < 2) {
	    return videojs.createTimeRanges();
	  }

	  var ranges = [];

	  for (var i = 1; i < buffered.length; i++) {
	    var start = buffered.end(i - 1);
	    var end = buffered.start(i);

	    ranges.push([start, end]);
	  }

	  return videojs.createTimeRanges(ranges);
	};

	/**
	 * Gets a human readable string for a TimeRange
	 *
	 * @param {TimeRange} range
	 * @returns {String} a human readable string
	 */
	var printableRange = function printableRange(range) {
	  var strArr = [];

	  if (!range || !range.length) {
	    return '';
	  }

	  for (var i = 0; i < range.length; i++) {
	    strArr.push(range.start(i) + ' => ' + range.end(i));
	  }

	  return strArr.join(', ');
	};

	/**
	 * Calculates the amount of time left in seconds until the player hits the end of the
	 * buffer and causes a rebuffer
	 *
	 * @param {TimeRange} buffered
	 *        The state of the buffer
	 * @param {Numnber} currentTime
	 *        The current time of the player
	 * @param {Number} playbackRate
	 *        The current playback rate of the player. Defaults to 1.
	 * @return {Number}
	 *         Time until the player has to start rebuffering in seconds.
	 * @function timeUntilRebuffer
	 */
	var timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {
	  var playbackRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

	  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;

	  return (bufferedEnd - currentTime) / playbackRate;
	};

	/**
	 * Converts a TimeRanges object into an array representation
	 * @param {TimeRanges} timeRanges
	 * @returns {Array}
	 */
	var timeRangesToArray = function timeRangesToArray(timeRanges) {
	  var timeRangesList = [];

	  for (var i = 0; i < timeRanges.length; i++) {
	    timeRangesList.push({
	      start: timeRanges.start(i),
	      end: timeRanges.end(i)
	    });
	  }

	  return timeRangesList;
	};

	/**
	 * @file create-text-tracks-if-necessary.js
	 */

	/**
	 * Create text tracks on video.js if they exist on a segment.
	 *
	 * @param {Object} sourceBuffer the VSB or FSB
	 * @param {Object} mediaSource the HTML media source
	 * @param {Object} segment the segment that may contain the text track
	 * @private
	 */
	var createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {
	  var player = mediaSource.player_;

	  // create an in-band caption track if one is present in the segment
	  if (segment.captions && segment.captions.length) {
	    if (!sourceBuffer.inbandTextTracks_) {
	      sourceBuffer.inbandTextTracks_ = {};
	    }

	    for (var trackId in segment.captionStreams) {
	      if (!sourceBuffer.inbandTextTracks_[trackId]) {
	        player.tech_.trigger({ type: 'usage', name: 'hls-608' });
	        var track = player.textTracks().getTrackById(trackId);

	        if (track) {
	          // Resuse an existing track with a CC# id because this was
	          // very likely created by videojs-contrib-hls from information
	          // in the m3u8 for us to use
	          sourceBuffer.inbandTextTracks_[trackId] = track;
	        } else {
	          // Otherwise, create a track with the default `CC#` label and
	          // without a language
	          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({
	            kind: 'captions',
	            id: trackId,
	            label: trackId
	          }, false).track;
	        }
	      }
	    }
	  }

	  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {
	    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({
	      kind: 'metadata',
	      label: 'Timed Metadata'
	    }, false).track;
	    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;
	  }
	};

	/**
	 * @file remove-cues-from-track.js
	 */

	/**
	 * Remove cues from a track on video.js.
	 *
	 * @param {Double} start start of where we should remove the cue
	 * @param {Double} end end of where the we should remove the cue
	 * @param {Object} track the text track to remove the cues from
	 * @private
	 */
	var removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {
	  var i = void 0;
	  var cue = void 0;

	  if (!track) {
	    return;
	  }

	  if (!track.cues) {
	    return;
	  }

	  i = track.cues.length;

	  while (i--) {
	    cue = track.cues[i];

	    // Remove any overlapping cue
	    if (cue.startTime <= end && cue.endTime >= start) {
	      track.removeCue(cue);
	    }
	  }
	};

	/**
	 * @file add-text-track-data.js
	 */
	/**
	 * Define properties on a cue for backwards compatability,
	 * but warn the user that the way that they are using it
	 * is depricated and will be removed at a later date.
	 *
	 * @param {Cue} cue the cue to add the properties on
	 * @private
	 */
	var deprecateOldCue = function deprecateOldCue(cue) {
	  Object.defineProperties(cue.frame, {
	    id: {
	      get: function get() {
	        videojs.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');
	        return cue.value.key;
	      }
	    },
	    value: {
	      get: function get() {
	        videojs.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');
	        return cue.value.data;
	      }
	    },
	    privateData: {
	      get: function get() {
	        videojs.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');
	        return cue.value.data;
	      }
	    }
	  });
	};

	var durationOfVideo = function durationOfVideo(duration) {
	  var dur = void 0;

	  if (isNaN(duration) || Math.abs(duration) === Infinity) {
	    dur = Number.MAX_VALUE;
	  } else {
	    dur = duration;
	  }
	  return dur;
	};
	/**
	 * Add text track data to a source handler given the captions and
	 * metadata from the buffer.
	 *
	 * @param {Object} sourceHandler the virtual source buffer
	 * @param {Array} captionArray an array of caption data
	 * @param {Array} metadataArray an array of meta data
	 * @private
	 */
	var addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {
	  var Cue = window_1.WebKitDataCue || window_1.VTTCue;

	  if (captionArray) {
	    captionArray.forEach(function (caption) {
	      var track = caption.stream;

	      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));
	    }, sourceHandler);
	  }

	  if (metadataArray) {
	    var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);

	    metadataArray.forEach(function (metadata) {
	      var time = metadata.cueTime + this.timestampOffset;

	      metadata.frames.forEach(function (frame) {
	        var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');

	        cue.frame = frame;
	        cue.value = frame;
	        deprecateOldCue(cue);

	        this.metadataTrack_.addCue(cue);
	      }, this);
	    }, sourceHandler);

	    // Updating the metadeta cues so that
	    // the endTime of each cue is the startTime of the next cue
	    // the endTime of last cue is the duration of the video
	    if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {
	      var cues = sourceHandler.metadataTrack_.cues;
	      var cuesArray = [];

	      // Create a copy of the TextTrackCueList...
	      // ...disregarding cues with a falsey value
	      for (var i = 0; i < cues.length; i++) {
	        if (cues[i]) {
	          cuesArray.push(cues[i]);
	        }
	      }

	      // Group cues by their startTime value
	      var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {
	        var timeSlot = obj[cue.startTime] || [];

	        timeSlot.push(cue);
	        obj[cue.startTime] = timeSlot;

	        return obj;
	      }, {});

	      // Sort startTimes by ascending order
	      var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {
	        return Number(a) - Number(b);
	      });

	      // Map each cue group's endTime to the next group's startTime
	      sortedStartTimes.forEach(function (startTime, idx) {
	        var cueGroup = cuesGroupedByStartTime[startTime];
	        var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;

	        // Map each cue's endTime the next group's startTime
	        cueGroup.forEach(function (cue) {
	          cue.endTime = nextTime;
	        });
	      });
	    }
	  }
	};

	var win$1 = typeof window !== 'undefined' ? window : {},
	    TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),
	    SCRIPT_TYPE = 'application/javascript',
	    BlobBuilder = win$1.BlobBuilder || win$1.WebKitBlobBuilder || win$1.MozBlobBuilder || win$1.MSBlobBuilder,
	    URL = win$1.URL || win$1.webkitURL || URL && URL.msURL,
	    Worker = win$1.Worker;

	/**
	 * Returns a wrapper around Web Worker code that is constructible.
	 *
	 * @function shimWorker
	 *
	 * @param { String }    filename    The name of the file
	 * @param { Function }  fn          Function wrapping the code of the worker
	 */
	function shimWorker(filename, fn) {
	    return function ShimWorker(forceFallback) {
	        var o = this;

	        if (!fn) {
	            return new Worker(filename);
	        } else if (Worker && !forceFallback) {
	            // Convert the function's inner code to a string to construct the worker
	            var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),
	                objURL = createSourceObject(source);

	            this[TARGET] = new Worker(objURL);
	            wrapTerminate(this[TARGET], objURL);
	            return this[TARGET];
	        } else {
	            var selfShim = {
	                postMessage: function postMessage(m) {
	                    if (o.onmessage) {
	                        setTimeout(function () {
	                            o.onmessage({ data: m, target: selfShim });
	                        });
	                    }
	                }
	            };

	            fn.call(selfShim);
	            this.postMessage = function (m) {
	                setTimeout(function () {
	                    selfShim.onmessage({ data: m, target: o });
	                });
	            };
	            this.isThisThread = true;
	        }
	    };
	}
	// Test Worker capabilities
	if (Worker) {
	    var testWorker,
	        objURL = createSourceObject('self.onmessage = function () {}'),
	        testArray = new Uint8Array(1);

	    try {
	        testWorker = new Worker(objURL);

	        // Native browser on some Samsung devices throws for transferables, let's detect it
	        testWorker.postMessage(testArray, [testArray.buffer]);
	    } catch (e) {
	        Worker = null;
	    } finally {
	        URL.revokeObjectURL(objURL);
	        if (testWorker) {
	            testWorker.terminate();
	        }
	    }
	}

	function createSourceObject(str) {
	    try {
	        return URL.createObjectURL(new Blob([str], { type: SCRIPT_TYPE }));
	    } catch (e) {
	        var blob = new BlobBuilder();
	        blob.append(str);
	        return URL.createObjectURL(blob.getBlob(type));
	    }
	}

	function wrapTerminate(worker, objURL) {
	    if (!worker || !objURL) return;
	    var term = worker.terminate;
	    worker.objURL = objURL;
	    worker.terminate = function () {
	        if (worker.objURL) URL.revokeObjectURL(worker.objURL);
	        term.call(worker);
	    };
	}

	var TransmuxWorker = new shimWorker("./transmuxer-worker.worker.js", function (window, document) {
	  var self = this;
	  var transmuxerWorker = function () {

	    /**
	     * mux.js
	     *
	     * Copyright (c) 2015 Brightcove
	     * All rights reserved.
	     *
	     * Functions that generate fragmented MP4s suitable for use with Media
	     * Source Extensions.
	     */

	    var UINT32_MAX = Math.pow(2, 32) - 1;

	    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;

	    // pre-calculate constants
	    (function () {
	      var i;
	      types = {
	        avc1: [], // codingname
	        avcC: [],
	        btrt: [],
	        dinf: [],
	        dref: [],
	        esds: [],
	        ftyp: [],
	        hdlr: [],
	        mdat: [],
	        mdhd: [],
	        mdia: [],
	        mfhd: [],
	        minf: [],
	        moof: [],
	        moov: [],
	        mp4a: [], // codingname
	        mvex: [],
	        mvhd: [],
	        sdtp: [],
	        smhd: [],
	        stbl: [],
	        stco: [],
	        stsc: [],
	        stsd: [],
	        stsz: [],
	        stts: [],
	        styp: [],
	        tfdt: [],
	        tfhd: [],
	        traf: [],
	        trak: [],
	        trun: [],
	        trex: [],
	        tkhd: [],
	        vmhd: []
	      };

	      // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we
	      // don't throw an error
	      if (typeof Uint8Array === 'undefined') {
	        return;
	      }

	      for (i in types) {
	        if (types.hasOwnProperty(i)) {
	          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
	        }
	      }

	      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);
	      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);
	      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);
	      VIDEO_HDLR = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00, // pre_defined
	      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
	      ]);
	      AUDIO_HDLR = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00, // pre_defined
	      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'
	      ]);
	      HDLR_TYPES = {
	        video: VIDEO_HDLR,
	        audio: AUDIO_HDLR
	      };
	      DREF = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x01, // entry_count
	      0x00, 0x00, 0x00, 0x0c, // entry_size
	      0x75, 0x72, 0x6c, 0x20, // 'url' type
	      0x00, // version 0
	      0x00, 0x00, 0x01 // entry_flags
	      ]);
	      SMHD = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, // balance, 0 means centered
	      0x00, 0x00 // reserved
	      ]);
	      STCO = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00 // entry_count
	      ]);
	      STSC = STCO;
	      STSZ = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00, // sample_size
	      0x00, 0x00, 0x00, 0x00 // sample_count
	      ]);
	      STTS = STCO;
	      VMHD = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x01, // flags
	      0x00, 0x00, // graphicsmode
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor
	      ]);
	    })();

	    box = function box(type) {
	      var payload = [],
	          size = 0,
	          i,
	          result,
	          view;

	      for (i = 1; i < arguments.length; i++) {
	        payload.push(arguments[i]);
	      }

	      i = payload.length;

	      // calculate the total size we need to allocate
	      while (i--) {
	        size += payload[i].byteLength;
	      }
	      result = new Uint8Array(size + 8);
	      view = new DataView(result.buffer, result.byteOffset, result.byteLength);
	      view.setUint32(0, result.byteLength);
	      result.set(type, 4);

	      // copy the payload into the result
	      for (i = 0, size = 8; i < payload.length; i++) {
	        result.set(payload[i], size);
	        size += payload[i].byteLength;
	      }
	      return result;
	    };

	    dinf = function dinf() {
	      return box(types.dinf, box(types.dref, DREF));
	    };

	    esds = function esds(track) {
	      return box(types.esds, new Uint8Array([0x00, // version
	      0x00, 0x00, 0x00, // flags

	      // ES_Descriptor
	      0x03, // tag, ES_DescrTag
	      0x19, // length
	      0x00, 0x00, // ES_ID
	      0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority

	      // DecoderConfigDescriptor
	      0x04, // tag, DecoderConfigDescrTag
	      0x11, // length
	      0x40, // object type
	      0x15, // streamType
	      0x00, 0x06, 0x00, // bufferSizeDB
	      0x00, 0x00, 0xda, 0xc0, // maxBitrate
	      0x00, 0x00, 0xda, 0xc0, // avgBitrate

	      // DecoderSpecificInfo
	      0x05, // tag, DecoderSpecificInfoTag
	      0x02, // length
	      // ISO/IEC 14496-3, AudioSpecificConfig
	      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
	      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig
	      ]));
	    };

	    ftyp = function ftyp() {
	      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);
	    };

	    hdlr = function hdlr(type) {
	      return box(types.hdlr, HDLR_TYPES[type]);
	    };
	    mdat = function mdat(data) {
	      return box(types.mdat, data);
	    };
	    mdhd = function mdhd(track) {
	      var result = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x02, // creation_time
	      0x00, 0x00, 0x00, 0x03, // modification_time
	      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 "ticks" per second

	      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration
	      0x55, 0xc4, // 'und' language (undetermined)
	      0x00, 0x00]);

	      // Use the sample rate from the track metadata, when it is
	      // defined. The sample rate can be parsed out of an ADTS header, for
	      // instance.
	      if (track.samplerate) {
	        result[12] = track.samplerate >>> 24 & 0xFF;
	        result[13] = track.samplerate >>> 16 & 0xFF;
	        result[14] = track.samplerate >>> 8 & 0xFF;
	        result[15] = track.samplerate & 0xFF;
	      }

	      return box(types.mdhd, result);
	    };
	    mdia = function mdia(track) {
	      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));
	    };
	    mfhd = function mfhd(sequenceNumber) {
	      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags
	      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number
	      ]));
	    };
	    minf = function minf(track) {
	      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));
	    };
	    moof = function moof(sequenceNumber, tracks) {
	      var trackFragments = [],
	          i = tracks.length;
	      // build traf boxes for each track fragment
	      while (i--) {
	        trackFragments[i] = traf(tracks[i]);
	      }
	      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));
	    };
	    /**
	     * Returns a movie box.
	     * @param tracks {array} the tracks associated with this movie
	     * @see ISO/IEC 14496-12:2012(E), section 8.2.1
	     */
	    moov = function moov(tracks) {
	      var i = tracks.length,
	          boxes = [];

	      while (i--) {
	        boxes[i] = trak(tracks[i]);
	      }

	      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));
	    };
	    mvex = function mvex(tracks) {
	      var i = tracks.length,
	          boxes = [];

	      while (i--) {
	        boxes[i] = trex(tracks[i]);
	      }
	      return box.apply(null, [types.mvex].concat(boxes));
	    };
	    mvhd = function mvhd(duration) {
	      var bytes = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x01, // creation_time
	      0x00, 0x00, 0x00, 0x02, // modification_time
	      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 "ticks" per second
	      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration
	      0x00, 0x01, 0x00, 0x00, // 1.0 rate
	      0x01, 0x00, // 1.0 volume
	      0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
	      0xff, 0xff, 0xff, 0xff // next_track_ID
	      ]);
	      return box(types.mvhd, bytes);
	    };

	    sdtp = function sdtp(track) {
	      var samples = track.samples || [],
	          bytes = new Uint8Array(4 + samples.length),
	          flags,
	          i;

	      // leave the full box header (4 bytes) all zero

	      // write the sample table
	      for (i = 0; i < samples.length; i++) {
	        flags = samples[i].flags;

	        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
	      }

	      return box(types.sdtp, bytes);
	    };

	    stbl = function stbl(track) {
	      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));
	    };

	    (function () {
	      var videoSample, audioSample;

	      stsd = function stsd(track) {

	        return box(types.stsd, new Uint8Array([0x00, // version 0
	        0x00, 0x00, 0x00, // flags
	        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));
	      };

	      videoSample = function videoSample(track) {
	        var sps = track.sps || [],
	            pps = track.pps || [],
	            sequenceParameterSets = [],
	            pictureParameterSets = [],
	            i;

	        // assemble the SPSs
	        for (i = 0; i < sps.length; i++) {
	          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);
	          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength
	          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS
	        }

	        // assemble the PPSs
	        for (i = 0; i < pps.length; i++) {
	          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);
	          pictureParameterSets.push(pps[i].byteLength & 0xFF);
	          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));
	        }

	        return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	        0x00, 0x01, // data_reference_index
	        0x00, 0x00, // pre_defined
	        0x00, 0x00, // reserved
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
	        (track.width & 0xff00) >> 8, track.width & 0xff, // width
	        (track.height & 0xff00) >> 8, track.height & 0xff, // height
	        0x00, 0x48, 0x00, 0x00, // horizresolution
	        0x00, 0x48, 0x00, 0x00, // vertresolution
	        0x00, 0x00, 0x00, 0x00, // reserved
	        0x00, 0x01, // frame_count
	        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname
	        0x00, 0x18, // depth = 24
	        0x11, 0x11 // pre_defined = -1
	        ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion
	        track.profileIdc, // AVCProfileIndication
	        track.profileCompatibility, // profile_compatibility
	        track.levelIdc, // AVCLevelIndication
	        0xff // lengthSizeMinusOne, hard-coded to 4 bytes
	        ].concat([sps.length // numOfSequenceParameterSets
	        ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets
	        ]).concat(pictureParameterSets))), // "PPS"
	        box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
	        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
	        0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate
	        );
	      };

	      audioSample = function audioSample(track) {
	        return box(types.mp4a, new Uint8Array([

	        // SampleEntry, ISO/IEC 14496-12
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	        0x00, 0x01, // data_reference_index

	        // AudioSampleEntry, ISO/IEC 14496-12
	        0x00, 0x00, 0x00, 0x00, // reserved
	        0x00, 0x00, 0x00, 0x00, // reserved
	        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount

	        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize
	        0x00, 0x00, // pre_defined
	        0x00, 0x00, // reserved

	        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16

	        // MP4AudioSampleEntry, ISO/IEC 14496-14
	        ]), esds(track));
	      };
	    })();

	    tkhd = function tkhd(track) {
	      var result = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x07, // flags
	      0x00, 0x00, 0x00, 0x00, // creation_time
	      0x00, 0x00, 0x00, 0x00, // modification_time
	      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
	      0x00, 0x00, 0x00, 0x00, // reserved
	      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, // layer
	      0x00, 0x00, // alternate_group
	      0x01, 0x00, // non-audio track volume
	      0x00, 0x00, // reserved
	      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
	      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width
	      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height
	      ]);

	      return box(types.tkhd, result);
	    };

	    /**
	     * Generate a track fragment (traf) box. A traf box collects metadata
	     * about tracks in a movie fragment (moof) box.
	     */
	    traf = function traf(track) {
	      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;

	      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x3a, // flags
	      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
	      0x00, 0x00, 0x00, 0x01, // sample_description_index
	      0x00, 0x00, 0x00, 0x00, // default_sample_duration
	      0x00, 0x00, 0x00, 0x00, // default_sample_size
	      0x00, 0x00, 0x00, 0x00 // default_sample_flags
	      ]));

	      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));
	      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));

	      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1
	      0x00, 0x00, 0x00, // flags
	      // baseMediaDecodeTime
	      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF]));

	      // the data offset specifies the number of bytes from the start of
	      // the containing moof to the first payload byte of the associated
	      // mdat
	      dataOffset = 32 + // tfhd
	      20 + // tfdt
	      8 + // traf header
	      16 + // mfhd
	      8 + // moof header
	      8; // mdat header

	      // audio tracks require less metadata
	      if (track.type === 'audio') {
	        trackFragmentRun = trun(track, dataOffset);
	        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);
	      }

	      // video tracks should contain an independent and disposable samples
	      // box (sdtp)
	      // generate one and adjust offsets to match
	      sampleDependencyTable = sdtp(track);
	      trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);
	      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);
	    };

	    /**
	     * Generate a track box.
	     * @param track {object} a track definition
	     * @return {Uint8Array} the track box
	     */
	    trak = function trak(track) {
	      track.duration = track.duration || 0xffffffff;
	      return box(types.trak, tkhd(track), mdia(track));
	    };

	    trex = function trex(track) {
	      var result = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
	      0x00, 0x00, 0x00, 0x01, // default_sample_description_index
	      0x00, 0x00, 0x00, 0x00, // default_sample_duration
	      0x00, 0x00, 0x00, 0x00, // default_sample_size
	      0x00, 0x01, 0x00, 0x01 // default_sample_flags
	      ]);
	      // the last two bytes of default_sample_flags is the sample
	      // degradation priority, a hint about the importance of this sample
	      // relative to others. Lower the degradation priority for all sample
	      // types other than video.
	      if (track.type !== 'video') {
	        result[result.length - 1] = 0x00;
	      }

	      return box(types.trex, result);
	    };

	    (function () {
	      var audioTrun, videoTrun, trunHeader;

	      // This method assumes all samples are uniform. That is, if a
	      // duration is present for the first sample, it will be present for
	      // all subsequent samples.
	      // see ISO/IEC 14496-12:2012, Section 8.8.8.1
	      trunHeader = function trunHeader(samples, offset) {
	        var durationPresent = 0,
	            sizePresent = 0,
	            flagsPresent = 0,
	            compositionTimeOffset = 0;

	        // trun flag constants
	        if (samples.length) {
	          if (samples[0].duration !== undefined) {
	            durationPresent = 0x1;
	          }
	          if (samples[0].size !== undefined) {
	            sizePresent = 0x2;
	          }
	          if (samples[0].flags !== undefined) {
	            flagsPresent = 0x4;
	          }
	          if (samples[0].compositionTimeOffset !== undefined) {
	            compositionTimeOffset = 0x8;
	          }
	        }

	        return [0x00, // version 0
	        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags
	        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count
	        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset
	        ];
	      };

	      videoTrun = function videoTrun(track, offset) {
	        var bytes, samples, sample, i;

	        samples = track.samples || [];
	        offset += 8 + 12 + 16 * samples.length;

	        bytes = trunHeader(samples, offset);

	        for (i = 0; i < samples.length; i++) {
	          sample = samples[i];
	          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration
	          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size
	          sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags
	          (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset
	          ]);
	        }
	        return box(types.trun, new Uint8Array(bytes));
	      };

	      audioTrun = function audioTrun(track, offset) {
	        var bytes, samples, sample, i;

	        samples = track.samples || [];
	        offset += 8 + 12 + 8 * samples.length;

	        bytes = trunHeader(samples, offset);

	        for (i = 0; i < samples.length; i++) {
	          sample = samples[i];
	          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration
	          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size
	        }

	        return box(types.trun, new Uint8Array(bytes));
	      };

	      trun = function trun(track, offset) {
	        if (track.type === 'audio') {
	          return audioTrun(track, offset);
	        }

	        return videoTrun(track, offset);
	      };
	    })();

	    var mp4Generator = {
	      ftyp: ftyp,
	      mdat: mdat,
	      moof: moof,
	      moov: moov,
	      initSegment: function initSegment(tracks) {
	        var fileType = ftyp(),
	            movie = moov(tracks),
	            result;

	        result = new Uint8Array(fileType.byteLength + movie.byteLength);
	        result.set(fileType);
	        result.set(movie, fileType.byteLength);
	        return result;
	      }
	    };

	    var toUnsigned = function toUnsigned(value) {
	      return value >>> 0;
	    };

	    var bin = {
	      toUnsigned: toUnsigned
	    };

	    var toUnsigned$1 = bin.toUnsigned;
	    var _findBox, parseType, timescale, startTime, getVideoTrackIds;

	    // Find the data for a box specified by its path
	    _findBox = function findBox(data, path) {
	      var results = [],
	          i,
	          size,
	          type,
	          end,
	          subresults;

	      if (!path.length) {
	        // short-circuit the search for empty paths
	        return null;
	      }

	      for (i = 0; i < data.byteLength;) {
	        size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);

	        type = parseType(data.subarray(i + 4, i + 8));

	        end = size > 1 ? i + size : data.byteLength;

	        if (type === path[0]) {
	          if (path.length === 1) {
	            // this is the end of the path and we've found the box we were
	            // looking for
	            results.push(data.subarray(i + 8, end));
	          } else {
	            // recursively search for the next box along the path
	            subresults = _findBox(data.subarray(i + 8, end), path.slice(1));
	            if (subresults.length) {
	              results = results.concat(subresults);
	            }
	          }
	        }
	        i = end;
	      }

	      // we've finished searching all of data
	      return results;
	    };

	    /**
	     * Returns the string representation of an ASCII encoded four byte buffer.
	     * @param buffer {Uint8Array} a four-byte buffer to translate
	     * @return {string} the corresponding string
	     */
	    parseType = function parseType(buffer) {
	      var result = '';
	      result += String.fromCharCode(buffer[0]);
	      result += String.fromCharCode(buffer[1]);
	      result += String.fromCharCode(buffer[2]);
	      result += String.fromCharCode(buffer[3]);
	      return result;
	    };

	    /**
	     * Parses an MP4 initialization segment and extracts the timescale
	     * values for any declared tracks. Timescale values indicate the
	     * number of clock ticks per second to assume for time-based values
	     * elsewhere in the MP4.
	     *
	     * To determine the start time of an MP4, you need two pieces of
	     * information: the timescale unit and the earliest base media decode
	     * time. Multiple timescales can be specified within an MP4 but the
	     * base media decode time is always expressed in the timescale from
	     * the media header box for the track:
	     * ```
	     * moov > trak > mdia > mdhd.timescale
	     * ```
	     * @param init {Uint8Array} the bytes of the init segment
	     * @return {object} a hash of track ids to timescale values or null if
	     * the init segment is malformed.
	     */
	    timescale = function timescale(init) {
	      var result = {},
	          traks = _findBox(init, ['moov', 'trak']);

	      // mdhd timescale
	      return traks.reduce(function (result, trak) {
	        var tkhd, version, index, id, mdhd;

	        tkhd = _findBox(trak, ['tkhd'])[0];
	        if (!tkhd) {
	          return null;
	        }
	        version = tkhd[0];
	        index = version === 0 ? 12 : 20;
	        id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);

	        mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];
	        if (!mdhd) {
	          return null;
	        }
	        version = mdhd[0];
	        index = version === 0 ? 12 : 20;
	        result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
	        return result;
	      }, result);
	    };

	    /**
	     * Determine the base media decode start time, in seconds, for an MP4
	     * fragment. If multiple fragments are specified, the earliest time is
	     * returned.
	     *
	     * The base media decode time can be parsed from track fragment
	     * metadata:
	     * ```
	     * moof > traf > tfdt.baseMediaDecodeTime
	     * ```
	     * It requires the timescale value from the mdhd to interpret.
	     *
	     * @param timescale {object} a hash of track ids to timescale values.
	     * @return {number} the earliest base media decode start time for the
	     * fragment, in seconds
	     */
	    startTime = function startTime(timescale, fragment) {
	      var trafs, baseTimes, result;

	      // we need info from two childrend of each track fragment box
	      trafs = _findBox(fragment, ['moof', 'traf']);

	      // determine the start times for each track
	      baseTimes = [].concat.apply([], trafs.map(function (traf) {
	        return _findBox(traf, ['tfhd']).map(function (tfhd) {
	          var id, scale, baseTime;

	          // get the track id from the tfhd
	          id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]);
	          // assume a 90kHz clock if no timescale was specified
	          scale = timescale[id] || 90e3;

	          // get the base media decode time from the tfdt
	          baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {
	            var version, result;

	            version = tfdt[0];
	            result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);
	            if (version === 1) {
	              result *= Math.pow(2, 32);
	              result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);
	            }
	            return result;
	          })[0];
	          baseTime = baseTime || Infinity;

	          // convert base time to seconds
	          return baseTime / scale;
	        });
	      }));

	      // return the minimum
	      result = Math.min.apply(null, baseTimes);
	      return isFinite(result) ? result : 0;
	    };

	    /**
	      * Find the trackIds of the video tracks in this source.
	      * Found by parsing the Handler Reference and Track Header Boxes:
	      *   moov > trak > mdia > hdlr
	      *   moov > trak > tkhd
	      *
	      * @param {Uint8Array} init - The bytes of the init segment for this source
	      * @return {Number[]} A list of trackIds
	      *
	      * @see ISO-BMFF-12/2015, Section 8.4.3
	     **/
	    getVideoTrackIds = function getVideoTrackIds(init) {
	      var traks = _findBox(init, ['moov', 'trak']);
	      var videoTrackIds = [];

	      traks.forEach(function (trak) {
	        var hdlrs = _findBox(trak, ['mdia', 'hdlr']);
	        var tkhds = _findBox(trak, ['tkhd']);

	        hdlrs.forEach(function (hdlr, index) {
	          var handlerType = parseType(hdlr.subarray(8, 12));
	          var tkhd = tkhds[index];
	          var view;
	          var version;
	          var trackId;

	          if (handlerType === 'vide') {
	            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
	            version = view.getUint8(0);
	            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);

	            videoTrackIds.push(trackId);
	          }
	        });
	      });

	      return videoTrackIds;
	    };

	    var probe = {
	      findBox: _findBox,
	      parseType: parseType,
	      timescale: timescale,
	      startTime: startTime,
	      videoTrackIds: getVideoTrackIds
	    };

	    /**
	     * mux.js
	     *
	     * Copyright (c) 2014 Brightcove
	     * All rights reserved.
	     *
	     * A lightweight readable stream implemention that handles event dispatching.
	     * Objects that inherit from streams should call init in their constructors.
	     */

	    var Stream = function Stream() {
	      this.init = function () {
	        var listeners = {};
	        /**
	         * Add a listener for a specified event type.
	         * @param type {string} the event name
	         * @param listener {function} the callback to be invoked when an event of
	         * the specified type occurs
	         */
	        this.on = function (type, listener) {
	          if (!listeners[type]) {
	            listeners[type] = [];
	          }
	          listeners[type] = listeners[type].concat(listener);
	        };
	        /**
	         * Remove a listener for a specified event type.
	         * @param type {string} the event name
	         * @param listener {function} a function previously registered for this
	         * type of event through `on`
	         */
	        this.off = function (type, listener) {
	          var index;
	          if (!listeners[type]) {
	            return false;
	          }
	          index = listeners[type].indexOf(listener);
	          listeners[type] = listeners[type].slice();
	          listeners[type].splice(index, 1);
	          return index > -1;
	        };
	        /**
	         * Trigger an event of the specified type on this stream. Any additional
	         * arguments to this function are passed as parameters to event listeners.
	         * @param type {string} the event name
	         */
	        this.trigger = function (type) {
	          var callbacks, i, length, args;
	          callbacks = listeners[type];
	          if (!callbacks) {
	            return;
	          }
	          // Slicing the arguments on every invocation of this method
	          // can add a significant amount of overhead. Avoid the
	          // intermediate object creation for the common case of a
	          // single callback argument
	          if (arguments.length === 2) {
	            length = callbacks.length;
	            for (i = 0; i < length; ++i) {
	              callbacks[i].call(this, arguments[1]);
	            }
	          } else {
	            args = [];
	            i = arguments.length;
	            for (i = 1; i < arguments.length; ++i) {
	              args.push(arguments[i]);
	            }
	            length = callbacks.length;
	            for (i = 0; i < length; ++i) {
	              callbacks[i].apply(this, args);
	            }
	          }
	        };
	        /**
	         * Destroys the stream and cleans up.
	         */
	        this.dispose = function () {
	          listeners = {};
	        };
	      };
	    };

	    /**
	     * Forwards all `data` events on this stream to the destination stream. The
	     * destination stream should provide a method `push` to receive the data
	     * events as they arrive.
	     * @param destination {stream} the stream that will receive all `data` events
	     * @param autoFlush {boolean} if false, we will not call `flush` on the destination
	     *                            when the current stream emits a 'done' event
	     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
	     */
	    Stream.prototype.pipe = function (destination) {
	      this.on('data', function (data) {
	        destination.push(data);
	      });

	      this.on('done', function (flushSource) {
	        destination.flush(flushSource);
	      });

	      return destination;
	    };

	    // Default stream functions that are expected to be overridden to perform
	    // actual work. These are provided by the prototype as a sort of no-op
	    // implementation so that we don't have to check for their existence in the
	    // `pipe` function above.
	    Stream.prototype.push = function (data) {
	      this.trigger('data', data);
	    };

	    Stream.prototype.flush = function (flushSource) {
	      this.trigger('done', flushSource);
	    };

	    var stream = Stream;

	    // Convert an array of nal units into an array of frames with each frame being
	    // composed of the nal units that make up that frame
	    // Also keep track of cummulative data about the frame from the nal units such
	    // as the frame duration, starting pts, etc.
	    var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {
	      var i,
	          currentNal,
	          currentFrame = [],
	          frames = [];

	      currentFrame.byteLength = 0;

	      for (i = 0; i < nalUnits.length; i++) {
	        currentNal = nalUnits[i];

	        // Split on 'aud'-type nal units
	        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {
	          // Since the very first nal unit is expected to be an AUD
	          // only push to the frames array when currentFrame is not empty
	          if (currentFrame.length) {
	            currentFrame.duration = currentNal.dts - currentFrame.dts;
	            frames.push(currentFrame);
	          }
	          currentFrame = [currentNal];
	          currentFrame.byteLength = currentNal.data.byteLength;
	          currentFrame.pts = currentNal.pts;
	          currentFrame.dts = currentNal.dts;
	        } else {
	          // Specifically flag key frames for ease of use later
	          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {
	            currentFrame.keyFrame = true;
	          }
	          currentFrame.duration = currentNal.dts - currentFrame.dts;
	          currentFrame.byteLength += currentNal.data.byteLength;
	          currentFrame.push(currentNal);
	        }
	      }

	      // For the last frame, use the duration of the previous frame if we
	      // have nothing better to go on
	      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {
	        currentFrame.duration = frames[frames.length - 1].duration;
	      }

	      // Push the final frame
	      frames.push(currentFrame);
	      return frames;
	    };

	    // Convert an array of frames into an array of Gop with each Gop being composed
	    // of the frames that make up that Gop
	    // Also keep track of cummulative data about the Gop from the frames such as the
	    // Gop duration, starting pts, etc.
	    var groupFramesIntoGops = function groupFramesIntoGops(frames) {
	      var i,
	          currentFrame,
	          currentGop = [],
	          gops = [];

	      // We must pre-set some of the values on the Gop since we
	      // keep running totals of these values
	      currentGop.byteLength = 0;
	      currentGop.nalCount = 0;
	      currentGop.duration = 0;
	      currentGop.pts = frames[0].pts;
	      currentGop.dts = frames[0].dts;

	      // store some metadata about all the Gops
	      gops.byteLength = 0;
	      gops.nalCount = 0;
	      gops.duration = 0;
	      gops.pts = frames[0].pts;
	      gops.dts = frames[0].dts;

	      for (i = 0; i < frames.length; i++) {
	        currentFrame = frames[i];

	        if (currentFrame.keyFrame) {
	          // Since the very first frame is expected to be an keyframe
	          // only push to the gops array when currentGop is not empty
	          if (currentGop.length) {
	            gops.push(currentGop);
	            gops.byteLength += currentGop.byteLength;
	            gops.nalCount += currentGop.nalCount;
	            gops.duration += currentGop.duration;
	          }

	          currentGop = [currentFrame];
	          currentGop.nalCount = currentFrame.length;
	          currentGop.byteLength = currentFrame.byteLength;
	          currentGop.pts = currentFrame.pts;
	          currentGop.dts = currentFrame.dts;
	          currentGop.duration = currentFrame.duration;
	        } else {
	          currentGop.duration += currentFrame.duration;
	          currentGop.nalCount += currentFrame.length;
	          currentGop.byteLength += currentFrame.byteLength;
	          currentGop.push(currentFrame);
	        }
	      }

	      if (gops.length && currentGop.duration <= 0) {
	        currentGop.duration = gops[gops.length - 1].duration;
	      }
	      gops.byteLength += currentGop.byteLength;
	      gops.nalCount += currentGop.nalCount;
	      gops.duration += currentGop.duration;

	      // push the final Gop
	      gops.push(currentGop);
	      return gops;
	    };

	    /*
	     * Search for the first keyframe in the GOPs and throw away all frames
	     * until that keyframe. Then extend the duration of the pulled keyframe
	     * and pull the PTS and DTS of the keyframe so that it covers the time
	     * range of the frames that were disposed.
	     *
	     * @param {Array} gops video GOPs
	     * @returns {Array} modified video GOPs
	     */
	    var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {
	      var currentGop;

	      if (!gops[0][0].keyFrame && gops.length > 1) {
	        // Remove the first GOP
	        currentGop = gops.shift();

	        gops.byteLength -= currentGop.byteLength;
	        gops.nalCount -= currentGop.nalCount;

	        // Extend the first frame of what is now the
	        // first gop to cover the time period of the
	        // frames we just removed
	        gops[0][0].dts = currentGop.dts;
	        gops[0][0].pts = currentGop.pts;
	        gops[0][0].duration += currentGop.duration;
	      }

	      return gops;
	    };

	    /**
	     * Default sample object
	     * see ISO/IEC 14496-12:2012, section 8.6.4.3
	     */
	    var createDefaultSample = function createDefaultSample() {
	      return {
	        size: 0,
	        flags: {
	          isLeading: 0,
	          dependsOn: 1,
	          isDependedOn: 0,
	          hasRedundancy: 0,
	          degradationPriority: 0,
	          isNonSyncSample: 1
	        }
	      };
	    };

	    /*
	     * Collates information from a video frame into an object for eventual
	     * entry into an MP4 sample table.
	     *
	     * @param {Object} frame the video frame
	     * @param {Number} dataOffset the byte offset to position the sample
	     * @return {Object} object containing sample table info for a frame
	     */
	    var sampleForFrame = function sampleForFrame(frame, dataOffset) {
	      var sample = createDefaultSample();

	      sample.dataOffset = dataOffset;
	      sample.compositionTimeOffset = frame.pts - frame.dts;
	      sample.duration = frame.duration;
	      sample.size = 4 * frame.length; // Space for nal unit size
	      sample.size += frame.byteLength;

	      if (frame.keyFrame) {
	        sample.flags.dependsOn = 2;
	        sample.flags.isNonSyncSample = 0;
	      }

	      return sample;
	    };

	    // generate the track's sample table from an array of gops
	    var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {
	      var h,
	          i,
	          sample,
	          currentGop,
	          currentFrame,
	          dataOffset = baseDataOffset || 0,
	          samples = [];

	      for (h = 0; h < gops.length; h++) {
	        currentGop = gops[h];

	        for (i = 0; i < currentGop.length; i++) {
	          currentFrame = currentGop[i];

	          sample = sampleForFrame(currentFrame, dataOffset);

	          dataOffset += sample.size;

	          samples.push(sample);
	        }
	      }
	      return samples;
	    };

	    // generate the track's raw mdat data from an array of gops
	    var concatenateNalData = function concatenateNalData(gops) {
	      var h,
	          i,
	          j,
	          currentGop,
	          currentFrame,
	          currentNal,
	          dataOffset = 0,
	          nalsByteLength = gops.byteLength,
	          numberOfNals = gops.nalCount,
	          totalByteLength = nalsByteLength + 4 * numberOfNals,
	          data = new Uint8Array(totalByteLength),
	          view = new DataView(data.buffer);

	      // For each Gop..
	      for (h = 0; h < gops.length; h++) {
	        currentGop = gops[h];

	        // For each Frame..
	        for (i = 0; i < currentGop.length; i++) {
	          currentFrame = currentGop[i];

	          // For each NAL..
	          for (j = 0; j < currentFrame.length; j++) {
	            currentNal = currentFrame[j];

	            view.setUint32(dataOffset, currentNal.data.byteLength);
	            dataOffset += 4;
	            data.set(currentNal.data, dataOffset);
	            dataOffset += currentNal.data.byteLength;
	          }
	        }
	      }
	      return data;
	    };

	    var frameUtils = {
	      groupNalsIntoFrames: groupNalsIntoFrames,
	      groupFramesIntoGops: groupFramesIntoGops,
	      extendFirstKeyFrame: extendFirstKeyFrame,
	      generateSampleTable: generateSampleTable,
	      concatenateNalData: concatenateNalData
	    };

	    var highPrefix = [33, 16, 5, 32, 164, 27];
	    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];
	    var zeroFill = function zeroFill(count) {
	      var a = [];
	      while (count--) {
	        a.push(0);
	      }
	      return a;
	    };

	    var makeTable = function makeTable(metaTable) {
	      return Object.keys(metaTable).reduce(function (obj, key) {
	        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {
	          return arr.concat(part);
	        }, []));
	        return obj;
	      }, {});
	    };

	    // Frames-of-silence to use for filling in missing AAC frames
	    var coneOfSilence = {
	      96000: [highPrefix, [227, 64], zeroFill(154), [56]],
	      88200: [highPrefix, [231], zeroFill(170), [56]],
	      64000: [highPrefix, [248, 192], zeroFill(240), [56]],
	      48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],
	      44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],
	      32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],
	      24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],
	      16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],
	      12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],
	      11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],
	      8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]
	    };

	    var silence = makeTable(coneOfSilence);

	    var ONE_SECOND_IN_TS = 90000,

	    // 90kHz clock
	    secondsToVideoTs,
	        secondsToAudioTs,
	        videoTsToSeconds,
	        audioTsToSeconds,
	        audioTsToVideoTs,
	        videoTsToAudioTs;

	    secondsToVideoTs = function secondsToVideoTs(seconds) {
	      return seconds * ONE_SECOND_IN_TS;
	    };

	    secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {
	      return seconds * sampleRate;
	    };

	    videoTsToSeconds = function videoTsToSeconds(timestamp) {
	      return timestamp / ONE_SECOND_IN_TS;
	    };

	    audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {
	      return timestamp / sampleRate;
	    };

	    audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {
	      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
	    };

	    videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {
	      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
	    };

	    var clock = {
	      secondsToVideoTs: secondsToVideoTs,
	      secondsToAudioTs: secondsToAudioTs,
	      videoTsToSeconds: videoTsToSeconds,
	      audioTsToSeconds: audioTsToSeconds,
	      audioTsToVideoTs: audioTsToVideoTs,
	      videoTsToAudioTs: videoTsToAudioTs
	    };

	    var ONE_SECOND_IN_TS$1 = 90000; // 90kHz clock

	    /**
	     * Sum the `byteLength` properties of the data in each AAC frame
	     */
	    var sumFrameByteLengths = function sumFrameByteLengths(array) {
	      var i,
	          currentObj,
	          sum = 0;

	      // sum the byteLength's all each nal unit in the frame
	      for (i = 0; i < array.length; i++) {
	        currentObj = array[i];
	        sum += currentObj.data.byteLength;
	      }

	      return sum;
	    };

	    // Possibly pad (prefix) the audio track with silence if appending this track
	    // would lead to the introduction of a gap in the audio buffer
	    var prefixWithSilence = function prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {
	      var baseMediaDecodeTimeTs,
	          frameDuration = 0,
	          audioGapDuration = 0,
	          audioFillFrameCount = 0,
	          audioFillDuration = 0,
	          silentFrame,
	          i;

	      if (!frames.length) {
	        return;
	      }

	      baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);
	      // determine frame clock duration based on sample rate, round up to avoid overfills
	      frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 / (track.samplerate / 1024));

	      if (audioAppendStartTs && videoBaseMediaDecodeTime) {
	        // insert the shortest possible amount (audio gap or audio to video gap)
	        audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);
	        // number of full frames in the audio gap
	        audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);
	        audioFillDuration = audioFillFrameCount * frameDuration;
	      }

	      // don't attempt to fill gaps smaller than a single frame or larger
	      // than a half second
	      if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$1 / 2) {
	        return;
	      }

	      silentFrame = silence[track.samplerate];

	      if (!silentFrame) {
	        // we don't have a silent frame pregenerated for the sample rate, so use a frame
	        // from the content instead
	        silentFrame = frames[0].data;
	      }

	      for (i = 0; i < audioFillFrameCount; i++) {
	        frames.splice(i, 0, {
	          data: silentFrame
	        });
	      }

	      track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));
	    };

	    // If the audio segment extends before the earliest allowed dts
	    // value, remove AAC frames until starts at or after the earliest
	    // allowed DTS so that we don't end up with a negative baseMedia-
	    // DecodeTime for the audio track
	    var trimAdtsFramesByEarliestDts = function trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts) {
	      if (track.minSegmentDts >= earliestAllowedDts) {
	        return adtsFrames;
	      }

	      // We will need to recalculate the earliest segment Dts
	      track.minSegmentDts = Infinity;

	      return adtsFrames.filter(function (currentFrame) {
	        // If this is an allowed frame, keep it and record it's Dts
	        if (currentFrame.dts >= earliestAllowedDts) {
	          track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);
	          track.minSegmentPts = track.minSegmentDts;
	          return true;
	        }
	        // Otherwise, discard it
	        return false;
	      });
	    };

	    // generate the track's raw mdat data from an array of frames
	    var generateSampleTable$1 = function generateSampleTable(frames) {
	      var i,
	          currentFrame,
	          samples = [];

	      for (i = 0; i < frames.length; i++) {
	        currentFrame = frames[i];
	        samples.push({
	          size: currentFrame.data.byteLength,
	          duration: 1024 // For AAC audio, all samples contain 1024 samples
	        });
	      }
	      return samples;
	    };

	    // generate the track's sample table from an array of frames
	    var concatenateFrameData = function concatenateFrameData(frames) {
	      var i,
	          currentFrame,
	          dataOffset = 0,
	          data = new Uint8Array(sumFrameByteLengths(frames));

	      for (i = 0; i < frames.length; i++) {
	        currentFrame = frames[i];

	        data.set(currentFrame.data, dataOffset);
	        dataOffset += currentFrame.data.byteLength;
	      }
	      return data;
	    };

	    var audioFrameUtils = {
	      prefixWithSilence: prefixWithSilence,
	      trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,
	      generateSampleTable: generateSampleTable$1,
	      concatenateFrameData: concatenateFrameData
	    };

	    var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock

	    /**
	     * Store information about the start and end of the track and the
	     * duration for each frame/sample we process in order to calculate
	     * the baseMediaDecodeTime
	     */
	    var collectDtsInfo = function collectDtsInfo(track, data) {
	      if (typeof data.pts === 'number') {
	        if (track.timelineStartInfo.pts === undefined) {
	          track.timelineStartInfo.pts = data.pts;
	        }

	        if (track.minSegmentPts === undefined) {
	          track.minSegmentPts = data.pts;
	        } else {
	          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);
	        }

	        if (track.maxSegmentPts === undefined) {
	          track.maxSegmentPts = data.pts;
	        } else {
	          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);
	        }
	      }

	      if (typeof data.dts === 'number') {
	        if (track.timelineStartInfo.dts === undefined) {
	          track.timelineStartInfo.dts = data.dts;
	        }

	        if (track.minSegmentDts === undefined) {
	          track.minSegmentDts = data.dts;
	        } else {
	          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);
	        }

	        if (track.maxSegmentDts === undefined) {
	          track.maxSegmentDts = data.dts;
	        } else {
	          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);
	        }
	      }
	    };

	    /**
	     * Clear values used to calculate the baseMediaDecodeTime between
	     * tracks
	     */
	    var clearDtsInfo = function clearDtsInfo(track) {
	      delete track.minSegmentDts;
	      delete track.maxSegmentDts;
	      delete track.minSegmentPts;
	      delete track.maxSegmentPts;
	    };

	    /**
	     * Calculate the track's baseMediaDecodeTime based on the earliest
	     * DTS the transmuxer has ever seen and the minimum DTS for the
	     * current track
	     * @param track {object} track metadata configuration
	     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps
	     *        in the source; false to adjust the first segment to start at 0.
	     */
	    var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {
	      var baseMediaDecodeTime,
	          scale,
	          minSegmentDts = track.minSegmentDts;

	      // Optionally adjust the time so the first segment starts at zero.
	      if (!keepOriginalTimestamps) {
	        minSegmentDts -= track.timelineStartInfo.dts;
	      }

	      // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where
	      // we want the start of the first segment to be placed
	      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;

	      // Add to that the distance this segment is from the very first
	      baseMediaDecodeTime += minSegmentDts;

	      // baseMediaDecodeTime must not become negative
	      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);

	      if (track.type === 'audio') {
	        // Audio has a different clock equal to the sampling_rate so we need to
	        // scale the PTS values into the clock rate of the track
	        scale = track.samplerate / ONE_SECOND_IN_TS$2;
	        baseMediaDecodeTime *= scale;
	        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);
	      }

	      return baseMediaDecodeTime;
	    };

	    var trackDecodeInfo = {
	      clearDtsInfo: clearDtsInfo,
	      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,
	      collectDtsInfo: collectDtsInfo
	    };

	    /**
	     * mux.js
	     *
	     * Copyright (c) 2015 Brightcove
	     * All rights reserved.
	     *
	     * Reads in-band caption information from a video elementary
	     * stream. Captions must follow the CEA-708 standard for injection
	     * into an MPEG-2 transport streams.
	     * @see https://en.wikipedia.org/wiki/CEA-708
	     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf
	     */

	    // Supplemental enhancement information (SEI) NAL units have a
	    // payload type field to indicate how they are to be
	    // interpreted. CEAS-708 caption content is always transmitted with
	    // payload type 0x04.

	    var USER_DATA_REGISTERED_ITU_T_T35 = 4,
	        RBSP_TRAILING_BITS = 128;

	    /**
	      * Parse a supplemental enhancement information (SEI) NAL unit.
	      * Stops parsing once a message of type ITU T T35 has been found.
	      *
	      * @param bytes {Uint8Array} the bytes of a SEI NAL unit
	      * @return {object} the parsed SEI payload
	      * @see Rec. ITU-T H.264, 7.3.2.3.1
	      */
	    var parseSei = function parseSei(bytes) {
	      var i = 0,
	          result = {
	        payloadType: -1,
	        payloadSize: 0
	      },
	          payloadType = 0,
	          payloadSize = 0;

	      // go through the sei_rbsp parsing each each individual sei_message
	      while (i < bytes.byteLength) {
	        // stop once we have hit the end of the sei_rbsp
	        if (bytes[i] === RBSP_TRAILING_BITS) {
	          break;
	        }

	        // Parse payload type
	        while (bytes[i] === 0xFF) {
	          payloadType += 255;
	          i++;
	        }
	        payloadType += bytes[i++];

	        // Parse payload size
	        while (bytes[i] === 0xFF) {
	          payloadSize += 255;
	          i++;
	        }
	        payloadSize += bytes[i++];

	        // this sei_message is a 608/708 caption so save it and break
	        // there can only ever be one caption message in a frame's sei
	        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {
	          result.payloadType = payloadType;
	          result.payloadSize = payloadSize;
	          result.payload = bytes.subarray(i, i + payloadSize);
	          break;
	        }

	        // skip the payload and parse the next message
	        i += payloadSize;
	        payloadType = 0;
	        payloadSize = 0;
	      }

	      return result;
	    };

	    // see ANSI/SCTE 128-1 (2013), section 8.1
	    var parseUserData = function parseUserData(sei) {
	      // itu_t_t35_contry_code must be 181 (United States) for
	      // captions
	      if (sei.payload[0] !== 181) {
	        return null;
	      }

	      // itu_t_t35_provider_code should be 49 (ATSC) for captions
	      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {
	        return null;
	      }

	      // the user_identifier should be "GA94" to indicate ATSC1 data
	      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {
	        return null;
	      }

	      // finally, user_data_type_code should be 0x03 for caption data
	      if (sei.payload[7] !== 0x03) {
	        return null;
	      }

	      // return the user_data_type_structure and strip the trailing
	      // marker bits
	      return sei.payload.subarray(8, sei.payload.length - 1);
	    };

	    // see CEA-708-D, section 4.4
	    var parseCaptionPackets = function parseCaptionPackets(pts, userData) {
	      var results = [],
	          i,
	          count,
	          offset,
	          data;

	      // if this is just filler, return immediately
	      if (!(userData[0] & 0x40)) {
	        return results;
	      }

	      // parse out the cc_data_1 and cc_data_2 fields
	      count = userData[0] & 0x1f;
	      for (i = 0; i < count; i++) {
	        offset = i * 3;
	        data = {
	          type: userData[offset + 2] & 0x03,
	          pts: pts
	        };

	        // capture cc data when cc_valid is 1
	        if (userData[offset + 2] & 0x04) {
	          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];
	          results.push(data);
	        }
	      }
	      return results;
	    };

	    var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {
	      var length = data.byteLength,
	          emulationPreventionBytesPositions = [],
	          i = 1,
	          newLength,
	          newData;

	      // Find all `Emulation Prevention Bytes`
	      while (i < length - 2) {
	        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
	          emulationPreventionBytesPositions.push(i + 2);
	          i += 2;
	        } else {
	          i++;
	        }
	      }

	      // If no Emulation Prevention Bytes were found just return the original
	      // array
	      if (emulationPreventionBytesPositions.length === 0) {
	        return data;
	      }

	      // Create a new array to hold the NAL unit data
	      newLength = length - emulationPreventionBytesPositions.length;
	      newData = new Uint8Array(newLength);
	      var sourceIndex = 0;

	      for (i = 0; i < newLength; sourceIndex++, i++) {
	        if (sourceIndex === emulationPreventionBytesPositions[0]) {
	          // Skip this byte
	          sourceIndex++;
	          // Remove this position index
	          emulationPreventionBytesPositions.shift();
	        }
	        newData[i] = data[sourceIndex];
	      }

	      return newData;
	    };

	    // exports
	    var captionPacketParser = {
	      parseSei: parseSei,
	      parseUserData: parseUserData,
	      parseCaptionPackets: parseCaptionPackets,
	      discardEmulationPreventionBytes: discardEmulationPreventionBytes,
	      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35
	    };

	    // -----------------
	    // Link To Transport
	    // -----------------


	    var CaptionStream = function CaptionStream() {

	      CaptionStream.prototype.init.call(this);

	      this.captionPackets_ = [];

	      this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define
	      new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define
	      new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define
	      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define
	      ];

	      this.reset();

	      // forward data and done events from CCs to this CaptionStream
	      this.ccStreams_.forEach(function (cc) {
	        cc.on('data', this.trigger.bind(this, 'data'));
	        cc.on('done', this.trigger.bind(this, 'done'));
	      }, this);
	    };

	    CaptionStream.prototype = new stream();
	    CaptionStream.prototype.push = function (event) {
	      var sei, userData, newCaptionPackets;

	      // only examine SEI NALs
	      if (event.nalUnitType !== 'sei_rbsp') {
	        return;
	      }

	      // parse the sei
	      sei = captionPacketParser.parseSei(event.escapedRBSP);

	      // ignore everything but user_data_registered_itu_t_t35
	      if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {
	        return;
	      }

	      // parse out the user data payload
	      userData = captionPacketParser.parseUserData(sei);

	      // ignore unrecognized userData
	      if (!userData) {
	        return;
	      }

	      // Sometimes, the same segment # will be downloaded twice. To stop the
	      // caption data from being processed twice, we track the latest dts we've
	      // received and ignore everything with a dts before that. However, since
	      // data for a specific dts can be split across packets on either side of
	      // a segment boundary, we need to make sure we *don't* ignore the packets
	      // from the *next* segment that have dts === this.latestDts_. By constantly
	      // tracking the number of packets received with dts === this.latestDts_, we
	      // know how many should be ignored once we start receiving duplicates.
	      if (event.dts < this.latestDts_) {
	        // We've started getting older data, so set the flag.
	        this.ignoreNextEqualDts_ = true;
	        return;
	      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
	        this.numSameDts_--;
	        if (!this.numSameDts_) {
	          // We've received the last duplicate packet, time to start processing again
	          this.ignoreNextEqualDts_ = false;
	        }
	        return;
	      }

	      // parse out CC data packets and save them for later
	      newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);
	      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);
	      if (this.latestDts_ !== event.dts) {
	        this.numSameDts_ = 0;
	      }
	      this.numSameDts_++;
	      this.latestDts_ = event.dts;
	    };

	    CaptionStream.prototype.flush = function () {
	      // make sure we actually parsed captions before proceeding
	      if (!this.captionPackets_.length) {
	        this.ccStreams_.forEach(function (cc) {
	          cc.flush();
	        }, this);
	        return;
	      }

	      // In Chrome, the Array#sort function is not stable so add a
	      // presortIndex that we can use to ensure we get a stable-sort
	      this.captionPackets_.forEach(function (elem, idx) {
	        elem.presortIndex = idx;
	      });

	      // sort caption byte-pairs based on their PTS values
	      this.captionPackets_.sort(function (a, b) {
	        if (a.pts === b.pts) {
	          return a.presortIndex - b.presortIndex;
	        }
	        return a.pts - b.pts;
	      });

	      this.captionPackets_.forEach(function (packet) {
	        if (packet.type < 2) {
	          // Dispatch packet to the right Cea608Stream
	          this.dispatchCea608Packet(packet);
	        }
	        // this is where an 'else' would go for a dispatching packets
	        // to a theoretical Cea708Stream that handles SERVICEn data
	      }, this);

	      this.captionPackets_.length = 0;
	      this.ccStreams_.forEach(function (cc) {
	        cc.flush();
	      }, this);
	      return;
	    };

	    CaptionStream.prototype.reset = function () {
	      this.latestDts_ = null;
	      this.ignoreNextEqualDts_ = false;
	      this.numSameDts_ = 0;
	      this.activeCea608Channel_ = [null, null];
	      this.ccStreams_.forEach(function (ccStream) {
	        ccStream.reset();
	      });
	    };

	    CaptionStream.prototype.dispatchCea608Packet = function (packet) {
	      // NOTE: packet.type is the CEA608 field
	      if (this.setsChannel1Active(packet)) {
	        this.activeCea608Channel_[packet.type] = 0;
	      } else if (this.setsChannel2Active(packet)) {
	        this.activeCea608Channel_[packet.type] = 1;
	      }
	      if (this.activeCea608Channel_[packet.type] === null) {
	        // If we haven't received anything to set the active channel, discard the
	        // data; we don't want jumbled captions
	        return;
	      }
	      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);
	    };

	    CaptionStream.prototype.setsChannel1Active = function (packet) {
	      return (packet.ccData & 0x7800) === 0x1000;
	    };
	    CaptionStream.prototype.setsChannel2Active = function (packet) {
	      return (packet.ccData & 0x7800) === 0x1800;
	    };

	    // ----------------------
	    // Session to Application
	    // ----------------------

	    // This hash maps non-ASCII, special, and extended character codes to their
	    // proper Unicode equivalent. The first keys that are only a single byte
	    // are the non-standard ASCII characters, which simply map the CEA608 byte
	    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608
	    // character codes, but have their MSB bitmasked with 0x03 so that a lookup
	    // can be performed regardless of the field and data channel on which the
	    // character code was received.
	    var CHARACTER_TRANSLATION = {
	      0x2a: 0xe1, // á
	      0x5c: 0xe9, // é
	      0x5e: 0xed, // í
	      0x5f: 0xf3, // ó
	      0x60: 0xfa, // ú
	      0x7b: 0xe7, // ç
	      0x7c: 0xf7, // ÷
	      0x7d: 0xd1, // Ñ
	      0x7e: 0xf1, // ñ
	      0x7f: 0x2588, // █
	      0x0130: 0xae, // ®
	      0x0131: 0xb0, // °
	      0x0132: 0xbd, // ½
	      0x0133: 0xbf, // ¿
	      0x0134: 0x2122, // ™
	      0x0135: 0xa2, // ¢
	      0x0136: 0xa3, // £
	      0x0137: 0x266a, // ♪
	      0x0138: 0xe0, // à
	      0x0139: 0xa0, //
	      0x013a: 0xe8, // è
	      0x013b: 0xe2, // â
	      0x013c: 0xea, // ê
	      0x013d: 0xee, // î
	      0x013e: 0xf4, // ô
	      0x013f: 0xfb, // û
	      0x0220: 0xc1, // Á
	      0x0221: 0xc9, // É
	      0x0222: 0xd3, // Ó
	      0x0223: 0xda, // Ú
	      0x0224: 0xdc, // Ü
	      0x0225: 0xfc, // ü
	      0x0226: 0x2018, // ‘
	      0x0227: 0xa1, // ¡
	      0x0228: 0x2a, // *
	      0x0229: 0x27, // '
	      0x022a: 0x2014, // —
	      0x022b: 0xa9, // ©
	      0x022c: 0x2120, // ℠
	      0x022d: 0x2022, // •
	      0x022e: 0x201c, // “
	      0x022f: 0x201d, // ”
	      0x0230: 0xc0, // À
	      0x0231: 0xc2, // Â
	      0x0232: 0xc7, // Ç
	      0x0233: 0xc8, // È
	      0x0234: 0xca, // Ê
	      0x0235: 0xcb, // Ë
	      0x0236: 0xeb, // ë
	      0x0237: 0xce, // Î
	      0x0238: 0xcf, // Ï
	      0x0239: 0xef, // ï
	      0x023a: 0xd4, // Ô
	      0x023b: 0xd9, // Ù
	      0x023c: 0xf9, // ù
	      0x023d: 0xdb, // Û
	      0x023e: 0xab, // «
	      0x023f: 0xbb, // »
	      0x0320: 0xc3, // Ã
	      0x0321: 0xe3, // ã
	      0x0322: 0xcd, // Í
	      0x0323: 0xcc, // Ì
	      0x0324: 0xec, // ì
	      0x0325: 0xd2, // Ò
	      0x0326: 0xf2, // ò
	      0x0327: 0xd5, // Õ
	      0x0328: 0xf5, // õ
	      0x0329: 0x7b, // {
	      0x032a: 0x7d, // }
	      0x032b: 0x5c, // \
	      0x032c: 0x5e, // ^
	      0x032d: 0x5f, // _
	      0x032e: 0x7c, // |
	      0x032f: 0x7e, // ~
	      0x0330: 0xc4, // Ä
	      0x0331: 0xe4, // ä
	      0x0332: 0xd6, // Ö
	      0x0333: 0xf6, // ö
	      0x0334: 0xdf, // ß
	      0x0335: 0xa5, // ¥
	      0x0336: 0xa4, // ¤
	      0x0337: 0x2502, // │
	      0x0338: 0xc5, // Å
	      0x0339: 0xe5, // å
	      0x033a: 0xd8, // Ø
	      0x033b: 0xf8, // ø
	      0x033c: 0x250c, // ┌
	      0x033d: 0x2510, // ┐
	      0x033e: 0x2514, // └
	      0x033f: 0x2518 // ┘
	    };

	    var getCharFromCode = function getCharFromCode(code) {
	      if (code === null) {
	        return '';
	      }
	      code = CHARACTER_TRANSLATION[code] || code;
	      return String.fromCharCode(code);
	    };

	    // the index of the last row in a CEA-608 display buffer
	    var BOTTOM_ROW = 14;

	    // This array is used for mapping PACs -> row #, since there's no way of
	    // getting it through bit logic.
	    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];

	    // CEA-608 captions are rendered onto a 34x15 matrix of character
	    // cells. The "bottom" row is the last element in the outer array.
	    var createDisplayBuffer = function createDisplayBuffer() {
	      var result = [],
	          i = BOTTOM_ROW + 1;
	      while (i--) {
	        result.push('');
	      }
	      return result;
	    };

	    var Cea608Stream = function Cea608Stream(field, dataChannel) {
	      Cea608Stream.prototype.init.call(this);

	      this.field_ = field || 0;
	      this.dataChannel_ = dataChannel || 0;

	      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);

	      this.setConstants();
	      this.reset();

	      this.push = function (packet) {
	        var data, swap, char0, char1, text;
	        // remove the parity bits
	        data = packet.ccData & 0x7f7f;

	        // ignore duplicate control codes; the spec demands they're sent twice
	        if (data === this.lastControlCode_) {
	          this.lastControlCode_ = null;
	          return;
	        }

	        // Store control codes
	        if ((data & 0xf000) === 0x1000) {
	          this.lastControlCode_ = data;
	        } else if (data !== this.PADDING_) {
	          this.lastControlCode_ = null;
	        }

	        char0 = data >>> 8;
	        char1 = data & 0xff;

	        if (data === this.PADDING_) {
	          return;
	        } else if (data === this.RESUME_CAPTION_LOADING_) {
	          this.mode_ = 'popOn';
	        } else if (data === this.END_OF_CAPTION_) {
	          // If an EOC is received while in paint-on mode, the displayed caption
	          // text should be swapped to non-displayed memory as if it was a pop-on
	          // caption. Because of that, we should explicitly switch back to pop-on
	          // mode
	          this.mode_ = 'popOn';
	          this.clearFormatting(packet.pts);
	          // if a caption was being displayed, it's gone now
	          this.flushDisplayed(packet.pts);

	          // flip memory
	          swap = this.displayed_;
	          this.displayed_ = this.nonDisplayed_;
	          this.nonDisplayed_ = swap;

	          // start measuring the time to display the caption
	          this.startPts_ = packet.pts;
	        } else if (data === this.ROLL_UP_2_ROWS_) {
	          this.rollUpRows_ = 2;
	          this.setRollUp(packet.pts);
	        } else if (data === this.ROLL_UP_3_ROWS_) {
	          this.rollUpRows_ = 3;
	          this.setRollUp(packet.pts);
	        } else if (data === this.ROLL_UP_4_ROWS_) {
	          this.rollUpRows_ = 4;
	          this.setRollUp(packet.pts);
	        } else if (data === this.CARRIAGE_RETURN_) {
	          this.clearFormatting(packet.pts);
	          this.flushDisplayed(packet.pts);
	          this.shiftRowsUp_();
	          this.startPts_ = packet.pts;
	        } else if (data === this.BACKSPACE_) {
	          if (this.mode_ === 'popOn') {
	            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
	          } else {
	            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
	          }
	        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {
	          this.flushDisplayed(packet.pts);
	          this.displayed_ = createDisplayBuffer();
	        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {
	          this.nonDisplayed_ = createDisplayBuffer();
	        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {
	          if (this.mode_ !== 'paintOn') {
	            // NOTE: This should be removed when proper caption positioning is
	            // implemented
	            this.flushDisplayed(packet.pts);
	            this.displayed_ = createDisplayBuffer();
	          }
	          this.mode_ = 'paintOn';
	          this.startPts_ = packet.pts;

	          // Append special characters to caption text
	        } else if (this.isSpecialCharacter(char0, char1)) {
	          // Bitmask char0 so that we can apply character transformations
	          // regardless of field and data channel.
	          // Then byte-shift to the left and OR with char1 so we can pass the
	          // entire character code to `getCharFromCode`.
	          char0 = (char0 & 0x03) << 8;
	          text = getCharFromCode(char0 | char1);
	          this[this.mode_](packet.pts, text);
	          this.column_++;

	          // Append extended characters to caption text
	        } else if (this.isExtCharacter(char0, char1)) {
	          // Extended characters always follow their "non-extended" equivalents.
	          // IE if a "è" is desired, you'll always receive "eè"; non-compliant
	          // decoders are supposed to drop the "è", while compliant decoders
	          // backspace the "e" and insert "è".

	          // Delete the previous character
	          if (this.mode_ === 'popOn') {
	            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
	          } else {
	            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
	          }

	          // Bitmask char0 so that we can apply character transformations
	          // regardless of field and data channel.
	          // Then byte-shift to the left and OR with char1 so we can pass the
	          // entire character code to `getCharFromCode`.
	          char0 = (char0 & 0x03) << 8;
	          text = getCharFromCode(char0 | char1);
	          this[this.mode_](packet.pts, text);
	          this.column_++;

	          // Process mid-row codes
	        } else if (this.isMidRowCode(char0, char1)) {
	          // Attributes are not additive, so clear all formatting
	          this.clearFormatting(packet.pts);

	          // According to the standard, mid-row codes
	          // should be replaced with spaces, so add one now
	          this[this.mode_](packet.pts, ' ');
	          this.column_++;

	          if ((char1 & 0xe) === 0xe) {
	            this.addFormatting(packet.pts, ['i']);
	          }

	          if ((char1 & 0x1) === 0x1) {
	            this.addFormatting(packet.pts, ['u']);
	          }

	          // Detect offset control codes and adjust cursor
	        } else if (this.isOffsetControlCode(char0, char1)) {
	          // Cursor position is set by indent PAC (see below) in 4-column
	          // increments, with an additional offset code of 1-3 to reach any
	          // of the 32 columns specified by CEA-608. So all we need to do
	          // here is increment the column cursor by the given offset.
	          this.column_ += char1 & 0x03;

	          // Detect PACs (Preamble Address Codes)
	        } else if (this.isPAC(char0, char1)) {

	          // There's no logic for PAC -> row mapping, so we have to just
	          // find the row code in an array and use its index :(
	          var row = ROWS.indexOf(data & 0x1f20);

	          // Configure the caption window if we're in roll-up mode
	          if (this.mode_ === 'rollUp') {
	            // This implies that the base row is incorrectly set.
	            // As per the recommendation in CEA-608(Base Row Implementation), defer to the number
	            // of roll-up rows set.
	            if (row - this.rollUpRows_ + 1 < 0) {
	              row = this.rollUpRows_ - 1;
	            }

	            this.setRollUp(packet.pts, row);
	          }

	          if (row !== this.row_) {
	            // formatting is only persistent for current row
	            this.clearFormatting(packet.pts);
	            this.row_ = row;
	          }
	          // All PACs can apply underline, so detect and apply
	          // (All odd-numbered second bytes set underline)
	          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {
	            this.addFormatting(packet.pts, ['u']);
	          }

	          if ((data & 0x10) === 0x10) {
	            // We've got an indent level code. Each successive even number
	            // increments the column cursor by 4, so we can get the desired
	            // column position by bit-shifting to the right (to get n/2)
	            // and multiplying by 4.
	            this.column_ = ((data & 0xe) >> 1) * 4;
	          }

	          if (this.isColorPAC(char1)) {
	            // it's a color code, though we only support white, which
	            // can be either normal or italicized. white italics can be
	            // either 0x4e or 0x6e depending on the row, so we just
	            // bitwise-and with 0xe to see if italics should be turned on
	            if ((char1 & 0xe) === 0xe) {
	              this.addFormatting(packet.pts, ['i']);
	            }
	          }

	          // We have a normal character in char0, and possibly one in char1
	        } else if (this.isNormalChar(char0)) {
	          if (char1 === 0x00) {
	            char1 = null;
	          }
	          text = getCharFromCode(char0);
	          text += getCharFromCode(char1);
	          this[this.mode_](packet.pts, text);
	          this.column_ += text.length;
	        } // finish data processing
	      };
	    };
	    Cea608Stream.prototype = new stream();
	    // Trigger a cue point that captures the current state of the
	    // display buffer
	    Cea608Stream.prototype.flushDisplayed = function (pts) {
	      var content = this.displayed_
	      // remove spaces from the start and end of the string
	      .map(function (row) {
	        try {
	          return row.trim();
	        } catch (e) {
	          // Ordinarily, this shouldn't happen. However, caption
	          // parsing errors should not throw exceptions and
	          // break playback.
	          // eslint-disable-next-line no-console
	          console.error('Skipping malformed caption.');
	          return '';
	        }
	      })
	      // combine all text rows to display in one cue
	      .join('\n')
	      // and remove blank rows from the start and end, but not the middle
	      .replace(/^\n+|\n+$/g, '');

	      if (content.length) {
	        this.trigger('data', {
	          startPts: this.startPts_,
	          endPts: pts,
	          text: content,
	          stream: this.name_
	        });
	      }
	    };

	    /**
	     * Zero out the data, used for startup and on seek
	     */
	    Cea608Stream.prototype.reset = function () {
	      this.mode_ = 'popOn';
	      // When in roll-up mode, the index of the last row that will
	      // actually display captions. If a caption is shifted to a row
	      // with a lower index than this, it is cleared from the display
	      // buffer
	      this.topRow_ = 0;
	      this.startPts_ = 0;
	      this.displayed_ = createDisplayBuffer();
	      this.nonDisplayed_ = createDisplayBuffer();
	      this.lastControlCode_ = null;

	      // Track row and column for proper line-breaking and spacing
	      this.column_ = 0;
	      this.row_ = BOTTOM_ROW;
	      this.rollUpRows_ = 2;

	      // This variable holds currently-applied formatting
	      this.formatting_ = [];
	    };

	    /**
	     * Sets up control code and related constants for this instance
	     */
	    Cea608Stream.prototype.setConstants = function () {
	      // The following attributes have these uses:
	      // ext_ :    char0 for mid-row codes, and the base for extended
	      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for
	      //           extended codes)
	      // control_: char0 for control codes, except byte-shifted to the
	      //           left so that we can do this.control_ | CONTROL_CODE
	      // offset_:  char0 for tab offset codes
	      //
	      // It's also worth noting that control codes, and _only_ control codes,
	      // differ between field 1 and field2. Field 2 control codes are always
	      // their field 1 value plus 1. That's why there's the "| field" on the
	      // control value.
	      if (this.dataChannel_ === 0) {
	        this.BASE_ = 0x10;
	        this.EXT_ = 0x11;
	        this.CONTROL_ = (0x14 | this.field_) << 8;
	        this.OFFSET_ = 0x17;
	      } else if (this.dataChannel_ === 1) {
	        this.BASE_ = 0x18;
	        this.EXT_ = 0x19;
	        this.CONTROL_ = (0x1c | this.field_) << 8;
	        this.OFFSET_ = 0x1f;
	      }

	      // Constants for the LSByte command codes recognized by Cea608Stream. This
	      // list is not exhaustive. For a more comprehensive listing and semantics see
	      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf
	      // Padding
	      this.PADDING_ = 0x0000;
	      // Pop-on Mode
	      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;
	      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;
	      // Roll-up Mode
	      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;
	      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;
	      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;
	      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;
	      // paint-on mode
	      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;
	      // Erasure
	      this.BACKSPACE_ = this.CONTROL_ | 0x21;
	      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;
	      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;
	    };

	    /**
	     * Detects if the 2-byte packet data is a special character
	     *
	     * Special characters have a second byte in the range 0x30 to 0x3f,
	     * with the first byte being 0x11 (for data channel 1) or 0x19 (for
	     * data channel 2).
	     *
	     * @param  {Integer} char0 The first byte
	     * @param  {Integer} char1 The second byte
	     * @return {Boolean}       Whether the 2 bytes are an special character
	     */
	    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {
	      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;
	    };

	    /**
	     * Detects if the 2-byte packet data is an extended character
	     *
	     * Extended characters have a second byte in the range 0x20 to 0x3f,
	     * with the first byte being 0x12 or 0x13 (for data channel 1) or
	     * 0x1a or 0x1b (for data channel 2).
	     *
	     * @param  {Integer} char0 The first byte
	     * @param  {Integer} char1 The second byte
	     * @return {Boolean}       Whether the 2 bytes are an extended character
	     */
	    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {
	      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;
	    };

	    /**
	     * Detects if the 2-byte packet is a mid-row code
	     *
	     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with
	     * the first byte being 0x11 (for data channel 1) or 0x19 (for data
	     * channel 2).
	     *
	     * @param  {Integer} char0 The first byte
	     * @param  {Integer} char1 The second byte
	     * @return {Boolean}       Whether the 2 bytes are a mid-row code
	     */
	    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {
	      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;
	    };

	    /**
	     * Detects if the 2-byte packet is an offset control code
	     *
	     * Offset control codes have a second byte in the range 0x21 to 0x23,
	     * with the first byte being 0x17 (for data channel 1) or 0x1f (for
	     * data channel 2).
	     *
	     * @param  {Integer} char0 The first byte
	     * @param  {Integer} char1 The second byte
	     * @return {Boolean}       Whether the 2 bytes are an offset control code
	     */
	    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {
	      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;
	    };

	    /**
	     * Detects if the 2-byte packet is a Preamble Address Code
	     *
	     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)
	     * or 0x18 to 0x1f (for data channel 2), with the second byte in the
	     * range 0x40 to 0x7f.
	     *
	     * @param  {Integer} char0 The first byte
	     * @param  {Integer} char1 The second byte
	     * @return {Boolean}       Whether the 2 bytes are a PAC
	     */
	    Cea608Stream.prototype.isPAC = function (char0, char1) {
	      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;
	    };

	    /**
	     * Detects if a packet's second byte is in the range of a PAC color code
	     *
	     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or
	     * 0x60 to 0x6f.
	     *
	     * @param  {Integer} char1 The second byte
	     * @return {Boolean}       Whether the byte is a color PAC
	     */
	    Cea608Stream.prototype.isColorPAC = function (char1) {
	      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;
	    };

	    /**
	     * Detects if a single byte is in the range of a normal character
	     *
	     * Normal text bytes are in the range 0x20 to 0x7f.
	     *
	     * @param  {Integer} char  The byte
	     * @return {Boolean}       Whether the byte is a normal character
	     */
	    Cea608Stream.prototype.isNormalChar = function (char) {
	      return char >= 0x20 && char <= 0x7f;
	    };

	    /**
	     * Configures roll-up
	     *
	     * @param  {Integer} pts         Current PTS
	     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to
	     *                               a new position
	     */
	    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {
	      // Reset the base row to the bottom row when switching modes
	      if (this.mode_ !== 'rollUp') {
	        this.row_ = BOTTOM_ROW;
	        this.mode_ = 'rollUp';
	        // Spec says to wipe memories when switching to roll-up
	        this.flushDisplayed(pts);
	        this.nonDisplayed_ = createDisplayBuffer();
	        this.displayed_ = createDisplayBuffer();
	      }

	      if (newBaseRow !== undefined && newBaseRow !== this.row_) {
	        // move currently displayed captions (up or down) to the new base row
	        for (var i = 0; i < this.rollUpRows_; i++) {
	          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];
	          this.displayed_[this.row_ - i] = '';
	        }
	      }

	      if (newBaseRow === undefined) {
	        newBaseRow = this.row_;
	      }

	      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;
	    };

	    // Adds the opening HTML tag for the passed character to the caption text,
	    // and keeps track of it for later closing
	    Cea608Stream.prototype.addFormatting = function (pts, format) {
	      this.formatting_ = this.formatting_.concat(format);
	      var text = format.reduce(function (text, format) {
	        return text + '<' + format + '>';
	      }, '');
	      this[this.mode_](pts, text);
	    };

	    // Adds HTML closing tags for current formatting to caption text and
	    // clears remembered formatting
	    Cea608Stream.prototype.clearFormatting = function (pts) {
	      if (!this.formatting_.length) {
	        return;
	      }
	      var text = this.formatting_.reverse().reduce(function (text, format) {
	        return text + '</' + format + '>';
	      }, '');
	      this.formatting_ = [];
	      this[this.mode_](pts, text);
	    };

	    // Mode Implementations
	    Cea608Stream.prototype.popOn = function (pts, text) {
	      var baseRow = this.nonDisplayed_[this.row_];

	      // buffer characters
	      baseRow += text;
	      this.nonDisplayed_[this.row_] = baseRow;
	    };

	    Cea608Stream.prototype.rollUp = function (pts, text) {
	      var baseRow = this.displayed_[this.row_];

	      baseRow += text;
	      this.displayed_[this.row_] = baseRow;
	    };

	    Cea608Stream.prototype.shiftRowsUp_ = function () {
	      var i;
	      // clear out inactive rows
	      for (i = 0; i < this.topRow_; i++) {
	        this.displayed_[i] = '';
	      }
	      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {
	        this.displayed_[i] = '';
	      }
	      // shift displayed rows up
	      for (i = this.topRow_; i < this.row_; i++) {
	        this.displayed_[i] = this.displayed_[i + 1];
	      }
	      // clear out the bottom row
	      this.displayed_[this.row_] = '';
	    };

	    Cea608Stream.prototype.paintOn = function (pts, text) {
	      var baseRow = this.displayed_[this.row_];

	      baseRow += text;
	      this.displayed_[this.row_] = baseRow;
	    };

	    // exports
	    var captionStream = {
	      CaptionStream: CaptionStream,
	      Cea608Stream: Cea608Stream
	    };

	    var streamTypes = {
	      H264_STREAM_TYPE: 0x1B,
	      ADTS_STREAM_TYPE: 0x0F,
	      METADATA_STREAM_TYPE: 0x15
	    };

	    var MAX_TS = 8589934592;

	    var RO_THRESH = 4294967296;

	    var handleRollover = function handleRollover(value, reference) {
	      var direction = 1;

	      if (value > reference) {
	        // If the current timestamp value is greater than our reference timestamp and we detect a
	        // timestamp rollover, this means the roll over is happening in the opposite direction.
	        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference
	        // point will be set to a small number, e.g. 1. The user then seeks backwards over the
	        // rollover point. In loading this segment, the timestamp values will be very large,
	        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust
	        // the time stamp to be `value - 2^33`.
	        direction = -1;
	      }

	      // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will
	      // cause an incorrect adjustment.
	      while (Math.abs(reference - value) > RO_THRESH) {
	        value += direction * MAX_TS;
	      }

	      return value;
	    };

	    var TimestampRolloverStream = function TimestampRolloverStream(type) {
	      var lastDTS, referenceDTS;

	      TimestampRolloverStream.prototype.init.call(this);

	      this.type_ = type;

	      this.push = function (data) {
	        if (data.type !== this.type_) {
	          return;
	        }

	        if (referenceDTS === undefined) {
	          referenceDTS = data.dts;
	        }

	        data.dts = handleRollover(data.dts, referenceDTS);
	        data.pts = handleRollover(data.pts, referenceDTS);

	        lastDTS = data.dts;

	        this.trigger('data', data);
	      };

	      this.flush = function () {
	        referenceDTS = lastDTS;
	        this.trigger('done');
	      };

	      this.discontinuity = function () {
	        referenceDTS = void 0;
	        lastDTS = void 0;
	      };
	    };

	    TimestampRolloverStream.prototype = new stream();

	    var timestampRolloverStream = {
	      TimestampRolloverStream: TimestampRolloverStream,
	      handleRollover: handleRollover
	    };

	    var percentEncode = function percentEncode(bytes, start, end) {
	      var i,
	          result = '';
	      for (i = start; i < end; i++) {
	        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);
	      }
	      return result;
	    },


	    // return the string representation of the specified byte range,
	    // interpreted as UTf-8.
	    parseUtf8 = function parseUtf8(bytes, start, end) {
	      return decodeURIComponent(percentEncode(bytes, start, end));
	    },


	    // return the string representation of the specified byte range,
	    // interpreted as ISO-8859-1.
	    parseIso88591 = function parseIso88591(bytes, start, end) {
	      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line
	    },
	        parseSyncSafeInteger = function parseSyncSafeInteger(data) {
	      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
	    },
	        tagParsers = {
	      TXXX: function TXXX(tag) {
	        var i;
	        if (tag.data[0] !== 3) {
	          // ignore frames with unrecognized character encodings
	          return;
	        }

	        for (i = 1; i < tag.data.length; i++) {
	          if (tag.data[i] === 0) {
	            // parse the text fields
	            tag.description = parseUtf8(tag.data, 1, i);
	            // do not include the null terminator in the tag value
	            tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\0*$/, '');
	            break;
	          }
	        }
	        tag.data = tag.value;
	      },
	      WXXX: function WXXX(tag) {
	        var i;
	        if (tag.data[0] !== 3) {
	          // ignore frames with unrecognized character encodings
	          return;
	        }

	        for (i = 1; i < tag.data.length; i++) {
	          if (tag.data[i] === 0) {
	            // parse the description and URL fields
	            tag.description = parseUtf8(tag.data, 1, i);
	            tag.url = parseUtf8(tag.data, i + 1, tag.data.length);
	            break;
	          }
	        }
	      },
	      PRIV: function PRIV(tag) {
	        var i;

	        for (i = 0; i < tag.data.length; i++) {
	          if (tag.data[i] === 0) {
	            // parse the description and URL fields
	            tag.owner = parseIso88591(tag.data, 0, i);
	            break;
	          }
	        }
	        tag.privateData = tag.data.subarray(i + 1);
	        tag.data = tag.privateData;
	      }
	    },
	        _MetadataStream;

	    _MetadataStream = function MetadataStream(options) {
	      var settings = {
	        debug: !!(options && options.debug),

	        // the bytes of the program-level descriptor field in MP2T
	        // see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
	        // program element descriptors"
	        descriptor: options && options.descriptor
	      },


	      // the total size in bytes of the ID3 tag being parsed
	      tagSize = 0,


	      // tag data that is not complete enough to be parsed
	      buffer = [],


	      // the total number of bytes currently in the buffer
	      bufferSize = 0,
	          i;

	      _MetadataStream.prototype.init.call(this);

	      // calculate the text track in-band metadata track dispatch type
	      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track
	      this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);
	      if (settings.descriptor) {
	        for (i = 0; i < settings.descriptor.length; i++) {
	          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);
	        }
	      }

	      this.push = function (chunk) {
	        var tag, frameStart, frameSize, frame, i, frameHeader;
	        if (chunk.type !== 'timed-metadata') {
	          return;
	        }

	        // if data_alignment_indicator is set in the PES header,
	        // we must have the start of a new ID3 tag. Assume anything
	        // remaining in the buffer was malformed and throw it out
	        if (chunk.dataAlignmentIndicator) {
	          bufferSize = 0;
	          buffer.length = 0;
	        }

	        // ignore events that don't look like ID3 data
	        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {
	          if (settings.debug) {
	            // eslint-disable-next-line no-console
	            console.log('Skipping unrecognized metadata packet');
	          }
	          return;
	        }

	        // add this chunk to the data we've collected so far

	        buffer.push(chunk);
	        bufferSize += chunk.data.byteLength;

	        // grab the size of the entire frame from the ID3 header
	        if (buffer.length === 1) {
	          // the frame size is transmitted as a 28-bit integer in the
	          // last four bytes of the ID3 header.
	          // The most significant bit of each byte is dropped and the
	          // results concatenated to recover the actual value.
	          tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));

	          // ID3 reports the tag size excluding the header but it's more
	          // convenient for our comparisons to include it
	          tagSize += 10;
	        }

	        // if the entire frame has not arrived, wait for more data
	        if (bufferSize < tagSize) {
	          return;
	        }

	        // collect the entire frame so it can be parsed
	        tag = {
	          data: new Uint8Array(tagSize),
	          frames: [],
	          pts: buffer[0].pts,
	          dts: buffer[0].dts
	        };
	        for (i = 0; i < tagSize;) {
	          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);
	          i += buffer[0].data.byteLength;
	          bufferSize -= buffer[0].data.byteLength;
	          buffer.shift();
	        }

	        // find the start of the first frame and the end of the tag
	        frameStart = 10;
	        if (tag.data[5] & 0x40) {
	          // advance the frame start past the extended header
	          frameStart += 4; // header size field
	          frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));

	          // clip any padding off the end
	          tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));
	        }

	        // parse one or more ID3 frames
	        // http://id3.org/id3v2.3.0#ID3v2_frame_overview
	        do {
	          // determine the number of bytes in this frame
	          frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));
	          if (frameSize < 1) {
	            // eslint-disable-next-line no-console
	            return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');
	          }
	          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);

	          frame = {
	            id: frameHeader,
	            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)
	          };
	          frame.key = frame.id;
	          if (tagParsers[frame.id]) {
	            tagParsers[frame.id](frame);

	            // handle the special PRIV frame used to indicate the start
	            // time for raw AAC data
	            if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {
	              var d = frame.data,
	                  size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;

	              size *= 4;
	              size += d[7] & 0x03;
	              frame.timeStamp = size;
	              // in raw AAC, all subsequent data will be timestamped based
	              // on the value of this frame
	              // we couldn't have known the appropriate pts and dts before
	              // parsing this ID3 tag so set those values now
	              if (tag.pts === undefined && tag.dts === undefined) {
	                tag.pts = frame.timeStamp;
	                tag.dts = frame.timeStamp;
	              }
	              this.trigger('timestamp', frame);
	            }
	          }
	          tag.frames.push(frame);

	          frameStart += 10; // advance past the frame header
	          frameStart += frameSize; // advance past the frame body
	        } while (frameStart < tagSize);
	        this.trigger('data', tag);
	      };
	    };
	    _MetadataStream.prototype = new stream();

	    var metadataStream = _MetadataStream;

	    var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream;

	    // object types
	    var _TransportPacketStream, _TransportParseStream, _ElementaryStream;

	    // constants
	    var MP2T_PACKET_LENGTH = 188,

	    // bytes
	    SYNC_BYTE = 0x47;

	    /**
	     * Splits an incoming stream of binary data into MPEG-2 Transport
	     * Stream packets.
	     */
	    _TransportPacketStream = function TransportPacketStream() {
	      var buffer = new Uint8Array(MP2T_PACKET_LENGTH),
	          bytesInBuffer = 0;

	      _TransportPacketStream.prototype.init.call(this);

	      // Deliver new bytes to the stream.

	      /**
	       * Split a stream of data into M2TS packets
	      **/
	      this.push = function (bytes) {
	        var startIndex = 0,
	            endIndex = MP2T_PACKET_LENGTH,
	            everything;

	        // If there are bytes remaining from the last segment, prepend them to the
	        // bytes that were pushed in
	        if (bytesInBuffer) {
	          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);
	          everything.set(buffer.subarray(0, bytesInBuffer));
	          everything.set(bytes, bytesInBuffer);
	          bytesInBuffer = 0;
	        } else {
	          everything = bytes;
	        }

	        // While we have enough data for a packet
	        while (endIndex < everything.byteLength) {
	          // Look for a pair of start and end sync bytes in the data..
	          if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {
	            // We found a packet so emit it and jump one whole packet forward in
	            // the stream
	            this.trigger('data', everything.subarray(startIndex, endIndex));
	            startIndex += MP2T_PACKET_LENGTH;
	            endIndex += MP2T_PACKET_LENGTH;
	            continue;
	          }
	          // If we get here, we have somehow become de-synchronized and we need to step
	          // forward one byte at a time until we find a pair of sync bytes that denote
	          // a packet
	          startIndex++;
	          endIndex++;
	        }

	        // If there was some data left over at the end of the segment that couldn't
	        // possibly be a whole packet, keep it because it might be the start of a packet
	        // that continues in the next segment
	        if (startIndex < everything.byteLength) {
	          buffer.set(everything.subarray(startIndex), 0);
	          bytesInBuffer = everything.byteLength - startIndex;
	        }
	      };

	      /**
	       * Passes identified M2TS packets to the TransportParseStream to be parsed
	      **/
	      this.flush = function () {
	        // If the buffer contains a whole packet when we are being flushed, emit it
	        // and empty the buffer. Otherwise hold onto the data because it may be
	        // important for decoding the next segment
	        if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {
	          this.trigger('data', buffer);
	          bytesInBuffer = 0;
	        }
	        this.trigger('done');
	      };
	    };
	    _TransportPacketStream.prototype = new stream();

	    /**
	     * Accepts an MP2T TransportPacketStream and emits data events with parsed
	     * forms of the individual transport stream packets.
	     */
	    _TransportParseStream = function TransportParseStream() {
	      var parsePsi, parsePat, parsePmt, self;
	      _TransportParseStream.prototype.init.call(this);
	      self = this;

	      this.packetsWaitingForPmt = [];
	      this.programMapTable = undefined;

	      parsePsi = function parsePsi(payload, psi) {
	        var offset = 0;

	        // PSI packets may be split into multiple sections and those
	        // sections may be split into multiple packets. If a PSI
	        // section starts in this packet, the payload_unit_start_indicator
	        // will be true and the first byte of the payload will indicate
	        // the offset from the current position to the start of the
	        // section.
	        if (psi.payloadUnitStartIndicator) {
	          offset += payload[offset] + 1;
	        }

	        if (psi.type === 'pat') {
	          parsePat(payload.subarray(offset), psi);
	        } else {
	          parsePmt(payload.subarray(offset), psi);
	        }
	      };

	      parsePat = function parsePat(payload, pat) {
	        pat.section_number = payload[7]; // eslint-disable-line camelcase
	        pat.last_section_number = payload[8]; // eslint-disable-line camelcase

	        // skip the PSI header and parse the first PMT entry
	        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];
	        pat.pmtPid = self.pmtPid;
	      };

	      /**
	       * Parse out the relevant fields of a Program Map Table (PMT).
	       * @param payload {Uint8Array} the PMT-specific portion of an MP2T
	       * packet. The first byte in this array should be the table_id
	       * field.
	       * @param pmt {object} the object that should be decorated with
	       * fields parsed from the PMT.
	       */
	      parsePmt = function parsePmt(payload, pmt) {
	        var sectionLength, tableEnd, programInfoLength, offset;

	        // PMTs can be sent ahead of the time when they should actually
	        // take effect. We don't believe this should ever be the case
	        // for HLS but we'll ignore "forward" PMT declarations if we see
	        // them. Future PMT declarations have the current_next_indicator
	        // set to zero.
	        if (!(payload[5] & 0x01)) {
	          return;
	        }

	        // overwrite any existing program map table
	        self.programMapTable = {
	          video: null,
	          audio: null,
	          'timed-metadata': {}
	        };

	        // the mapping table ends at the end of the current section
	        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];
	        tableEnd = 3 + sectionLength - 4;

	        // to determine where the table is, we have to figure out how
	        // long the program info descriptors are
	        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];

	        // advance the offset to the first entry in the mapping table
	        offset = 12 + programInfoLength;
	        while (offset < tableEnd) {
	          var streamType = payload[offset];
	          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];

	          // only map a single elementary_pid for audio and video stream types
	          // TODO: should this be done for metadata too? for now maintain behavior of
	          //       multiple metadata streams
	          if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {
	            self.programMapTable.video = pid;
	          } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {
	            self.programMapTable.audio = pid;
	          } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {
	            // map pid to stream type for metadata streams
	            self.programMapTable['timed-metadata'][pid] = streamType;
	          }

	          // move to the next table entry
	          // skip past the elementary stream descriptors, if present
	          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;
	        }

	        // record the map on the packet as well
	        pmt.programMapTable = self.programMapTable;
	      };

	      /**
	       * Deliver a new MP2T packet to the next stream in the pipeline.
	       */
	      this.push = function (packet) {
	        var result = {},
	            offset = 4;

	        result.payloadUnitStartIndicator = !!(packet[1] & 0x40);

	        // pid is a 13-bit field starting at the last bit of packet[1]
	        result.pid = packet[1] & 0x1f;
	        result.pid <<= 8;
	        result.pid |= packet[2];

	        // if an adaption field is present, its length is specified by the
	        // fifth byte of the TS packet header. The adaptation field is
	        // used to add stuffing to PES packets that don't fill a complete
	        // TS packet, and to specify some forms of timing and control data
	        // that we do not currently use.
	        if ((packet[3] & 0x30) >>> 4 > 0x01) {
	          offset += packet[offset] + 1;
	        }

	        // parse the rest of the packet based on the type
	        if (result.pid === 0) {
	          result.type = 'pat';
	          parsePsi(packet.subarray(offset), result);
	          this.trigger('data', result);
	        } else if (result.pid === this.pmtPid) {
	          result.type = 'pmt';
	          parsePsi(packet.subarray(offset), result);
	          this.trigger('data', result);

	          // if there are any packets waiting for a PMT to be found, process them now
	          while (this.packetsWaitingForPmt.length) {
	            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
	          }
	        } else if (this.programMapTable === undefined) {
	          // When we have not seen a PMT yet, defer further processing of
	          // PES packets until one has been parsed
	          this.packetsWaitingForPmt.push([packet, offset, result]);
	        } else {
	          this.processPes_(packet, offset, result);
	        }
	      };

	      this.processPes_ = function (packet, offset, result) {
	        // set the appropriate stream type
	        if (result.pid === this.programMapTable.video) {
	          result.streamType = streamTypes.H264_STREAM_TYPE;
	        } else if (result.pid === this.programMapTable.audio) {
	          result.streamType = streamTypes.ADTS_STREAM_TYPE;
	        } else {
	          // if not video or audio, it is timed-metadata or unknown
	          // if unknown, streamType will be undefined
	          result.streamType = this.programMapTable['timed-metadata'][result.pid];
	        }

	        result.type = 'pes';
	        result.data = packet.subarray(offset);

	        this.trigger('data', result);
	      };
	    };
	    _TransportParseStream.prototype = new stream();
	    _TransportParseStream.STREAM_TYPES = {
	      h264: 0x1b,
	      adts: 0x0f
	    };

	    /**
	     * Reconsistutes program elementary stream (PES) packets from parsed
	     * transport stream packets. That is, if you pipe an
	     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output
	     * events will be events which capture the bytes for individual PES
	     * packets plus relevant metadata that has been extracted from the
	     * container.
	     */
	    _ElementaryStream = function ElementaryStream() {
	      var self = this,


	      // PES packet fragments
	      video = {
	        data: [],
	        size: 0
	      },
	          audio = {
	        data: [],
	        size: 0
	      },
	          timedMetadata = {
	        data: [],
	        size: 0
	      },
	          parsePes = function parsePes(payload, pes) {
	        var ptsDtsFlags;

	        // get the packet length, this will be 0 for video
	        pes.packetLength = 6 + (payload[4] << 8 | payload[5]);

	        // find out if this packets starts a new keyframe
	        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;
	        // PES packets may be annotated with a PTS value, or a PTS value
	        // and a DTS value. Determine what combination of values is
	        // available to work with.
	        ptsDtsFlags = payload[7];

	        // PTS and DTS are normally stored as a 33-bit number.  Javascript
	        // performs all bitwise operations on 32-bit integers but javascript
	        // supports a much greater range (52-bits) of integer using standard
	        // mathematical operations.
	        // We construct a 31-bit value using bitwise operators over the 31
	        // most significant bits and then multiply by 4 (equal to a left-shift
	        // of 2) before we add the final 2 least significant bits of the
	        // timestamp (equal to an OR.)
	        if (ptsDtsFlags & 0xC0) {
	          // the PTS and DTS are not written out directly. For information
	          // on how they are encoded, see
	          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
	          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;
	          pes.pts *= 4; // Left shift by 2
	          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs
	          pes.dts = pes.pts;
	          if (ptsDtsFlags & 0x40) {
	            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;
	            pes.dts *= 4; // Left shift by 2
	            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs
	          }
	        }
	        // the data section starts immediately after the PES header.
	        // pes_header_data_length specifies the number of header bytes
	        // that follow the last byte of the field.
	        pes.data = payload.subarray(9 + payload[8]);
	      },


	      /**
	        * Pass completely parsed PES packets to the next stream in the pipeline
	       **/
	      flushStream = function flushStream(stream$$1, type, forceFlush) {
	        var packetData = new Uint8Array(stream$$1.size),
	            event = {
	          type: type
	        },
	            i = 0,
	            offset = 0,
	            packetFlushable = false,
	            fragment;

	        // do nothing if there is not enough buffered data for a complete
	        // PES header
	        if (!stream$$1.data.length || stream$$1.size < 9) {
	          return;
	        }
	        event.trackId = stream$$1.data[0].pid;

	        // reassemble the packet
	        for (i = 0; i < stream$$1.data.length; i++) {
	          fragment = stream$$1.data[i];

	          packetData.set(fragment.data, offset);
	          offset += fragment.data.byteLength;
	        }

	        // parse assembled packet's PES header
	        parsePes(packetData, event);

	        // non-video PES packets MUST have a non-zero PES_packet_length
	        // check that there is enough stream data to fill the packet
	        packetFlushable = type === 'video' || event.packetLength <= stream$$1.size;

	        // flush pending packets if the conditions are right
	        if (forceFlush || packetFlushable) {
	          stream$$1.size = 0;
	          stream$$1.data.length = 0;
	        }

	        // only emit packets that are complete. this is to avoid assembling
	        // incomplete PES packets due to poor segmentation
	        if (packetFlushable) {
	          self.trigger('data', event);
	        }
	      };

	      _ElementaryStream.prototype.init.call(this);

	      /**
	       * Identifies M2TS packet types and parses PES packets using metadata
	       * parsed from the PMT
	       **/
	      this.push = function (data) {
	        ({
	          pat: function pat() {
	            // we have to wait for the PMT to arrive as well before we
	            // have any meaningful metadata
	          },
	          pes: function pes() {
	            var stream$$1, streamType;

	            switch (data.streamType) {
	              case streamTypes.H264_STREAM_TYPE:
	              case streamTypes.H264_STREAM_TYPE:
	                stream$$1 = video;
	                streamType = 'video';
	                break;
	              case streamTypes.ADTS_STREAM_TYPE:
	                stream$$1 = audio;
	                streamType = 'audio';
	                break;
	              case streamTypes.METADATA_STREAM_TYPE:
	                stream$$1 = timedMetadata;
	                streamType = 'timed-metadata';
	                break;
	              default:
	                // ignore unknown stream types
	                return;
	            }

	            // if a new packet is starting, we can flush the completed
	            // packet
	            if (data.payloadUnitStartIndicator) {
	              flushStream(stream$$1, streamType, true);
	            }

	            // buffer this fragment until we are sure we've received the
	            // complete payload
	            stream$$1.data.push(data);
	            stream$$1.size += data.data.byteLength;
	          },
	          pmt: function pmt() {
	            var event = {
	              type: 'metadata',
	              tracks: []
	            },
	                programMapTable = data.programMapTable;

	            // translate audio and video streams to tracks
	            if (programMapTable.video !== null) {
	              event.tracks.push({
	                timelineStartInfo: {
	                  baseMediaDecodeTime: 0
	                },
	                id: +programMapTable.video,
	                codec: 'avc',
	                type: 'video'
	              });
	            }
	            if (programMapTable.audio !== null) {
	              event.tracks.push({
	                timelineStartInfo: {
	                  baseMediaDecodeTime: 0
	                },
	                id: +programMapTable.audio,
	                codec: 'adts',
	                type: 'audio'
	              });
	            }

	            self.trigger('data', event);
	          }
	        })[data.type]();
	      };

	      /**
	       * Flush any remaining input. Video PES packets may be of variable
	       * length. Normally, the start of a new video packet can trigger the
	       * finalization of the previous packet. That is not possible if no
	       * more video is forthcoming, however. In that case, some other
	       * mechanism (like the end of the file) has to be employed. When it is
	       * clear that no additional data is forthcoming, calling this method
	       * will flush the buffered packets.
	       */
	      this.flush = function () {
	        // !!THIS ORDER IS IMPORTANT!!
	        // video first then audio
	        flushStream(video, 'video');
	        flushStream(audio, 'audio');
	        flushStream(timedMetadata, 'timed-metadata');
	        this.trigger('done');
	      };
	    };
	    _ElementaryStream.prototype = new stream();

	    var m2ts = {
	      PAT_PID: 0x0000,
	      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,
	      TransportPacketStream: _TransportPacketStream,
	      TransportParseStream: _TransportParseStream,
	      ElementaryStream: _ElementaryStream,
	      TimestampRolloverStream: TimestampRolloverStream$1,
	      CaptionStream: captionStream.CaptionStream,
	      Cea608Stream: captionStream.Cea608Stream,
	      MetadataStream: metadataStream
	    };

	    for (var type in streamTypes) {
	      if (streamTypes.hasOwnProperty(type)) {
	        m2ts[type] = streamTypes[type];
	      }
	    }

	    var m2ts_1 = m2ts;

	    var _AdtsStream;

	    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];

	    /*
	     * Accepts a ElementaryStream and emits data events with parsed
	     * AAC Audio Frames of the individual packets. Input audio in ADTS
	     * format is unpacked and re-emitted as AAC frames.
	     *
	     * @see http://wiki.multimedia.cx/index.php?title=ADTS
	     * @see http://wiki.multimedia.cx/?title=Understanding_AAC
	     */
	    _AdtsStream = function AdtsStream() {
	      var buffer;

	      _AdtsStream.prototype.init.call(this);

	      this.push = function (packet) {
	        var i = 0,
	            frameNum = 0,
	            frameLength,
	            protectionSkipBytes,
	            frameEnd,
	            oldBuffer,
	            sampleCount,
	            adtsFrameDuration;

	        if (packet.type !== 'audio') {
	          // ignore non-audio data
	          return;
	        }

	        // Prepend any data in the buffer to the input data so that we can parse
	        // aac frames the cross a PES packet boundary
	        if (buffer) {
	          oldBuffer = buffer;
	          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);
	          buffer.set(oldBuffer);
	          buffer.set(packet.data, oldBuffer.byteLength);
	        } else {
	          buffer = packet.data;
	        }

	        // unpack any ADTS frames which have been fully received
	        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS
	        while (i + 5 < buffer.length) {

	          // Loook for the start of an ADTS header..
	          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {
	            // If a valid header was not found,  jump one forward and attempt to
	            // find a valid ADTS header starting at the next byte
	            i++;
	            continue;
	          }

	          // The protection skip bit tells us if we have 2 bytes of CRC data at the
	          // end of the ADTS header
	          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;

	          // Frame length is a 13 bit integer starting 16 bits from the
	          // end of the sync sequence
	          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;

	          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;
	          adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];

	          frameEnd = i + frameLength;

	          // If we don't have enough data to actually finish this ADTS frame, return
	          // and wait for more data
	          if (buffer.byteLength < frameEnd) {
	            return;
	          }

	          // Otherwise, deliver the complete AAC frame
	          this.trigger('data', {
	            pts: packet.pts + frameNum * adtsFrameDuration,
	            dts: packet.dts + frameNum * adtsFrameDuration,
	            sampleCount: sampleCount,
	            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,
	            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,
	            samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],
	            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,
	            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16
	            samplesize: 16,
	            data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)
	          });

	          // If the buffer is empty, clear it and return
	          if (buffer.byteLength === frameEnd) {
	            buffer = undefined;
	            return;
	          }

	          frameNum++;

	          // Remove the finished frame from the buffer and start the process again
	          buffer = buffer.subarray(frameEnd);
	        }
	      };
	      this.flush = function () {
	        this.trigger('done');
	      };
	    };

	    _AdtsStream.prototype = new stream();

	    var adts = _AdtsStream;

	    var ExpGolomb;

	    /**
	     * Parser for exponential Golomb codes, a variable-bitwidth number encoding
	     * scheme used by h264.
	     */
	    ExpGolomb = function ExpGolomb(workingData) {
	      var
	      // the number of bytes left to examine in workingData
	      workingBytesAvailable = workingData.byteLength,


	      // the current word being examined
	      workingWord = 0,

	      // :uint

	      // the number of bits left to examine in the current word
	      workingBitsAvailable = 0; // :uint;

	      // ():uint
	      this.length = function () {
	        return 8 * workingBytesAvailable;
	      };

	      // ():uint
	      this.bitsAvailable = function () {
	        return 8 * workingBytesAvailable + workingBitsAvailable;
	      };

	      // ():void
	      this.loadWord = function () {
	        var position = workingData.byteLength - workingBytesAvailable,
	            workingBytes = new Uint8Array(4),
	            availableBytes = Math.min(4, workingBytesAvailable);

	        if (availableBytes === 0) {
	          throw new Error('no bytes available');
	        }

	        workingBytes.set(workingData.subarray(position, position + availableBytes));
	        workingWord = new DataView(workingBytes.buffer).getUint32(0);

	        // track the amount of workingData that has been processed
	        workingBitsAvailable = availableBytes * 8;
	        workingBytesAvailable -= availableBytes;
	      };

	      // (count:int):void
	      this.skipBits = function (count) {
	        var skipBytes; // :int
	        if (workingBitsAvailable > count) {
	          workingWord <<= count;
	          workingBitsAvailable -= count;
	        } else {
	          count -= workingBitsAvailable;
	          skipBytes = Math.floor(count / 8);

	          count -= skipBytes * 8;
	          workingBytesAvailable -= skipBytes;

	          this.loadWord();

	          workingWord <<= count;
	          workingBitsAvailable -= count;
	        }
	      };

	      // (size:int):uint
	      this.readBits = function (size) {
	        var bits = Math.min(workingBitsAvailable, size),

	        // :uint
	        valu = workingWord >>> 32 - bits; // :uint
	        // if size > 31, handle error
	        workingBitsAvailable -= bits;
	        if (workingBitsAvailable > 0) {
	          workingWord <<= bits;
	        } else if (workingBytesAvailable > 0) {
	          this.loadWord();
	        }

	        bits = size - bits;
	        if (bits > 0) {
	          return valu << bits | this.readBits(bits);
	        }
	        return valu;
	      };

	      // ():uint
	      this.skipLeadingZeros = function () {
	        var leadingZeroCount; // :uint
	        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {
	          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {
	            // the first bit of working word is 1
	            workingWord <<= leadingZeroCount;
	            workingBitsAvailable -= leadingZeroCount;
	            return leadingZeroCount;
	          }
	        }

	        // we exhausted workingWord and still have not found a 1
	        this.loadWord();
	        return leadingZeroCount + this.skipLeadingZeros();
	      };

	      // ():void
	      this.skipUnsignedExpGolomb = function () {
	        this.skipBits(1 + this.skipLeadingZeros());
	      };

	      // ():void
	      this.skipExpGolomb = function () {
	        this.skipBits(1 + this.skipLeadingZeros());
	      };

	      // ():uint
	      this.readUnsignedExpGolomb = function () {
	        var clz = this.skipLeadingZeros(); // :uint
	        return this.readBits(clz + 1) - 1;
	      };

	      // ():int
	      this.readExpGolomb = function () {
	        var valu = this.readUnsignedExpGolomb(); // :int
	        if (0x01 & valu) {
	          // the number is odd if the low order bit is set
	          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
	        }
	        return -1 * (valu >>> 1); // divide by two then make it negative
	      };

	      // Some convenience functions
	      // :Boolean
	      this.readBoolean = function () {
	        return this.readBits(1) === 1;
	      };

	      // ():int
	      this.readUnsignedByte = function () {
	        return this.readBits(8);
	      };

	      this.loadWord();
	    };

	    var expGolomb = ExpGolomb;

	    var _H264Stream, _NalByteStream;
	    var PROFILES_WITH_OPTIONAL_SPS_DATA;

	    /**
	     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.
	     */
	    _NalByteStream = function NalByteStream() {
	      var syncPoint = 0,
	          i,
	          buffer;
	      _NalByteStream.prototype.init.call(this);

	      /*
	       * Scans a byte stream and triggers a data event with the NAL units found.
	       * @param {Object} data Event received from H264Stream
	       * @param {Uint8Array} data.data The h264 byte stream to be scanned
	       *
	       * @see H264Stream.push
	       */
	      this.push = function (data) {
	        var swapBuffer;

	        if (!buffer) {
	          buffer = data.data;
	        } else {
	          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);
	          swapBuffer.set(buffer);
	          swapBuffer.set(data.data, buffer.byteLength);
	          buffer = swapBuffer;
	        }

	        // Rec. ITU-T H.264, Annex B
	        // scan for NAL unit boundaries

	        // a match looks like this:
	        // 0 0 1 .. NAL .. 0 0 1
	        // ^ sync point        ^ i
	        // or this:
	        // 0 0 1 .. NAL .. 0 0 0
	        // ^ sync point        ^ i

	        // advance the sync point to a NAL start, if necessary
	        for (; syncPoint < buffer.byteLength - 3; syncPoint++) {
	          if (buffer[syncPoint + 2] === 1) {
	            // the sync point is properly aligned
	            i = syncPoint + 5;
	            break;
	          }
	        }

	        while (i < buffer.byteLength) {
	          // look at the current byte to determine if we've hit the end of
	          // a NAL unit boundary
	          switch (buffer[i]) {
	            case 0:
	              // skip past non-sync sequences
	              if (buffer[i - 1] !== 0) {
	                i += 2;
	                break;
	              } else if (buffer[i - 2] !== 0) {
	                i++;
	                break;
	              }

	              // deliver the NAL unit if it isn't empty
	              if (syncPoint + 3 !== i - 2) {
	                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));
	              }

	              // drop trailing zeroes
	              do {
	                i++;
	              } while (buffer[i] !== 1 && i < buffer.length);
	              syncPoint = i - 2;
	              i += 3;
	              break;
	            case 1:
	              // skip past non-sync sequences
	              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {
	                i += 3;
	                break;
	              }

	              // deliver the NAL unit
	              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));
	              syncPoint = i - 2;
	              i += 3;
	              break;
	            default:
	              // the current byte isn't a one or zero, so it cannot be part
	              // of a sync sequence
	              i += 3;
	              break;
	          }
	        }
	        // filter out the NAL units that were delivered
	        buffer = buffer.subarray(syncPoint);
	        i -= syncPoint;
	        syncPoint = 0;
	      };

	      this.flush = function () {
	        // deliver the last buffered NAL unit
	        if (buffer && buffer.byteLength > 3) {
	          this.trigger('data', buffer.subarray(syncPoint + 3));
	        }
	        // reset the stream state
	        buffer = null;
	        syncPoint = 0;
	        this.trigger('done');
	      };
	    };
	    _NalByteStream.prototype = new stream();

	    // values of profile_idc that indicate additional fields are included in the SPS
	    // see Recommendation ITU-T H.264 (4/2013),
	    // 7.3.2.1.1 Sequence parameter set data syntax
	    PROFILES_WITH_OPTIONAL_SPS_DATA = {
	      100: true,
	      110: true,
	      122: true,
	      244: true,
	      44: true,
	      83: true,
	      86: true,
	      118: true,
	      128: true,
	      138: true,
	      139: true,
	      134: true
	    };

	    /**
	     * Accepts input from a ElementaryStream and produces H.264 NAL unit data
	     * events.
	     */
	    _H264Stream = function H264Stream() {
	      var nalByteStream = new _NalByteStream(),
	          self,
	          trackId,
	          currentPts,
	          currentDts,
	          discardEmulationPreventionBytes,
	          readSequenceParameterSet,
	          skipScalingList;

	      _H264Stream.prototype.init.call(this);
	      self = this;

	      /*
	       * Pushes a packet from a stream onto the NalByteStream
	       *
	       * @param {Object} packet - A packet received from a stream
	       * @param {Uint8Array} packet.data - The raw bytes of the packet
	       * @param {Number} packet.dts - Decode timestamp of the packet
	       * @param {Number} packet.pts - Presentation timestamp of the packet
	       * @param {Number} packet.trackId - The id of the h264 track this packet came from
	       * @param {('video'|'audio')} packet.type - The type of packet
	       *
	       */
	      this.push = function (packet) {
	        if (packet.type !== 'video') {
	          return;
	        }
	        trackId = packet.trackId;
	        currentPts = packet.pts;
	        currentDts = packet.dts;

	        nalByteStream.push(packet);
	      };

	      /*
	       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps
	       * for the NALUs to the next stream component.
	       * Also, preprocess caption and sequence parameter NALUs.
	       *
	       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`
	       * @see NalByteStream.push
	       */
	      nalByteStream.on('data', function (data) {
	        var event = {
	          trackId: trackId,
	          pts: currentPts,
	          dts: currentDts,
	          data: data
	        };

	        switch (data[0] & 0x1f) {
	          case 0x05:
	            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';
	            break;
	          case 0x06:
	            event.nalUnitType = 'sei_rbsp';
	            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
	            break;
	          case 0x07:
	            event.nalUnitType = 'seq_parameter_set_rbsp';
	            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
	            event.config = readSequenceParameterSet(event.escapedRBSP);
	            break;
	          case 0x08:
	            event.nalUnitType = 'pic_parameter_set_rbsp';
	            break;
	          case 0x09:
	            event.nalUnitType = 'access_unit_delimiter_rbsp';
	            break;

	          default:
	            break;
	        }
	        // This triggers data on the H264Stream
	        self.trigger('data', event);
	      });
	      nalByteStream.on('done', function () {
	        self.trigger('done');
	      });

	      this.flush = function () {
	        nalByteStream.flush();
	      };

	      /**
	       * Advance the ExpGolomb decoder past a scaling list. The scaling
	       * list is optionally transmitted as part of a sequence parameter
	       * set and is not relevant to transmuxing.
	       * @param count {number} the number of entries in this scaling list
	       * @param expGolombDecoder {object} an ExpGolomb pointed to the
	       * start of a scaling list
	       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
	       */
	      skipScalingList = function skipScalingList(count, expGolombDecoder) {
	        var lastScale = 8,
	            nextScale = 8,
	            j,
	            deltaScale;

	        for (j = 0; j < count; j++) {
	          if (nextScale !== 0) {
	            deltaScale = expGolombDecoder.readExpGolomb();
	            nextScale = (lastScale + deltaScale + 256) % 256;
	          }

	          lastScale = nextScale === 0 ? lastScale : nextScale;
	        }
	      };

	      /**
	       * Expunge any "Emulation Prevention" bytes from a "Raw Byte
	       * Sequence Payload"
	       * @param data {Uint8Array} the bytes of a RBSP from a NAL
	       * unit
	       * @return {Uint8Array} the RBSP without any Emulation
	       * Prevention Bytes
	       */
	      discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {
	        var length = data.byteLength,
	            emulationPreventionBytesPositions = [],
	            i = 1,
	            newLength,
	            newData;

	        // Find all `Emulation Prevention Bytes`
	        while (i < length - 2) {
	          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
	            emulationPreventionBytesPositions.push(i + 2);
	            i += 2;
	          } else {
	            i++;
	          }
	        }

	        // If no Emulation Prevention Bytes were found just return the original
	        // array
	        if (emulationPreventionBytesPositions.length === 0) {
	          return data;
	        }

	        // Create a new array to hold the NAL unit data
	        newLength = length - emulationPreventionBytesPositions.length;
	        newData = new Uint8Array(newLength);
	        var sourceIndex = 0;

	        for (i = 0; i < newLength; sourceIndex++, i++) {
	          if (sourceIndex === emulationPreventionBytesPositions[0]) {
	            // Skip this byte
	            sourceIndex++;
	            // Remove this position index
	            emulationPreventionBytesPositions.shift();
	          }
	          newData[i] = data[sourceIndex];
	        }

	        return newData;
	      };

	      /**
	       * Read a sequence parameter set and return some interesting video
	       * properties. A sequence parameter set is the H264 metadata that
	       * describes the properties of upcoming video frames.
	       * @param data {Uint8Array} the bytes of a sequence parameter set
	       * @return {object} an object with configuration parsed from the
	       * sequence parameter set, including the dimensions of the
	       * associated video frames.
	       */
	      readSequenceParameterSet = function readSequenceParameterSet(data) {
	        var frameCropLeftOffset = 0,
	            frameCropRightOffset = 0,
	            frameCropTopOffset = 0,
	            frameCropBottomOffset = 0,
	            sarScale = 1,
	            expGolombDecoder,
	            profileIdc,
	            levelIdc,
	            profileCompatibility,
	            chromaFormatIdc,
	            picOrderCntType,
	            numRefFramesInPicOrderCntCycle,
	            picWidthInMbsMinus1,
	            picHeightInMapUnitsMinus1,
	            frameMbsOnlyFlag,
	            scalingListCount,
	            sarRatio,
	            aspectRatioIdc,
	            i;

	        expGolombDecoder = new expGolomb(data);
	        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc
	        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag
	        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)
	        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id

	        // some profiles have more optional data we don't need
	        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {
	          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();
	          if (chromaFormatIdc === 3) {
	            expGolombDecoder.skipBits(1); // separate_colour_plane_flag
	          }
	          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8
	          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8
	          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag
	          if (expGolombDecoder.readBoolean()) {
	            // seq_scaling_matrix_present_flag
	            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
	            for (i = 0; i < scalingListCount; i++) {
	              if (expGolombDecoder.readBoolean()) {
	                // seq_scaling_list_present_flag[ i ]
	                if (i < 6) {
	                  skipScalingList(16, expGolombDecoder);
	                } else {
	                  skipScalingList(64, expGolombDecoder);
	                }
	              }
	            }
	          }
	        }

	        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4
	        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();

	        if (picOrderCntType === 0) {
	          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4
	        } else if (picOrderCntType === 1) {
	          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag
	          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic
	          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field
	          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();
	          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
	            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]
	          }
	        }

	        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames
	        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag

	        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
	        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();

	        frameMbsOnlyFlag = expGolombDecoder.readBits(1);
	        if (frameMbsOnlyFlag === 0) {
	          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag
	        }

	        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag
	        if (expGolombDecoder.readBoolean()) {
	          // frame_cropping_flag
	          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();
	          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();
	          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();
	          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();
	        }
	        if (expGolombDecoder.readBoolean()) {
	          // vui_parameters_present_flag
	          if (expGolombDecoder.readBoolean()) {
	            // aspect_ratio_info_present_flag
	            aspectRatioIdc = expGolombDecoder.readUnsignedByte();
	            switch (aspectRatioIdc) {
	              case 1:
	                sarRatio = [1, 1];break;
	              case 2:
	                sarRatio = [12, 11];break;
	              case 3:
	                sarRatio = [10, 11];break;
	              case 4:
	                sarRatio = [16, 11];break;
	              case 5:
	                sarRatio = [40, 33];break;
	              case 6:
	                sarRatio = [24, 11];break;
	              case 7:
	                sarRatio = [20, 11];break;
	              case 8:
	                sarRatio = [32, 11];break;
	              case 9:
	                sarRatio = [80, 33];break;
	              case 10:
	                sarRatio = [18, 11];break;
	              case 11:
	                sarRatio = [15, 11];break;
	              case 12:
	                sarRatio = [64, 33];break;
	              case 13:
	                sarRatio = [160, 99];break;
	              case 14:
	                sarRatio = [4, 3];break;
	              case 15:
	                sarRatio = [3, 2];break;
	              case 16:
	                sarRatio = [2, 1];break;
	              case 255:
	                {
	                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];
	                  break;
	                }
	            }
	            if (sarRatio) {
	              sarScale = sarRatio[0] / sarRatio[1];
	            }
	          }
	        }
	        return {
	          profileIdc: profileIdc,
	          levelIdc: levelIdc,
	          profileCompatibility: profileCompatibility,
	          width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),
	          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2
	        };
	      };
	    };
	    _H264Stream.prototype = new stream();

	    var h264 = {
	      H264Stream: _H264Stream,
	      NalByteStream: _NalByteStream
	    };

	    /**
	     * mux.js
	     *
	     * Copyright (c) 2016 Brightcove
	     * All rights reserved.
	     *
	     * Utilities to detect basic properties and metadata about Aac data.
	     */

	    var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];

	    var isLikelyAacData = function isLikelyAacData(data) {
	      if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {
	        return true;
	      }
	      return false;
	    };

	    var parseSyncSafeInteger$1 = function parseSyncSafeInteger(data) {
	      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
	    };

	    // return a percent-encoded representation of the specified byte range
	    // @see http://en.wikipedia.org/wiki/Percent-encoding
	    var percentEncode$1 = function percentEncode(bytes, start, end) {
	      var i,
	          result = '';
	      for (i = start; i < end; i++) {
	        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);
	      }
	      return result;
	    };

	    // return the string representation of the specified byte range,
	    // interpreted as ISO-8859-1.
	    var parseIso88591$1 = function parseIso88591(bytes, start, end) {
	      return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line
	    };

	    var parseId3TagSize = function parseId3TagSize(header, byteIndex) {
	      var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],
	          flags = header[byteIndex + 5],
	          footerPresent = (flags & 16) >> 4;

	      if (footerPresent) {
	        return returnSize + 20;
	      }
	      return returnSize + 10;
	    };

	    var parseAdtsSize = function parseAdtsSize(header, byteIndex) {
	      var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,
	          middle = header[byteIndex + 4] << 3,
	          highTwo = header[byteIndex + 3] & 0x3 << 11;

	      return highTwo | middle | lowThree;
	    };

	    var parseType$1 = function parseType(header, byteIndex) {
	      if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {
	        return 'timed-metadata';
	      } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {
	        return 'audio';
	      }
	      return null;
	    };

	    var parseSampleRate = function parseSampleRate(packet) {
	      var i = 0;

	      while (i + 5 < packet.length) {
	        if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {
	          // If a valid header was not found,  jump one forward and attempt to
	          // find a valid ADTS header starting at the next byte
	          i++;
	          continue;
	        }
	        return ADTS_SAMPLING_FREQUENCIES$1[(packet[i + 2] & 0x3c) >>> 2];
	      }

	      return null;
	    };

	    var parseAacTimestamp = function parseAacTimestamp(packet) {
	      var frameStart, frameSize, frame, frameHeader;

	      // find the start of the first frame and the end of the tag
	      frameStart = 10;
	      if (packet[5] & 0x40) {
	        // advance the frame start past the extended header
	        frameStart += 4; // header size field
	        frameStart += parseSyncSafeInteger$1(packet.subarray(10, 14));
	      }

	      // parse one or more ID3 frames
	      // http://id3.org/id3v2.3.0#ID3v2_frame_overview
	      do {
	        // determine the number of bytes in this frame
	        frameSize = parseSyncSafeInteger$1(packet.subarray(frameStart + 4, frameStart + 8));
	        if (frameSize < 1) {
	          return null;
	        }
	        frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);

	        if (frameHeader === 'PRIV') {
	          frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);

	          for (var i = 0; i < frame.byteLength; i++) {
	            if (frame[i] === 0) {
	              var owner = parseIso88591$1(frame, 0, i);
	              if (owner === 'com.apple.streaming.transportStreamTimestamp') {
	                var d = frame.subarray(i + 1);
	                var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;
	                size *= 4;
	                size += d[7] & 0x03;

	                return size;
	              }
	              break;
	            }
	          }
	        }

	        frameStart += 10; // advance past the frame header
	        frameStart += frameSize; // advance past the frame body
	      } while (frameStart < packet.byteLength);
	      return null;
	    };

	    var utils = {
	      isLikelyAacData: isLikelyAacData,
	      parseId3TagSize: parseId3TagSize,
	      parseAdtsSize: parseAdtsSize,
	      parseType: parseType$1,
	      parseSampleRate: parseSampleRate,
	      parseAacTimestamp: parseAacTimestamp
	    };

	    // Constants
	    var _AacStream;

	    /**
	     * Splits an incoming stream of binary data into ADTS and ID3 Frames.
	     */

	    _AacStream = function AacStream() {
	      var everything = new Uint8Array(),
	          timeStamp = 0;

	      _AacStream.prototype.init.call(this);

	      this.setTimestamp = function (timestamp) {
	        timeStamp = timestamp;
	      };

	      this.push = function (bytes) {
	        var frameSize = 0,
	            byteIndex = 0,
	            bytesLeft,
	            chunk,
	            packet,
	            tempLength;

	        // If there are bytes remaining from the last segment, prepend them to the
	        // bytes that were pushed in
	        if (everything.length) {
	          tempLength = everything.length;
	          everything = new Uint8Array(bytes.byteLength + tempLength);
	          everything.set(everything.subarray(0, tempLength));
	          everything.set(bytes, tempLength);
	        } else {
	          everything = bytes;
	        }

	        while (everything.length - byteIndex >= 3) {
	          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {

	            // Exit early because we don't have enough to parse
	            // the ID3 tag header
	            if (everything.length - byteIndex < 10) {
	              break;
	            }

	            // check framesize
	            frameSize = utils.parseId3TagSize(everything, byteIndex);

	            // Exit early if we don't have enough in the buffer
	            // to emit a full packet
	            // Add to byteIndex to support multiple ID3 tags in sequence
	            if (byteIndex + frameSize > everything.length) {
	              break;
	            }
	            chunk = {
	              type: 'timed-metadata',
	              data: everything.subarray(byteIndex, byteIndex + frameSize)
	            };
	            this.trigger('data', chunk);
	            byteIndex += frameSize;
	            continue;
	          } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {

	            // Exit early because we don't have enough to parse
	            // the ADTS frame header
	            if (everything.length - byteIndex < 7) {
	              break;
	            }

	            frameSize = utils.parseAdtsSize(everything, byteIndex);

	            // Exit early if we don't have enough in the buffer
	            // to emit a full packet
	            if (byteIndex + frameSize > everything.length) {
	              break;
	            }

	            packet = {
	              type: 'audio',
	              data: everything.subarray(byteIndex, byteIndex + frameSize),
	              pts: timeStamp,
	              dts: timeStamp
	            };
	            this.trigger('data', packet);
	            byteIndex += frameSize;
	            continue;
	          }
	          byteIndex++;
	        }
	        bytesLeft = everything.length - byteIndex;

	        if (bytesLeft > 0) {
	          everything = everything.subarray(byteIndex);
	        } else {
	          everything = new Uint8Array();
	        }
	      };
	    };

	    _AacStream.prototype = new stream();

	    var aac = _AacStream;

	    var H264Stream = h264.H264Stream;

	    var isLikelyAacData$1 = utils.isLikelyAacData;

	    // constants
	    var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];

	    var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility'];

	    // object types
	    var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;

	    /**
	     * Compare two arrays (even typed) for same-ness
	     */
	    var arrayEquals = function arrayEquals(a, b) {
	      var i;

	      if (a.length !== b.length) {
	        return false;
	      }

	      // compare the value of each element in the array
	      for (i = 0; i < a.length; i++) {
	        if (a[i] !== b[i]) {
	          return false;
	        }
	      }

	      return true;
	    };

	    /**
	     * Constructs a single-track, ISO BMFF media segment from AAC data
	     * events. The output of this stream can be fed to a SourceBuffer
	     * configured with a suitable initialization segment.
	     * @param track {object} track metadata configuration
	     * @param options {object} transmuxer options object
	     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
	     *        in the source; false to adjust the first segment to start at 0.
	     */
	    _AudioSegmentStream = function AudioSegmentStream(track, options) {
	      var adtsFrames = [],
	          sequenceNumber = 0,
	          earliestAllowedDts = 0,
	          audioAppendStartTs = 0,
	          videoBaseMediaDecodeTime = Infinity;

	      options = options || {};

	      _AudioSegmentStream.prototype.init.call(this);

	      this.push = function (data) {
	        trackDecodeInfo.collectDtsInfo(track, data);

	        if (track) {
	          AUDIO_PROPERTIES.forEach(function (prop) {
	            track[prop] = data[prop];
	          });
	        }

	        // buffer audio data until end() is called
	        adtsFrames.push(data);
	      };

	      this.setEarliestDts = function (earliestDts) {
	        earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;
	      };

	      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {
	        videoBaseMediaDecodeTime = baseMediaDecodeTime;
	      };

	      this.setAudioAppendStart = function (timestamp) {
	        audioAppendStartTs = timestamp;
	      };

	      this.flush = function () {
	        var frames, moof, mdat, boxes;

	        // return early if no audio data has been observed
	        if (adtsFrames.length === 0) {
	          this.trigger('done', 'AudioSegmentStream');
	          return;
	        }

	        frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);
	        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);

	        audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime);

	        // we have to build the index from byte locations to
	        // samples (that is, adts frames) in the audio data
	        track.samples = audioFrameUtils.generateSampleTable(frames);

	        // concatenate the audio data to constuct the mdat
	        mdat = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));

	        adtsFrames = [];

	        moof = mp4Generator.moof(sequenceNumber, [track]);
	        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);

	        // bump the sequence number for next time
	        sequenceNumber++;

	        boxes.set(moof);
	        boxes.set(mdat, moof.byteLength);

	        trackDecodeInfo.clearDtsInfo(track);

	        this.trigger('data', { track: track, boxes: boxes });
	        this.trigger('done', 'AudioSegmentStream');
	      };
	    };

	    _AudioSegmentStream.prototype = new stream();

	    /**
	     * Constructs a single-track, ISO BMFF media segment from H264 data
	     * events. The output of this stream can be fed to a SourceBuffer
	     * configured with a suitable initialization segment.
	     * @param track {object} track metadata configuration
	     * @param options {object} transmuxer options object
	     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the
	     *        gopsToAlignWith list when attempting to align gop pts
	     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
	     *        in the source; false to adjust the first segment to start at 0.
	     */
	    _VideoSegmentStream = function VideoSegmentStream(track, options) {
	      var sequenceNumber = 0,
	          nalUnits = [],
	          gopsToAlignWith = [],
	          config,
	          pps;

	      options = options || {};

	      _VideoSegmentStream.prototype.init.call(this);

	      delete track.minPTS;

	      this.gopCache_ = [];

	      /**
	        * Constructs a ISO BMFF segment given H264 nalUnits
	        * @param {Object} nalUnit A data event representing a nalUnit
	        * @param {String} nalUnit.nalUnitType
	        * @param {Object} nalUnit.config Properties for a mp4 track
	        * @param {Uint8Array} nalUnit.data The nalUnit bytes
	        * @see lib/codecs/h264.js
	       **/
	      this.push = function (nalUnit) {
	        trackDecodeInfo.collectDtsInfo(track, nalUnit);

	        // record the track config
	        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {
	          config = nalUnit.config;
	          track.sps = [nalUnit.data];

	          VIDEO_PROPERTIES.forEach(function (prop) {
	            track[prop] = config[prop];
	          }, this);
	        }

	        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {
	          pps = nalUnit.data;
	          track.pps = [nalUnit.data];
	        }

	        // buffer video until flush() is called
	        nalUnits.push(nalUnit);
	      };

	      /**
	        * Pass constructed ISO BMFF track and boxes on to the
	        * next stream in the pipeline
	       **/
	      this.flush = function () {
	        var frames, gopForFusion, gops, moof, mdat, boxes;

	        // Throw away nalUnits at the start of the byte stream until
	        // we find the first AUD
	        while (nalUnits.length) {
	          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {
	            break;
	          }
	          nalUnits.shift();
	        }

	        // Return early if no video data has been observed
	        if (nalUnits.length === 0) {
	          this.resetStream_();
	          this.trigger('done', 'VideoSegmentStream');
	          return;
	        }

	        // Organize the raw nal-units into arrays that represent
	        // higher-level constructs such as frames and gops
	        // (group-of-pictures)
	        frames = frameUtils.groupNalsIntoFrames(nalUnits);
	        gops = frameUtils.groupFramesIntoGops(frames);

	        // If the first frame of this fragment is not a keyframe we have
	        // a problem since MSE (on Chrome) requires a leading keyframe.
	        //
	        // We have two approaches to repairing this situation:
	        // 1) GOP-FUSION:
	        //    This is where we keep track of the GOPS (group-of-pictures)
	        //    from previous fragments and attempt to find one that we can
	        //    prepend to the current fragment in order to create a valid
	        //    fragment.
	        // 2) KEYFRAME-PULLING:
	        //    Here we search for the first keyframe in the fragment and
	        //    throw away all the frames between the start of the fragment
	        //    and that keyframe. We then extend the duration and pull the
	        //    PTS of the keyframe forward so that it covers the time range
	        //    of the frames that were disposed of.
	        //
	        // #1 is far prefereable over #2 which can cause "stuttering" but
	        // requires more things to be just right.
	        if (!gops[0][0].keyFrame) {
	          // Search for a gop for fusion from our gopCache
	          gopForFusion = this.getGopForFusion_(nalUnits[0], track);

	          if (gopForFusion) {
	            gops.unshift(gopForFusion);
	            // Adjust Gops' metadata to account for the inclusion of the
	            // new gop at the beginning
	            gops.byteLength += gopForFusion.byteLength;
	            gops.nalCount += gopForFusion.nalCount;
	            gops.pts = gopForFusion.pts;
	            gops.dts = gopForFusion.dts;
	            gops.duration += gopForFusion.duration;
	          } else {
	            // If we didn't find a candidate gop fall back to keyframe-pulling
	            gops = frameUtils.extendFirstKeyFrame(gops);
	          }
	        }

	        // Trim gops to align with gopsToAlignWith
	        if (gopsToAlignWith.length) {
	          var alignedGops;

	          if (options.alignGopsAtEnd) {
	            alignedGops = this.alignGopsAtEnd_(gops);
	          } else {
	            alignedGops = this.alignGopsAtStart_(gops);
	          }

	          if (!alignedGops) {
	            // save all the nals in the last GOP into the gop cache
	            this.gopCache_.unshift({
	              gop: gops.pop(),
	              pps: track.pps,
	              sps: track.sps
	            });

	            // Keep a maximum of 6 GOPs in the cache
	            this.gopCache_.length = Math.min(6, this.gopCache_.length);

	            // Clear nalUnits
	            nalUnits = [];

	            // return early no gops can be aligned with desired gopsToAlignWith
	            this.resetStream_();
	            this.trigger('done', 'VideoSegmentStream');
	            return;
	          }

	          // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct
	          // when recalculated before sending off to CoalesceStream
	          trackDecodeInfo.clearDtsInfo(track);

	          gops = alignedGops;
	        }

	        trackDecodeInfo.collectDtsInfo(track, gops);

	        // First, we have to build the index from byte locations to
	        // samples (that is, frames) in the video data
	        track.samples = frameUtils.generateSampleTable(gops);

	        // Concatenate the video data and construct the mdat
	        mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));

	        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);

	        this.trigger('processedGopsInfo', gops.map(function (gop) {
	          return {
	            pts: gop.pts,
	            dts: gop.dts,
	            byteLength: gop.byteLength
	          };
	        }));

	        // save all the nals in the last GOP into the gop cache
	        this.gopCache_.unshift({
	          gop: gops.pop(),
	          pps: track.pps,
	          sps: track.sps
	        });

	        // Keep a maximum of 6 GOPs in the cache
	        this.gopCache_.length = Math.min(6, this.gopCache_.length);

	        // Clear nalUnits
	        nalUnits = [];

	        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);
	        this.trigger('timelineStartInfo', track.timelineStartInfo);

	        moof = mp4Generator.moof(sequenceNumber, [track]);

	        // it would be great to allocate this array up front instead of
	        // throwing away hundreds of media segment fragments
	        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);

	        // Bump the sequence number for next time
	        sequenceNumber++;

	        boxes.set(moof);
	        boxes.set(mdat, moof.byteLength);

	        this.trigger('data', { track: track, boxes: boxes });

	        this.resetStream_();

	        // Continue with the flush process now
	        this.trigger('done', 'VideoSegmentStream');
	      };

	      this.resetStream_ = function () {
	        trackDecodeInfo.clearDtsInfo(track);

	        // reset config and pps because they may differ across segments
	        // for instance, when we are rendition switching
	        config = undefined;
	        pps = undefined;
	      };

	      // Search for a candidate Gop for gop-fusion from the gop cache and
	      // return it or return null if no good candidate was found
	      this.getGopForFusion_ = function (nalUnit) {
	        var halfSecond = 45000,

	        // Half-a-second in a 90khz clock
	        allowableOverlap = 10000,

	        // About 3 frames @ 30fps
	        nearestDistance = Infinity,
	            dtsDistance,
	            nearestGopObj,
	            currentGop,
	            currentGopObj,
	            i;

	        // Search for the GOP nearest to the beginning of this nal unit
	        for (i = 0; i < this.gopCache_.length; i++) {
	          currentGopObj = this.gopCache_[i];
	          currentGop = currentGopObj.gop;

	          // Reject Gops with different SPS or PPS
	          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {
	            continue;
	          }

	          // Reject Gops that would require a negative baseMediaDecodeTime
	          if (currentGop.dts < track.timelineStartInfo.dts) {
	            continue;
	          }

	          // The distance between the end of the gop and the start of the nalUnit
	          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;

	          // Only consider GOPS that start before the nal unit and end within
	          // a half-second of the nal unit
	          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {

	            // Always use the closest GOP we found if there is more than
	            // one candidate
	            if (!nearestGopObj || nearestDistance > dtsDistance) {
	              nearestGopObj = currentGopObj;
	              nearestDistance = dtsDistance;
	            }
	          }
	        }

	        if (nearestGopObj) {
	          return nearestGopObj.gop;
	        }
	        return null;
	      };

	      // trim gop list to the first gop found that has a matching pts with a gop in the list
	      // of gopsToAlignWith starting from the START of the list
	      this.alignGopsAtStart_ = function (gops) {
	        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;

	        byteLength = gops.byteLength;
	        nalCount = gops.nalCount;
	        duration = gops.duration;
	        alignIndex = gopIndex = 0;

	        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {
	          align = gopsToAlignWith[alignIndex];
	          gop = gops[gopIndex];

	          if (align.pts === gop.pts) {
	            break;
	          }

	          if (gop.pts > align.pts) {
	            // this current gop starts after the current gop we want to align on, so increment
	            // align index
	            alignIndex++;
	            continue;
	          }

	          // current gop starts before the current gop we want to align on. so increment gop
	          // index
	          gopIndex++;
	          byteLength -= gop.byteLength;
	          nalCount -= gop.nalCount;
	          duration -= gop.duration;
	        }

	        if (gopIndex === 0) {
	          // no gops to trim
	          return gops;
	        }

	        if (gopIndex === gops.length) {
	          // all gops trimmed, skip appending all gops
	          return null;
	        }

	        alignedGops = gops.slice(gopIndex);
	        alignedGops.byteLength = byteLength;
	        alignedGops.duration = duration;
	        alignedGops.nalCount = nalCount;
	        alignedGops.pts = alignedGops[0].pts;
	        alignedGops.dts = alignedGops[0].dts;

	        return alignedGops;
	      };

	      // trim gop list to the first gop found that has a matching pts with a gop in the list
	      // of gopsToAlignWith starting from the END of the list
	      this.alignGopsAtEnd_ = function (gops) {
	        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;

	        alignIndex = gopsToAlignWith.length - 1;
	        gopIndex = gops.length - 1;
	        alignEndIndex = null;
	        matchFound = false;

	        while (alignIndex >= 0 && gopIndex >= 0) {
	          align = gopsToAlignWith[alignIndex];
	          gop = gops[gopIndex];

	          if (align.pts === gop.pts) {
	            matchFound = true;
	            break;
	          }

	          if (align.pts > gop.pts) {
	            alignIndex--;
	            continue;
	          }

	          if (alignIndex === gopsToAlignWith.length - 1) {
	            // gop.pts is greater than the last alignment candidate. If no match is found
	            // by the end of this loop, we still want to append gops that come after this
	            // point
	            alignEndIndex = gopIndex;
	          }

	          gopIndex--;
	        }

	        if (!matchFound && alignEndIndex === null) {
	          return null;
	        }

	        var trimIndex;

	        if (matchFound) {
	          trimIndex = gopIndex;
	        } else {
	          trimIndex = alignEndIndex;
	        }

	        if (trimIndex === 0) {
	          return gops;
	        }

	        var alignedGops = gops.slice(trimIndex);
	        var metadata = alignedGops.reduce(function (total, gop) {
	          total.byteLength += gop.byteLength;
	          total.duration += gop.duration;
	          total.nalCount += gop.nalCount;
	          return total;
	        }, { byteLength: 0, duration: 0, nalCount: 0 });

	        alignedGops.byteLength = metadata.byteLength;
	        alignedGops.duration = metadata.duration;
	        alignedGops.nalCount = metadata.nalCount;
	        alignedGops.pts = alignedGops[0].pts;
	        alignedGops.dts = alignedGops[0].dts;

	        return alignedGops;
	      };

	      this.alignGopsWith = function (newGopsToAlignWith) {
	        gopsToAlignWith = newGopsToAlignWith;
	      };
	    };

	    _VideoSegmentStream.prototype = new stream();

	    /**
	     * A Stream that can combine multiple streams (ie. audio & video)
	     * into a single output segment for MSE. Also supports audio-only
	     * and video-only streams.
	     * @param options {object} transmuxer options object
	     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
	     *        in the source; false to adjust the first segment to start at media timeline start.
	     */
	    _CoalesceStream = function CoalesceStream(options, metadataStream) {
	      // Number of Tracks per output segment
	      // If greater than 1, we combine multiple
	      // tracks into a single segment
	      this.numberOfTracks = 0;
	      this.metadataStream = metadataStream;

	      options = options || {};

	      if (typeof options.remux !== 'undefined') {
	        this.remuxTracks = !!options.remux;
	      } else {
	        this.remuxTracks = true;
	      }

	      if (typeof options.keepOriginalTimestamps === 'boolean') {
	        this.keepOriginalTimestamps = options.keepOriginalTimestamps;
	      }

	      this.pendingTracks = [];
	      this.videoTrack = null;
	      this.pendingBoxes = [];
	      this.pendingCaptions = [];
	      this.pendingMetadata = [];
	      this.pendingBytes = 0;
	      this.emittedTracks = 0;

	      _CoalesceStream.prototype.init.call(this);

	      // Take output from multiple
	      this.push = function (output) {
	        // buffer incoming captions until the associated video segment
	        // finishes
	        if (output.text) {
	          return this.pendingCaptions.push(output);
	        }
	        // buffer incoming id3 tags until the final flush
	        if (output.frames) {
	          return this.pendingMetadata.push(output);
	        }

	        // Add this track to the list of pending tracks and store
	        // important information required for the construction of
	        // the final segment
	        this.pendingTracks.push(output.track);
	        this.pendingBoxes.push(output.boxes);
	        this.pendingBytes += output.boxes.byteLength;

	        if (output.track.type === 'video') {
	          this.videoTrack = output.track;
	        }
	        if (output.track.type === 'audio') {
	          this.audioTrack = output.track;
	        }
	      };
	    };

	    _CoalesceStream.prototype = new stream();
	    _CoalesceStream.prototype.flush = function (flushSource) {
	      var offset = 0,
	          event = {
	        captions: [],
	        captionStreams: {},
	        metadata: [],
	        info: {}
	      },
	          caption,
	          id3,
	          initSegment,
	          timelineStartPts = 0,
	          i;

	      if (this.pendingTracks.length < this.numberOfTracks) {
	        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {
	          // Return because we haven't received a flush from a data-generating
	          // portion of the segment (meaning that we have only recieved meta-data
	          // or captions.)
	          return;
	        } else if (this.remuxTracks) {
	          // Return until we have enough tracks from the pipeline to remux (if we
	          // are remuxing audio and video into a single MP4)
	          return;
	        } else if (this.pendingTracks.length === 0) {
	          // In the case where we receive a flush without any data having been
	          // received we consider it an emitted track for the purposes of coalescing
	          // `done` events.
	          // We do this for the case where there is an audio and video track in the
	          // segment but no audio data. (seen in several playlists with alternate
	          // audio tracks and no audio present in the main TS segments.)
	          this.emittedTracks++;

	          if (this.emittedTracks >= this.numberOfTracks) {
	            this.trigger('done');
	            this.emittedTracks = 0;
	          }
	          return;
	        }
	      }

	      if (this.videoTrack) {
	        timelineStartPts = this.videoTrack.timelineStartInfo.pts;
	        VIDEO_PROPERTIES.forEach(function (prop) {
	          event.info[prop] = this.videoTrack[prop];
	        }, this);
	      } else if (this.audioTrack) {
	        timelineStartPts = this.audioTrack.timelineStartInfo.pts;
	        AUDIO_PROPERTIES.forEach(function (prop) {
	          event.info[prop] = this.audioTrack[prop];
	        }, this);
	      }

	      if (this.pendingTracks.length === 1) {
	        event.type = this.pendingTracks[0].type;
	      } else {
	        event.type = 'combined';
	      }

	      this.emittedTracks += this.pendingTracks.length;

	      initSegment = mp4Generator.initSegment(this.pendingTracks);

	      // Create a new typed array to hold the init segment
	      event.initSegment = new Uint8Array(initSegment.byteLength);

	      // Create an init segment containing a moov
	      // and track definitions
	      event.initSegment.set(initSegment);

	      // Create a new typed array to hold the moof+mdats
	      event.data = new Uint8Array(this.pendingBytes);

	      // Append each moof+mdat (one per track) together
	      for (i = 0; i < this.pendingBoxes.length; i++) {
	        event.data.set(this.pendingBoxes[i], offset);
	        offset += this.pendingBoxes[i].byteLength;
	      }

	      // Translate caption PTS times into second offsets to match the
	      // video timeline for the segment, and add track info
	      for (i = 0; i < this.pendingCaptions.length; i++) {
	        caption = this.pendingCaptions[i];

	        caption.startTime = caption.startPts;
	        if (!this.keepOriginalTimestamps) {
	          caption.startTime -= timelineStartPts;
	        }
	        caption.startTime /= 90e3;

	        caption.endTime = caption.endPts;
	        if (!this.keepOriginalTimestamps) {
	          caption.endTime -= timelineStartPts;
	        }
	        caption.endTime /= 90e3;

	        event.captionStreams[caption.stream] = true;
	        event.captions.push(caption);
	      }

	      // Translate ID3 frame PTS times into second offsets to match the
	      // video timeline for the segment
	      for (i = 0; i < this.pendingMetadata.length; i++) {
	        id3 = this.pendingMetadata[i];

	        id3.cueTime = id3.pts;
	        if (!this.keepOriginalTimestamps) {
	          id3.cueTime -= timelineStartPts;
	        }
	        id3.cueTime /= 90e3;

	        event.metadata.push(id3);
	      }

	      // We add this to every single emitted segment even though we only need
	      // it for the first
	      event.metadata.dispatchType = this.metadataStream.dispatchType;

	      // Reset stream state
	      this.pendingTracks.length = 0;
	      this.videoTrack = null;
	      this.pendingBoxes.length = 0;
	      this.pendingCaptions.length = 0;
	      this.pendingBytes = 0;
	      this.pendingMetadata.length = 0;

	      // Emit the built segment
	      this.trigger('data', event);

	      // Only emit `done` if all tracks have been flushed and emitted
	      if (this.emittedTracks >= this.numberOfTracks) {
	        this.trigger('done');
	        this.emittedTracks = 0;
	      }
	    };
	    /**
	     * A Stream that expects MP2T binary data as input and produces
	     * corresponding media segments, suitable for use with Media Source
	     * Extension (MSE) implementations that support the ISO BMFF byte
	     * stream format, like Chrome.
	     */
	    _Transmuxer = function Transmuxer(options) {
	      var self = this,
	          hasFlushed = true,
	          videoTrack,
	          audioTrack;

	      _Transmuxer.prototype.init.call(this);

	      options = options || {};
	      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
	      this.transmuxPipeline_ = {};

	      this.setupAacPipeline = function () {
	        var pipeline = {};
	        this.transmuxPipeline_ = pipeline;

	        pipeline.type = 'aac';
	        pipeline.metadataStream = new m2ts_1.MetadataStream();

	        // set up the parsing pipeline
	        pipeline.aacStream = new aac();
	        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');
	        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');
	        pipeline.adtsStream = new adts();
	        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
	        pipeline.headOfPipeline = pipeline.aacStream;

	        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);
	        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);

	        pipeline.metadataStream.on('timestamp', function (frame) {
	          pipeline.aacStream.setTimestamp(frame.timeStamp);
	        });

	        pipeline.aacStream.on('data', function (data) {
	          if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {
	            audioTrack = audioTrack || {
	              timelineStartInfo: {
	                baseMediaDecodeTime: self.baseMediaDecodeTime
	              },
	              codec: 'adts',
	              type: 'audio'
	            };
	            // hook up the audio segment stream to the first track with aac data
	            pipeline.coalesceStream.numberOfTracks++;
	            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);
	            // Set up the final part of the audio pipeline
	            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
	          }
	        });

	        // Re-emit any data coming from the coalesce stream to the outside world
	        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));
	        // Let the consumer know we have finished flushing the entire pipeline
	        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));
	      };

	      this.setupTsPipeline = function () {
	        var pipeline = {};
	        this.transmuxPipeline_ = pipeline;

	        pipeline.type = 'ts';
	        pipeline.metadataStream = new m2ts_1.MetadataStream();

	        // set up the parsing pipeline
	        pipeline.packetStream = new m2ts_1.TransportPacketStream();
	        pipeline.parseStream = new m2ts_1.TransportParseStream();
	        pipeline.elementaryStream = new m2ts_1.ElementaryStream();
	        pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');
	        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');
	        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');
	        pipeline.adtsStream = new adts();
	        pipeline.h264Stream = new H264Stream();
	        pipeline.captionStream = new m2ts_1.CaptionStream();
	        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
	        pipeline.headOfPipeline = pipeline.packetStream;

	        // disassemble MPEG2-TS packets into elementary streams
	        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream);

	        // !!THIS ORDER IS IMPORTANT!!
	        // demux the streams
	        pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);
	        pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);

	        pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);

	        // Hook up CEA-608/708 caption stream
	        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);

	        pipeline.elementaryStream.on('data', function (data) {
	          var i;

	          if (data.type === 'metadata') {
	            i = data.tracks.length;

	            // scan the tracks listed in the metadata
	            while (i--) {
	              if (!videoTrack && data.tracks[i].type === 'video') {
	                videoTrack = data.tracks[i];
	                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;
	              } else if (!audioTrack && data.tracks[i].type === 'audio') {
	                audioTrack = data.tracks[i];
	                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;
	              }
	            }

	            // hook up the video segment stream to the first track with h264 data
	            if (videoTrack && !pipeline.videoSegmentStream) {
	              pipeline.coalesceStream.numberOfTracks++;
	              pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);

	              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {
	                // When video emits timelineStartInfo data after a flush, we forward that
	                // info to the AudioSegmentStream, if it exists, because video timeline
	                // data takes precedence.
	                if (audioTrack) {
	                  audioTrack.timelineStartInfo = timelineStartInfo;
	                  // On the first segment we trim AAC frames that exist before the
	                  // very earliest DTS we have seen in video because Chrome will
	                  // interpret any video track with a baseMediaDecodeTime that is
	                  // non-zero as a gap.
	                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);
	                }
	              });

	              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));

	              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {
	                if (audioTrack) {
	                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);
	                }
	              });

	              // Set up the final part of the video pipeline
	              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);
	            }

	            if (audioTrack && !pipeline.audioSegmentStream) {
	              // hook up the audio segment stream to the first track with aac data
	              pipeline.coalesceStream.numberOfTracks++;
	              pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);

	              // Set up the final part of the audio pipeline
	              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
	            }
	          }
	        });

	        // Re-emit any data coming from the coalesce stream to the outside world
	        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));
	        // Let the consumer know we have finished flushing the entire pipeline
	        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));
	      };

	      // hook up the segment streams once track metadata is delivered
	      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {
	        var pipeline = this.transmuxPipeline_;

	        if (!options.keepOriginalTimestamps) {
	          this.baseMediaDecodeTime = baseMediaDecodeTime;
	        }

	        if (audioTrack) {
	          audioTrack.timelineStartInfo.dts = undefined;
	          audioTrack.timelineStartInfo.pts = undefined;
	          trackDecodeInfo.clearDtsInfo(audioTrack);
	          if (!options.keepOriginalTimestamps) {
	            audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;
	          }
	          if (pipeline.audioTimestampRolloverStream) {
	            pipeline.audioTimestampRolloverStream.discontinuity();
	          }
	        }
	        if (videoTrack) {
	          if (pipeline.videoSegmentStream) {
	            pipeline.videoSegmentStream.gopCache_ = [];
	            pipeline.videoTimestampRolloverStream.discontinuity();
	          }
	          videoTrack.timelineStartInfo.dts = undefined;
	          videoTrack.timelineStartInfo.pts = undefined;
	          trackDecodeInfo.clearDtsInfo(videoTrack);
	          pipeline.captionStream.reset();
	          if (!options.keepOriginalTimestamps) {
	            videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;
	          }
	        }

	        if (pipeline.timedMetadataTimestampRolloverStream) {
	          pipeline.timedMetadataTimestampRolloverStream.discontinuity();
	        }
	      };

	      this.setAudioAppendStart = function (timestamp) {
	        if (audioTrack) {
	          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);
	        }
	      };

	      this.alignGopsWith = function (gopsToAlignWith) {
	        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {
	          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);
	        }
	      };

	      // feed incoming data to the front of the parsing pipeline
	      this.push = function (data) {
	        if (hasFlushed) {
	          var isAac = isLikelyAacData$1(data);

	          if (isAac && this.transmuxPipeline_.type !== 'aac') {
	            this.setupAacPipeline();
	          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {
	            this.setupTsPipeline();
	          }
	          hasFlushed = false;
	        }
	        this.transmuxPipeline_.headOfPipeline.push(data);
	      };

	      // flush any buffered data
	      this.flush = function () {
	        hasFlushed = true;
	        // Start at the top of the pipeline and flush all pending work
	        this.transmuxPipeline_.headOfPipeline.flush();
	      };

	      // Caption data has to be reset when seeking outside buffered range
	      this.resetCaptions = function () {
	        if (this.transmuxPipeline_.captionStream) {
	          this.transmuxPipeline_.captionStream.reset();
	        }
	      };
	    };
	    _Transmuxer.prototype = new stream();

	    var transmuxer = {
	      Transmuxer: _Transmuxer,
	      VideoSegmentStream: _VideoSegmentStream,
	      AudioSegmentStream: _AudioSegmentStream,
	      AUDIO_PROPERTIES: AUDIO_PROPERTIES,
	      VIDEO_PROPERTIES: VIDEO_PROPERTIES
	    };

	    var inspectMp4,
	        _textifyMp,
	        parseType$2 = probe.parseType,
	        parseMp4Date = function parseMp4Date(seconds) {
	      return new Date(seconds * 1000 - 2082844800000);
	    },
	        parseSampleFlags = function parseSampleFlags(flags) {
	      return {
	        isLeading: (flags[0] & 0x0c) >>> 2,
	        dependsOn: flags[0] & 0x03,
	        isDependedOn: (flags[1] & 0xc0) >>> 6,
	        hasRedundancy: (flags[1] & 0x30) >>> 4,
	        paddingValue: (flags[1] & 0x0e) >>> 1,
	        isNonSyncSample: flags[1] & 0x01,
	        degradationPriority: flags[2] << 8 | flags[3]
	      };
	    },
	        nalParse = function nalParse(avcStream) {
	      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),
	          result = [],
	          i,
	          length;
	      for (i = 0; i + 4 < avcStream.length; i += length) {
	        length = avcView.getUint32(i);
	        i += 4;

	        // bail if this doesn't appear to be an H264 stream
	        if (length <= 0) {
	          result.push('<span style=\'color:red;\'>MALFORMED DATA</span>');
	          continue;
	        }

	        switch (avcStream[i] & 0x1F) {
	          case 0x01:
	            result.push('slice_layer_without_partitioning_rbsp');
	            break;
	          case 0x05:
	            result.push('slice_layer_without_partitioning_rbsp_idr');
	            break;
	          case 0x06:
	            result.push('sei_rbsp');
	            break;
	          case 0x07:
	            result.push('seq_parameter_set_rbsp');
	            break;
	          case 0x08:
	            result.push('pic_parameter_set_rbsp');
	            break;
	          case 0x09:
	            result.push('access_unit_delimiter_rbsp');
	            break;
	          default:
	            result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);
	            break;
	        }
	      }
	      return result;
	    },


	    // registry of handlers for individual mp4 box types
	    parse = {
	      // codingname, not a first-class box type. stsd entries share the
	      // same format as real boxes so the parsing infrastructure can be
	      // shared
	      avc1: function avc1(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	        return {
	          dataReferenceIndex: view.getUint16(6),
	          width: view.getUint16(24),
	          height: view.getUint16(26),
	          horizresolution: view.getUint16(28) + view.getUint16(30) / 16,
	          vertresolution: view.getUint16(32) + view.getUint16(34) / 16,
	          frameCount: view.getUint16(40),
	          depth: view.getUint16(74),
	          config: inspectMp4(data.subarray(78, data.byteLength))
	        };
	      },
	      avcC: function avcC(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          configurationVersion: data[0],
	          avcProfileIndication: data[1],
	          profileCompatibility: data[2],
	          avcLevelIndication: data[3],
	          lengthSizeMinusOne: data[4] & 0x03,
	          sps: [],
	          pps: []
	        },
	            numOfSequenceParameterSets = data[5] & 0x1f,
	            numOfPictureParameterSets,
	            nalSize,
	            offset,
	            i;

	        // iterate past any SPSs
	        offset = 6;
	        for (i = 0; i < numOfSequenceParameterSets; i++) {
	          nalSize = view.getUint16(offset);
	          offset += 2;
	          result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
	          offset += nalSize;
	        }
	        // iterate past any PPSs
	        numOfPictureParameterSets = data[offset];
	        offset++;
	        for (i = 0; i < numOfPictureParameterSets; i++) {
	          nalSize = view.getUint16(offset);
	          offset += 2;
	          result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
	          offset += nalSize;
	        }
	        return result;
	      },
	      btrt: function btrt(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	        return {
	          bufferSizeDB: view.getUint32(0),
	          maxBitrate: view.getUint32(4),
	          avgBitrate: view.getUint32(8)
	        };
	      },
	      esds: function esds(data) {
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          esId: data[6] << 8 | data[7],
	          streamPriority: data[8] & 0x1f,
	          decoderConfig: {
	            objectProfileIndication: data[11],
	            streamType: data[12] >>> 2 & 0x3f,
	            bufferSize: data[13] << 16 | data[14] << 8 | data[15],
	            maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],
	            avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],
	            decoderConfigDescriptor: {
	              tag: data[24],
	              length: data[25],
	              audioObjectType: data[26] >>> 3 & 0x1f,
	              samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,
	              channelConfiguration: data[27] >>> 3 & 0x0f
	            }
	          }
	        };
	      },
	      ftyp: function ftyp(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          majorBrand: parseType$2(data.subarray(0, 4)),
	          minorVersion: view.getUint32(4),
	          compatibleBrands: []
	        },
	            i = 8;
	        while (i < data.byteLength) {
	          result.compatibleBrands.push(parseType$2(data.subarray(i, i + 4)));
	          i += 4;
	        }
	        return result;
	      },
	      dinf: function dinf(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      dref: function dref(data) {
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          dataReferences: inspectMp4(data.subarray(8))
	        };
	      },
	      hdlr: function hdlr(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          version: view.getUint8(0),
	          flags: new Uint8Array(data.subarray(1, 4)),
	          handlerType: parseType$2(data.subarray(8, 12)),
	          name: ''
	        },
	            i = 8;

	        // parse out the name field
	        for (i = 24; i < data.byteLength; i++) {
	          if (data[i] === 0x00) {
	            // the name field is null-terminated
	            i++;
	            break;
	          }
	          result.name += String.fromCharCode(data[i]);
	        }
	        // decode UTF-8 to javascript's internal representation
	        // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html
	        result.name = decodeURIComponent(escape(result.name));

	        return result;
	      },
	      mdat: function mdat(data) {
	        return {
	          byteLength: data.byteLength,
	          nals: nalParse(data)
	        };
	      },
	      mdhd: function mdhd(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            i = 4,
	            language,
	            result = {
	          version: view.getUint8(0),
	          flags: new Uint8Array(data.subarray(1, 4)),
	          language: ''
	        };
	        if (result.version === 1) {
	          i += 4;
	          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	          i += 8;
	          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	          i += 4;
	          result.timescale = view.getUint32(i);
	          i += 8;
	          result.duration = view.getUint32(i); // truncating top 4 bytes
	        } else {
	          result.creationTime = parseMp4Date(view.getUint32(i));
	          i += 4;
	          result.modificationTime = parseMp4Date(view.getUint32(i));
	          i += 4;
	          result.timescale = view.getUint32(i);
	          i += 4;
	          result.duration = view.getUint32(i);
	        }
	        i += 4;
	        // language is stored as an ISO-639-2/T code in an array of three 5-bit fields
	        // each field is the packed difference between its ASCII value and 0x60
	        language = view.getUint16(i);
	        result.language += String.fromCharCode((language >> 10) + 0x60);
	        result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);
	        result.language += String.fromCharCode((language & 0x1f) + 0x60);

	        return result;
	      },
	      mdia: function mdia(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      mfhd: function mfhd(data) {
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]
	        };
	      },
	      minf: function minf(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      // codingname, not a first-class box type. stsd entries share the
	      // same format as real boxes so the parsing infrastructure can be
	      // shared
	      mp4a: function mp4a(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          // 6 bytes reserved
	          dataReferenceIndex: view.getUint16(6),
	          // 4 + 4 bytes reserved
	          channelcount: view.getUint16(16),
	          samplesize: view.getUint16(18),
	          // 2 bytes pre_defined
	          // 2 bytes reserved
	          samplerate: view.getUint16(24) + view.getUint16(26) / 65536
	        };

	        // if there are more bytes to process, assume this is an ISO/IEC
	        // 14496-14 MP4AudioSampleEntry and parse the ESDBox
	        if (data.byteLength > 28) {
	          result.streamDescriptor = inspectMp4(data.subarray(28))[0];
	        }
	        return result;
	      },
	      moof: function moof(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      moov: function moov(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      mvex: function mvex(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      mvhd: function mvhd(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            i = 4,
	            result = {
	          version: view.getUint8(0),
	          flags: new Uint8Array(data.subarray(1, 4))
	        };

	        if (result.version === 1) {
	          i += 4;
	          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	          i += 8;
	          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	          i += 4;
	          result.timescale = view.getUint32(i);
	          i += 8;
	          result.duration = view.getUint32(i); // truncating top 4 bytes
	        } else {
	          result.creationTime = parseMp4Date(view.getUint32(i));
	          i += 4;
	          result.modificationTime = parseMp4Date(view.getUint32(i));
	          i += 4;
	          result.timescale = view.getUint32(i);
	          i += 4;
	          result.duration = view.getUint32(i);
	        }
	        i += 4;

	        // convert fixed-point, base 16 back to a number
	        result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;
	        i += 4;
	        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
	        i += 2;
	        i += 2;
	        i += 2 * 4;
	        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
	        i += 9 * 4;
	        i += 6 * 4;
	        result.nextTrackId = view.getUint32(i);
	        return result;
	      },
	      pdin: function pdin(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	        return {
	          version: view.getUint8(0),
	          flags: new Uint8Array(data.subarray(1, 4)),
	          rate: view.getUint32(4),
	          initialDelay: view.getUint32(8)
	        };
	      },
	      sdtp: function sdtp(data) {
	        var result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          samples: []
	        },
	            i;

	        for (i = 4; i < data.byteLength; i++) {
	          result.samples.push({
	            dependsOn: (data[i] & 0x30) >> 4,
	            isDependedOn: (data[i] & 0x0c) >> 2,
	            hasRedundancy: data[i] & 0x03
	          });
	        }
	        return result;
	      },
	      sidx: function sidx(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          references: [],
	          referenceId: view.getUint32(4),
	          timescale: view.getUint32(8),
	          earliestPresentationTime: view.getUint32(12),
	          firstOffset: view.getUint32(16)
	        },
	            referenceCount = view.getUint16(22),
	            i;

	        for (i = 24; referenceCount; i += 12, referenceCount--) {
	          result.references.push({
	            referenceType: (data[i] & 0x80) >>> 7,
	            referencedSize: view.getUint32(i) & 0x7FFFFFFF,
	            subsegmentDuration: view.getUint32(i + 4),
	            startsWithSap: !!(data[i + 8] & 0x80),
	            sapType: (data[i + 8] & 0x70) >>> 4,
	            sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF
	          });
	        }

	        return result;
	      },
	      smhd: function smhd(data) {
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          balance: data[4] + data[5] / 256
	        };
	      },
	      stbl: function stbl(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      stco: function stco(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          chunkOffsets: []
	        },
	            entryCount = view.getUint32(4),
	            i;
	        for (i = 8; entryCount; i += 4, entryCount--) {
	          result.chunkOffsets.push(view.getUint32(i));
	        }
	        return result;
	      },
	      stsc: function stsc(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            entryCount = view.getUint32(4),
	            result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          sampleToChunks: []
	        },
	            i;
	        for (i = 8; entryCount; i += 12, entryCount--) {
	          result.sampleToChunks.push({
	            firstChunk: view.getUint32(i),
	            samplesPerChunk: view.getUint32(i + 4),
	            sampleDescriptionIndex: view.getUint32(i + 8)
	          });
	        }
	        return result;
	      },
	      stsd: function stsd(data) {
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          sampleDescriptions: inspectMp4(data.subarray(8))
	        };
	      },
	      stsz: function stsz(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          sampleSize: view.getUint32(4),
	          entries: []
	        },
	            i;
	        for (i = 12; i < data.byteLength; i += 4) {
	          result.entries.push(view.getUint32(i));
	        }
	        return result;
	      },
	      stts: function stts(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          timeToSamples: []
	        },
	            entryCount = view.getUint32(4),
	            i;

	        for (i = 8; entryCount; i += 8, entryCount--) {
	          result.timeToSamples.push({
	            sampleCount: view.getUint32(i),
	            sampleDelta: view.getUint32(i + 4)
	          });
	        }
	        return result;
	      },
	      styp: function styp(data) {
	        return parse.ftyp(data);
	      },
	      tfdt: function tfdt(data) {
	        var result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]
	        };
	        if (result.version === 1) {
	          result.baseMediaDecodeTime *= Math.pow(2, 32);
	          result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];
	        }
	        return result;
	      },
	      tfhd: function tfhd(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          trackId: view.getUint32(4)
	        },
	            baseDataOffsetPresent = result.flags[2] & 0x01,
	            sampleDescriptionIndexPresent = result.flags[2] & 0x02,
	            defaultSampleDurationPresent = result.flags[2] & 0x08,
	            defaultSampleSizePresent = result.flags[2] & 0x10,
	            defaultSampleFlagsPresent = result.flags[2] & 0x20,
	            durationIsEmpty = result.flags[0] & 0x010000,
	            defaultBaseIsMoof = result.flags[0] & 0x020000,
	            i;

	        i = 8;
	        if (baseDataOffsetPresent) {
	          i += 4; // truncate top 4 bytes
	          // FIXME: should we read the full 64 bits?
	          result.baseDataOffset = view.getUint32(12);
	          i += 4;
	        }
	        if (sampleDescriptionIndexPresent) {
	          result.sampleDescriptionIndex = view.getUint32(i);
	          i += 4;
	        }
	        if (defaultSampleDurationPresent) {
	          result.defaultSampleDuration = view.getUint32(i);
	          i += 4;
	        }
	        if (defaultSampleSizePresent) {
	          result.defaultSampleSize = view.getUint32(i);
	          i += 4;
	        }
	        if (defaultSampleFlagsPresent) {
	          result.defaultSampleFlags = view.getUint32(i);
	        }
	        if (durationIsEmpty) {
	          result.durationIsEmpty = true;
	        }
	        if (!baseDataOffsetPresent && defaultBaseIsMoof) {
	          result.baseDataOffsetIsMoof = true;
	        }
	        return result;
	      },
	      tkhd: function tkhd(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	            i = 4,
	            result = {
	          version: view.getUint8(0),
	          flags: new Uint8Array(data.subarray(1, 4))
	        };
	        if (result.version === 1) {
	          i += 4;
	          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	          i += 8;
	          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	          i += 4;
	          result.trackId = view.getUint32(i);
	          i += 4;
	          i += 8;
	          result.duration = view.getUint32(i); // truncating top 4 bytes
	        } else {
	          result.creationTime = parseMp4Date(view.getUint32(i));
	          i += 4;
	          result.modificationTime = parseMp4Date(view.getUint32(i));
	          i += 4;
	          result.trackId = view.getUint32(i);
	          i += 4;
	          i += 4;
	          result.duration = view.getUint32(i);
	        }
	        i += 4;
	        i += 2 * 4;
	        result.layer = view.getUint16(i);
	        i += 2;
	        result.alternateGroup = view.getUint16(i);
	        i += 2;
	        // convert fixed-point, base 16 back to a number
	        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
	        i += 2;
	        i += 2;
	        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
	        i += 9 * 4;
	        result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;
	        i += 4;
	        result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;
	        return result;
	      },
	      traf: function traf(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      trak: function trak(data) {
	        return {
	          boxes: inspectMp4(data)
	        };
	      },
	      trex: function trex(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          trackId: view.getUint32(4),
	          defaultSampleDescriptionIndex: view.getUint32(8),
	          defaultSampleDuration: view.getUint32(12),
	          defaultSampleSize: view.getUint32(16),
	          sampleDependsOn: data[20] & 0x03,
	          sampleIsDependedOn: (data[21] & 0xc0) >> 6,
	          sampleHasRedundancy: (data[21] & 0x30) >> 4,
	          samplePaddingValue: (data[21] & 0x0e) >> 1,
	          sampleIsDifferenceSample: !!(data[21] & 0x01),
	          sampleDegradationPriority: view.getUint16(22)
	        };
	      },
	      trun: function trun(data) {
	        var result = {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          samples: []
	        },
	            view = new DataView(data.buffer, data.byteOffset, data.byteLength),


	        // Flag interpretation
	        dataOffsetPresent = result.flags[2] & 0x01,

	        // compare with 2nd byte of 0x1
	        firstSampleFlagsPresent = result.flags[2] & 0x04,

	        // compare with 2nd byte of 0x4
	        sampleDurationPresent = result.flags[1] & 0x01,

	        // compare with 2nd byte of 0x100
	        sampleSizePresent = result.flags[1] & 0x02,

	        // compare with 2nd byte of 0x200
	        sampleFlagsPresent = result.flags[1] & 0x04,

	        // compare with 2nd byte of 0x400
	        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,

	        // compare with 2nd byte of 0x800
	        sampleCount = view.getUint32(4),
	            offset = 8,
	            sample;

	        if (dataOffsetPresent) {
	          // 32 bit signed integer
	          result.dataOffset = view.getInt32(offset);
	          offset += 4;
	        }

	        // Overrides the flags for the first sample only. The order of
	        // optional values will be: duration, size, compositionTimeOffset
	        if (firstSampleFlagsPresent && sampleCount) {
	          sample = {
	            flags: parseSampleFlags(data.subarray(offset, offset + 4))
	          };
	          offset += 4;
	          if (sampleDurationPresent) {
	            sample.duration = view.getUint32(offset);
	            offset += 4;
	          }
	          if (sampleSizePresent) {
	            sample.size = view.getUint32(offset);
	            offset += 4;
	          }
	          if (sampleCompositionTimeOffsetPresent) {
	            // Note: this should be a signed int if version is 1
	            sample.compositionTimeOffset = view.getUint32(offset);
	            offset += 4;
	          }
	          result.samples.push(sample);
	          sampleCount--;
	        }

	        while (sampleCount--) {
	          sample = {};
	          if (sampleDurationPresent) {
	            sample.duration = view.getUint32(offset);
	            offset += 4;
	          }
	          if (sampleSizePresent) {
	            sample.size = view.getUint32(offset);
	            offset += 4;
	          }
	          if (sampleFlagsPresent) {
	            sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));
	            offset += 4;
	          }
	          if (sampleCompositionTimeOffsetPresent) {
	            // Note: this should be a signed int if version is 1
	            sample.compositionTimeOffset = view.getUint32(offset);
	            offset += 4;
	          }
	          result.samples.push(sample);
	        }
	        return result;
	      },
	      'url ': function url(data) {
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4))
	        };
	      },
	      vmhd: function vmhd(data) {
	        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	        return {
	          version: data[0],
	          flags: new Uint8Array(data.subarray(1, 4)),
	          graphicsmode: view.getUint16(4),
	          opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])
	        };
	      }
	    };

	    /**
	     * Return a javascript array of box objects parsed from an ISO base
	     * media file.
	     * @param data {Uint8Array} the binary data of the media to be inspected
	     * @return {array} a javascript array of potentially nested box objects
	     */
	    inspectMp4 = function inspectMp4(data) {
	      var i = 0,
	          result = [],
	          view,
	          size,
	          type,
	          end,
	          box;

	      // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API
	      var ab = new ArrayBuffer(data.length);
	      var v = new Uint8Array(ab);
	      for (var z = 0; z < data.length; ++z) {
	        v[z] = data[z];
	      }
	      view = new DataView(ab);

	      while (i < data.byteLength) {
	        // parse box data
	        size = view.getUint32(i);
	        type = parseType$2(data.subarray(i + 4, i + 8));
	        end = size > 1 ? i + size : data.byteLength;

	        // parse type-specific data
	        box = (parse[type] || function (data) {
	          return {
	            data: data
	          };
	        })(data.subarray(i + 8, end));
	        box.size = size;
	        box.type = type;

	        // store this box and move to the next
	        result.push(box);
	        i = end;
	      }
	      return result;
	    };

	    /**
	     * Returns a textual representation of the javascript represtentation
	     * of an MP4 file. You can use it as an alternative to
	     * JSON.stringify() to compare inspected MP4s.
	     * @param inspectedMp4 {array} the parsed array of boxes in an MP4
	     * file
	     * @param depth {number} (optional) the number of ancestor boxes of
	     * the elements of inspectedMp4. Assumed to be zero if unspecified.
	     * @return {string} a text representation of the parsed MP4
	     */
	    _textifyMp = function textifyMp4(inspectedMp4, depth) {
	      var indent;
	      depth = depth || 0;
	      indent = new Array(depth * 2 + 1).join(' ');

	      // iterate over all the boxes
	      return inspectedMp4.map(function (box, index) {

	        // list the box type first at the current indentation level
	        return indent + box.type + '\n' +

	        // the type is already included and handle child boxes separately
	        Object.keys(box).filter(function (key) {
	          return key !== 'type' && key !== 'boxes';

	          // output all the box properties
	        }).map(function (key) {
	          var prefix = indent + '  ' + key + ': ',
	              value = box[key];

	          // print out raw bytes as hexademical
	          if (value instanceof Uint8Array || value instanceof Uint32Array) {
	            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {
	              return ' ' + ('00' + byte.toString(16)).slice(-2);
	            }).join('').match(/.{1,24}/g);
	            if (!bytes) {
	              return prefix + '<>';
	            }
	            if (bytes.length === 1) {
	              return prefix + '<' + bytes.join('').slice(1) + '>';
	            }
	            return prefix + '<\n' + bytes.map(function (line) {
	              return indent + '  ' + line;
	            }).join('\n') + '\n' + indent + '  >';
	          }

	          // stringify generic objects
	          return prefix + JSON.stringify(value, null, 2).split('\n').map(function (line, index) {
	            if (index === 0) {
	              return line;
	            }
	            return indent + '  ' + line;
	          }).join('\n');
	        }).join('\n') + (

	        // recursively textify the child boxes
	        box.boxes ? '\n' + _textifyMp(box.boxes, depth + 1) : '');
	      }).join('\n');
	    };

	    var mp4Inspector = {
	      inspect: inspectMp4,
	      textify: _textifyMp,
	      parseTfdt: parse.tfdt,
	      parseHdlr: parse.hdlr,
	      parseTfhd: parse.tfhd,
	      parseTrun: parse.trun
	    };

	    var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;
	    var CaptionStream$1 = captionStream.CaptionStream;

	    /**
	      * Maps an offset in the mdat to a sample based on the the size of the samples.
	      * Assumes that `parseSamples` has been called first.
	      *
	      * @param {Number} offset - The offset into the mdat
	      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`
	      * @return {?Object} The matching sample, or null if no match was found.
	      *
	      * @see ISO-BMFF-12/2015, Section 8.8.8
	     **/
	    var mapToSample = function mapToSample(offset, samples) {
	      var approximateOffset = offset;

	      for (var i = 0; i < samples.length; i++) {
	        var sample = samples[i];

	        if (approximateOffset < sample.size) {
	          return sample;
	        }

	        approximateOffset -= sample.size;
	      }

	      return null;
	    };

	    /**
	      * Finds SEI nal units contained in a Media Data Box.
	      * Assumes that `parseSamples` has been called first.
	      *
	      * @param {Uint8Array} avcStream - The bytes of the mdat
	      * @param {Object[]} samples - The samples parsed out by `parseSamples`
	      * @param {Number} trackId - The trackId of this video track
	      * @return {Object[]} seiNals - the parsed SEI NALUs found.
	      *   The contents of the seiNal should match what is expected by
	      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)
	      *
	      * @see ISO-BMFF-12/2015, Section 8.1.1
	      * @see Rec. ITU-T H.264, 7.3.2.3.1
	     **/
	    var findSeiNals = function findSeiNals(avcStream, samples, trackId) {
	      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),
	          result = [],
	          seiNal,
	          i,
	          length,
	          lastMatchedSample;

	      for (i = 0; i + 4 < avcStream.length; i += length) {
	        length = avcView.getUint32(i);
	        i += 4;

	        // Bail if this doesn't appear to be an H264 stream
	        if (length <= 0) {
	          continue;
	        }

	        switch (avcStream[i] & 0x1F) {
	          case 0x06:
	            var data = avcStream.subarray(i + 1, i + 1 + length);
	            var matchingSample = mapToSample(i, samples);

	            seiNal = {
	              nalUnitType: 'sei_rbsp',
	              size: length,
	              data: data,
	              escapedRBSP: discardEmulationPreventionBytes$1(data),
	              trackId: trackId
	            };

	            if (matchingSample) {
	              seiNal.pts = matchingSample.pts;
	              seiNal.dts = matchingSample.dts;
	              lastMatchedSample = matchingSample;
	            } else {
	              // If a matching sample cannot be found, use the last
	              // sample's values as they should be as close as possible
	              seiNal.pts = lastMatchedSample.pts;
	              seiNal.dts = lastMatchedSample.dts;
	            }

	            result.push(seiNal);
	            break;
	          default:
	            break;
	        }
	      }

	      return result;
	    };

	    /**
	      * Parses sample information out of Track Run Boxes and calculates
	      * the absolute presentation and decode timestamps of each sample.
	      *
	      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed
	      * @param {Number} baseMediaDecodeTime - base media decode time from tfdt
	          @see ISO-BMFF-12/2015, Section 8.8.12
	      * @param {Object} tfhd - The parsed Track Fragment Header
	      *   @see inspect.parseTfhd
	      * @return {Object[]} the parsed samples
	      *
	      * @see ISO-BMFF-12/2015, Section 8.8.8
	     **/
	    var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {
	      var currentDts = baseMediaDecodeTime;
	      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;
	      var defaultSampleSize = tfhd.defaultSampleSize || 0;
	      var trackId = tfhd.trackId;
	      var allSamples = [];

	      truns.forEach(function (trun) {
	        // Note: We currently do not parse the sample table as well
	        // as the trun. It's possible some sources will require this.
	        // moov > trak > mdia > minf > stbl
	        var trackRun = mp4Inspector.parseTrun(trun);
	        var samples = trackRun.samples;

	        samples.forEach(function (sample) {
	          if (sample.duration === undefined) {
	            sample.duration = defaultSampleDuration;
	          }
	          if (sample.size === undefined) {
	            sample.size = defaultSampleSize;
	          }
	          sample.trackId = trackId;
	          sample.dts = currentDts;
	          if (sample.compositionTimeOffset === undefined) {
	            sample.compositionTimeOffset = 0;
	          }
	          sample.pts = currentDts + sample.compositionTimeOffset;

	          currentDts += sample.duration;
	        });

	        allSamples = allSamples.concat(samples);
	      });

	      return allSamples;
	    };

	    /**
	      * Parses out caption nals from an FMP4 segment's video tracks.
	      *
	      * @param {Uint8Array} segment - The bytes of a single segment
	      * @param {Number} videoTrackId - The trackId of a video track in the segment
	      * @return {Object.<Number, Object[]>} A mapping of video trackId to
	      *   a list of seiNals found in that track
	     **/
	    var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {
	      // To get the samples
	      var trafs = probe.findBox(segment, ['moof', 'traf']);
	      // To get SEI NAL units
	      var mdats = probe.findBox(segment, ['mdat']);
	      var captionNals = {};
	      var mdatTrafPairs = [];

	      // Pair up each traf with a mdat as moofs and mdats are in pairs
	      mdats.forEach(function (mdat, index) {
	        var matchingTraf = trafs[index];
	        mdatTrafPairs.push({
	          mdat: mdat,
	          traf: matchingTraf
	        });
	      });

	      mdatTrafPairs.forEach(function (pair) {
	        var mdat = pair.mdat;
	        var traf = pair.traf;
	        var tfhd = probe.findBox(traf, ['tfhd']);
	        // Exactly 1 tfhd per traf
	        var headerInfo = mp4Inspector.parseTfhd(tfhd[0]);
	        var trackId = headerInfo.trackId;
	        var tfdt = probe.findBox(traf, ['tfdt']);
	        // Either 0 or 1 tfdt per traf
	        var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;
	        var truns = probe.findBox(traf, ['trun']);
	        var samples;
	        var seiNals;

	        // Only parse video data for the chosen video track
	        if (videoTrackId === trackId && truns.length > 0) {
	          samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);

	          seiNals = findSeiNals(mdat, samples, trackId);

	          if (!captionNals[trackId]) {
	            captionNals[trackId] = [];
	          }

	          captionNals[trackId] = captionNals[trackId].concat(seiNals);
	        }
	      });

	      return captionNals;
	    };

	    /**
	      * Parses out inband captions from an MP4 container and returns
	      * caption objects that can be used by WebVTT and the TextTrack API.
	      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue
	      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack
	      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first
	      *
	      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
	      * @param {Number} trackId - The id of the video track to parse
	      * @param {Number} timescale - The timescale for the video track from the init segment
	      *
	      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks
	      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds
	      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds
	      * @return {String} parsedCaptions[].text - The visible content of the caption
	     **/
	    var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {
	      var seiNals;

	      if (!trackId) {
	        return null;
	      }

	      seiNals = parseCaptionNals(segment, trackId);

	      return {
	        seiNals: seiNals[trackId],
	        timescale: timescale
	      };
	    };

	    /**
	      * Converts SEI NALUs into captions that can be used by video.js
	     **/
	    var CaptionParser = function CaptionParser() {
	      var isInitialized = false;
	      var captionStream$$1;

	      // Stores segments seen before trackId and timescale are set
	      var segmentCache;
	      // Stores video track ID of the track being parsed
	      var trackId;
	      // Stores the timescale of the track being parsed
	      var timescale;
	      // Stores captions parsed so far
	      var parsedCaptions;

	      /**
	        * A method to indicate whether a CaptionParser has been initalized
	        * @returns {Boolean}
	       **/
	      this.isInitialized = function () {
	        return isInitialized;
	      };

	      /**
	        * Initializes the underlying CaptionStream, SEI NAL parsing
	        * and management, and caption collection
	       **/
	      this.init = function () {
	        captionStream$$1 = new CaptionStream$1();
	        isInitialized = true;

	        // Collect dispatched captions
	        captionStream$$1.on('data', function (event) {
	          // Convert to seconds in the source's timescale
	          event.startTime = event.startPts / timescale;
	          event.endTime = event.endPts / timescale;

	          parsedCaptions.captions.push(event);
	          parsedCaptions.captionStreams[event.stream] = true;
	        });
	      };

	      /**
	        * Determines if a new video track will be selected
	        * or if the timescale changed
	        * @return {Boolean}
	       **/
	      this.isNewInit = function (videoTrackIds, timescales) {
	        if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {
	          return false;
	        }

	        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];
	      };

	      /**
	        * Parses out SEI captions and interacts with underlying
	        * CaptionStream to return dispatched captions
	        *
	        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
	        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment
	        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment
	        * @see parseEmbeddedCaptions
	        * @see m2ts/caption-stream.js
	       **/
	      this.parse = function (segment, videoTrackIds, timescales) {
	        var parsedData;

	        if (!this.isInitialized()) {
	          return null;

	          // This is not likely to be a video segment
	        } else if (!videoTrackIds || !timescales) {
	          return null;
	        } else if (this.isNewInit(videoTrackIds, timescales)) {
	          // Use the first video track only as there is no
	          // mechanism to switch to other video tracks
	          trackId = videoTrackIds[0];
	          timescale = timescales[trackId];

	          // If an init segment has not been seen yet, hold onto segment
	          // data until we have one
	        } else if (!trackId || !timescale) {
	          segmentCache.push(segment);
	          return null;
	        }

	        // Now that a timescale and trackId is set, parse cached segments
	        while (segmentCache.length > 0) {
	          var cachedSegment = segmentCache.shift();

	          this.parse(cachedSegment, videoTrackIds, timescales);
	        }

	        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);

	        if (parsedData === null || !parsedData.seiNals) {
	          return null;
	        }

	        this.pushNals(parsedData.seiNals);
	        // Force the parsed captions to be dispatched
	        this.flushStream();

	        return parsedCaptions;
	      };

	      /**
	        * Pushes SEI NALUs onto CaptionStream
	        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`
	        * Assumes that `parseCaptionNals` has been called first
	        * @see m2ts/caption-stream.js
	        **/
	      this.pushNals = function (nals) {
	        if (!this.isInitialized() || !nals || nals.length === 0) {
	          return null;
	        }

	        nals.forEach(function (nal) {
	          captionStream$$1.push(nal);
	        });
	      };

	      /**
	        * Flushes underlying CaptionStream to dispatch processed, displayable captions
	        * @see m2ts/caption-stream.js
	       **/
	      this.flushStream = function () {
	        if (!this.isInitialized()) {
	          return null;
	        }

	        captionStream$$1.flush();
	      };

	      /**
	        * Reset caption buckets for new data
	       **/
	      this.clearParsedCaptions = function () {
	        parsedCaptions.captions = [];
	        parsedCaptions.captionStreams = {};
	      };

	      /**
	        * Resets underlying CaptionStream
	        * @see m2ts/caption-stream.js
	       **/
	      this.resetCaptionStream = function () {
	        if (!this.isInitialized()) {
	          return null;
	        }

	        captionStream$$1.reset();
	      };

	      /**
	        * Convenience method to clear all captions flushed from the
	        * CaptionStream and still being parsed
	        * @see m2ts/caption-stream.js
	       **/
	      this.clearAllCaptions = function () {
	        this.clearParsedCaptions();
	        this.resetCaptionStream();
	      };

	      /**
	        * Reset caption parser
	       **/
	      this.reset = function () {
	        segmentCache = [];
	        trackId = null;
	        timescale = null;

	        if (!parsedCaptions) {
	          parsedCaptions = {
	            captions: [],
	            // CC1, CC2, CC3, CC4
	            captionStreams: {}
	          };
	        } else {
	          this.clearParsedCaptions();
	        }

	        this.resetCaptionStream();
	      };

	      this.reset();
	    };

	    var captionParser = CaptionParser;

	    var mp4 = {
	      generator: mp4Generator,
	      probe: probe,
	      Transmuxer: transmuxer.Transmuxer,
	      AudioSegmentStream: transmuxer.AudioSegmentStream,
	      VideoSegmentStream: transmuxer.VideoSegmentStream,
	      CaptionParser: captionParser
	    };

	    var classCallCheck = function classCallCheck(instance, Constructor) {
	      if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	      }
	    };

	    var createClass = function () {
	      function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	          var descriptor = props[i];
	          descriptor.enumerable = descriptor.enumerable || false;
	          descriptor.configurable = true;
	          if ("value" in descriptor) descriptor.writable = true;
	          Object.defineProperty(target, descriptor.key, descriptor);
	        }
	      }

	      return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	      };
	    }();

	    /**
	     * @file transmuxer-worker.js
	     */

	    /**
	     * Re-emits transmuxer events by converting them into messages to the
	     * world outside the worker.
	     *
	     * @param {Object} transmuxer the transmuxer to wire events on
	     * @private
	     */
	    var wireTransmuxerEvents = function wireTransmuxerEvents(self, transmuxer) {
	      transmuxer.on('data', function (segment) {
	        // transfer ownership of the underlying ArrayBuffer
	        // instead of doing a copy to save memory
	        // ArrayBuffers are transferable but generic TypedArrays are not
	        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)
	        var initArray = segment.initSegment;

	        segment.initSegment = {
	          data: initArray.buffer,
	          byteOffset: initArray.byteOffset,
	          byteLength: initArray.byteLength
	        };

	        var typedArray = segment.data;

	        segment.data = typedArray.buffer;
	        self.postMessage({
	          action: 'data',
	          segment: segment,
	          byteOffset: typedArray.byteOffset,
	          byteLength: typedArray.byteLength
	        }, [segment.data]);
	      });

	      if (transmuxer.captionStream) {
	        transmuxer.captionStream.on('data', function (caption) {
	          self.postMessage({
	            action: 'caption',
	            data: caption
	          });
	        });
	      }

	      transmuxer.on('done', function (data) {
	        self.postMessage({ action: 'done' });
	      });

	      transmuxer.on('gopInfo', function (gopInfo) {
	        self.postMessage({
	          action: 'gopInfo',
	          gopInfo: gopInfo
	        });
	      });
	    };

	    /**
	     * All incoming messages route through this hash. If no function exists
	     * to handle an incoming message, then we ignore the message.
	     *
	     * @class MessageHandlers
	     * @param {Object} options the options to initialize with
	     */

	    var MessageHandlers = function () {
	      function MessageHandlers(self, options) {
	        classCallCheck(this, MessageHandlers);

	        this.options = options || {};
	        this.self = self;
	        this.init();
	      }

	      /**
	       * initialize our web worker and wire all the events.
	       */

	      createClass(MessageHandlers, [{
	        key: 'init',
	        value: function init() {
	          if (this.transmuxer) {
	            this.transmuxer.dispose();
	          }
	          this.transmuxer = new mp4.Transmuxer(this.options);
	          wireTransmuxerEvents(this.self, this.transmuxer);
	        }

	        /**
	         * Adds data (a ts segment) to the start of the transmuxer pipeline for
	         * processing.
	         *
	         * @param {ArrayBuffer} data data to push into the muxer
	         */

	      }, {
	        key: 'push',
	        value: function push(data) {
	          // Cast array buffer to correct type for transmuxer
	          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);

	          this.transmuxer.push(segment);
	        }

	        /**
	         * Recreate the transmuxer so that the next segment added via `push`
	         * start with a fresh transmuxer.
	         */

	      }, {
	        key: 'reset',
	        value: function reset() {
	          this.init();
	        }

	        /**
	         * Set the value that will be used as the `baseMediaDecodeTime` time for the
	         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`
	         * set relative to the first based on the PTS values.
	         *
	         * @param {Object} data used to set the timestamp offset in the muxer
	         */

	      }, {
	        key: 'setTimestampOffset',
	        value: function setTimestampOffset(data) {
	          var timestampOffset = data.timestampOffset || 0;

	          this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));
	        }
	      }, {
	        key: 'setAudioAppendStart',
	        value: function setAudioAppendStart(data) {
	          this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));
	        }

	        /**
	         * Forces the pipeline to finish processing the last segment and emit it's
	         * results.
	         *
	         * @param {Object} data event data, not really used
	         */

	      }, {
	        key: 'flush',
	        value: function flush(data) {
	          this.transmuxer.flush();
	        }
	      }, {
	        key: 'resetCaptions',
	        value: function resetCaptions() {
	          this.transmuxer.resetCaptions();
	        }
	      }, {
	        key: 'alignGopsWith',
	        value: function alignGopsWith(data) {
	          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());
	        }
	      }]);
	      return MessageHandlers;
	    }();

	    /**
	     * Our web wroker interface so that things can talk to mux.js
	     * that will be running in a web worker. the scope is passed to this by
	     * webworkify.
	     *
	     * @param {Object} self the scope for the web worker
	     */

	    var TransmuxerWorker = function TransmuxerWorker(self) {
	      self.onmessage = function (event) {
	        if (event.data.action === 'init' && event.data.options) {
	          this.messageHandlers = new MessageHandlers(self, event.data.options);
	          return;
	        }

	        if (!this.messageHandlers) {
	          this.messageHandlers = new MessageHandlers(self);
	        }

	        if (event.data && event.data.action && event.data.action !== 'init') {
	          if (this.messageHandlers[event.data.action]) {
	            this.messageHandlers[event.data.action](event.data);
	          }
	        }
	      };
	    };

	    var transmuxerWorker = new TransmuxerWorker(self);

	    return transmuxerWorker;
	  }();
	});

	/**
	 * @file - codecs.js - Handles tasks regarding codec strings such as translating them to
	 * codec strings, or translating codec strings into objects that can be examined.
	 */

	// Default codec parameters if none were provided for video and/or audio
	var defaultCodecs = {
	  videoCodec: 'avc1',
	  videoObjectTypeIndicator: '.4d400d',
	  // AAC-LC
	  audioProfile: '2'
	};

	/**
	 * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard
	 * `avc1.<hhhhhh>`
	 *
	 * @param {Array} codecs an array of codec strings to fix
	 * @return {Array} the translated codec array
	 * @private
	 */
	var translateLegacyCodecs = function translateLegacyCodecs(codecs) {
	  return codecs.map(function (codec) {
	    return codec.replace(/avc1\.(\d+)\.(\d+)/i, function (orig, profile, avcLevel) {
	      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);
	      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);

	      return 'avc1.' + profileHex + '00' + avcLevelHex;
	    });
	  });
	};

	/**
	 * Parses a codec string to retrieve the number of codecs specified,
	 * the video codec and object type indicator, and the audio profile.
	 */

	var parseCodecs = function parseCodecs() {
	  var codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	  var result = {
	    codecCount: 0
	  };
	  var parsed = void 0;

	  result.codecCount = codecs.split(',').length;
	  result.codecCount = result.codecCount || 2;

	  // parse the video codec
	  parsed = /(^|\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);
	  if (parsed) {
	    result.videoCodec = parsed[2];
	    result.videoObjectTypeIndicator = parsed[3];
	  }

	  // parse the last field of the audio codec
	  result.audioProfile = /(^|\s|,)+mp4a.[0-9A-Fa-f]+\.([0-9A-Fa-f]+)/i.exec(codecs);
	  result.audioProfile = result.audioProfile && result.audioProfile[2];

	  return result;
	};

	/**
	 * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the
	 * standard `avc1.<hhhhhh>`.
	 *
	 * @param codecString {String} the codec string
	 * @return {String} the codec string with old apple-style codecs replaced
	 *
	 * @private
	 */
	var mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {
	  return codecString.replace(/avc1\.(\d+)\.(\d+)/i, function (match) {
	    return translateLegacyCodecs([match])[0];
	  });
	};

	/**
	 * Build a media mime-type string from a set of parameters
	 * @param {String} type either 'audio' or 'video'
	 * @param {String} container either 'mp2t' or 'mp4'
	 * @param {Array} codecs an array of codec strings to add
	 * @return {String} a valid media mime-type
	 */
	var makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {
	  // The codecs array is filtered so that falsey values are
	  // dropped and don't cause Array#join to create spurious
	  // commas
	  return type + '/' + container + '; codecs="' + codecs.filter(function (c) {
	    return !!c;
	  }).join(', ') + '"';
	};

	/**
	 * Returns the type container based on information in the playlist
	 * @param {Playlist} media the current media playlist
	 * @return {String} a valid media container type
	 */
	var getContainerType = function getContainerType(media) {
	  // An initialization segment means the media playlist is an iframe
	  // playlist or is using the mp4 container. We don't currently
	  // support iframe playlists, so assume this is signalling mp4
	  // fragments.
	  if (media.segments && media.segments.length && media.segments[0].map) {
	    return 'mp4';
	  }
	  return 'mp2t';
	};

	/**
	 * Returns a set of codec strings parsed from the playlist or the default
	 * codec strings if no codecs were specified in the playlist
	 * @param {Playlist} media the current media playlist
	 * @return {Object} an object with the video and audio codecs
	 */
	var getCodecs = function getCodecs(media) {
	  // if the codecs were explicitly specified, use them instead of the
	  // defaults
	  var mediaAttributes = media.attributes || {};

	  if (mediaAttributes.CODECS) {
	    return parseCodecs(mediaAttributes.CODECS);
	  }
	  return defaultCodecs;
	};

	var audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {
	  if (!master.mediaGroups.AUDIO || !audioGroupId) {
	    return null;
	  }

	  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];

	  if (!audioGroup) {
	    return null;
	  }

	  for (var name in audioGroup) {
	    var audioType = audioGroup[name];

	    if (audioType.default && audioType.playlists) {
	      // codec should be the same for all playlists within the audio type
	      return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;
	    }
	  }

	  return null;
	};

	/**
	 * Calculates the MIME type strings for a working configuration of
	 * SourceBuffers to play variant streams in a master playlist. If
	 * there is no possible working configuration, an empty array will be
	 * returned.
	 *
	 * @param master {Object} the m3u8 object for the master playlist
	 * @param media {Object} the m3u8 object for the variant playlist
	 * @return {Array} the MIME type strings. If the array has more than
	 * one entry, the first element should be applied to the video
	 * SourceBuffer and the second to the audio SourceBuffer.
	 *
	 * @private
	 */
	var mimeTypesForPlaylist = function mimeTypesForPlaylist(master, media) {
	  var containerType = getContainerType(media);
	  var codecInfo = getCodecs(media);
	  var mediaAttributes = media.attributes || {};
	  // Default condition for a traditional HLS (no demuxed audio/video)
	  var isMuxed = true;
	  var isMaat = false;

	  if (!media) {
	    // Not enough information
	    return [];
	  }

	  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {
	    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];

	    // Handle the case where we are in a multiple-audio track scenario
	    if (audioGroup) {
	      isMaat = true;
	      // Start with the everything demuxed then...
	      isMuxed = false;
	      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)
	      for (var groupId in audioGroup) {
	        // either a uri is present (if the case of HLS and an external playlist), or
	        // playlists is present (in the case of DASH where we don't have external audio
	        // playlists)
	        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {
	          isMuxed = true;
	          break;
	        }
	      }
	    }
	  }

	  // HLS with multiple-audio tracks must always get an audio codec.
	  // Put another way, there is no way to have a video-only multiple-audio HLS!
	  if (isMaat && !codecInfo.audioProfile) {
	    if (!isMuxed) {
	      // It is possible for codecs to be specified on the audio media group playlist but
	      // not on the rendition playlist. This is mostly the case for DASH, where audio and
	      // video are always separate (and separately specified).
	      codecInfo.audioProfile = audioProfileFromDefault(master, mediaAttributes.AUDIO);
	    }

	    if (!codecInfo.audioProfile) {
	      videojs.log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');
	      codecInfo.audioProfile = defaultCodecs.audioProfile;
	    }
	  }

	  // Generate the final codec strings from the codec object generated above
	  var codecStrings = {};

	  if (codecInfo.videoCodec) {
	    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;
	  }

	  if (codecInfo.audioProfile) {
	    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;
	  }

	  // Finally, make and return an array with proper mime-types depending on
	  // the configuration
	  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);
	  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);
	  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);

	  if (isMaat) {
	    if (!isMuxed && codecStrings.video) {
	      return [justVideo, justAudio];
	    }

	    if (!isMuxed && !codecStrings.video) {
	      // There is no muxed content and no video codec string, so this is an audio only
	      // stream with alternate audio.
	      return [justAudio, justAudio];
	    }

	    // There exists the possiblity that this will return a `video/container`
	    // mime-type for the first entry in the array even when there is only audio.
	    // This doesn't appear to be a problem and simplifies the code.
	    return [bothVideoAudio, justAudio];
	  }

	  // If there is no video codec at all, always just return a single
	  // audio/<container> mime-type
	  if (!codecStrings.video) {
	    return [justAudio];
	  }

	  // When not using separate audio media groups, audio and video is
	  // *always* muxed
	  return [bothVideoAudio];
	};

	/**
	 * Parse a content type header into a type and parameters
	 * object
	 *
	 * @param {String} type the content type header
	 * @return {Object} the parsed content-type
	 * @private
	 */
	var parseContentType = function parseContentType(type) {
	  var object = { type: '', parameters: {} };
	  var parameters = type.trim().split(';');

	  // first parameter should always be content-type
	  object.type = parameters.shift().trim();
	  parameters.forEach(function (parameter) {
	    var pair = parameter.trim().split('=');

	    if (pair.length > 1) {
	      var name = pair[0].replace(/"/g, '').trim();
	      var value = pair[1].replace(/"/g, '').trim();

	      object.parameters[name] = value;
	    }
	  });

	  return object;
	};

	/**
	 * Check if a codec string refers to an audio codec.
	 *
	 * @param {String} codec codec string to check
	 * @return {Boolean} if this is an audio codec
	 * @private
	 */
	var isAudioCodec = function isAudioCodec(codec) {
	  return (/mp4a\.\d+.\d+/i.test(codec)
	  );
	};

	/**
	 * Check if a codec string refers to a video codec.
	 *
	 * @param {String} codec codec string to check
	 * @return {Boolean} if this is a video codec
	 * @private
	 */
	var isVideoCodec = function isVideoCodec(codec) {
	  return (/avc1\.[\da-f]+/i.test(codec)
	  );
	};

	/**
	 * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in
	 * front of current time.
	 *
	 * @param {Array} buffer
	 *        The current buffer of gop information
	 * @param {Number} currentTime
	 *        The current time
	 * @param {Double} mapping
	 *        Offset to map display time to stream presentation time
	 * @return {Array}
	 *         List of gops considered safe to append over
	 */
	var gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, currentTime, mapping) {
	  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {
	    return [];
	  }

	  // pts value for current time + 3 seconds to give a bit more wiggle room
	  var currentTimePts = Math.ceil((currentTime - mapping + 3) * 90000);

	  var i = void 0;

	  for (i = 0; i < buffer.length; i++) {
	    if (buffer[i].pts > currentTimePts) {
	      break;
	    }
	  }

	  return buffer.slice(i);
	};

	/**
	 * Appends gop information (timing and byteLength) received by the transmuxer for the
	 * gops appended in the last call to appendBuffer
	 *
	 * @param {Array} buffer
	 *        The current buffer of gop information
	 * @param {Array} gops
	 *        List of new gop information
	 * @param {boolean} replace
	 *        If true, replace the buffer with the new gop information. If false, append the
	 *        new gop information to the buffer in the right location of time.
	 * @return {Array}
	 *         Updated list of gop information
	 */
	var updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {
	  if (!gops.length) {
	    return buffer;
	  }

	  if (replace) {
	    // If we are in safe append mode, then completely overwrite the gop buffer
	    // with the most recent appeneded data. This will make sure that when appending
	    // future segments, we only try to align with gops that are both ahead of current
	    // time and in the last segment appended.
	    return gops.slice();
	  }

	  var start = gops[0].pts;

	  var i = 0;

	  for (i; i < buffer.length; i++) {
	    if (buffer[i].pts >= start) {
	      break;
	    }
	  }

	  return buffer.slice(0, i).concat(gops);
	};

	/**
	 * Removes gop information in buffer that overlaps with provided start and end
	 *
	 * @param {Array} buffer
	 *        The current buffer of gop information
	 * @param {Double} start
	 *        position to start the remove at
	 * @param {Double} end
	 *        position to end the remove at
	 * @param {Double} mapping
	 *        Offset to map display time to stream presentation time
	 */
	var removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {
	  var startPts = Math.ceil((start - mapping) * 90000);
	  var endPts = Math.ceil((end - mapping) * 90000);
	  var updatedBuffer = buffer.slice();

	  var i = buffer.length;

	  while (i--) {
	    if (buffer[i].pts <= endPts) {
	      break;
	    }
	  }

	  if (i === -1) {
	    // no removal because end of remove range is before start of buffer
	    return updatedBuffer;
	  }

	  var j = i + 1;

	  while (j--) {
	    if (buffer[j].pts <= startPts) {
	      break;
	    }
	  }

	  // clamp remove range start to 0 index
	  j = Math.max(j, 0);

	  updatedBuffer.splice(j, i - j + 1);

	  return updatedBuffer;
	};

	var buffered = function buffered(videoBuffer, audioBuffer, audioDisabled) {
	  var start = null;
	  var end = null;
	  var arity = 0;
	  var extents = [];
	  var ranges = [];

	  // neither buffer has been created yet
	  if (!videoBuffer && !audioBuffer) {
	    return videojs.createTimeRange();
	  }

	  // only one buffer is configured
	  if (!videoBuffer) {
	    return audioBuffer.buffered;
	  }
	  if (!audioBuffer) {
	    return videoBuffer.buffered;
	  }

	  // both buffers are configured
	  if (audioDisabled) {
	    return videoBuffer.buffered;
	  }

	  // both buffers are empty
	  if (videoBuffer.buffered.length === 0 && audioBuffer.buffered.length === 0) {
	    return videojs.createTimeRange();
	  }

	  // Handle the case where we have both buffers and create an
	  // intersection of the two
	  var videoBuffered = videoBuffer.buffered;
	  var audioBuffered = audioBuffer.buffered;
	  var count = videoBuffered.length;

	  // A) Gather up all start and end times
	  while (count--) {
	    extents.push({ time: videoBuffered.start(count), type: 'start' });
	    extents.push({ time: videoBuffered.end(count), type: 'end' });
	  }
	  count = audioBuffered.length;
	  while (count--) {
	    extents.push({ time: audioBuffered.start(count), type: 'start' });
	    extents.push({ time: audioBuffered.end(count), type: 'end' });
	  }
	  // B) Sort them by time
	  extents.sort(function (a, b) {
	    return a.time - b.time;
	  });

	  // C) Go along one by one incrementing arity for start and decrementing
	  //    arity for ends
	  for (count = 0; count < extents.length; count++) {
	    if (extents[count].type === 'start') {
	      arity++;

	      // D) If arity is ever incremented to 2 we are entering an
	      //    overlapping range
	      if (arity === 2) {
	        start = extents[count].time;
	      }
	    } else if (extents[count].type === 'end') {
	      arity--;

	      // E) If arity is ever decremented to 1 we leaving an
	      //    overlapping range
	      if (arity === 1) {
	        end = extents[count].time;
	      }
	    }

	    // F) Record overlapping ranges
	    if (start !== null && end !== null) {
	      ranges.push([start, end]);
	      start = null;
	      end = null;
	    }
	  }

	  return videojs.createTimeRanges(ranges);
	};

	/**
	 * @file virtual-source-buffer.js
	 */

	// We create a wrapper around the SourceBuffer so that we can manage the
	// state of the `updating` property manually. We have to do this because
	// Firefox changes `updating` to false long before triggering `updateend`
	// events and that was causing strange problems in videojs-contrib-hls
	var makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {
	  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);
	  var wrapper = Object.create(null);

	  wrapper.updating = false;
	  wrapper.realBuffer_ = sourceBuffer;

	  var _loop = function _loop(key) {
	    if (typeof sourceBuffer[key] === 'function') {
	      wrapper[key] = function () {
	        return sourceBuffer[key].apply(sourceBuffer, arguments);
	      };
	    } else if (typeof wrapper[key] === 'undefined') {
	      Object.defineProperty(wrapper, key, {
	        get: function get$$1() {
	          return sourceBuffer[key];
	        },
	        set: function set$$1(v) {
	          return sourceBuffer[key] = v;
	        }
	      });
	    }
	  };

	  for (var key in sourceBuffer) {
	    _loop(key);
	  }

	  return wrapper;
	};

	/**
	 * VirtualSourceBuffers exist so that we can transmux non native formats
	 * into a native format, but keep the same api as a native source buffer.
	 * It creates a transmuxer, that works in its own thread (a web worker) and
	 * that transmuxer muxes the data into a native format. VirtualSourceBuffer will
	 * then send all of that data to the naive sourcebuffer so that it is
	 * indestinguishable from a natively supported format.
	 *
	 * @param {HtmlMediaSource} mediaSource the parent mediaSource
	 * @param {Array} codecs array of codecs that we will be dealing with
	 * @class VirtualSourceBuffer
	 * @extends video.js.EventTarget
	 */

	var VirtualSourceBuffer = function (_videojs$EventTarget) {
	  inherits$1(VirtualSourceBuffer, _videojs$EventTarget);

	  function VirtualSourceBuffer(mediaSource, codecs) {
	    classCallCheck$1(this, VirtualSourceBuffer);

	    var _this = possibleConstructorReturn$1(this, (VirtualSourceBuffer.__proto__ || Object.getPrototypeOf(VirtualSourceBuffer)).call(this, videojs.EventTarget));

	    _this.timestampOffset_ = 0;
	    _this.pendingBuffers_ = [];
	    _this.bufferUpdating_ = false;

	    _this.mediaSource_ = mediaSource;
	    _this.codecs_ = codecs;
	    _this.audioCodec_ = null;
	    _this.videoCodec_ = null;
	    _this.audioDisabled_ = false;
	    _this.appendAudioInitSegment_ = true;
	    _this.gopBuffer_ = [];
	    _this.timeMapping_ = 0;
	    _this.safeAppend_ = videojs.browser.IE_VERSION >= 11;

	    var options = {
	      remux: false,
	      alignGopsAtEnd: _this.safeAppend_
	    };

	    _this.codecs_.forEach(function (codec) {
	      if (isAudioCodec(codec)) {
	        _this.audioCodec_ = codec;
	      } else if (isVideoCodec(codec)) {
	        _this.videoCodec_ = codec;
	      }
	    });

	    // append muxed segments to their respective native buffers as
	    // soon as they are available
	    _this.transmuxer_ = new TransmuxWorker();
	    _this.transmuxer_.postMessage({ action: 'init', options: options });

	    _this.transmuxer_.onmessage = function (event) {
	      if (event.data.action === 'data') {
	        return _this.data_(event);
	      }

	      if (event.data.action === 'done') {
	        return _this.done_(event);
	      }

	      if (event.data.action === 'gopInfo') {
	        return _this.appendGopInfo_(event);
	      }
	    };

	    // this timestampOffset is a property with the side-effect of resetting
	    // baseMediaDecodeTime in the transmuxer on the setter
	    Object.defineProperty(_this, 'timestampOffset', {
	      get: function get$$1() {
	        return this.timestampOffset_;
	      },
	      set: function set$$1(val) {
	        if (typeof val === 'number' && val >= 0) {
	          this.timestampOffset_ = val;
	          this.appendAudioInitSegment_ = true;

	          // reset gop buffer on timestampoffset as this signals a change in timeline
	          this.gopBuffer_.length = 0;
	          this.timeMapping_ = 0;

	          // We have to tell the transmuxer to set the baseMediaDecodeTime to
	          // the desired timestampOffset for the next segment
	          this.transmuxer_.postMessage({
	            action: 'setTimestampOffset',
	            timestampOffset: val
	          });
	        }
	      }
	    });

	    // setting the append window affects both source buffers
	    Object.defineProperty(_this, 'appendWindowStart', {
	      get: function get$$1() {
	        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;
	      },
	      set: function set$$1(start) {
	        if (this.videoBuffer_) {
	          this.videoBuffer_.appendWindowStart = start;
	        }
	        if (this.audioBuffer_) {
	          this.audioBuffer_.appendWindowStart = start;
	        }
	      }
	    });

	    // this buffer is "updating" if either of its native buffers are
	    Object.defineProperty(_this, 'updating', {
	      get: function get$$1() {
	        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);
	      }
	    });

	    // the buffered property is the intersection of the buffered
	    // ranges of the native source buffers
	    Object.defineProperty(_this, 'buffered', {
	      get: function get$$1() {
	        return buffered(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);
	      }
	    });
	    return _this;
	  }

	  /**
	   * When we get a data event from the transmuxer
	   * we call this function and handle the data that
	   * was sent to us
	   *
	   * @private
	   * @param {Event} event the data event from the transmuxer
	   */


	  createClass(VirtualSourceBuffer, [{
	    key: 'data_',
	    value: function data_(event) {
	      var segment = event.data.segment;

	      // Cast ArrayBuffer to TypedArray
	      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);

	      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);

	      createTextTracksIfNecessary(this, this.mediaSource_, segment);

	      // Add the segments to the pendingBuffers array
	      this.pendingBuffers_.push(segment);
	      return;
	    }

	    /**
	     * When we get a done event from the transmuxer
	     * we call this function and we process all
	     * of the pending data that we have been saving in the
	     * data_ function
	     *
	     * @private
	     * @param {Event} event the done event from the transmuxer
	     */

	  }, {
	    key: 'done_',
	    value: function done_(event) {
	      // Don't process and append data if the mediaSource is closed
	      if (this.mediaSource_.readyState === 'closed') {
	        this.pendingBuffers_.length = 0;
	        return;
	      }

	      // All buffers should have been flushed from the muxer
	      // start processing anything we have received
	      this.processPendingSegments_();
	      return;
	    }

	    /**
	     * Create our internal native audio/video source buffers and add
	     * event handlers to them with the following conditions:
	     * 1. they do not already exist on the mediaSource
	     * 2. this VSB has a codec for them
	     *
	     * @private
	     */

	  }, {
	    key: 'createRealSourceBuffers_',
	    value: function createRealSourceBuffers_() {
	      var _this2 = this;

	      var types = ['audio', 'video'];

	      types.forEach(function (type) {
	        // Don't create a SourceBuffer of this type if we don't have a
	        // codec for it
	        if (!_this2[type + 'Codec_']) {
	          return;
	        }

	        // Do nothing if a SourceBuffer of this type already exists
	        if (_this2[type + 'Buffer_']) {
	          return;
	        }

	        var buffer = null;

	        // If the mediasource already has a SourceBuffer for the codec
	        // use that
	        if (_this2.mediaSource_[type + 'Buffer_']) {
	          buffer = _this2.mediaSource_[type + 'Buffer_'];
	          // In multiple audio track cases, the audio source buffer is disabled
	          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier
	          // than createRealSourceBuffers_ is called to create the second
	          // VirtualSourceBuffer because that happens as a side-effect of
	          // videojs-contrib-hls starting the audioSegmentLoader. As a result,
	          // the audioBuffer is essentially "ownerless" and no one will toggle
	          // the `updating` state back to false once the `updateend` event is received
	          //
	          // Setting `updating` to false manually will work around this
	          // situation and allow work to continue
	          buffer.updating = false;
	        } else {
	          var codecProperty = type + 'Codec_';
	          var mimeType = type + '/mp4;codecs="' + _this2[codecProperty] + '"';

	          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);

	          _this2.mediaSource_[type + 'Buffer_'] = buffer;
	        }

	        _this2[type + 'Buffer_'] = buffer;

	        // Wire up the events to the SourceBuffer
	        ['update', 'updatestart', 'updateend'].forEach(function (event) {
	          buffer.addEventListener(event, function () {
	            // if audio is disabled
	            if (type === 'audio' && _this2.audioDisabled_) {
	              return;
	            }

	            if (event === 'updateend') {
	              _this2[type + 'Buffer_'].updating = false;
	            }

	            var shouldTrigger = types.every(function (t) {
	              // skip checking audio's updating status if audio
	              // is not enabled
	              if (t === 'audio' && _this2.audioDisabled_) {
	                return true;
	              }
	              // if the other type if updating we don't trigger
	              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {
	                return false;
	              }
	              return true;
	            });

	            if (shouldTrigger) {
	              return _this2.trigger(event);
	            }
	          });
	        });
	      });
	    }

	    /**
	     * Emulate the native mediasource function, but our function will
	     * send all of the proposed segments to the transmuxer so that we
	     * can transmux them before we append them to our internal
	     * native source buffers in the correct format.
	     *
	     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer
	     * @param {Uint8Array} segment the segment to append to the buffer
	     */

	  }, {
	    key: 'appendBuffer',
	    value: function appendBuffer(segment) {
	      // Start the internal "updating" state
	      this.bufferUpdating_ = true;

	      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {
	        var audioBuffered = this.audioBuffer_.buffered;

	        this.transmuxer_.postMessage({
	          action: 'setAudioAppendStart',
	          appendStart: audioBuffered.end(audioBuffered.length - 1)
	        });
	      }

	      if (this.videoBuffer_) {
	        this.transmuxer_.postMessage({
	          action: 'alignGopsWith',
	          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_)
	        });
	      }

	      this.transmuxer_.postMessage({
	        action: 'push',
	        // Send the typed-array of data as an ArrayBuffer so that
	        // it can be sent as a "Transferable" and avoid the costly
	        // memory copy
	        data: segment.buffer,

	        // To recreate the original typed-array, we need information
	        // about what portion of the ArrayBuffer it was a view into
	        byteOffset: segment.byteOffset,
	        byteLength: segment.byteLength
	      }, [segment.buffer]);
	      this.transmuxer_.postMessage({ action: 'flush' });
	    }

	    /**
	     * Appends gop information (timing and byteLength) received by the transmuxer for the
	     * gops appended in the last call to appendBuffer
	     *
	     * @param {Event} event
	     *        The gopInfo event from the transmuxer
	     * @param {Array} event.data.gopInfo
	     *        List of gop info to append
	     */

	  }, {
	    key: 'appendGopInfo_',
	    value: function appendGopInfo_(event) {
	      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);
	    }

	    /**
	     * Emulate the native mediasource function and remove parts
	     * of the buffer from any of our internal buffers that exist
	     *
	     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove
	     * @param {Double} start position to start the remove at
	     * @param {Double} end position to end the remove at
	     */

	  }, {
	    key: 'remove',
	    value: function remove(start, end) {
	      if (this.videoBuffer_) {
	        this.videoBuffer_.updating = true;
	        this.videoBuffer_.remove(start, end);
	        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);
	      }
	      if (!this.audioDisabled_ && this.audioBuffer_) {
	        this.audioBuffer_.updating = true;
	        this.audioBuffer_.remove(start, end);
	      }

	      // Remove Metadata Cues (id3)
	      removeCuesFromTrack(start, end, this.metadataTrack_);

	      // Remove Any Captions
	      if (this.inbandTextTracks_) {
	        for (var track in this.inbandTextTracks_) {
	          removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);
	        }
	      }
	    }

	    /**
	     * Process any segments that the muxer has output
	     * Concatenate segments together based on type and append them into
	     * their respective sourceBuffers
	     *
	     * @private
	     */

	  }, {
	    key: 'processPendingSegments_',
	    value: function processPendingSegments_() {
	      var sortedSegments = {
	        video: {
	          segments: [],
	          bytes: 0
	        },
	        audio: {
	          segments: [],
	          bytes: 0
	        },
	        captions: [],
	        metadata: []
	      };

	      // Sort segments into separate video/audio arrays and
	      // keep track of their total byte lengths
	      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {
	        var type = segment.type;
	        var data = segment.data;
	        var initSegment = segment.initSegment;

	        segmentObj[type].segments.push(data);
	        segmentObj[type].bytes += data.byteLength;

	        segmentObj[type].initSegment = initSegment;

	        // Gather any captions into a single array
	        if (segment.captions) {
	          segmentObj.captions = segmentObj.captions.concat(segment.captions);
	        }

	        if (segment.info) {
	          segmentObj[type].info = segment.info;
	        }

	        // Gather any metadata into a single array
	        if (segment.metadata) {
	          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);
	        }

	        return segmentObj;
	      }, sortedSegments);

	      // Create the real source buffers if they don't exist by now since we
	      // finally are sure what tracks are contained in the source
	      if (!this.videoBuffer_ && !this.audioBuffer_) {
	        // Remove any codecs that may have been specified by default but
	        // are no longer applicable now
	        if (sortedSegments.video.bytes === 0) {
	          this.videoCodec_ = null;
	        }
	        if (sortedSegments.audio.bytes === 0) {
	          this.audioCodec_ = null;
	        }

	        this.createRealSourceBuffers_();
	      }

	      if (sortedSegments.audio.info) {
	        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });
	      }
	      if (sortedSegments.video.info) {
	        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });
	      }

	      if (this.appendAudioInitSegment_) {
	        if (!this.audioDisabled_ && this.audioBuffer_) {
	          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);
	          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;
	        }
	        this.appendAudioInitSegment_ = false;
	      }

	      var triggerUpdateend = false;

	      // Merge multiple video and audio segments into one and append
	      if (this.videoBuffer_ && sortedSegments.video.bytes) {
	        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);
	        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;
	        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);
	        // TODO: are video tracks the only ones with text tracks?
	        addTextTrackData(this, sortedSegments.captions, sortedSegments.metadata);
	      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {
	        // The transmuxer did not return any bytes of video, meaning it was all trimmed
	        // for gop alignment. Since we have a video buffer and audio is disabled, updateend
	        // will never be triggered by this source buffer, which will cause contrib-hls
	        // to be stuck forever waiting for updateend. If audio is not disabled, updateend
	        // will be triggered by the audio buffer, which will be sent upwards since the video
	        // buffer will not be in an updating state.
	        triggerUpdateend = true;
	      }

	      if (!this.audioDisabled_ && this.audioBuffer_) {
	        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);
	      }

	      this.pendingBuffers_.length = 0;

	      if (triggerUpdateend) {
	        this.trigger('updateend');
	      }

	      // We are no longer in the internal "updating" state
	      this.bufferUpdating_ = false;
	    }

	    /**
	     * Combine all segments into a single Uint8Array and then append them
	     * to the destination buffer
	     *
	     * @param {Object} segmentObj
	     * @param {SourceBuffer} destinationBuffer native source buffer to append data to
	     * @private
	     */

	  }, {
	    key: 'concatAndAppendSegments_',
	    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {
	      var offset = 0;
	      var tempBuffer = void 0;

	      if (segmentObj.bytes) {
	        tempBuffer = new Uint8Array(segmentObj.bytes);

	        // Combine the individual segments into one large typed-array
	        segmentObj.segments.forEach(function (segment) {
	          tempBuffer.set(segment, offset);
	          offset += segment.byteLength;
	        });

	        try {
	          destinationBuffer.updating = true;
	          destinationBuffer.appendBuffer(tempBuffer);
	        } catch (error) {
	          if (this.mediaSource_.player_) {
	            this.mediaSource_.player_.error({
	              code: -3,
	              type: 'APPEND_BUFFER_ERR',
	              message: error.message,
	              originalError: error
	            });
	          }
	        }
	      }
	    }

	    /**
	     * Emulate the native mediasource function. abort any soureBuffer
	     * actions and throw out any un-appended data.
	     *
	     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort
	     */

	  }, {
	    key: 'abort',
	    value: function abort() {
	      if (this.videoBuffer_) {
	        this.videoBuffer_.abort();
	      }
	      if (!this.audioDisabled_ && this.audioBuffer_) {
	        this.audioBuffer_.abort();
	      }
	      if (this.transmuxer_) {
	        this.transmuxer_.postMessage({ action: 'reset' });
	      }
	      this.pendingBuffers_.length = 0;
	      this.bufferUpdating_ = false;
	    }
	  }]);
	  return VirtualSourceBuffer;
	}(videojs.EventTarget);

	/**
	 * @file html-media-source.js
	 */

	/**
	 * Our MediaSource implementation in HTML, mimics native
	 * MediaSource where/if possible.
	 *
	 * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource
	 * @class HtmlMediaSource
	 * @extends videojs.EventTarget
	 */

	var HtmlMediaSource = function (_videojs$EventTarget) {
	  inherits$1(HtmlMediaSource, _videojs$EventTarget);

	  function HtmlMediaSource() {
	    classCallCheck$1(this, HtmlMediaSource);

	    var _this = possibleConstructorReturn$1(this, (HtmlMediaSource.__proto__ || Object.getPrototypeOf(HtmlMediaSource)).call(this));

	    var property = void 0;

	    _this.nativeMediaSource_ = new window_1.MediaSource();
	    // delegate to the native MediaSource's methods by default
	    for (property in _this.nativeMediaSource_) {
	      if (!(property in HtmlMediaSource.prototype) && typeof _this.nativeMediaSource_[property] === 'function') {
	        _this[property] = _this.nativeMediaSource_[property].bind(_this.nativeMediaSource_);
	      }
	    }

	    // emulate `duration` and `seekable` until seeking can be
	    // handled uniformly for live streams
	    // see https://github.com/w3c/media-source/issues/5
	    _this.duration_ = NaN;
	    Object.defineProperty(_this, 'duration', {
	      get: function get$$1() {
	        if (this.duration_ === Infinity) {
	          return this.duration_;
	        }
	        return this.nativeMediaSource_.duration;
	      },
	      set: function set$$1(duration) {
	        this.duration_ = duration;
	        if (duration !== Infinity) {
	          this.nativeMediaSource_.duration = duration;
	          return;
	        }
	      }
	    });
	    Object.defineProperty(_this, 'seekable', {
	      get: function get$$1() {
	        if (this.duration_ === Infinity) {
	          return videojs.createTimeRanges([[0, this.nativeMediaSource_.duration]]);
	        }
	        return this.nativeMediaSource_.seekable;
	      }
	    });

	    Object.defineProperty(_this, 'readyState', {
	      get: function get$$1() {
	        return this.nativeMediaSource_.readyState;
	      }
	    });

	    Object.defineProperty(_this, 'activeSourceBuffers', {
	      get: function get$$1() {
	        return this.activeSourceBuffers_;
	      }
	    });

	    // the list of virtual and native SourceBuffers created by this
	    // MediaSource
	    _this.sourceBuffers = [];

	    _this.activeSourceBuffers_ = [];

	    /**
	     * update the list of active source buffers based upon various
	     * imformation from HLS and video.js
	     *
	     * @private
	     */
	    _this.updateActiveSourceBuffers_ = function () {
	      // Retain the reference but empty the array
	      _this.activeSourceBuffers_.length = 0;

	      // If there is only one source buffer, then it will always be active and audio will
	      // be disabled based on the codec of the source buffer
	      if (_this.sourceBuffers.length === 1) {
	        var sourceBuffer = _this.sourceBuffers[0];

	        sourceBuffer.appendAudioInitSegment_ = true;
	        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;
	        _this.activeSourceBuffers_.push(sourceBuffer);
	        return;
	      }

	      // There are 2 source buffers, a combined (possibly video only) source buffer and
	      // and an audio only source buffer.
	      // By default, the audio in the combined virtual source buffer is enabled
	      // and the audio-only source buffer (if it exists) is disabled.
	      var disableCombined = false;
	      var disableAudioOnly = true;

	      // TODO: maybe we can store the sourcebuffers on the track objects?
	      // safari may do something like this
	      for (var i = 0; i < _this.player_.audioTracks().length; i++) {
	        var track = _this.player_.audioTracks()[i];

	        if (track.enabled && track.kind !== 'main') {
	          // The enabled track is an alternate audio track so disable the audio in
	          // the combined source buffer and enable the audio-only source buffer.
	          disableCombined = true;
	          disableAudioOnly = false;
	          break;
	        }
	      }

	      _this.sourceBuffers.forEach(function (sourceBuffer, index) {
	        /* eslinst-disable */
	        // TODO once codecs are required, we can switch to using the codecs to determine
	        //      what stream is the video stream, rather than relying on videoTracks
	        /* eslinst-enable */

	        sourceBuffer.appendAudioInitSegment_ = true;

	        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {
	          // combined
	          sourceBuffer.audioDisabled_ = disableCombined;
	        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {
	          // If the "combined" source buffer is video only, then we do not want
	          // disable the audio-only source buffer (this is mostly for demuxed
	          // audio and video hls)
	          sourceBuffer.audioDisabled_ = true;
	          disableAudioOnly = false;
	        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {
	          // audio only
	          // In the case of audio only with alternate audio and disableAudioOnly is true
	          // this means we want to disable the audio on the alternate audio sourcebuffer
	          // but not the main "combined" source buffer. The "combined" source buffer is
	          // always at index 0, so this ensures audio won't be disabled in both source
	          // buffers.
	          sourceBuffer.audioDisabled_ = index ? disableAudioOnly : !disableAudioOnly;
	          if (sourceBuffer.audioDisabled_) {
	            return;
	          }
	        }

	        _this.activeSourceBuffers_.push(sourceBuffer);
	      });
	    };

	    _this.onPlayerMediachange_ = function () {
	      _this.sourceBuffers.forEach(function (sourceBuffer) {
	        sourceBuffer.appendAudioInitSegment_ = true;
	      });
	    };

	    _this.onHlsReset_ = function () {
	      _this.sourceBuffers.forEach(function (sourceBuffer) {
	        if (sourceBuffer.transmuxer_) {
	          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });
	        }
	      });
	    };

	    _this.onHlsSegmentTimeMapping_ = function (event) {
	      _this.sourceBuffers.forEach(function (buffer) {
	        return buffer.timeMapping_ = event.mapping;
	      });
	    };

	    // Re-emit MediaSource events on the polyfill
	    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {
	      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));
	    }, _this);

	    // capture the associated player when the MediaSource is
	    // successfully attached
	    _this.on('sourceopen', function (event) {
	      // Get the player this MediaSource is attached to
	      var video = document_1.querySelector('[src="' + _this.url_ + '"]');

	      if (!video) {
	        return;
	      }

	      _this.player_ = videojs(video.parentNode);

	      if (!_this.player_) {
	        return;
	      }

	      // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader
	      // resets its state and flushes the buffer
	      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);
	      // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main
	      // SegmentLoader inspects an MTS segment and has an accurate stream to display
	      // time mapping
	      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);

	      if (_this.player_.audioTracks && _this.player_.audioTracks()) {
	        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);
	        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);
	        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);
	      }

	      _this.player_.on('mediachange', _this.onPlayerMediachange_);
	    });

	    _this.on('sourceended', function (event) {
	      var duration = durationOfVideo(_this.duration);

	      for (var i = 0; i < _this.sourceBuffers.length; i++) {
	        var sourcebuffer = _this.sourceBuffers[i];
	        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;

	        if (cues && cues.length) {
	          cues[cues.length - 1].endTime = duration;
	        }
	      }
	    });

	    // explicitly terminate any WebWorkers that were created
	    // by SourceHandlers
	    _this.on('sourceclose', function (event) {
	      this.sourceBuffers.forEach(function (sourceBuffer) {
	        if (sourceBuffer.transmuxer_) {
	          sourceBuffer.transmuxer_.terminate();
	        }
	      });

	      this.sourceBuffers.length = 0;
	      if (!this.player_) {
	        return;
	      }

	      if (this.player_.audioTracks && this.player_.audioTracks()) {
	        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);
	        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);
	        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);
	      }

	      // We can only change this if the player hasn't been disposed of yet
	      // because `off` eventually tries to use the el_ property. If it has
	      // been disposed of, then don't worry about it because there are no
	      // event handlers left to unbind anyway
	      if (this.player_.el_) {
	        this.player_.off('mediachange', this.onPlayerMediachange_);
	      }

	      if (this.player_.tech_ && this.player_.tech_.el_) {
	        this.player_.tech_.off('hls-reset', this.onHlsReset_);
	        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);
	      }
	    });
	    return _this;
	  }

	  /**
	   * Add a range that that can now be seeked to.
	   *
	   * @param {Double} start where to start the addition
	   * @param {Double} end where to end the addition
	   * @private
	   */


	  createClass(HtmlMediaSource, [{
	    key: 'addSeekableRange_',
	    value: function addSeekableRange_(start, end) {
	      var error = void 0;

	      if (this.duration !== Infinity) {
	        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');
	        error.name = 'InvalidStateError';
	        error.code = 11;
	        throw error;
	      }

	      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {
	        this.nativeMediaSource_.duration = end;
	      }
	    }

	    /**
	     * Add a source buffer to the media source.
	     *
	     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer
	     * @param {String} type the content-type of the content
	     * @return {Object} the created source buffer
	     */

	  }, {
	    key: 'addSourceBuffer',
	    value: function addSourceBuffer(type) {
	      var buffer = void 0;
	      var parsedType = parseContentType(type);

	      // Create a VirtualSourceBuffer to transmux MPEG-2 transport
	      // stream segments into fragmented MP4s
	      if (/^(video|audio)\/mp2t$/i.test(parsedType.type)) {
	        var codecs = [];

	        if (parsedType.parameters && parsedType.parameters.codecs) {
	          codecs = parsedType.parameters.codecs.split(',');
	          codecs = translateLegacyCodecs(codecs);
	          codecs = codecs.filter(function (codec) {
	            return isAudioCodec(codec) || isVideoCodec(codec);
	          });
	        }

	        if (codecs.length === 0) {
	          codecs = ['avc1.4d400d', 'mp4a.40.2'];
	        }

	        buffer = new VirtualSourceBuffer(this, codecs);

	        if (this.sourceBuffers.length !== 0) {
	          // If another VirtualSourceBuffer already exists, then we are creating a
	          // SourceBuffer for an alternate audio track and therefore we know that
	          // the source has both an audio and video track.
	          // That means we should trigger the manual creation of the real
	          // SourceBuffers instead of waiting for the transmuxer to return data
	          this.sourceBuffers[0].createRealSourceBuffers_();
	          buffer.createRealSourceBuffers_();

	          // Automatically disable the audio on the first source buffer if
	          // a second source buffer is ever created
	          this.sourceBuffers[0].audioDisabled_ = true;
	        }
	      } else {
	        // delegate to the native implementation
	        buffer = this.nativeMediaSource_.addSourceBuffer(type);
	      }

	      this.sourceBuffers.push(buffer);
	      return buffer;
	    }
	  }]);
	  return HtmlMediaSource;
	}(videojs.EventTarget);

	/**
	 * @file videojs-contrib-media-sources.js
	 */
	var urlCount = 0;

	// ------------
	// Media Source
	// ------------

	// store references to the media sources so they can be connected
	// to a video element (a swf object)
	// TODO: can we store this somewhere local to this module?
	videojs.mediaSources = {};

	/**
	 * Provide a method for a swf object to notify JS that a
	 * media source is now open.
	 *
	 * @param {String} msObjectURL string referencing the MSE Object URL
	 * @param {String} swfId the swf id
	 */
	var open = function open(msObjectURL, swfId) {
	  var mediaSource = videojs.mediaSources[msObjectURL];

	  if (mediaSource) {
	    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });
	  } else {
	    throw new Error('Media Source not found (Video.js)');
	  }
	};

	/**
	 * Check to see if the native MediaSource object exists and supports
	 * an MP4 container with both H.264 video and AAC-LC audio.
	 *
	 * @return {Boolean} if  native media sources are supported
	 */
	var supportsNativeMediaSources = function supportsNativeMediaSources() {
	  return !!window_1.MediaSource && !!window_1.MediaSource.isTypeSupported && window_1.MediaSource.isTypeSupported('video/mp4;codecs="avc1.4d400d,mp4a.40.2"');
	};

	/**
	 * An emulation of the MediaSource API so that we can support
	 * native and non-native functionality. returns an instance of
	 * HtmlMediaSource.
	 *
	 * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource
	 */
	var MediaSource = function MediaSource() {
	  this.MediaSource = {
	    open: open,
	    supportsNativeMediaSources: supportsNativeMediaSources
	  };

	  if (supportsNativeMediaSources()) {
	    return new HtmlMediaSource();
	  }

	  throw new Error('Cannot use create a virtual MediaSource for this video');
	};

	MediaSource.open = open;
	MediaSource.supportsNativeMediaSources = supportsNativeMediaSources;

	/**
	 * A wrapper around the native URL for our MSE object
	 * implementation, this object is exposed under videojs.URL
	 *
	 * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL
	 */
	var URL$1 = {
	  /**
	   * A wrapper around the native createObjectURL for our objects.
	   * This function maps a native or emulated mediaSource to a blob
	   * url so that it can be loaded into video.js
	   *
	   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	   * @param {MediaSource} object the object to create a blob url to
	   */
	  createObjectURL: function createObjectURL(object) {
	    var objectUrlPrefix = 'blob:vjs-media-source/';
	    var url = void 0;

	    // use the native MediaSource to generate an object URL
	    if (object instanceof HtmlMediaSource) {
	      url = window_1.URL.createObjectURL(object.nativeMediaSource_);
	      object.url_ = url;
	      return url;
	    }
	    // if the object isn't an emulated MediaSource, delegate to the
	    // native implementation
	    if (!(object instanceof HtmlMediaSource)) {
	      url = window_1.URL.createObjectURL(object);
	      object.url_ = url;
	      return url;
	    }

	    // build a URL that can be used to map back to the emulated
	    // MediaSource
	    url = objectUrlPrefix + urlCount;

	    urlCount++;

	    // setup the mapping back to object
	    videojs.mediaSources[url] = object;

	    return url;
	  }
	};

	videojs.MediaSource = MediaSource;
	videojs.URL = URL$1;

	/*! @name mpd-parser @version 0.7.0 @license Apache-2.0 */

	var isObject = function isObject(obj) {
	  return !!obj && typeof obj === 'object';
	};

	var merge = function merge() {
	  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
	    objects[_key] = arguments[_key];
	  }

	  return objects.reduce(function (result, source) {
	    Object.keys(source).forEach(function (key) {
	      if (Array.isArray(result[key]) && Array.isArray(source[key])) {
	        result[key] = result[key].concat(source[key]);
	      } else if (isObject(result[key]) && isObject(source[key])) {
	        result[key] = merge(result[key], source[key]);
	      } else {
	        result[key] = source[key];
	      }
	    });
	    return result;
	  }, {});
	};
	var values = function values(o) {
	  return Object.keys(o).map(function (k) {
	    return o[k];
	  });
	};

	var range = function range(start, end) {
	  var result = [];

	  for (var i = start; i < end; i++) {
	    result.push(i);
	  }

	  return result;
	};
	var flatten = function flatten(lists) {
	  return lists.reduce(function (x, y) {
	    return x.concat(y);
	  }, []);
	};
	var from = function from(list) {
	  if (!list.length) {
	    return [];
	  }

	  var result = [];

	  for (var i = 0; i < list.length; i++) {
	    result.push(list[i]);
	  }

	  return result;
	};
	var findIndexes = function findIndexes(l, key) {
	  return l.reduce(function (a, e, i) {
	    if (e[key]) {
	      a.push(i);
	    }

	    return a;
	  }, []);
	};

	var mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {
	  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {
	    // assuming playlist IDs are the same across periods
	    // TODO: handle multiperiod where representation sets are not the same
	    // across periods
	    var name = playlist.attributes.id + (playlist.attributes.lang || ''); // Periods after first

	    if (acc[name]) {
	      var _acc$name$segments;

	      // first segment of subsequent periods signal a discontinuity
	      playlist.segments[0].discontinuity = true;

	      (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments); // bubble up contentProtection, this assumes all DRM content
	      // has the same contentProtection


	      if (playlist.attributes.contentProtection) {
	        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;
	      }
	    } else {
	      // first Period
	      acc[name] = playlist;
	    }

	    return acc;
	  }, {}));
	  return mergedPlaylists.map(function (playlist) {
	    playlist.discontinuityStarts = findIndexes(playlist.segments, 'discontinuity');
	    return playlist;
	  });
	};

	var formatAudioPlaylist = function formatAudioPlaylist(_ref) {
	  var _attributes;

	  var attributes = _ref.attributes,
	      segments = _ref.segments;
	  var playlist = {
	    attributes: (_attributes = {
	      NAME: attributes.id,
	      BANDWIDTH: attributes.bandwidth,
	      CODECS: attributes.codecs
	    }, _attributes['PROGRAM-ID'] = 1, _attributes),
	    uri: '',
	    endList: (attributes.type || 'static') === 'static',
	    timeline: attributes.periodIndex,
	    resolvedUri: '',
	    targetDuration: attributes.duration,
	    segments: segments,
	    mediaSequence: segments.length ? segments[0].number : 1
	  };

	  if (attributes.contentProtection) {
	    playlist.contentProtection = attributes.contentProtection;
	  }

	  return playlist;
	};
	var formatVttPlaylist = function formatVttPlaylist(_ref2) {
	  var _attributes2;

	  var attributes = _ref2.attributes,
	      segments = _ref2.segments;

	  if (typeof segments === 'undefined') {
	    // vtt tracks may use single file in BaseURL
	    segments = [{
	      uri: attributes.baseUrl,
	      timeline: attributes.periodIndex,
	      resolvedUri: attributes.baseUrl || '',
	      duration: attributes.sourceDuration,
	      number: 0
	    }]; // targetDuration should be the same duration as the only segment

	    attributes.duration = attributes.sourceDuration;
	  }

	  return {
	    attributes: (_attributes2 = {
	      NAME: attributes.id,
	      BANDWIDTH: attributes.bandwidth
	    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),
	    uri: '',
	    endList: (attributes.type || 'static') === 'static',
	    timeline: attributes.periodIndex,
	    resolvedUri: attributes.baseUrl || '',
	    targetDuration: attributes.duration,
	    segments: segments,
	    mediaSequence: segments.length ? segments[0].number : 1
	  };
	};
	var organizeAudioPlaylists = function organizeAudioPlaylists(playlists) {
	  return playlists.reduce(function (a, playlist) {
	    var role = playlist.attributes.role && playlist.attributes.role.value || 'main';
	    var language = playlist.attributes.lang || '';
	    var label = 'main';

	    if (language) {
	      label = playlist.attributes.lang + " (" + role + ")";
	    } // skip if we already have the highest quality audio for a language


	    if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {
	      return a;
	    }

	    a[label] = {
	      language: language,
	      autoselect: true,
	      default: role === 'main',
	      playlists: [formatAudioPlaylist(playlist)],
	      uri: ''
	    };
	    return a;
	  }, {});
	};
	var organizeVttPlaylists = function organizeVttPlaylists(playlists) {
	  return playlists.reduce(function (a, playlist) {
	    var label = playlist.attributes.lang || 'text'; // skip if we already have subtitles

	    if (a[label]) {
	      return a;
	    }

	    a[label] = {
	      language: label,
	      default: false,
	      autoselect: false,
	      playlists: [formatVttPlaylist(playlist)],
	      uri: ''
	    };
	    return a;
	  }, {});
	};
	var formatVideoPlaylist = function formatVideoPlaylist(_ref3) {
	  var _attributes3;

	  var attributes = _ref3.attributes,
	      segments = _ref3.segments;
	  var playlist = {
	    attributes: (_attributes3 = {
	      NAME: attributes.id,
	      AUDIO: 'audio',
	      SUBTITLES: 'subs',
	      RESOLUTION: {
	        width: attributes.width,
	        height: attributes.height
	      },
	      CODECS: attributes.codecs,
	      BANDWIDTH: attributes.bandwidth
	    }, _attributes3['PROGRAM-ID'] = 1, _attributes3),
	    uri: '',
	    endList: (attributes.type || 'static') === 'static',
	    timeline: attributes.periodIndex,
	    resolvedUri: '',
	    targetDuration: attributes.duration,
	    segments: segments,
	    mediaSequence: segments.length ? segments[0].number : 1
	  };

	  if (attributes.contentProtection) {
	    playlist.contentProtection = attributes.contentProtection;
	  }

	  return playlist;
	};
	var toM3u8 = function toM3u8(dashPlaylists) {
	  var _mediaGroups;

	  if (!dashPlaylists.length) {
	    return {};
	  } // grab all master attributes


	  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,
	      duration = _dashPlaylists$0$attr.sourceDuration,
	      _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.minimumUpdatePeriod,
	      minimumUpdatePeriod = _dashPlaylists$0$attr2 === void 0 ? 0 : _dashPlaylists$0$attr2;

	  var videoOnly = function videoOnly(_ref4) {
	    var attributes = _ref4.attributes;
	    return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';
	  };

	  var audioOnly = function audioOnly(_ref5) {
	    var attributes = _ref5.attributes;
	    return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';
	  };

	  var vttOnly = function vttOnly(_ref6) {
	    var attributes = _ref6.attributes;
	    return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';
	  };

	  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);
	  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));
	  var vttPlaylists = dashPlaylists.filter(vttOnly);
	  var master = {
	    allowCache: true,
	    discontinuityStarts: [],
	    segments: [],
	    endList: true,
	    mediaGroups: (_mediaGroups = {
	      AUDIO: {},
	      VIDEO: {}
	    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),
	    uri: '',
	    duration: duration,
	    playlists: videoPlaylists,
	    minimumUpdatePeriod: minimumUpdatePeriod * 1000
	  };

	  if (audioPlaylists.length) {
	    master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists);
	  }

	  if (vttPlaylists.length) {
	    master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists);
	  }

	  return master;
	};

	var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule$1(fn, module) {
	  return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var urlToolkit$1 = createCommonjsModule$1(function (module, exports) {
	  // see https://tools.ietf.org/html/rfc1808

	  /* jshint ignore:start */
	  (function (root) {
	    /* jshint ignore:end */

	    var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/;
	    var FIRST_SEGMENT_REGEX = /^([^\/?#]*)(.*)$/;
	    var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
	    var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g;

	    var URLToolkit = { // jshint ignore:line
	      // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
	      // E.g
	      // With opts.alwaysNormalize = false (default, spec compliant)
	      // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
	      // With opts.alwaysNormalize = true (not spec compliant)
	      // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
	      buildAbsoluteURL: function buildAbsoluteURL(baseURL, relativeURL, opts) {
	        opts = opts || {};
	        // remove any remaining space and CRLF
	        baseURL = baseURL.trim();
	        relativeURL = relativeURL.trim();
	        if (!relativeURL) {
	          // 2a) If the embedded URL is entirely empty, it inherits the
	          // entire base URL (i.e., is set equal to the base URL)
	          // and we are done.
	          if (!opts.alwaysNormalize) {
	            return baseURL;
	          }
	          var basePartsForNormalise = URLToolkit.parseURL(baseURL);
	          if (!basePartsForNormalise) {
	            throw new Error('Error trying to parse base URL.');
	          }
	          basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
	          return URLToolkit.buildURLFromParts(basePartsForNormalise);
	        }
	        var relativeParts = URLToolkit.parseURL(relativeURL);
	        if (!relativeParts) {
	          throw new Error('Error trying to parse relative URL.');
	        }
	        if (relativeParts.scheme) {
	          // 2b) If the embedded URL starts with a scheme name, it is
	          // interpreted as an absolute URL and we are done.
	          if (!opts.alwaysNormalize) {
	            return relativeURL;
	          }
	          relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
	          return URLToolkit.buildURLFromParts(relativeParts);
	        }
	        var baseParts = URLToolkit.parseURL(baseURL);
	        if (!baseParts) {
	          throw new Error('Error trying to parse base URL.');
	        }
	        if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
	          // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
	          // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
	          var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
	          baseParts.netLoc = pathParts[1];
	          baseParts.path = pathParts[2];
	        }
	        if (baseParts.netLoc && !baseParts.path) {
	          baseParts.path = '/';
	        }
	        var builtParts = {
	          // 2c) Otherwise, the embedded URL inherits the scheme of
	          // the base URL.
	          scheme: baseParts.scheme,
	          netLoc: relativeParts.netLoc,
	          path: null,
	          params: relativeParts.params,
	          query: relativeParts.query,
	          fragment: relativeParts.fragment
	        };
	        if (!relativeParts.netLoc) {
	          // 3) If the embedded URL's <net_loc> is non-empty, we skip to
	          // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
	          // (if any) of the base URL.
	          builtParts.netLoc = baseParts.netLoc;
	          // 4) If the embedded URL path is preceded by a slash "/", the
	          // path is not relative and we skip to Step 7.
	          if (relativeParts.path[0] !== '/') {
	            if (!relativeParts.path) {
	              // 5) If the embedded URL path is empty (and not preceded by a
	              // slash), then the embedded URL inherits the base URL path
	              builtParts.path = baseParts.path;
	              // 5a) if the embedded URL's <params> is non-empty, we skip to
	              // step 7; otherwise, it inherits the <params> of the base
	              // URL (if any) and
	              if (!relativeParts.params) {
	                builtParts.params = baseParts.params;
	                // 5b) if the embedded URL's <query> is non-empty, we skip to
	                // step 7; otherwise, it inherits the <query> of the base
	                // URL (if any) and we skip to step 7.
	                if (!relativeParts.query) {
	                  builtParts.query = baseParts.query;
	                }
	              }
	            } else {
	              // 6) The last segment of the base URL's path (anything
	              // following the rightmost slash "/", or the entire path if no
	              // slash is present) is removed and the embedded URL's path is
	              // appended in its place.
	              var baseURLPath = baseParts.path;
	              var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;
	              builtParts.path = URLToolkit.normalizePath(newPath);
	            }
	          }
	        }
	        if (builtParts.path === null) {
	          builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
	        }
	        return URLToolkit.buildURLFromParts(builtParts);
	      },
	      parseURL: function parseURL(url) {
	        var parts = URL_REGEX.exec(url);
	        if (!parts) {
	          return null;
	        }
	        return {
	          scheme: parts[1] || '',
	          netLoc: parts[2] || '',
	          path: parts[3] || '',
	          params: parts[4] || '',
	          query: parts[5] || '',
	          fragment: parts[6] || ''
	        };
	      },
	      normalizePath: function normalizePath(path) {
	        // The following operations are
	        // then applied, in order, to the new path:
	        // 6a) All occurrences of "./", where "." is a complete path
	        // segment, are removed.
	        // 6b) If the path ends with "." as a complete path segment,
	        // that "." is removed.
	        path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
	        // 6c) All occurrences of "<segment>/../", where <segment> is a
	        // complete path segment not equal to "..", are removed.
	        // Removal of these path segments is performed iteratively,
	        // removing the leftmost matching pattern on each iteration,
	        // until no matching pattern remains.
	        // 6d) If the path ends with "<segment>/..", where <segment> is a
	        // complete path segment not equal to "..", that
	        // "<segment>/.." is removed.
	        while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line
	        return path.split('').reverse().join('');
	      },
	      buildURLFromParts: function buildURLFromParts(parts) {
	        return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
	      }
	    };

	    /* jshint ignore:start */
	    module.exports = URLToolkit;
	  })(commonjsGlobal$1);
	  /* jshint ignore:end */
	});

	var resolveUrl$1 = function resolveUrl(baseUrl, relativeUrl) {
	  // return early if we don't need to resolve
	  if (/^[a-z]+:/i.test(relativeUrl)) {
	    return relativeUrl;
	  } // if the base URL is relative then combine with the current location


	  if (!/\/\//i.test(baseUrl)) {
	    baseUrl = urlToolkit$1.buildAbsoluteURL(window_1.location.href, baseUrl);
	  }

	  return urlToolkit$1.buildAbsoluteURL(baseUrl, relativeUrl);
	};

	/**
	 * @typedef {Object} SingleUri
	 * @property {string} uri - relative location of segment
	 * @property {string} resolvedUri - resolved location of segment
	 * @property {Object} byterange - Object containing information on how to make byte range
	 *   requests following byte-range-spec per RFC2616.
	 * @property {String} byterange.length - length of range request
	 * @property {String} byterange.offset - byte offset of range request
	 *
	 * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1
	 */

	/**
	 * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object
	 * that conforms to how m3u8-parser is structured
	 *
	 * @see https://github.com/videojs/m3u8-parser
	 *
	 * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes
	 * @param {string} source - source url for segment
	 * @param {string} range - optional range used for range calls, follows
	 * @return {SingleUri} full segment information transformed into a format similar
	 *   to m3u8-parser
	 */

	var urlTypeToSegment = function urlTypeToSegment(_ref) {
	  var _ref$baseUrl = _ref.baseUrl,
	      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,
	      _ref$source = _ref.source,
	      source = _ref$source === void 0 ? '' : _ref$source,
	      _ref$range = _ref.range,
	      range = _ref$range === void 0 ? '' : _ref$range;
	  var init = {
	    uri: source,
	    resolvedUri: resolveUrl$1(baseUrl || '', source)
	  };

	  if (range) {
	    var ranges = range.split('-');
	    var startRange = parseInt(ranges[0], 10);
	    var endRange = parseInt(ranges[1], 10);
	    init.byterange = {
	      length: endRange - startRange,
	      offset: startRange
	    };
	  }

	  return init;
	};

	/**
	 * Calculates the R (repetition) value for a live stream (for the final segment
	 * in a manifest where the r value is negative 1)
	 *
	 * @param {Object} attributes
	 *        Object containing all inherited attributes from parent elements with attribute
	 *        names as keys
	 * @param {number} time
	 *        current time (typically the total time up until the final segment)
	 * @param {number} duration
	 *        duration property for the given <S />
	 *
	 * @return {number}
	 *        R value to reach the end of the given period
	 */
	var getLiveRValue = function getLiveRValue(attributes, time, duration) {
	  var NOW = attributes.NOW,
	      clientOffset = attributes.clientOffset,
	      availabilityStartTime = attributes.availabilityStartTime,
	      _attributes$timescale = attributes.timescale,
	      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,
	      _attributes$start = attributes.start,
	      start = _attributes$start === void 0 ? 0 : _attributes$start,
	      _attributes$minimumUp = attributes.minimumUpdatePeriod,
	      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;
	  var now = (NOW + clientOffset) / 1000;
	  var periodStartWC = availabilityStartTime + start;
	  var periodEndWC = now + minimumUpdatePeriod;
	  var periodDuration = periodEndWC - periodStartWC;
	  return Math.ceil((periodDuration * timescale - time) / duration);
	};
	/**
	 * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment
	 * timing and duration
	 *
	 * @param {Object} attributes
	 *        Object containing all inherited attributes from parent elements with attribute
	 *        names as keys
	 * @param {Object[]} segmentTimeline
	 *        List of objects representing the attributes of each S element contained within
	 *
	 * @return {{number: number, duration: number, time: number, timeline: number}[]}
	 *         List of Objects with segment timing and duration info
	 */

	var parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {
	  var _attributes$type = attributes.type,
	      type = _attributes$type === void 0 ? 'static' : _attributes$type,
	      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,
	      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,
	      _attributes$media = attributes.media,
	      media = _attributes$media === void 0 ? '' : _attributes$media,
	      sourceDuration = attributes.sourceDuration,
	      _attributes$timescale2 = attributes.timescale,
	      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,
	      _attributes$startNumb = attributes.startNumber,
	      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,
	      timeline = attributes.periodIndex;
	  var segments = [];
	  var time = -1;

	  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {
	    var S = segmentTimeline[sIndex];
	    var duration = S.d;
	    var repeat = S.r || 0;
	    var segmentTime = S.t || 0;

	    if (time < 0) {
	      // first segment
	      time = segmentTime;
	    }

	    if (segmentTime && segmentTime > time) {
	      // discontinuity
	      // TODO: How to handle this type of discontinuity
	      // timeline++ here would treat it like HLS discontuity and content would
	      // get appended without gap
	      // E.G.
	      //  <S t="0" d="1" />
	      //  <S d="1" />
	      //  <S d="1" />
	      //  <S t="5" d="1" />
	      // would have $Time$ values of [0, 1, 2, 5]
	      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)
	      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)
	      // does the value of sourceDuration consider this when calculating arbitrary
	      // negative @r repeat value?
	      // E.G. Same elements as above with this added at the end
	      //  <S d="1" r="-1" />
	      //  with a sourceDuration of 10
	      // Would the 2 gaps be included in the time duration calculations resulting in
	      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments
	      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?
	      time = segmentTime;
	    }

	    var count = void 0;

	    if (repeat < 0) {
	      var nextS = sIndex + 1;

	      if (nextS === segmentTimeline.length) {
	        // last segment
	        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {
	          count = getLiveRValue(attributes, time, duration);
	        } else {
	          // TODO: This may be incorrect depending on conclusion of TODO above
	          count = (sourceDuration * timescale - time) / duration;
	        }
	      } else {
	        count = (segmentTimeline[nextS].t - time) / duration;
	      }
	    } else {
	      count = repeat + 1;
	    }

	    var end = startNumber + segments.length + count;
	    var number = startNumber + segments.length;

	    while (number < end) {
	      segments.push({
	        number: number,
	        duration: duration / timescale,
	        time: time,
	        timeline: timeline
	      });
	      time += duration;
	      number++;
	    }
	  }

	  return segments;
	};

	/**
	 * Functions for calculating the range of available segments in static and dynamic
	 * manifests.
	 */

	var segmentRange = {
	  /**
	   * Returns the entire range of available segments for a static MPD
	   *
	   * @param {Object} attributes
	   *        Inheritied MPD attributes
	   * @return {{ start: number, end: number }}
	   *         The start and end numbers for available segments
	   */
	  static: function _static(attributes) {
	    var duration = attributes.duration,
	        _attributes$timescale = attributes.timescale,
	        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,
	        sourceDuration = attributes.sourceDuration;
	    return {
	      start: 0,
	      end: Math.ceil(sourceDuration / (duration / timescale))
	    };
	  },

	  /**
	   * Returns the current live window range of available segments for a dynamic MPD
	   *
	   * @param {Object} attributes
	   *        Inheritied MPD attributes
	   * @return {{ start: number, end: number }}
	   *         The start and end numbers for available segments
	   */
	  dynamic: function dynamic(attributes) {
	    var NOW = attributes.NOW,
	        clientOffset = attributes.clientOffset,
	        availabilityStartTime = attributes.availabilityStartTime,
	        _attributes$timescale2 = attributes.timescale,
	        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,
	        duration = attributes.duration,
	        _attributes$start = attributes.start,
	        start = _attributes$start === void 0 ? 0 : _attributes$start,
	        _attributes$minimumUp = attributes.minimumUpdatePeriod,
	        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,
	        _attributes$timeShift = attributes.timeShiftBufferDepth,
	        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;
	    var now = (NOW + clientOffset) / 1000;
	    var periodStartWC = availabilityStartTime + start;
	    var periodEndWC = now + minimumUpdatePeriod;
	    var periodDuration = periodEndWC - periodStartWC;
	    var segmentCount = Math.ceil(periodDuration * timescale / duration);
	    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);
	    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);
	    return {
	      start: Math.max(0, availableStart),
	      end: Math.min(segmentCount, availableEnd)
	    };
	  }
	};
	/**
	 * Maps a range of numbers to objects with information needed to build the corresponding
	 * segment list
	 *
	 * @name toSegmentsCallback
	 * @function
	 * @param {number} number
	 *        Number of the segment
	 * @param {number} index
	 *        Index of the number in the range list
	 * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}
	 *         Object with segment timing and duration info
	 */

	/**
	 * Returns a callback for Array.prototype.map for mapping a range of numbers to
	 * information needed to build the segment list.
	 *
	 * @param {Object} attributes
	 *        Inherited MPD attributes
	 * @return {toSegmentsCallback}
	 *         Callback map function
	 */

	var toSegments = function toSegments(attributes) {
	  return function (number, index) {
	    var duration = attributes.duration,
	        _attributes$timescale3 = attributes.timescale,
	        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,
	        periodIndex = attributes.periodIndex,
	        _attributes$startNumb = attributes.startNumber,
	        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;
	    return {
	      number: startNumber + number,
	      duration: duration / timescale,
	      timeline: periodIndex,
	      time: index * duration
	    };
	  };
	};
	/**
	 * Returns a list of objects containing segment timing and duration info used for
	 * building the list of segments. This uses the @duration attribute specified
	 * in the MPD manifest to derive the range of segments.
	 *
	 * @param {Object} attributes
	 *        Inherited MPD attributes
	 * @return {{number: number, duration: number, time: number, timeline: number}[]}
	 *         List of Objects with segment timing and duration info
	 */

	var parseByDuration = function parseByDuration(attributes) {
	  var _attributes$type = attributes.type,
	      type = _attributes$type === void 0 ? 'static' : _attributes$type,
	      duration = attributes.duration,
	      _attributes$timescale4 = attributes.timescale,
	      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,
	      sourceDuration = attributes.sourceDuration;

	  var _segmentRange$type = segmentRange[type](attributes),
	      start = _segmentRange$type.start,
	      end = _segmentRange$type.end;

	  var segments = range(start, end).map(toSegments(attributes));

	  if (type === 'static') {
	    var index = segments.length - 1; // final segment may be less than full segment duration

	    segments[index].duration = sourceDuration - duration / timescale * index;
	  }

	  return segments;
	};

	var identifierPattern = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g;
	/**
	 * Replaces template identifiers with corresponding values. To be used as the callback
	 * for String.prototype.replace
	 *
	 * @name replaceCallback
	 * @function
	 * @param {string} match
	 *        Entire match of identifier
	 * @param {string} identifier
	 *        Name of matched identifier
	 * @param {string} format
	 *        Format tag string. Its presence indicates that padding is expected
	 * @param {string} width
	 *        Desired length of the replaced value. Values less than this width shall be left
	 *        zero padded
	 * @return {string}
	 *         Replacement for the matched identifier
	 */

	/**
	 * Returns a function to be used as a callback for String.prototype.replace to replace
	 * template identifiers
	 *
	 * @param {Obect} values
	 *        Object containing values that shall be used to replace known identifiers
	 * @param {number} values.RepresentationID
	 *        Value of the Representation@id attribute
	 * @param {number} values.Number
	 *        Number of the corresponding segment
	 * @param {number} values.Bandwidth
	 *        Value of the Representation@bandwidth attribute.
	 * @param {number} values.Time
	 *        Timestamp value of the corresponding segment
	 * @return {replaceCallback}
	 *         Callback to be used with String.prototype.replace to replace identifiers
	 */

	var identifierReplacement = function identifierReplacement(values) {
	  return function (match, identifier, format, width) {
	    if (match === '$$') {
	      // escape sequence
	      return '$';
	    }

	    if (typeof values[identifier] === 'undefined') {
	      return match;
	    }

	    var value = '' + values[identifier];

	    if (identifier === 'RepresentationID') {
	      // Format tag shall not be present with RepresentationID
	      return value;
	    }

	    if (!format) {
	      width = 1;
	    } else {
	      width = parseInt(width, 10);
	    }

	    if (value.length >= width) {
	      return value;
	    }

	    return "" + new Array(width - value.length + 1).join('0') + value;
	  };
	};
	/**
	 * Constructs a segment url from a template string
	 *
	 * @param {string} url
	 *        Template string to construct url from
	 * @param {Obect} values
	 *        Object containing values that shall be used to replace known identifiers
	 * @param {number} values.RepresentationID
	 *        Value of the Representation@id attribute
	 * @param {number} values.Number
	 *        Number of the corresponding segment
	 * @param {number} values.Bandwidth
	 *        Value of the Representation@bandwidth attribute.
	 * @param {number} values.Time
	 *        Timestamp value of the corresponding segment
	 * @return {string}
	 *         Segment url with identifiers replaced
	 */

	var constructTemplateUrl = function constructTemplateUrl(url, values) {
	  return url.replace(identifierPattern, identifierReplacement(values));
	};
	/**
	 * Generates a list of objects containing timing and duration information about each
	 * segment needed to generate segment uris and the complete segment object
	 *
	 * @param {Object} attributes
	 *        Object containing all inherited attributes from parent elements with attribute
	 *        names as keys
	 * @param {Object[]|undefined} segmentTimeline
	 *        List of objects representing the attributes of each S element contained within
	 *        the SegmentTimeline element
	 * @return {{number: number, duration: number, time: number, timeline: number}[]}
	 *         List of Objects with segment timing and duration info
	 */

	var parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {
	  if (!attributes.duration && !segmentTimeline) {
	    // if neither @duration or SegmentTimeline are present, then there shall be exactly
	    // one media segment
	    return [{
	      number: attributes.startNumber || 1,
	      duration: attributes.sourceDuration,
	      time: 0,
	      timeline: attributes.periodIndex
	    }];
	  }

	  if (attributes.duration) {
	    return parseByDuration(attributes);
	  }

	  return parseByTimeline(attributes, segmentTimeline);
	};
	/**
	 * Generates a list of segments using information provided by the SegmentTemplate element
	 *
	 * @param {Object} attributes
	 *        Object containing all inherited attributes from parent elements with attribute
	 *        names as keys
	 * @param {Object[]|undefined} segmentTimeline
	 *        List of objects representing the attributes of each S element contained within
	 *        the SegmentTimeline element
	 * @return {Object[]}
	 *         List of segment objects
	 */

	var segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {
	  var templateValues = {
	    RepresentationID: attributes.id,
	    Bandwidth: attributes.bandwidth || 0
	  };
	  var _attributes$initializ = attributes.initialization,
	      initialization = _attributes$initializ === void 0 ? {
	    sourceURL: '',
	    range: ''
	  } : _attributes$initializ;
	  var mapSegment = urlTypeToSegment({
	    baseUrl: attributes.baseUrl,
	    source: constructTemplateUrl(initialization.sourceURL, templateValues),
	    range: initialization.range
	  });
	  var segments = parseTemplateInfo(attributes, segmentTimeline);
	  return segments.map(function (segment) {
	    templateValues.Number = segment.number;
	    templateValues.Time = segment.time;
	    var uri = constructTemplateUrl(attributes.media || '', templateValues);
	    return {
	      uri: uri,
	      timeline: segment.timeline,
	      duration: segment.duration,
	      resolvedUri: resolveUrl$1(attributes.baseUrl || '', uri),
	      map: mapSegment,
	      number: segment.number
	    };
	  });
	};

	var errors = {
	  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',
	  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',
	  DASH_INVALID_XML: 'DASH_INVALID_XML',
	  NO_BASE_URL: 'NO_BASE_URL',
	  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',
	  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',
	  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'
	};

	/**
	 * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)
	 * to an object that matches the output of a segment in videojs/mpd-parser
	 *
	 * @param {Object} attributes
	 *   Object containing all inherited attributes from parent elements with attribute
	 *   names as keys
	 * @param {Object} segmentUrl
	 *   <SegmentURL> node to translate into a segment object
	 * @return {Object} translated segment object
	 */

	var SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {
	  var baseUrl = attributes.baseUrl,
	      _attributes$initializ = attributes.initialization,
	      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;
	  var initSegment = urlTypeToSegment({
	    baseUrl: baseUrl,
	    source: initialization.sourceURL,
	    range: initialization.range
	  });
	  var segment = urlTypeToSegment({
	    baseUrl: baseUrl,
	    source: segmentUrl.media,
	    range: segmentUrl.mediaRange
	  });
	  segment.map = initSegment;
	  return segment;
	};
	/**
	 * Generates a list of segments using information provided by the SegmentList element
	 * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each
	 * node should be translated into segment.
	 *
	 * @param {Object} attributes
	 *   Object containing all inherited attributes from parent elements with attribute
	 *   names as keys
	 * @param {Object[]|undefined} segmentTimeline
	 *        List of objects representing the attributes of each S element contained within
	 *        the SegmentTimeline element
	 * @return {Object.<Array>} list of segments
	 */

	var segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {
	  var duration = attributes.duration,
	      _attributes$segmentUr = attributes.segmentUrls,
	      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr; // Per spec (5.3.9.2.1) no way to determine segment duration OR
	  // if both SegmentTimeline and @duration are defined, it is outside of spec.

	  if (!duration && !segmentTimeline || duration && segmentTimeline) {
	    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);
	  }

	  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {
	    return SegmentURLToSegmentObject(attributes, segmentUrlObject);
	  });
	  var segmentTimeInfo;

	  if (duration) {
	    segmentTimeInfo = parseByDuration(attributes);
	  }

	  if (segmentTimeline) {
	    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);
	  }

	  var segments = segmentTimeInfo.map(function (segmentTime, index) {
	    if (segmentUrlMap[index]) {
	      var segment = segmentUrlMap[index];
	      segment.timeline = segmentTime.timeline;
	      segment.duration = segmentTime.duration;
	      segment.number = segmentTime.number;
	      return segment;
	    } // Since we're mapping we should get rid of any blank segments (in case
	    // the given SegmentTimeline is handling for more elements than we have
	    // SegmentURLs for).
	  }).filter(function (segment) {
	    return segment;
	  });
	  return segments;
	};

	/**
	 * Translates SegmentBase into a set of segments.
	 * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each
	 * node should be translated into segment.
	 *
	 * @param {Object} attributes
	 *   Object containing all inherited attributes from parent elements with attribute
	 *   names as keys
	 * @return {Object.<Array>} list of segments
	 */

	var segmentsFromBase = function segmentsFromBase(attributes) {
	  var baseUrl = attributes.baseUrl,
	      _attributes$initializ = attributes.initialization,
	      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,
	      sourceDuration = attributes.sourceDuration,
	      _attributes$timescale = attributes.timescale,
	      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,
	      _attributes$indexRang = attributes.indexRange,
	      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,
	      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)

	  if (!baseUrl) {
	    throw new Error(errors.NO_BASE_URL);
	  }

	  var initSegment = urlTypeToSegment({
	    baseUrl: baseUrl,
	    source: initialization.sourceURL,
	    range: initialization.range
	  });
	  var segment = urlTypeToSegment({
	    baseUrl: baseUrl,
	    source: baseUrl,
	    range: indexRange
	  });
	  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source
	  // (since SegmentBase is only for one total segment)

	  if (duration) {
	    var segmentTimeInfo = parseByDuration(attributes);

	    if (segmentTimeInfo.length) {
	      segment.duration = segmentTimeInfo[0].duration;
	      segment.timeline = segmentTimeInfo[0].timeline;
	    }
	  } else if (sourceDuration) {
	    segment.duration = sourceDuration / timescale;
	    segment.timeline = 0;
	  } // This is used for mediaSequence


	  segment.number = 0;
	  return [segment];
	};

	var generateSegments = function generateSegments(_ref) {
	  var attributes = _ref.attributes,
	      segmentInfo = _ref.segmentInfo;
	  var segmentAttributes;
	  var segmentsFn;

	  if (segmentInfo.template) {
	    segmentsFn = segmentsFromTemplate;
	    segmentAttributes = merge(attributes, segmentInfo.template);
	  } else if (segmentInfo.base) {
	    segmentsFn = segmentsFromBase;
	    segmentAttributes = merge(attributes, segmentInfo.base);
	  } else if (segmentInfo.list) {
	    segmentsFn = segmentsFromList;
	    segmentAttributes = merge(attributes, segmentInfo.list);
	  }

	  if (!segmentsFn) {
	    return {
	      attributes: attributes
	    };
	  }

	  var segments = segmentsFn(segmentAttributes, segmentInfo.timeline); // The @duration attribute will be used to determin the playlist's targetDuration which
	  // must be in seconds. Since we've generated the segment list, we no longer need
	  // @duration to be in @timescale units, so we can convert it here.

	  if (segmentAttributes.duration) {
	    var _segmentAttributes = segmentAttributes,
	        duration = _segmentAttributes.duration,
	        _segmentAttributes$ti = _segmentAttributes.timescale,
	        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;
	    segmentAttributes.duration = duration / timescale;
	  } else if (segments.length) {
	    // if there is no @duration attribute, use the largest segment duration as
	    // as target duration
	    segmentAttributes.duration = segments.reduce(function (max, segment) {
	      return Math.max(max, Math.ceil(segment.duration));
	    }, 0);
	  } else {
	    segmentAttributes.duration = 0;
	  }

	  return {
	    attributes: segmentAttributes,
	    segments: segments
	  };
	};
	var toPlaylists = function toPlaylists(representations) {
	  return representations.map(generateSegments);
	};

	var findChildren = function findChildren(element, name) {
	  return from(element.childNodes).filter(function (_ref) {
	    var tagName = _ref.tagName;
	    return tagName === name;
	  });
	};
	var getContent = function getContent(element) {
	  return element.textContent.trim();
	};

	var parseDuration = function parseDuration(str) {
	  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;
	  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;
	  var SECONDS_IN_DAY = 24 * 60 * 60;
	  var SECONDS_IN_HOUR = 60 * 60;
	  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S

	  var durationRegex = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/;
	  var match = durationRegex.exec(str);

	  if (!match) {
	    return 0;
	  }

	  var _match$slice = match.slice(1),
	      year = _match$slice[0],
	      month = _match$slice[1],
	      day = _match$slice[2],
	      hour = _match$slice[3],
	      minute = _match$slice[4],
	      second = _match$slice[5];

	  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);
	};
	var parseDate = function parseDate(str) {
	  // Date format without timezone according to ISO 8601
	  // YYY-MM-DDThh:mm:ss.ssssss
	  var dateRegex = /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is
	  // expressed by ending with 'Z'

	  if (dateRegex.test(str)) {
	    str += 'Z';
	  }

	  return Date.parse(str);
	};

	var parsers = {
	  /**
	   * Specifies the duration of the entire Media Presentation. Format is a duration string
	   * as specified in ISO 8601
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The duration in seconds
	   */
	  mediaPresentationDuration: function mediaPresentationDuration(value) {
	    return parseDuration(value);
	  },

	  /**
	   * Specifies the Segment availability start time for all Segments referred to in this
	   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability
	   * time. Format is a date string as specified in ISO 8601
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The date as seconds from unix epoch
	   */
	  availabilityStartTime: function availabilityStartTime(value) {
	    return parseDate(value) / 1000;
	  },

	  /**
	   * Specifies the smallest period between potential changes to the MPD. Format is a
	   * duration string as specified in ISO 8601
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The duration in seconds
	   */
	  minimumUpdatePeriod: function minimumUpdatePeriod(value) {
	    return parseDuration(value);
	  },

	  /**
	   * Specifies the duration of the smallest time shifting buffer for any Representation
	   * in the MPD. Format is a duration string as specified in ISO 8601
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The duration in seconds
	   */
	  timeShiftBufferDepth: function timeShiftBufferDepth(value) {
	    return parseDuration(value);
	  },

	  /**
	   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.
	   * Format is a duration string as specified in ISO 8601
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The duration in seconds
	   */
	  start: function start(value) {
	    return parseDuration(value);
	  },

	  /**
	   * Specifies the width of the visual presentation
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed width
	   */
	  width: function width(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Specifies the height of the visual presentation
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed height
	   */
	  height: function height(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Specifies the bitrate of the representation
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed bandwidth
	   */
	  bandwidth: function bandwidth(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Specifies the number of the first Media Segment in this Representation in the Period
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed number
	   */
	  startNumber: function startNumber(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Specifies the timescale in units per seconds
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The aprsed timescale
	   */
	  timescale: function timescale(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Specifies the constant approximate Segment duration
	   * NOTE: The <Period> element also contains an @duration attribute. This duration
	   *       specifies the duration of the Period. This attribute is currently not
	   *       supported by the rest of the parser, however we still check for it to prevent
	   *       errors.
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed duration
	   */
	  duration: function duration(value) {
	    var parsedValue = parseInt(value, 10);

	    if (isNaN(parsedValue)) {
	      return parseDuration(value);
	    }

	    return parsedValue;
	  },

	  /**
	   * Specifies the Segment duration, in units of the value of the @timescale.
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed duration
	   */
	  d: function d(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Specifies the MPD start time, in @timescale units, the first Segment in the series
	   * starts relative to the beginning of the Period
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed time
	   */
	  t: function t(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Specifies the repeat count of the number of following contiguous Segments with the
	   * same duration expressed by the value of @d
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {number}
	   *         The parsed number
	   */
	  r: function r(value) {
	    return parseInt(value, 10);
	  },

	  /**
	   * Default parser for all other attributes. Acts as a no-op and just returns the value
	   * as a string
	   *
	   * @param {string} value
	   *        value of attribute as a string
	   * @return {string}
	   *         Unparsed value
	   */
	  DEFAULT: function DEFAULT(value) {
	    return value;
	  }
	};
	/**
	 * Gets all the attributes and values of the provided node, parses attributes with known
	 * types, and returns an object with attribute names mapped to values.
	 *
	 * @param {Node} el
	 *        The node to parse attributes from
	 * @return {Object}
	 *         Object with all attributes of el parsed
	 */

	var parseAttributes$1 = function parseAttributes(el) {
	  if (!(el && el.attributes)) {
	    return {};
	  }

	  return from(el.attributes).reduce(function (a, e) {
	    var parseFn = parsers[e.name] || parsers.DEFAULT;
	    a[e.name] = parseFn(e.value);
	    return a;
	  }, {});
	};

	function decodeB64ToUint8Array(b64Text) {
	  var decodedString = window_1.atob(b64Text);
	  var array = new Uint8Array(decodedString.length);

	  for (var i = 0; i < decodedString.length; i++) {
	    array[i] = decodedString.charCodeAt(i);
	  }

	  return array;
	}

	var keySystemsMap = {
	  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',
	  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',
	  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',
	  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'
	};
	/**
	 * Builds a list of urls that is the product of the reference urls and BaseURL values
	 *
	 * @param {string[]} referenceUrls
	 *        List of reference urls to resolve to
	 * @param {Node[]} baseUrlElements
	 *        List of BaseURL nodes from the mpd
	 * @return {string[]}
	 *         List of resolved urls
	 */

	var buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {
	  if (!baseUrlElements.length) {
	    return referenceUrls;
	  }

	  return flatten(referenceUrls.map(function (reference) {
	    return baseUrlElements.map(function (baseUrlElement) {
	      return resolveUrl$1(reference, getContent(baseUrlElement));
	    });
	  }));
	};
	/**
	 * Contains all Segment information for its containing AdaptationSet
	 *
	 * @typedef {Object} SegmentInformation
	 * @property {Object|undefined} template
	 *           Contains the attributes for the SegmentTemplate node
	 * @property {Object[]|undefined} timeline
	 *           Contains a list of atrributes for each S node within the SegmentTimeline node
	 * @property {Object|undefined} list
	 *           Contains the attributes for the SegmentList node
	 * @property {Object|undefined} base
	 *           Contains the attributes for the SegmentBase node
	 */

	/**
	 * Returns all available Segment information contained within the AdaptationSet node
	 *
	 * @param {Node} adaptationSet
	 *        The AdaptationSet node to get Segment information from
	 * @return {SegmentInformation}
	 *         The Segment information contained within the provided AdaptationSet
	 */

	var getSegmentInformation = function getSegmentInformation(adaptationSet) {
	  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];
	  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];
	  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {
	    return merge({
	      tag: 'SegmentURL'
	    }, parseAttributes$1(s));
	  });
	  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];
	  var segmentTimelineParentNode = segmentList || segmentTemplate;
	  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];
	  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;
	  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both
	  // @initialization and an <Initialization> node.  @initialization can be templated,
	  // while the node can have a url and range specified.  If the <SegmentTemplate> has
	  // both @initialization and an <Initialization> subelement we opt to override with
	  // the node, as this interaction is not defined in the spec.

	  var template = segmentTemplate && parseAttributes$1(segmentTemplate);

	  if (template && segmentInitialization) {
	    template.initialization = segmentInitialization && parseAttributes$1(segmentInitialization);
	  } else if (template && template.initialization) {
	    // If it is @initialization we convert it to an object since this is the format that
	    // later functions will rely on for the initialization segment.  This is only valid
	    // for <SegmentTemplate>
	    template.initialization = {
	      sourceURL: template.initialization
	    };
	  }

	  var segmentInfo = {
	    template: template,
	    timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {
	      return parseAttributes$1(s);
	    }),
	    list: segmentList && merge(parseAttributes$1(segmentList), {
	      segmentUrls: segmentUrls,
	      initialization: parseAttributes$1(segmentInitialization)
	    }),
	    base: segmentBase && merge(parseAttributes$1(segmentBase), {
	      initialization: parseAttributes$1(segmentInitialization)
	    })
	  };
	  Object.keys(segmentInfo).forEach(function (key) {
	    if (!segmentInfo[key]) {
	      delete segmentInfo[key];
	    }
	  });
	  return segmentInfo;
	};
	/**
	 * Contains Segment information and attributes needed to construct a Playlist object
	 * from a Representation
	 *
	 * @typedef {Object} RepresentationInformation
	 * @property {SegmentInformation} segmentInfo
	 *           Segment information for this Representation
	 * @property {Object} attributes
	 *           Inherited attributes for this Representation
	 */

	/**
	 * Maps a Representation node to an object containing Segment information and attributes
	 *
	 * @name inheritBaseUrlsCallback
	 * @function
	 * @param {Node} representation
	 *        Representation node from the mpd
	 * @return {RepresentationInformation}
	 *         Representation information needed to construct a Playlist object
	 */

	/**
	 * Returns a callback for Array.prototype.map for mapping Representation nodes to
	 * Segment information and attributes using inherited BaseURL nodes.
	 *
	 * @param {Object} adaptationSetAttributes
	 *        Contains attributes inherited by the AdaptationSet
	 * @param {string[]} adaptationSetBaseUrls
	 *        Contains list of resolved base urls inherited by the AdaptationSet
	 * @param {SegmentInformation} adaptationSetSegmentInfo
	 *        Contains Segment information for the AdaptationSet
	 * @return {inheritBaseUrlsCallback}
	 *         Callback map function
	 */

	var inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {
	  return function (representation) {
	    var repBaseUrlElements = findChildren(representation, 'BaseURL');
	    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);
	    var attributes = merge(adaptationSetAttributes, parseAttributes$1(representation));
	    var representationSegmentInfo = getSegmentInformation(representation);
	    return repBaseUrls.map(function (baseUrl) {
	      return {
	        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),
	        attributes: merge(attributes, {
	          baseUrl: baseUrl
	        })
	      };
	    });
	  };
	};
	/**
	 * Tranforms a series of content protection nodes to
	 * an object containing pssh data by key system
	 *
	 * @param {Node[]} contentProtectionNodes
	 *        Content protection nodes
	 * @return {Object}
	 *        Object containing pssh data by key system
	 */

	var generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {
	  return contentProtectionNodes.reduce(function (acc, node) {
	    var attributes = parseAttributes$1(node);
	    var keySystem = keySystemsMap[attributes.schemeIdUri];

	    if (keySystem) {
	      acc[keySystem] = {
	        attributes: attributes
	      };
	      var psshNode = findChildren(node, 'cenc:pssh')[0];

	      if (psshNode) {
	        var pssh = getContent(psshNode);
	        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);
	        acc[keySystem].pssh = psshBuffer;
	      }
	    }

	    return acc;
	  }, {});
	};
	/**
	 * Maps an AdaptationSet node to a list of Representation information objects
	 *
	 * @name toRepresentationsCallback
	 * @function
	 * @param {Node} adaptationSet
	 *        AdaptationSet node from the mpd
	 * @return {RepresentationInformation[]}
	 *         List of objects containing Representaion information
	 */

	/**
	 * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of
	 * Representation information objects
	 *
	 * @param {Object} periodAttributes
	 *        Contains attributes inherited by the Period
	 * @param {string[]} periodBaseUrls
	 *        Contains list of resolved base urls inherited by the Period
	 * @param {string[]} periodSegmentInfo
	 *        Contains Segment Information at the period level
	 * @return {toRepresentationsCallback}
	 *         Callback map function
	 */

	var toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {
	  return function (adaptationSet) {
	    var adaptationSetAttributes = parseAttributes$1(adaptationSet);
	    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));
	    var role = findChildren(adaptationSet, 'Role')[0];
	    var roleAttributes = {
	      role: parseAttributes$1(role)
	    };
	    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);
	    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));

	    if (Object.keys(contentProtection).length) {
	      attrs = merge(attrs, {
	        contentProtection: contentProtection
	      });
	    }

	    var segmentInfo = getSegmentInformation(adaptationSet);
	    var representations = findChildren(adaptationSet, 'Representation');
	    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);
	    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));
	  };
	};
	/**
	 * Maps an Period node to a list of Representation inforamtion objects for all
	 * AdaptationSet nodes contained within the Period
	 *
	 * @name toAdaptationSetsCallback
	 * @function
	 * @param {Node} period
	 *        Period node from the mpd
	 * @param {number} periodIndex
	 *        Index of the Period within the mpd
	 * @return {RepresentationInformation[]}
	 *         List of objects containing Representaion information
	 */

	/**
	 * Returns a callback for Array.prototype.map for mapping Period nodes to a list of
	 * Representation information objects
	 *
	 * @param {Object} mpdAttributes
	 *        Contains attributes inherited by the mpd
	 * @param {string[]} mpdBaseUrls
	 *        Contains list of resolved base urls inherited by the mpd
	 * @return {toAdaptationSetsCallback}
	 *         Callback map function
	 */

	var toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {
	  return function (period, index) {
	    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));
	    var periodAtt = parseAttributes$1(period);
	    var parsedPeriodId = parseInt(periodAtt.id, 10); // fallback to mapping index if Period@id is not a number

	    var periodIndex = window_1.isNaN(parsedPeriodId) ? index : parsedPeriodId;
	    var periodAttributes = merge(mpdAttributes, {
	      periodIndex: periodIndex
	    });
	    var adaptationSets = findChildren(period, 'AdaptationSet');
	    var periodSegmentInfo = getSegmentInformation(period);
	    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));
	  };
	};
	/**
	 * Traverses the mpd xml tree to generate a list of Representation information objects
	 * that have inherited attributes from parent nodes
	 *
	 * @param {Node} mpd
	 *        The root node of the mpd
	 * @param {Object} options
	 *        Available options for inheritAttributes
	 * @param {string} options.manifestUri
	 *        The uri source of the mpd
	 * @param {number} options.NOW
	 *        Current time per DASH IOP.  Default is current time in ms since epoch
	 * @param {number} options.clientOffset
	 *        Client time difference from NOW (in milliseconds)
	 * @return {RepresentationInformation[]}
	 *         List of objects containing Representation information
	 */

	var inheritAttributes = function inheritAttributes(mpd, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      _options$manifestUri = _options.manifestUri,
	      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,
	      _options$NOW = _options.NOW,
	      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,
	      _options$clientOffset = _options.clientOffset,
	      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;
	  var periods = findChildren(mpd, 'Period');

	  if (!periods.length) {
	    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);
	  }

	  var mpdAttributes = parseAttributes$1(mpd);
	  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));
	  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;
	  mpdAttributes.NOW = NOW;
	  mpdAttributes.clientOffset = clientOffset;
	  return flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)));
	};

	var stringToMpdXml = function stringToMpdXml(manifestString) {
	  if (manifestString === '') {
	    throw new Error(errors.DASH_EMPTY_MANIFEST);
	  }

	  var parser = new window_1.DOMParser();
	  var xml = parser.parseFromString(manifestString, 'application/xml');
	  var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;

	  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {
	    throw new Error(errors.DASH_INVALID_XML);
	  }

	  return mpd;
	};

	/**
	 * Parses the manifest for a UTCTiming node, returning the nodes attributes if found
	 *
	 * @param {string} mpd
	 *        XML string of the MPD manifest
	 * @return {Object|null}
	 *         Attributes of UTCTiming node specified in the manifest. Null if none found
	 */

	var parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {
	  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];

	  if (!UTCTimingNode) {
	    return null;
	  }

	  var attributes = parseAttributes$1(UTCTimingNode);

	  switch (attributes.schemeIdUri) {
	    case 'urn:mpeg:dash:utc:http-head:2014':
	    case 'urn:mpeg:dash:utc:http-head:2012':
	      attributes.method = 'HEAD';
	      break;

	    case 'urn:mpeg:dash:utc:http-xsdate:2014':
	    case 'urn:mpeg:dash:utc:http-iso:2014':
	    case 'urn:mpeg:dash:utc:http-xsdate:2012':
	    case 'urn:mpeg:dash:utc:http-iso:2012':
	      attributes.method = 'GET';
	      break;

	    case 'urn:mpeg:dash:utc:direct:2014':
	    case 'urn:mpeg:dash:utc:direct:2012':
	      attributes.method = 'DIRECT';
	      attributes.value = Date.parse(attributes.value);
	      break;

	    case 'urn:mpeg:dash:utc:http-ntp:2014':
	    case 'urn:mpeg:dash:utc:ntp:2014':
	    case 'urn:mpeg:dash:utc:sntp:2014':
	    default:
	      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);
	  }

	  return attributes;
	};
	var parse = function parse(manifestString, options) {
	  return toM3u8(toPlaylists(inheritAttributes(stringToMpdXml(manifestString), options)));
	};
	/**
	 * Parses the manifest for a UTCTiming node, returning the nodes attributes if found
	 *
	 * @param {string} manifestString
	 *        XML string of the MPD manifest
	 * @return {Object|null}
	 *         Attributes of UTCTiming node specified in the manifest. Null if none found
	 */

	var parseUTCTiming = function parseUTCTiming(manifestString) {
	  return parseUTCTimingScheme(stringToMpdXml(manifestString));
	};

	var EventTarget$1 = videojs.EventTarget,
	    mergeOptions$2 = videojs.mergeOptions;

	/**
	 * Returns a new master manifest that is the result of merging an updated master manifest
	 * into the original version.
	 *
	 * @param {Object} oldMaster
	 *        The old parsed mpd object
	 * @param {Object} newMaster
	 *        The updated parsed mpd object
	 * @return {Object}
	 *         A new object representing the original master manifest with the updated media
	 *         playlists merged in
	 */

	var updateMaster$1 = function updateMaster$$1(oldMaster, newMaster) {
	  var update = mergeOptions$2(oldMaster, {
	    // These are top level properties that can be updated
	    duration: newMaster.duration,
	    minimumUpdatePeriod: newMaster.minimumUpdatePeriod
	  });

	  // First update the playlists in playlist list
	  for (var i = 0; i < newMaster.playlists.length; i++) {
	    var playlistUpdate = updateMaster(update, newMaster.playlists[i]);

	    if (playlistUpdate) {
	      update = playlistUpdate;
	    }
	  }

	  // Then update media group playlists
	  forEachMediaGroup(newMaster, function (properties, type, group, label) {
	    if (properties.playlists && properties.playlists.length) {
	      var uri = properties.playlists[0].uri;
	      var _playlistUpdate = updateMaster(update, properties.playlists[0]);

	      if (_playlistUpdate) {
	        update = _playlistUpdate;
	        // update the playlist reference within media groups
	        update.mediaGroups[type][group][label].playlists[0] = update.playlists[uri];
	      }
	    }
	  });

	  return update;
	};

	var DashPlaylistLoader = function (_EventTarget) {
	  inherits$1(DashPlaylistLoader, _EventTarget);

	  // DashPlaylistLoader must accept either a src url or a playlist because subsequent
	  // playlist loader setups from media groups will expect to be able to pass a playlist
	  // (since there aren't external URLs to media playlists with DASH)
	  function DashPlaylistLoader(srcUrlOrPlaylist, hls, withCredentials, masterPlaylistLoader) {
	    classCallCheck$1(this, DashPlaylistLoader);

	    var _this = possibleConstructorReturn$1(this, (DashPlaylistLoader.__proto__ || Object.getPrototypeOf(DashPlaylistLoader)).call(this));

	    _this.hls_ = hls;
	    _this.withCredentials = withCredentials;

	    if (!srcUrlOrPlaylist) {
	      throw new Error('A non-empty playlist URL or playlist is required');
	    }

	    // event naming?
	    _this.on('minimumUpdatePeriod', function () {
	      _this.refreshXml_();
	    });

	    // live playlist staleness timeout
	    _this.on('mediaupdatetimeout', function () {
	      _this.refreshMedia_();
	    });

	    // initialize the loader state
	    if (typeof srcUrlOrPlaylist === 'string') {
	      _this.srcUrl = srcUrlOrPlaylist;
	      _this.state = 'HAVE_NOTHING';
	      return possibleConstructorReturn$1(_this);
	    }

	    _this.masterPlaylistLoader_ = masterPlaylistLoader;

	    _this.state = 'HAVE_METADATA';
	    _this.started = true;
	    // we only should have one playlist so select it
	    _this.media(srcUrlOrPlaylist);
	    // trigger async to mimic behavior of HLS, where it must request a playlist
	    window_1.setTimeout(function () {
	      _this.trigger('loadedmetadata');
	    }, 0);
	    return _this;
	  }

	  createClass(DashPlaylistLoader, [{
	    key: 'dispose',
	    value: function dispose() {
	      this.stopRequest();
	      window_1.clearTimeout(this.mediaUpdateTimeout);
	    }
	  }, {
	    key: 'stopRequest',
	    value: function stopRequest() {
	      if (this.request) {
	        var oldRequest = this.request;

	        this.request = null;
	        oldRequest.onreadystatechange = null;
	        oldRequest.abort();
	      }
	    }
	  }, {
	    key: 'media',
	    value: function media(playlist) {
	      // getter
	      if (!playlist) {
	        return this.media_;
	      }

	      // setter
	      if (this.state === 'HAVE_NOTHING') {
	        throw new Error('Cannot switch media playlist from ' + this.state);
	      }

	      var startingState = this.state;

	      // find the playlist object if the target playlist has been specified by URI
	      if (typeof playlist === 'string') {
	        if (!this.master.playlists[playlist]) {
	          throw new Error('Unknown playlist URI: ' + playlist);
	        }
	        playlist = this.master.playlists[playlist];
	      }

	      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;

	      this.state = 'HAVE_METADATA';

	      // switching to the active playlist is a no-op
	      if (!mediaChange) {
	        return;
	      }

	      // switching from an already loaded playlist
	      if (this.media_) {
	        this.trigger('mediachanging');
	      }

	      this.media_ = playlist;

	      this.refreshMedia_();

	      // trigger media change if the active media has been updated
	      if (startingState !== 'HAVE_MASTER') {
	        this.trigger('mediachange');
	      }
	    }
	  }, {
	    key: 'pause',
	    value: function pause() {
	      this.stopRequest();
	      window_1.clearTimeout(this.mediaUpdateTimeout);
	      if (this.state === 'HAVE_NOTHING') {
	        // If we pause the loader before any data has been retrieved, its as if we never
	        // started, so reset to an unstarted state.
	        this.started = false;
	      }
	    }
	  }, {
	    key: 'load',
	    value: function load(isFinalRendition) {
	      var _this2 = this;

	      window_1.clearTimeout(this.mediaUpdateTimeout);

	      var media = this.media();

	      if (isFinalRendition) {
	        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;

	        this.mediaUpdateTimeout = window_1.setTimeout(function () {
	          return _this2.load();
	        }, delay);
	        return;
	      }

	      // because the playlists are internal to the manifest, load should either load the
	      // main manifest, or do nothing but trigger an event
	      if (!this.started) {
	        this.start();
	        return;
	      }

	      this.trigger('loadedplaylist');
	    }

	    /**
	     * Parses the master xml string and updates playlist uri references
	     *
	     * @return {Object}
	     *         The parsed mpd manifest object
	     */

	  }, {
	    key: 'parseMasterXml',
	    value: function parseMasterXml() {
	      var master = parse(this.masterXml_, {
	        manifestUri: this.srcUrl,
	        clientOffset: this.clientOffset_
	      });

	      master.uri = this.srcUrl;

	      // Set up phony URIs for the playlists since we won't have external URIs for DASH
	      // but reference playlists by their URI throughout the project
	      // TODO: Should we create the dummy uris in mpd-parser as well (leaning towards yes).
	      for (var i = 0; i < master.playlists.length; i++) {
	        var phonyUri = 'placeholder-uri-' + i;

	        master.playlists[i].uri = phonyUri;
	        // set up by URI references
	        master.playlists[phonyUri] = master.playlists[i];
	      }

	      // set up phony URIs for the media group playlists since we won't have external
	      // URIs for DASH but reference playlists by their URI throughout the project
	      forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {
	        if (properties.playlists && properties.playlists.length) {
	          var _phonyUri = 'placeholder-uri-' + mediaType + '-' + groupKey + '-' + labelKey;

	          properties.playlists[0].uri = _phonyUri;
	          // setup URI references
	          master.playlists[_phonyUri] = properties.playlists[0];
	        }
	      });

	      setupMediaPlaylists(master);
	      resolveMediaGroupUris(master);

	      return master;
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	      var _this3 = this;

	      this.started = true;

	      // request the specified URL
	      this.request = this.hls_.xhr({
	        uri: this.srcUrl,
	        withCredentials: this.withCredentials
	      }, function (error, req) {
	        // disposed
	        if (!_this3.request) {
	          return;
	        }

	        // clear the loader's request reference
	        _this3.request = null;

	        if (error) {
	          _this3.error = {
	            status: req.status,
	            message: 'DASH playlist request error at URL: ' + _this3.srcUrl,
	            responseText: req.responseText,
	            // MEDIA_ERR_NETWORK
	            code: 2
	          };
	          if (_this3.state === 'HAVE_NOTHING') {
	            _this3.started = false;
	          }
	          return _this3.trigger('error');
	        }

	        _this3.masterXml_ = req.responseText;

	        if (req.responseHeaders && req.responseHeaders.date) {
	          _this3.masterLoaded_ = Date.parse(req.responseHeaders.date);
	        } else {
	          _this3.masterLoaded_ = Date.now();
	        }

	        _this3.syncClientServerClock_(_this3.onClientServerClockSync_.bind(_this3));
	      });
	    }

	    /**
	     * Parses the master xml for UTCTiming node to sync the client clock to the server
	     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.
	     *
	     * @param {Function} done
	     *        Function to call when clock sync has completed
	     */

	  }, {
	    key: 'syncClientServerClock_',
	    value: function syncClientServerClock_(done) {
	      var _this4 = this;

	      var utcTiming = parseUTCTiming(this.masterXml_);

	      // No UTCTiming element found in the mpd. Use Date header from mpd request as the
	      // server clock
	      if (utcTiming === null) {
	        this.clientOffset_ = this.masterLoaded_ - Date.now();
	        return done();
	      }

	      if (utcTiming.method === 'DIRECT') {
	        this.clientOffset_ = utcTiming.value - Date.now();
	        return done();
	      }

	      this.request = this.hls_.xhr({
	        uri: resolveUrl(this.srcUrl, utcTiming.value),
	        method: utcTiming.method,
	        withCredentials: this.withCredentials
	      }, function (error, req) {
	        // disposed
	        if (!_this4.request) {
	          return;
	        }

	        if (error) {
	          // sync request failed, fall back to using date header from mpd
	          // TODO: log warning
	          _this4.clientOffset_ = _this4.masterLoaded_ - Date.now();
	          return done();
	        }

	        var serverTime = void 0;

	        if (utcTiming.method === 'HEAD') {
	          if (!req.responseHeaders || !req.responseHeaders.date) {
	            // expected date header not preset, fall back to using date header from mpd
	            // TODO: log warning
	            serverTime = _this4.masterLoaded_;
	          } else {
	            serverTime = Date.parse(req.responseHeaders.date);
	          }
	        } else {
	          serverTime = Date.parse(req.responseText);
	        }

	        _this4.clientOffset_ = serverTime - Date.now();

	        done();
	      });
	    }

	    /**
	     * Handler for after client/server clock synchronization has happened. Sets up
	     * xml refresh timer if specificed by the manifest.
	     */

	  }, {
	    key: 'onClientServerClockSync_',
	    value: function onClientServerClockSync_() {
	      var _this5 = this;

	      this.master = this.parseMasterXml();

	      this.state = 'HAVE_MASTER';

	      this.trigger('loadedplaylist');

	      if (!this.media_) {
	        // no media playlist was specifically selected so start
	        // from the first listed one
	        this.media(this.master.playlists[0]);
	      }
	      // trigger loadedmetadata to resolve setup of media groups
	      // trigger async to mimic behavior of HLS, where it must request a playlist
	      window_1.setTimeout(function () {
	        _this5.trigger('loadedmetadata');
	      }, 0);

	      // TODO: minimumUpdatePeriod can have a value of 0. Currently the manifest will not
	      // be refreshed when this is the case. The inter-op guide says that when the
	      // minimumUpdatePeriod is 0, the manifest should outline all currently available
	      // segments, but future segments may require an update. I think a good solution
	      // would be to update the manifest at the same rate that the media playlists
	      // are "refreshed", i.e. every targetDuration.
	      if (this.master.minimumUpdatePeriod) {
	        window_1.setTimeout(function () {
	          _this5.trigger('minimumUpdatePeriod');
	        }, this.master.minimumUpdatePeriod);
	      }
	    }

	    /**
	     * Sends request to refresh the master xml and updates the parsed master manifest
	     * TODO: Does the client offset need to be recalculated when the xml is refreshed?
	     */

	  }, {
	    key: 'refreshXml_',
	    value: function refreshXml_() {
	      var _this6 = this;

	      this.request = this.hls_.xhr({
	        uri: this.srcUrl,
	        withCredentials: this.withCredentials
	      }, function (error, req) {
	        // disposed
	        if (!_this6.request) {
	          return;
	        }

	        // clear the loader's request reference
	        _this6.request = null;

	        if (error) {
	          _this6.error = {
	            status: req.status,
	            message: 'DASH playlist request error at URL: ' + _this6.srcUrl,
	            responseText: req.responseText,
	            // MEDIA_ERR_NETWORK
	            code: 2
	          };
	          if (_this6.state === 'HAVE_NOTHING') {
	            _this6.started = false;
	          }
	          return _this6.trigger('error');
	        }

	        _this6.masterXml_ = req.responseText;

	        var newMaster = _this6.parseMasterXml();

	        _this6.master = updateMaster$1(_this6.master, newMaster);

	        window_1.setTimeout(function () {
	          _this6.trigger('minimumUpdatePeriod');
	        }, _this6.master.minimumUpdatePeriod);
	      });
	    }

	    /**
	     * Refreshes the media playlist by re-parsing the master xml and updating playlist
	     * references. If this is an alternate loader, the updated parsed manifest is retrieved
	     * from the master loader.
	     */

	  }, {
	    key: 'refreshMedia_',
	    value: function refreshMedia_() {
	      var _this7 = this;

	      var oldMaster = void 0;
	      var newMaster = void 0;

	      if (this.masterPlaylistLoader_) {
	        oldMaster = this.masterPlaylistLoader_.master;
	        newMaster = this.masterPlaylistLoader_.parseMasterXml();
	      } else {
	        oldMaster = this.master;
	        newMaster = this.parseMasterXml();
	      }

	      var updatedMaster = updateMaster$1(oldMaster, newMaster);

	      if (updatedMaster) {
	        if (this.masterPlaylistLoader_) {
	          this.masterPlaylistLoader_.master = updatedMaster;
	        } else {
	          this.master = updatedMaster;
	        }
	        this.media_ = updatedMaster.playlists[this.media_.uri];
	      } else {
	        this.trigger('playlistunchanged');
	      }

	      if (!this.media().endList) {
	        this.mediaUpdateTimeout = window_1.setTimeout(function () {
	          _this7.trigger('mediaupdatetimeout');
	        }, refreshDelay(this.media(), !!updatedMaster));
	      }

	      this.trigger('loadedplaylist');
	    }
	  }]);
	  return DashPlaylistLoader;
	}(EventTarget$1);

	var logger = function logger(source) {
	  if (videojs.log.debug) {
	    return videojs.log.debug.bind(videojs, 'VHS:', source + ' >');
	  }

	  return function () {};
	};

	function noop() {}

	/**
	 * @file source-updater.js
	 */

	/**
	 * A queue of callbacks to be serialized and applied when a
	 * MediaSource and its associated SourceBuffers are not in the
	 * updating state. It is used by the segment loader to update the
	 * underlying SourceBuffers when new data is loaded, for instance.
	 *
	 * @class SourceUpdater
	 * @param {MediaSource} mediaSource the MediaSource to create the
	 * SourceBuffer from
	 * @param {String} mimeType the desired MIME type of the underlying
	 * SourceBuffer
	 * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer is
	 * added to the media source
	 */

	var SourceUpdater = function () {
	  function SourceUpdater(mediaSource, mimeType, type, sourceBufferEmitter) {
	    classCallCheck$1(this, SourceUpdater);

	    this.callbacks_ = [];
	    this.pendingCallback_ = null;
	    this.timestampOffset_ = 0;
	    this.mediaSource = mediaSource;
	    this.processedAppend_ = false;
	    this.type_ = type;
	    this.mimeType_ = mimeType;
	    this.logger_ = logger('SourceUpdater[' + type + '][' + mimeType + ']');

	    if (mediaSource.readyState === 'closed') {
	      mediaSource.addEventListener('sourceopen', this.createSourceBuffer_.bind(this, mimeType, sourceBufferEmitter));
	    } else {
	      this.createSourceBuffer_(mimeType, sourceBufferEmitter);
	    }
	  }

	  createClass(SourceUpdater, [{
	    key: 'createSourceBuffer_',
	    value: function createSourceBuffer_(mimeType, sourceBufferEmitter) {
	      var _this = this;

	      this.sourceBuffer_ = this.mediaSource.addSourceBuffer(mimeType);

	      this.logger_('created SourceBuffer');

	      if (sourceBufferEmitter) {
	        sourceBufferEmitter.trigger('sourcebufferadded');

	        if (this.mediaSource.sourceBuffers.length < 2) {
	          // There's another source buffer we must wait for before we can start updating
	          // our own (or else we can get into a bad state, i.e., appending video/audio data
	          // before the other video/audio source buffer is available and leading to a video
	          // or audio only buffer).
	          sourceBufferEmitter.on('sourcebufferadded', function () {
	            _this.start_();
	          });
	          return;
	        }
	      }

	      this.start_();
	    }
	  }, {
	    key: 'start_',
	    value: function start_() {
	      var _this2 = this;

	      this.started_ = true;

	      // run completion handlers and process callbacks as updateend
	      // events fire
	      this.onUpdateendCallback_ = function () {
	        var pendingCallback = _this2.pendingCallback_;

	        _this2.pendingCallback_ = null;

	        _this2.logger_('buffered [' + printableRange(_this2.buffered()) + ']');

	        if (pendingCallback) {
	          pendingCallback();
	        }

	        _this2.runCallback_();
	      };

	      this.sourceBuffer_.addEventListener('updateend', this.onUpdateendCallback_);

	      this.runCallback_();
	    }

	    /**
	     * Aborts the current segment and resets the segment parser.
	     *
	     * @param {Function} done function to call when done
	     * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void
	     */

	  }, {
	    key: 'abort',
	    value: function abort(done) {
	      var _this3 = this;

	      if (this.processedAppend_) {
	        this.queueCallback_(function () {
	          _this3.sourceBuffer_.abort();
	        }, done);
	      }
	    }

	    /**
	     * Queue an update to append an ArrayBuffer.
	     *
	     * @param {ArrayBuffer} bytes
	     * @param {Function} done the function to call when done
	     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data
	     */

	  }, {
	    key: 'appendBuffer',
	    value: function appendBuffer(bytes, done) {
	      var _this4 = this;

	      this.processedAppend_ = true;
	      this.queueCallback_(function () {
	        _this4.sourceBuffer_.appendBuffer(bytes);
	      }, done);
	    }

	    /**
	     * Indicates what TimeRanges are buffered in the managed SourceBuffer.
	     *
	     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered
	     */

	  }, {
	    key: 'buffered',
	    value: function buffered() {
	      if (!this.sourceBuffer_) {
	        return videojs.createTimeRanges();
	      }
	      return this.sourceBuffer_.buffered;
	    }

	    /**
	     * Queue an update to remove a time range from the buffer.
	     *
	     * @param {Number} start where to start the removal
	     * @param {Number} end where to end the removal
	     * @param {Function} [done=noop] optional callback to be executed when the remove
	     * operation is complete
	     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
	     */

	  }, {
	    key: 'remove',
	    value: function remove(start, end) {
	      var _this5 = this;

	      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

	      if (this.processedAppend_) {
	        this.queueCallback_(function () {
	          _this5.logger_('remove [' + start + ' => ' + end + ']');
	          _this5.sourceBuffer_.remove(start, end);
	        }, done);
	      }
	    }

	    /**
	     * Whether the underlying sourceBuffer is updating or not
	     *
	     * @return {Boolean} the updating status of the SourceBuffer
	     */

	  }, {
	    key: 'updating',
	    value: function updating() {
	      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;
	    }

	    /**
	     * Set/get the timestampoffset on the SourceBuffer
	     *
	     * @return {Number} the timestamp offset
	     */

	  }, {
	    key: 'timestampOffset',
	    value: function timestampOffset(offset) {
	      var _this6 = this;

	      if (typeof offset !== 'undefined') {
	        this.queueCallback_(function () {
	          _this6.sourceBuffer_.timestampOffset = offset;
	        });
	        this.timestampOffset_ = offset;
	      }
	      return this.timestampOffset_;
	    }

	    /**
	     * Queue a callback to run
	     */

	  }, {
	    key: 'queueCallback_',
	    value: function queueCallback_(callback, done) {
	      this.callbacks_.push([callback.bind(this), done]);
	      this.runCallback_();
	    }

	    /**
	     * Run a queued callback
	     */

	  }, {
	    key: 'runCallback_',
	    value: function runCallback_() {
	      var callbacks = void 0;

	      if (!this.updating() && this.callbacks_.length && this.started_) {
	        callbacks = this.callbacks_.shift();
	        this.pendingCallback_ = callbacks[1];
	        callbacks[0]();
	      }
	    }

	    /**
	     * dispose of the source updater and the underlying sourceBuffer
	     */

	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);
	      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {
	        this.sourceBuffer_.abort();
	      }
	    }
	  }]);
	  return SourceUpdater;
	}();

	var Config = {
	  GOAL_BUFFER_LENGTH: 30,
	  MAX_GOAL_BUFFER_LENGTH: 60,
	  GOAL_BUFFER_LENGTH_RATE: 1,
	  // 0.5 MB/s
	  INITIAL_BANDWIDTH: 4194304,
	  // A fudge factor to apply to advertised playlist bitrates to account for
	  // temporary flucations in client bandwidth
	  BANDWIDTH_VARIANCE: 1.2,
	  // How much of the buffer must be filled before we consider upswitching
	  BUFFER_LOW_WATER_LINE: 0,
	  MAX_BUFFER_LOW_WATER_LINE: 30,
	  BUFFER_LOW_WATER_LINE_RATE: 1
	};

	var toUnsigned = function toUnsigned(value) {
	  return value >>> 0;
	};

	var bin = {
	  toUnsigned: toUnsigned
	};

	var toUnsigned$1 = bin.toUnsigned;
	var _findBox, parseType, timescale, startTime, getVideoTrackIds;

	// Find the data for a box specified by its path
	_findBox = function findBox(data, path) {
	  var results = [],
	      i,
	      size,
	      type,
	      end,
	      subresults;

	  if (!path.length) {
	    // short-circuit the search for empty paths
	    return null;
	  }

	  for (i = 0; i < data.byteLength;) {
	    size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);

	    type = parseType(data.subarray(i + 4, i + 8));

	    end = size > 1 ? i + size : data.byteLength;

	    if (type === path[0]) {
	      if (path.length === 1) {
	        // this is the end of the path and we've found the box we were
	        // looking for
	        results.push(data.subarray(i + 8, end));
	      } else {
	        // recursively search for the next box along the path
	        subresults = _findBox(data.subarray(i + 8, end), path.slice(1));
	        if (subresults.length) {
	          results = results.concat(subresults);
	        }
	      }
	    }
	    i = end;
	  }

	  // we've finished searching all of data
	  return results;
	};

	/**
	 * Returns the string representation of an ASCII encoded four byte buffer.
	 * @param buffer {Uint8Array} a four-byte buffer to translate
	 * @return {string} the corresponding string
	 */
	parseType = function parseType(buffer) {
	  var result = '';
	  result += String.fromCharCode(buffer[0]);
	  result += String.fromCharCode(buffer[1]);
	  result += String.fromCharCode(buffer[2]);
	  result += String.fromCharCode(buffer[3]);
	  return result;
	};

	/**
	 * Parses an MP4 initialization segment and extracts the timescale
	 * values for any declared tracks. Timescale values indicate the
	 * number of clock ticks per second to assume for time-based values
	 * elsewhere in the MP4.
	 *
	 * To determine the start time of an MP4, you need two pieces of
	 * information: the timescale unit and the earliest base media decode
	 * time. Multiple timescales can be specified within an MP4 but the
	 * base media decode time is always expressed in the timescale from
	 * the media header box for the track:
	 * ```
	 * moov > trak > mdia > mdhd.timescale
	 * ```
	 * @param init {Uint8Array} the bytes of the init segment
	 * @return {object} a hash of track ids to timescale values or null if
	 * the init segment is malformed.
	 */
	timescale = function timescale(init) {
	  var result = {},
	      traks = _findBox(init, ['moov', 'trak']);

	  // mdhd timescale
	  return traks.reduce(function (result, trak) {
	    var tkhd, version, index, id, mdhd;

	    tkhd = _findBox(trak, ['tkhd'])[0];
	    if (!tkhd) {
	      return null;
	    }
	    version = tkhd[0];
	    index = version === 0 ? 12 : 20;
	    id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);

	    mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];
	    if (!mdhd) {
	      return null;
	    }
	    version = mdhd[0];
	    index = version === 0 ? 12 : 20;
	    result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
	    return result;
	  }, result);
	};

	/**
	 * Determine the base media decode start time, in seconds, for an MP4
	 * fragment. If multiple fragments are specified, the earliest time is
	 * returned.
	 *
	 * The base media decode time can be parsed from track fragment
	 * metadata:
	 * ```
	 * moof > traf > tfdt.baseMediaDecodeTime
	 * ```
	 * It requires the timescale value from the mdhd to interpret.
	 *
	 * @param timescale {object} a hash of track ids to timescale values.
	 * @return {number} the earliest base media decode start time for the
	 * fragment, in seconds
	 */
	startTime = function startTime(timescale, fragment) {
	  var trafs, baseTimes, result;

	  // we need info from two childrend of each track fragment box
	  trafs = _findBox(fragment, ['moof', 'traf']);

	  // determine the start times for each track
	  baseTimes = [].concat.apply([], trafs.map(function (traf) {
	    return _findBox(traf, ['tfhd']).map(function (tfhd) {
	      var id, scale, baseTime;

	      // get the track id from the tfhd
	      id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]);
	      // assume a 90kHz clock if no timescale was specified
	      scale = timescale[id] || 90e3;

	      // get the base media decode time from the tfdt
	      baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {
	        var version, result;

	        version = tfdt[0];
	        result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);
	        if (version === 1) {
	          result *= Math.pow(2, 32);
	          result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);
	        }
	        return result;
	      })[0];
	      baseTime = baseTime || Infinity;

	      // convert base time to seconds
	      return baseTime / scale;
	    });
	  }));

	  // return the minimum
	  result = Math.min.apply(null, baseTimes);
	  return isFinite(result) ? result : 0;
	};

	/**
	  * Find the trackIds of the video tracks in this source.
	  * Found by parsing the Handler Reference and Track Header Boxes:
	  *   moov > trak > mdia > hdlr
	  *   moov > trak > tkhd
	  *
	  * @param {Uint8Array} init - The bytes of the init segment for this source
	  * @return {Number[]} A list of trackIds
	  *
	  * @see ISO-BMFF-12/2015, Section 8.4.3
	 **/
	getVideoTrackIds = function getVideoTrackIds(init) {
	  var traks = _findBox(init, ['moov', 'trak']);
	  var videoTrackIds = [];

	  traks.forEach(function (trak) {
	    var hdlrs = _findBox(trak, ['mdia', 'hdlr']);
	    var tkhds = _findBox(trak, ['tkhd']);

	    hdlrs.forEach(function (hdlr, index) {
	      var handlerType = parseType(hdlr.subarray(8, 12));
	      var tkhd = tkhds[index];
	      var view;
	      var version;
	      var trackId;

	      if (handlerType === 'vide') {
	        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
	        version = view.getUint8(0);
	        trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);

	        videoTrackIds.push(trackId);
	      }
	    });
	  });

	  return videoTrackIds;
	};

	var probe = {
	  findBox: _findBox,
	  parseType: parseType,
	  timescale: timescale,
	  startTime: startTime,
	  videoTrackIds: getVideoTrackIds
	};

	var REQUEST_ERRORS = {
	  FAILURE: 2,
	  TIMEOUT: -101,
	  ABORTED: -102
	};

	/**
	 * Turns segment byterange into a string suitable for use in
	 * HTTP Range requests
	 *
	 * @param {Object} byterange - an object with two values defining the start and end
	 *                             of a byte-range
	 */
	var byterangeStr = function byterangeStr(byterange) {
	  var byterangeStart = void 0;
	  var byterangeEnd = void 0;

	  // `byterangeEnd` is one less than `offset + length` because the HTTP range
	  // header uses inclusive ranges
	  byterangeEnd = byterange.offset + byterange.length - 1;
	  byterangeStart = byterange.offset;
	  return 'bytes=' + byterangeStart + '-' + byterangeEnd;
	};

	/**
	 * Defines headers for use in the xhr request for a particular segment.
	 *
	 * @param {Object} segment - a simplified copy of the segmentInfo object
	 *                           from SegmentLoader
	 */
	var segmentXhrHeaders = function segmentXhrHeaders(segment) {
	  var headers = {};

	  if (segment.byterange) {
	    headers.Range = byterangeStr(segment.byterange);
	  }
	  return headers;
	};

	/**
	 * Abort all requests
	 *
	 * @param {Object} activeXhrs - an object that tracks all XHR requests
	 */
	var abortAll = function abortAll(activeXhrs) {
	  activeXhrs.forEach(function (xhr) {
	    xhr.abort();
	  });
	};

	/**
	 * Gather important bandwidth stats once a request has completed
	 *
	 * @param {Object} request - the XHR request from which to gather stats
	 */
	var getRequestStats = function getRequestStats(request) {
	  return {
	    bandwidth: request.bandwidth,
	    bytesReceived: request.bytesReceived || 0,
	    roundTripTime: request.roundTripTime || 0
	  };
	};

	/**
	 * If possible gather bandwidth stats as a request is in
	 * progress
	 *
	 * @param {Event} progressEvent - an event object from an XHR's progress event
	 */
	var getProgressStats = function getProgressStats(progressEvent) {
	  var request = progressEvent.target;
	  var roundTripTime = Date.now() - request.requestTime;
	  var stats = {
	    bandwidth: Infinity,
	    bytesReceived: 0,
	    roundTripTime: roundTripTime || 0
	  };

	  stats.bytesReceived = progressEvent.loaded;
	  // This can result in Infinity if stats.roundTripTime is 0 but that is ok
	  // because we should only use bandwidth stats on progress to determine when
	  // abort a request early due to insufficient bandwidth
	  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);

	  return stats;
	};

	/**
	 * Handle all error conditions in one place and return an object
	 * with all the information
	 *
	 * @param {Error|null} error - if non-null signals an error occured with the XHR
	 * @param {Object} request -  the XHR request that possibly generated the error
	 */
	var handleErrors = function handleErrors(error, request) {
	  if (request.timedout) {
	    return {
	      status: request.status,
	      message: 'HLS request timed-out at URL: ' + request.uri,
	      code: REQUEST_ERRORS.TIMEOUT,
	      xhr: request
	    };
	  }

	  if (request.aborted) {
	    return {
	      status: request.status,
	      message: 'HLS request aborted at URL: ' + request.uri,
	      code: REQUEST_ERRORS.ABORTED,
	      xhr: request
	    };
	  }

	  if (error) {
	    return {
	      status: request.status,
	      message: 'HLS request errored at URL: ' + request.uri,
	      code: REQUEST_ERRORS.FAILURE,
	      xhr: request
	    };
	  }

	  return null;
	};

	/**
	 * Handle responses for key data and convert the key data to the correct format
	 * for the decryption step later
	 *
	 * @param {Object} segment - a simplified copy of the segmentInfo object
	 *                           from SegmentLoader
	 * @param {Function} finishProcessingFn - a callback to execute to continue processing
	 *                                        this request
	 */
	var handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {
	  return function (error, request) {
	    var response = request.response;
	    var errorObj = handleErrors(error, request);

	    if (errorObj) {
	      return finishProcessingFn(errorObj, segment);
	    }

	    if (response.byteLength !== 16) {
	      return finishProcessingFn({
	        status: request.status,
	        message: 'Invalid HLS key at URL: ' + request.uri,
	        code: REQUEST_ERRORS.FAILURE,
	        xhr: request
	      }, segment);
	    }

	    var view = new DataView(response);

	    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);
	    return finishProcessingFn(null, segment);
	  };
	};

	/**
	 * Handle init-segment responses
	 *
	 * @param {Object} segment - a simplified copy of the segmentInfo object
	 *                           from SegmentLoader
	 * @param {Function} finishProcessingFn - a callback to execute to continue processing
	 *                                        this request
	 */
	var handleInitSegmentResponse = function handleInitSegmentResponse(segment, captionParser, finishProcessingFn) {
	  return function (error, request) {
	    var response = request.response;
	    var errorObj = handleErrors(error, request);

	    if (errorObj) {
	      return finishProcessingFn(errorObj, segment);
	    }

	    // stop processing if received empty content
	    if (response.byteLength === 0) {
	      return finishProcessingFn({
	        status: request.status,
	        message: 'Empty HLS segment content at URL: ' + request.uri,
	        code: REQUEST_ERRORS.FAILURE,
	        xhr: request
	      }, segment);
	    }

	    segment.map.bytes = new Uint8Array(request.response);

	    // Initialize CaptionParser if it hasn't been yet
	    if (!captionParser.isInitialized()) {
	      captionParser.init();
	    }

	    segment.map.timescales = probe.timescale(segment.map.bytes);
	    segment.map.videoTrackIds = probe.videoTrackIds(segment.map.bytes);

	    return finishProcessingFn(null, segment);
	  };
	};

	/**
	 * Response handler for segment-requests being sure to set the correct
	 * property depending on whether the segment is encryped or not
	 * Also records and keeps track of stats that are used for ABR purposes
	 *
	 * @param {Object} segment - a simplified copy of the segmentInfo object
	 *                           from SegmentLoader
	 * @param {Function} finishProcessingFn - a callback to execute to continue processing
	 *                                        this request
	 */
	var handleSegmentResponse = function handleSegmentResponse(segment, captionParser, finishProcessingFn) {
	  return function (error, request) {
	    var response = request.response;
	    var errorObj = handleErrors(error, request);
	    var parsed = void 0;

	    if (errorObj) {
	      return finishProcessingFn(errorObj, segment);
	    }

	    // stop processing if received empty content
	    if (response.byteLength === 0) {
	      return finishProcessingFn({
	        status: request.status,
	        message: 'Empty HLS segment content at URL: ' + request.uri,
	        code: REQUEST_ERRORS.FAILURE,
	        xhr: request
	      }, segment);
	    }

	    segment.stats = getRequestStats(request);

	    if (segment.key) {
	      segment.encryptedBytes = new Uint8Array(request.response);
	    } else {
	      segment.bytes = new Uint8Array(request.response);
	    }

	    // This is likely an FMP4 and has the init segment.
	    // Run through the CaptionParser in case there are captions.
	    if (segment.map && segment.map.bytes) {
	      // Initialize CaptionParser if it hasn't been yet
	      if (!captionParser.isInitialized()) {
	        captionParser.init();
	      }

	      parsed = captionParser.parse(segment.bytes, segment.map.videoTrackIds, segment.map.timescales);

	      if (parsed && parsed.captions) {
	        segment.captionStreams = parsed.captionStreams;
	        segment.fmp4Captions = parsed.captions;
	      }
	    }

	    return finishProcessingFn(null, segment);
	  };
	};

	/**
	 * Decrypt the segment via the decryption web worker
	 *
	 * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines
	 * @param {Object} segment - a simplified copy of the segmentInfo object
	 *                           from SegmentLoader
	 * @param {Function} doneFn - a callback that is executed after decryption has completed
	 */
	var decryptSegment = function decryptSegment(decrypter, segment, doneFn) {
	  var decryptionHandler = function decryptionHandler(event) {
	    if (event.data.source === segment.requestId) {
	      decrypter.removeEventListener('message', decryptionHandler);
	      var decrypted = event.data.decrypted;

	      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);
	      return doneFn(null, segment);
	    }
	  };

	  decrypter.addEventListener('message', decryptionHandler);

	  // this is an encrypted segment
	  // incrementally decrypt the segment
	  decrypter.postMessage(createTransferableMessage({
	    source: segment.requestId,
	    encrypted: segment.encryptedBytes,
	    key: segment.key.bytes,
	    iv: segment.key.iv
	  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);
	};

	/**
	 * This function waits for all XHRs to finish (with either success or failure)
	 * before continueing processing via it's callback. The function gathers errors
	 * from each request into a single errors array so that the error status for
	 * each request can be examined later.
	 *
	 * @param {Object} activeXhrs - an object that tracks all XHR requests
	 * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines
	 * @param {Function} doneFn - a callback that is executed after all resources have been
	 *                            downloaded and any decryption completed
	 */
	var waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {
	  var count = 0;
	  var didError = false;

	  return function (error, segment) {
	    if (didError) {
	      return;
	    }

	    if (error) {
	      didError = true;
	      // If there are errors, we have to abort any outstanding requests
	      abortAll(activeXhrs);

	      // Even though the requests above are aborted, and in theory we could wait until we
	      // handle the aborted events from those requests, there are some cases where we may
	      // never get an aborted event. For instance, if the network connection is lost and
	      // there were two requests, the first may have triggered an error immediately, while
	      // the second request remains unsent. In that case, the aborted algorithm will not
	      // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method
	      //
	      // We also can't rely on the ready state of the XHR, since the request that
	      // triggered the connection error may also show as a ready state of 0 (unsent).
	      // Therefore, we have to finish this group of requests immediately after the first
	      // seen error.
	      return doneFn(error, segment);
	    }

	    count += 1;

	    if (count === activeXhrs.length) {
	      // Keep track of when *all* of the requests have completed
	      segment.endOfAllRequests = Date.now();

	      if (segment.encryptedBytes) {
	        return decryptSegment(decrypter, segment, doneFn);
	      }
	      // Otherwise, everything is ready just continue
	      return doneFn(null, segment);
	    }
	  };
	};

	/**
	 * Simple progress event callback handler that gathers some stats before
	 * executing a provided callback with the `segment` object
	 *
	 * @param {Object} segment - a simplified copy of the segmentInfo object
	 *                           from SegmentLoader
	 * @param {Function} progressFn - a callback that is executed each time a progress event
	 *                                is received
	 * @param {Event} event - the progress event object from XMLHttpRequest
	 */
	var handleProgress = function handleProgress(segment, progressFn) {
	  return function (event) {
	    segment.stats = videojs.mergeOptions(segment.stats, getProgressStats(event));

	    // record the time that we receive the first byte of data
	    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {
	      segment.stats.firstBytesReceivedAt = Date.now();
	    }

	    return progressFn(event, segment);
	  };
	};

	/**
	 * Load all resources and does any processing necessary for a media-segment
	 *
	 * Features:
	 *   decrypts the media-segment if it has a key uri and an iv
	 *   aborts *all* requests if *any* one request fails
	 *
	 * The segment object, at minimum, has the following format:
	 * {
	 *   resolvedUri: String,
	 *   [byterange]: {
	 *     offset: Number,
	 *     length: Number
	 *   },
	 *   [key]: {
	 *     resolvedUri: String
	 *     [byterange]: {
	 *       offset: Number,
	 *       length: Number
	 *     },
	 *     iv: {
	 *       bytes: Uint32Array
	 *     }
	 *   },
	 *   [map]: {
	 *     resolvedUri: String,
	 *     [byterange]: {
	 *       offset: Number,
	 *       length: Number
	 *     },
	 *     [bytes]: Uint8Array
	 *   }
	 * }
	 * ...where [name] denotes optional properties
	 *
	 * @param {Function} xhr - an instance of the xhr wrapper in xhr.js
	 * @param {Object} xhrOptions - the base options to provide to all xhr requests
	 * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128
	 *                                       decryption routines
	 * @param {Object} segment - a simplified copy of the segmentInfo object
	 *                           from SegmentLoader
	 * @param {Function} progressFn - a callback that receives progress events from the main
	 *                                segment's xhr request
	 * @param {Function} doneFn - a callback that is executed only once all requests have
	 *                            succeeded or failed
	 * @returns {Function} a function that, when invoked, immediately aborts all
	 *                     outstanding requests
	 */
	var mediaSegmentRequest = function mediaSegmentRequest(xhr, xhrOptions, decryptionWorker, captionParser, segment, progressFn, doneFn) {
	  var activeXhrs = [];
	  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);

	  // optionally, request the decryption key
	  if (segment.key) {
	    var keyRequestOptions = videojs.mergeOptions(xhrOptions, {
	      uri: segment.key.resolvedUri,
	      responseType: 'arraybuffer'
	    });
	    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);
	    var keyXhr = xhr(keyRequestOptions, keyRequestCallback);

	    activeXhrs.push(keyXhr);
	  }

	  // optionally, request the associated media init segment
	  if (segment.map && !segment.map.bytes) {
	    var initSegmentOptions = videojs.mergeOptions(xhrOptions, {
	      uri: segment.map.resolvedUri,
	      responseType: 'arraybuffer',
	      headers: segmentXhrHeaders(segment.map)
	    });
	    var initSegmentRequestCallback = handleInitSegmentResponse(segment, captionParser, finishProcessingFn);
	    var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);

	    activeXhrs.push(initSegmentXhr);
	  }

	  var segmentRequestOptions = videojs.mergeOptions(xhrOptions, {
	    uri: segment.resolvedUri,
	    responseType: 'arraybuffer',
	    headers: segmentXhrHeaders(segment)
	  });
	  var segmentRequestCallback = handleSegmentResponse(segment, captionParser, finishProcessingFn);
	  var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);

	  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));
	  activeXhrs.push(segmentXhr);

	  return function () {
	    return abortAll(activeXhrs);
	  };
	};

	// Utilities

	/**
	 * Returns the CSS value for the specified property on an element
	 * using `getComputedStyle`. Firefox has a long-standing issue where
	 * getComputedStyle() may return null when running in an iframe with
	 * `display: none`.
	 *
	 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 * @param {HTMLElement} el the htmlelement to work on
	 * @param {string} the proprety to get the style for
	 */
	var safeGetComputedStyle = function safeGetComputedStyle(el, property) {
	  var result = void 0;

	  if (!el) {
	    return '';
	  }

	  result = window_1.getComputedStyle(el);
	  if (!result) {
	    return '';
	  }

	  return result[property];
	};

	/**
	 * Resuable stable sort function
	 *
	 * @param {Playlists} array
	 * @param {Function} sortFn Different comparators
	 * @function stableSort
	 */
	var stableSort = function stableSort(array, sortFn) {
	  var newArray = array.slice();

	  array.sort(function (left, right) {
	    var cmp = sortFn(left, right);

	    if (cmp === 0) {
	      return newArray.indexOf(left) - newArray.indexOf(right);
	    }
	    return cmp;
	  });
	};

	/**
	 * A comparator function to sort two playlist object by bandwidth.
	 *
	 * @param {Object} left a media playlist object
	 * @param {Object} right a media playlist object
	 * @return {Number} Greater than zero if the bandwidth attribute of
	 * left is greater than the corresponding attribute of right. Less
	 * than zero if the bandwidth of right is greater than left and
	 * exactly zero if the two are equal.
	 */
	var comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {
	  var leftBandwidth = void 0;
	  var rightBandwidth = void 0;

	  if (left.attributes.BANDWIDTH) {
	    leftBandwidth = left.attributes.BANDWIDTH;
	  }
	  leftBandwidth = leftBandwidth || window_1.Number.MAX_VALUE;
	  if (right.attributes.BANDWIDTH) {
	    rightBandwidth = right.attributes.BANDWIDTH;
	  }
	  rightBandwidth = rightBandwidth || window_1.Number.MAX_VALUE;

	  return leftBandwidth - rightBandwidth;
	};

	/**
	 * A comparator function to sort two playlist object by resolution (width).
	 * @param {Object} left a media playlist object
	 * @param {Object} right a media playlist object
	 * @return {Number} Greater than zero if the resolution.width attribute of
	 * left is greater than the corresponding attribute of right. Less
	 * than zero if the resolution.width of right is greater than left and
	 * exactly zero if the two are equal.
	 */
	var comparePlaylistResolution = function comparePlaylistResolution(left, right) {
	  var leftWidth = void 0;
	  var rightWidth = void 0;

	  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {
	    leftWidth = left.attributes.RESOLUTION.width;
	  }

	  leftWidth = leftWidth || window_1.Number.MAX_VALUE;

	  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {
	    rightWidth = right.attributes.RESOLUTION.width;
	  }

	  rightWidth = rightWidth || window_1.Number.MAX_VALUE;

	  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions
	  // have the same media dimensions/ resolution
	  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {
	    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;
	  }
	  return leftWidth - rightWidth;
	};

	/**
	 * Chooses the appropriate media playlist based on bandwidth and player size
	 *
	 * @param {Object} master
	 *        Object representation of the master manifest
	 * @param {Number} playerBandwidth
	 *        Current calculated bandwidth of the player
	 * @param {Number} playerWidth
	 *        Current width of the player element
	 * @param {Number} playerHeight
	 *        Current height of the player element
	 * @param {Boolean} limitRenditionByPlayerDimensions
	 *        True if the player width and height should be used during the selection, false otherwise
	 * @return {Playlist} the highest bitrate playlist less than the
	 * currently detected bandwidth, accounting for some amount of
	 * bandwidth variance
	 */
	var simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions) {
	  // convert the playlists to an intermediary representation to make comparisons easier
	  var sortedPlaylistReps = master.playlists.map(function (playlist) {
	    var width = void 0;
	    var height = void 0;
	    var bandwidth = void 0;

	    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;
	    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;
	    bandwidth = playlist.attributes.BANDWIDTH;

	    bandwidth = bandwidth || window_1.Number.MAX_VALUE;

	    return {
	      bandwidth: bandwidth,
	      width: width,
	      height: height,
	      playlist: playlist
	    };
	  });

	  stableSort(sortedPlaylistReps, function (left, right) {
	    return left.bandwidth - right.bandwidth;
	  });

	  // filter out any playlists that have been excluded due to
	  // incompatible configurations
	  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {
	    return !Playlist.isIncompatible(rep.playlist);
	  });

	  // filter out any playlists that have been disabled manually through the representations
	  // api or blacklisted temporarily due to playback errors.
	  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {
	    return Playlist.isEnabled(rep.playlist);
	  });

	  if (!enabledPlaylistReps.length) {
	    // if there are no enabled playlists, then they have all been blacklisted or disabled
	    // by the user through the representations api. In this case, ignore blacklisting and
	    // fallback to what the user wants by using playlists the user has not disabled.
	    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {
	      return !Playlist.isDisabled(rep.playlist);
	    });
	  }

	  // filter out any variant that has greater effective bitrate
	  // than the current estimated bandwidth
	  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {
	    return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;
	  });

	  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];

	  // get all of the renditions with the same (highest) bandwidth
	  // and then taking the very first element
	  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {
	    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
	  })[0];

	  // if we're not going to limit renditions by player size, make an early decision.
	  if (limitRenditionByPlayerDimensions === false) {
	    var _chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];

	    return _chosenRep ? _chosenRep.playlist : null;
	  }

	  // filter out playlists without resolution information
	  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {
	    return rep.width && rep.height;
	  });

	  // sort variants by resolution
	  stableSort(haveResolution, function (left, right) {
	    return left.width - right.width;
	  });

	  // if we have the exact resolution as the player use it
	  var resolutionBestRepList = haveResolution.filter(function (rep) {
	    return rep.width === playerWidth && rep.height === playerHeight;
	  });

	  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];
	  // ensure that we pick the highest bandwidth variant that have exact resolution
	  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {
	    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
	  })[0];

	  var resolutionPlusOneList = void 0;
	  var resolutionPlusOneSmallest = void 0;
	  var resolutionPlusOneRep = void 0;

	  // find the smallest variant that is larger than the player
	  // if there is no match of exact resolution
	  if (!resolutionBestRep) {
	    resolutionPlusOneList = haveResolution.filter(function (rep) {
	      return rep.width > playerWidth || rep.height > playerHeight;
	    });

	    // find all the variants have the same smallest resolution
	    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {
	      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;
	    });

	    // ensure that we also pick the highest bandwidth variant that
	    // is just-larger-than the video player
	    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];
	    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {
	      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
	    })[0];
	  }

	  // fallback chain of variants
	  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];

	  return chosenRep ? chosenRep.playlist : null;
	};

	// Playlist Selectors

	/**
	 * Chooses the appropriate media playlist based on the most recent
	 * bandwidth estimate and the player size.
	 *
	 * Expects to be called within the context of an instance of HlsHandler
	 *
	 * @return {Playlist} the highest bitrate playlist less than the
	 * currently detected bandwidth, accounting for some amount of
	 * bandwidth variance
	 */
	var lastBandwidthSelector = function lastBandwidthSelector() {
	  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10), this.limitRenditionByPlayerDimensions);
	};

	/**
	 * Chooses the appropriate media playlist based on the potential to rebuffer
	 *
	 * @param {Object} settings
	 *        Object of information required to use this selector
	 * @param {Object} settings.master
	 *        Object representation of the master manifest
	 * @param {Number} settings.currentTime
	 *        The current time of the player
	 * @param {Number} settings.bandwidth
	 *        Current measured bandwidth
	 * @param {Number} settings.duration
	 *        Duration of the media
	 * @param {Number} settings.segmentDuration
	 *        Segment duration to be used in round trip time calculations
	 * @param {Number} settings.timeUntilRebuffer
	 *        Time left in seconds until the player has to rebuffer
	 * @param {Number} settings.currentTimeline
	 *        The current timeline segments are being loaded from
	 * @param {SyncController} settings.syncController
	 *        SyncController for determining if we have a sync point for a given playlist
	 * @return {Object|null}
	 *         {Object} return.playlist
	 *         The highest bandwidth playlist with the least amount of rebuffering
	 *         {Number} return.rebufferingImpact
	 *         The amount of time in seconds switching to this playlist will rebuffer. A
	 *         negative value means that switching will cause zero rebuffering.
	 */
	var minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {
	  var master = settings.master,
	      currentTime = settings.currentTime,
	      bandwidth = settings.bandwidth,
	      duration$$1 = settings.duration,
	      segmentDuration = settings.segmentDuration,
	      timeUntilRebuffer = settings.timeUntilRebuffer,
	      currentTimeline = settings.currentTimeline,
	      syncController = settings.syncController;

	  // filter out any playlists that have been excluded due to
	  // incompatible configurations

	  var compatiblePlaylists = master.playlists.filter(function (playlist) {
	    return !Playlist.isIncompatible(playlist);
	  });

	  // filter out any playlists that have been disabled manually through the representations
	  // api or blacklisted temporarily due to playback errors.
	  var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);

	  if (!enabledPlaylists.length) {
	    // if there are no enabled playlists, then they have all been blacklisted or disabled
	    // by the user through the representations api. In this case, ignore blacklisting and
	    // fallback to what the user wants by using playlists the user has not disabled.
	    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {
	      return !Playlist.isDisabled(playlist);
	    });
	  }

	  var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));

	  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {
	    var syncPoint = syncController.getSyncPoint(playlist, duration$$1, currentTimeline, currentTime);
	    // If there is no sync point for this playlist, switching to it will require a
	    // sync request first. This will double the request time
	    var numRequests = syncPoint ? 1 : 2;
	    var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);
	    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;

	    return {
	      playlist: playlist,
	      rebufferingImpact: rebufferingImpact
	    };
	  });

	  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {
	    return estimate.rebufferingImpact <= 0;
	  });

	  // Sort by bandwidth DESC
	  stableSort(noRebufferingPlaylists, function (a, b) {
	    return comparePlaylistBandwidth(b.playlist, a.playlist);
	  });

	  if (noRebufferingPlaylists.length) {
	    return noRebufferingPlaylists[0];
	  }

	  stableSort(rebufferingEstimates, function (a, b) {
	    return a.rebufferingImpact - b.rebufferingImpact;
	  });

	  return rebufferingEstimates[0] || null;
	};

	/**
	 * Chooses the appropriate media playlist, which in this case is the lowest bitrate
	 * one with video.  If no renditions with video exist, return the lowest audio rendition.
	 *
	 * Expects to be called within the context of an instance of HlsHandler
	 *
	 * @return {Object|null}
	 *         {Object} return.playlist
	 *         The lowest bitrate playlist that contains a video codec.  If no such rendition
	 *         exists pick the lowest audio rendition.
	 */
	var lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {
	  // filter out any playlists that have been excluded due to
	  // incompatible configurations or playback errors
	  var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled);

	  // Sort ascending by bitrate
	  stableSort(playlists, function (a, b) {
	    return comparePlaylistBandwidth(a, b);
	  });

	  // Parse and assume that playlists with no video codec have no video
	  // (this is not necessarily true, although it is generally true).
	  //
	  // If an entire manifest has no valid videos everything will get filtered
	  // out.
	  var playlistsWithVideo = playlists.filter(function (playlist) {
	    return parseCodecs(playlist.attributes.CODECS).videoCodec;
	  });

	  return playlistsWithVideo[0] || null;
	};

	/**
	 * Create captions text tracks on video.js if they do not exist
	 *
	 * @param {Object} inbandTextTracks a reference to current inbandTextTracks
	 * @param {Object} tech the video.js tech
	 * @param {Object} captionStreams the caption streams to create
	 * @private
	 */
	var createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists(inbandTextTracks, tech, captionStreams) {
	  for (var trackId in captionStreams) {
	    if (!inbandTextTracks[trackId]) {
	      tech.trigger({ type: 'usage', name: 'hls-608' });
	      var track = tech.textTracks().getTrackById(trackId);

	      if (track) {
	        // Resuse an existing track with a CC# id because this was
	        // very likely created by videojs-contrib-hls from information
	        // in the m3u8 for us to use
	        inbandTextTracks[trackId] = track;
	      } else {
	        // Otherwise, create a track with the default `CC#` label and
	        // without a language
	        inbandTextTracks[trackId] = tech.addRemoteTextTrack({
	          kind: 'captions',
	          id: trackId,
	          label: trackId
	        }, false).track;
	      }
	    }
	  }
	};

	var addCaptionData = function addCaptionData(_ref) {
	  var inbandTextTracks = _ref.inbandTextTracks,
	      captionArray = _ref.captionArray,
	      timestampOffset = _ref.timestampOffset;

	  if (!captionArray) {
	    return;
	  }

	  var Cue = window.WebKitDataCue || window.VTTCue;

	  captionArray.forEach(function (caption) {
	    var track = caption.stream;
	    var startTime = caption.startTime;
	    var endTime = caption.endTime;

	    if (!inbandTextTracks[track]) {
	      return;
	    }

	    startTime += timestampOffset;
	    endTime += timestampOffset;

	    inbandTextTracks[track].addCue(new Cue(startTime, endTime, caption.text));
	  });
	};

	/**
	 * mux.js
	 *
	 * Copyright (c) 2015 Brightcove
	 * All rights reserved.
	 *
	 * Functions that generate fragmented MP4s suitable for use with Media
	 * Source Extensions.
	 */

	var UINT32_MAX = Math.pow(2, 32) - 1;

	var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;

	// pre-calculate constants
	(function () {
	  var i;
	  types = {
	    avc1: [], // codingname
	    avcC: [],
	    btrt: [],
	    dinf: [],
	    dref: [],
	    esds: [],
	    ftyp: [],
	    hdlr: [],
	    mdat: [],
	    mdhd: [],
	    mdia: [],
	    mfhd: [],
	    minf: [],
	    moof: [],
	    moov: [],
	    mp4a: [], // codingname
	    mvex: [],
	    mvhd: [],
	    sdtp: [],
	    smhd: [],
	    stbl: [],
	    stco: [],
	    stsc: [],
	    stsd: [],
	    stsz: [],
	    stts: [],
	    styp: [],
	    tfdt: [],
	    tfhd: [],
	    traf: [],
	    trak: [],
	    trun: [],
	    trex: [],
	    tkhd: [],
	    vmhd: []
	  };

	  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we
	  // don't throw an error
	  if (typeof Uint8Array === 'undefined') {
	    return;
	  }

	  for (i in types) {
	    if (types.hasOwnProperty(i)) {
	      types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
	    }
	  }

	  MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);
	  AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);
	  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);
	  VIDEO_HDLR = new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, 0x00, 0x00, // pre_defined
	  0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
	  ]);
	  AUDIO_HDLR = new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, 0x00, 0x00, // pre_defined
	  0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'
	  ]);
	  HDLR_TYPES = {
	    video: VIDEO_HDLR,
	    audio: AUDIO_HDLR
	  };
	  DREF = new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, 0x00, 0x01, // entry_count
	  0x00, 0x00, 0x00, 0x0c, // entry_size
	  0x75, 0x72, 0x6c, 0x20, // 'url' type
	  0x00, // version 0
	  0x00, 0x00, 0x01 // entry_flags
	  ]);
	  SMHD = new Uint8Array([0x00, // version
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, // balance, 0 means centered
	  0x00, 0x00 // reserved
	  ]);
	  STCO = new Uint8Array([0x00, // version
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, 0x00, 0x00 // entry_count
	  ]);
	  STSC = STCO;
	  STSZ = new Uint8Array([0x00, // version
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, 0x00, 0x00, // sample_size
	  0x00, 0x00, 0x00, 0x00 // sample_count
	  ]);
	  STTS = STCO;
	  VMHD = new Uint8Array([0x00, // version
	  0x00, 0x00, 0x01, // flags
	  0x00, 0x00, // graphicsmode
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor
	  ]);
	})();

	box = function box(type) {
	  var payload = [],
	      size = 0,
	      i,
	      result,
	      view;

	  for (i = 1; i < arguments.length; i++) {
	    payload.push(arguments[i]);
	  }

	  i = payload.length;

	  // calculate the total size we need to allocate
	  while (i--) {
	    size += payload[i].byteLength;
	  }
	  result = new Uint8Array(size + 8);
	  view = new DataView(result.buffer, result.byteOffset, result.byteLength);
	  view.setUint32(0, result.byteLength);
	  result.set(type, 4);

	  // copy the payload into the result
	  for (i = 0, size = 8; i < payload.length; i++) {
	    result.set(payload[i], size);
	    size += payload[i].byteLength;
	  }
	  return result;
	};

	dinf = function dinf() {
	  return box(types.dinf, box(types.dref, DREF));
	};

	esds = function esds(track) {
	  return box(types.esds, new Uint8Array([0x00, // version
	  0x00, 0x00, 0x00, // flags

	  // ES_Descriptor
	  0x03, // tag, ES_DescrTag
	  0x19, // length
	  0x00, 0x00, // ES_ID
	  0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority

	  // DecoderConfigDescriptor
	  0x04, // tag, DecoderConfigDescrTag
	  0x11, // length
	  0x40, // object type
	  0x15, // streamType
	  0x00, 0x06, 0x00, // bufferSizeDB
	  0x00, 0x00, 0xda, 0xc0, // maxBitrate
	  0x00, 0x00, 0xda, 0xc0, // avgBitrate

	  // DecoderSpecificInfo
	  0x05, // tag, DecoderSpecificInfoTag
	  0x02, // length
	  // ISO/IEC 14496-3, AudioSpecificConfig
	  // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
	  track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig
	  ]));
	};

	ftyp = function ftyp() {
	  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);
	};

	hdlr = function hdlr(type) {
	  return box(types.hdlr, HDLR_TYPES[type]);
	};
	mdat = function mdat(data) {
	  return box(types.mdat, data);
	};
	mdhd = function mdhd(track) {
	  var result = new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, 0x00, 0x02, // creation_time
	  0x00, 0x00, 0x00, 0x03, // modification_time
	  0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 "ticks" per second

	  track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration
	  0x55, 0xc4, // 'und' language (undetermined)
	  0x00, 0x00]);

	  // Use the sample rate from the track metadata, when it is
	  // defined. The sample rate can be parsed out of an ADTS header, for
	  // instance.
	  if (track.samplerate) {
	    result[12] = track.samplerate >>> 24 & 0xFF;
	    result[13] = track.samplerate >>> 16 & 0xFF;
	    result[14] = track.samplerate >>> 8 & 0xFF;
	    result[15] = track.samplerate & 0xFF;
	  }

	  return box(types.mdhd, result);
	};
	mdia = function mdia(track) {
	  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));
	};
	mfhd = function mfhd(sequenceNumber) {
	  return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags
	  (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number
	  ]));
	};
	minf = function minf(track) {
	  return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));
	};
	moof = function moof(sequenceNumber, tracks) {
	  var trackFragments = [],
	      i = tracks.length;
	  // build traf boxes for each track fragment
	  while (i--) {
	    trackFragments[i] = traf(tracks[i]);
	  }
	  return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));
	};
	/**
	 * Returns a movie box.
	 * @param tracks {array} the tracks associated with this movie
	 * @see ISO/IEC 14496-12:2012(E), section 8.2.1
	 */
	moov = function moov(tracks) {
	  var i = tracks.length,
	      boxes = [];

	  while (i--) {
	    boxes[i] = trak(tracks[i]);
	  }

	  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));
	};
	mvex = function mvex(tracks) {
	  var i = tracks.length,
	      boxes = [];

	  while (i--) {
	    boxes[i] = trex(tracks[i]);
	  }
	  return box.apply(null, [types.mvex].concat(boxes));
	};
	mvhd = function mvhd(duration) {
	  var bytes = new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x00, // flags
	  0x00, 0x00, 0x00, 0x01, // creation_time
	  0x00, 0x00, 0x00, 0x02, // modification_time
	  0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 "ticks" per second
	  (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration
	  0x00, 0x01, 0x00, 0x00, // 1.0 rate
	  0x01, 0x00, // 1.0 volume
	  0x00, 0x00, // reserved
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x00, 0x00, 0x00, 0x00, // reserved
	  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
	  0xff, 0xff, 0xff, 0xff // next_track_ID
	  ]);
	  return box(types.mvhd, bytes);
	};

	sdtp = function sdtp(track) {
	  var samples = track.samples || [],
	      bytes = new Uint8Array(4 + samples.length),
	      flags,
	      i;

	  // leave the full box header (4 bytes) all zero

	  // write the sample table
	  for (i = 0; i < samples.length; i++) {
	    flags = samples[i].flags;

	    bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
	  }

	  return box(types.sdtp, bytes);
	};

	stbl = function stbl(track) {
	  return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));
	};

	(function () {
	  var videoSample, audioSample;

	  stsd = function stsd(track) {

	    return box(types.stsd, new Uint8Array([0x00, // version 0
	    0x00, 0x00, 0x00, // flags
	    0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));
	  };

	  videoSample = function videoSample(track) {
	    var sps = track.sps || [],
	        pps = track.pps || [],
	        sequenceParameterSets = [],
	        pictureParameterSets = [],
	        i;

	    // assemble the SPSs
	    for (i = 0; i < sps.length; i++) {
	      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);
	      sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength
	      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS
	    }

	    // assemble the PPSs
	    for (i = 0; i < pps.length; i++) {
	      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);
	      pictureParameterSets.push(pps[i].byteLength & 0xFF);
	      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));
	    }

	    return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	    0x00, 0x01, // data_reference_index
	    0x00, 0x00, // pre_defined
	    0x00, 0x00, // reserved
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
	    (track.width & 0xff00) >> 8, track.width & 0xff, // width
	    (track.height & 0xff00) >> 8, track.height & 0xff, // height
	    0x00, 0x48, 0x00, 0x00, // horizresolution
	    0x00, 0x48, 0x00, 0x00, // vertresolution
	    0x00, 0x00, 0x00, 0x00, // reserved
	    0x00, 0x01, // frame_count
	    0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname
	    0x00, 0x18, // depth = 24
	    0x11, 0x11 // pre_defined = -1
	    ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion
	    track.profileIdc, // AVCProfileIndication
	    track.profileCompatibility, // profile_compatibility
	    track.levelIdc, // AVCLevelIndication
	    0xff // lengthSizeMinusOne, hard-coded to 4 bytes
	    ].concat([sps.length // numOfSequenceParameterSets
	    ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets
	    ]).concat(pictureParameterSets))), // "PPS"
	    box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
	    0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
	    0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate
	    );
	  };

	  audioSample = function audioSample(track) {
	    return box(types.mp4a, new Uint8Array([

	    // SampleEntry, ISO/IEC 14496-12
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	    0x00, 0x01, // data_reference_index

	    // AudioSampleEntry, ISO/IEC 14496-12
	    0x00, 0x00, 0x00, 0x00, // reserved
	    0x00, 0x00, 0x00, 0x00, // reserved
	    (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount

	    (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize
	    0x00, 0x00, // pre_defined
	    0x00, 0x00, // reserved

	    (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16

	    // MP4AudioSampleEntry, ISO/IEC 14496-14
	    ]), esds(track));
	  };
	})();

	tkhd = function tkhd(track) {
	  var result = new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x07, // flags
	  0x00, 0x00, 0x00, 0x00, // creation_time
	  0x00, 0x00, 0x00, 0x00, // modification_time
	  (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
	  0x00, 0x00, 0x00, 0x00, // reserved
	  (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	  0x00, 0x00, // layer
	  0x00, 0x00, // alternate_group
	  0x01, 0x00, // non-audio track volume
	  0x00, 0x00, // reserved
	  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
	  (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width
	  (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height
	  ]);

	  return box(types.tkhd, result);
	};

	/**
	 * Generate a track fragment (traf) box. A traf box collects metadata
	 * about tracks in a movie fragment (moof) box.
	 */
	traf = function traf(track) {
	  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;

	  trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x3a, // flags
	  (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
	  0x00, 0x00, 0x00, 0x01, // sample_description_index
	  0x00, 0x00, 0x00, 0x00, // default_sample_duration
	  0x00, 0x00, 0x00, 0x00, // default_sample_size
	  0x00, 0x00, 0x00, 0x00 // default_sample_flags
	  ]));

	  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));
	  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));

	  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1
	  0x00, 0x00, 0x00, // flags
	  // baseMediaDecodeTime
	  upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF]));

	  // the data offset specifies the number of bytes from the start of
	  // the containing moof to the first payload byte of the associated
	  // mdat
	  dataOffset = 32 + // tfhd
	  20 + // tfdt
	  8 + // traf header
	  16 + // mfhd
	  8 + // moof header
	  8; // mdat header

	  // audio tracks require less metadata
	  if (track.type === 'audio') {
	    trackFragmentRun = trun(track, dataOffset);
	    return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);
	  }

	  // video tracks should contain an independent and disposable samples
	  // box (sdtp)
	  // generate one and adjust offsets to match
	  sampleDependencyTable = sdtp(track);
	  trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);
	  return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);
	};

	/**
	 * Generate a track box.
	 * @param track {object} a track definition
	 * @return {Uint8Array} the track box
	 */
	trak = function trak(track) {
	  track.duration = track.duration || 0xffffffff;
	  return box(types.trak, tkhd(track), mdia(track));
	};

	trex = function trex(track) {
	  var result = new Uint8Array([0x00, // version 0
	  0x00, 0x00, 0x00, // flags
	  (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
	  0x00, 0x00, 0x00, 0x01, // default_sample_description_index
	  0x00, 0x00, 0x00, 0x00, // default_sample_duration
	  0x00, 0x00, 0x00, 0x00, // default_sample_size
	  0x00, 0x01, 0x00, 0x01 // default_sample_flags
	  ]);
	  // the last two bytes of default_sample_flags is the sample
	  // degradation priority, a hint about the importance of this sample
	  // relative to others. Lower the degradation priority for all sample
	  // types other than video.
	  if (track.type !== 'video') {
	    result[result.length - 1] = 0x00;
	  }

	  return box(types.trex, result);
	};

	(function () {
	  var audioTrun, videoTrun, trunHeader;

	  // This method assumes all samples are uniform. That is, if a
	  // duration is present for the first sample, it will be present for
	  // all subsequent samples.
	  // see ISO/IEC 14496-12:2012, Section 8.8.8.1
	  trunHeader = function trunHeader(samples, offset) {
	    var durationPresent = 0,
	        sizePresent = 0,
	        flagsPresent = 0,
	        compositionTimeOffset = 0;

	    // trun flag constants
	    if (samples.length) {
	      if (samples[0].duration !== undefined) {
	        durationPresent = 0x1;
	      }
	      if (samples[0].size !== undefined) {
	        sizePresent = 0x2;
	      }
	      if (samples[0].flags !== undefined) {
	        flagsPresent = 0x4;
	      }
	      if (samples[0].compositionTimeOffset !== undefined) {
	        compositionTimeOffset = 0x8;
	      }
	    }

	    return [0x00, // version 0
	    0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags
	    (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count
	    (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset
	    ];
	  };

	  videoTrun = function videoTrun(track, offset) {
	    var bytes, samples, sample, i;

	    samples = track.samples || [];
	    offset += 8 + 12 + 16 * samples.length;

	    bytes = trunHeader(samples, offset);

	    for (i = 0; i < samples.length; i++) {
	      sample = samples[i];
	      bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration
	      (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size
	      sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags
	      (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset
	      ]);
	    }
	    return box(types.trun, new Uint8Array(bytes));
	  };

	  audioTrun = function audioTrun(track, offset) {
	    var bytes, samples, sample, i;

	    samples = track.samples || [];
	    offset += 8 + 12 + 8 * samples.length;

	    bytes = trunHeader(samples, offset);

	    for (i = 0; i < samples.length; i++) {
	      sample = samples[i];
	      bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration
	      (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size
	    }

	    return box(types.trun, new Uint8Array(bytes));
	  };

	  trun = function trun(track, offset) {
	    if (track.type === 'audio') {
	      return audioTrun(track, offset);
	    }

	    return videoTrun(track, offset);
	  };
	})();

	var mp4Generator = {
	  ftyp: ftyp,
	  mdat: mdat,
	  moof: moof,
	  moov: moov,
	  initSegment: function initSegment(tracks) {
	    var fileType = ftyp(),
	        movie = moov(tracks),
	        result;

	    result = new Uint8Array(fileType.byteLength + movie.byteLength);
	    result.set(fileType);
	    result.set(movie, fileType.byteLength);
	    return result;
	  }
	};

	/**
	 * mux.js
	 *
	 * Copyright (c) 2014 Brightcove
	 * All rights reserved.
	 *
	 * A lightweight readable stream implemention that handles event dispatching.
	 * Objects that inherit from streams should call init in their constructors.
	 */

	var Stream$2 = function Stream() {
	  this.init = function () {
	    var listeners = {};
	    /**
	     * Add a listener for a specified event type.
	     * @param type {string} the event name
	     * @param listener {function} the callback to be invoked when an event of
	     * the specified type occurs
	     */
	    this.on = function (type, listener) {
	      if (!listeners[type]) {
	        listeners[type] = [];
	      }
	      listeners[type] = listeners[type].concat(listener);
	    };
	    /**
	     * Remove a listener for a specified event type.
	     * @param type {string} the event name
	     * @param listener {function} a function previously registered for this
	     * type of event through `on`
	     */
	    this.off = function (type, listener) {
	      var index;
	      if (!listeners[type]) {
	        return false;
	      }
	      index = listeners[type].indexOf(listener);
	      listeners[type] = listeners[type].slice();
	      listeners[type].splice(index, 1);
	      return index > -1;
	    };
	    /**
	     * Trigger an event of the specified type on this stream. Any additional
	     * arguments to this function are passed as parameters to event listeners.
	     * @param type {string} the event name
	     */
	    this.trigger = function (type) {
	      var callbacks, i, length, args;
	      callbacks = listeners[type];
	      if (!callbacks) {
	        return;
	      }
	      // Slicing the arguments on every invocation of this method
	      // can add a significant amount of overhead. Avoid the
	      // intermediate object creation for the common case of a
	      // single callback argument
	      if (arguments.length === 2) {
	        length = callbacks.length;
	        for (i = 0; i < length; ++i) {
	          callbacks[i].call(this, arguments[1]);
	        }
	      } else {
	        args = [];
	        i = arguments.length;
	        for (i = 1; i < arguments.length; ++i) {
	          args.push(arguments[i]);
	        }
	        length = callbacks.length;
	        for (i = 0; i < length; ++i) {
	          callbacks[i].apply(this, args);
	        }
	      }
	    };
	    /**
	     * Destroys the stream and cleans up.
	     */
	    this.dispose = function () {
	      listeners = {};
	    };
	  };
	};

	/**
	 * Forwards all `data` events on this stream to the destination stream. The
	 * destination stream should provide a method `push` to receive the data
	 * events as they arrive.
	 * @param destination {stream} the stream that will receive all `data` events
	 * @param autoFlush {boolean} if false, we will not call `flush` on the destination
	 *                            when the current stream emits a 'done' event
	 * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
	 */
	Stream$2.prototype.pipe = function (destination) {
	  this.on('data', function (data) {
	    destination.push(data);
	  });

	  this.on('done', function (flushSource) {
	    destination.flush(flushSource);
	  });

	  return destination;
	};

	// Default stream functions that are expected to be overridden to perform
	// actual work. These are provided by the prototype as a sort of no-op
	// implementation so that we don't have to check for their existence in the
	// `pipe` function above.
	Stream$2.prototype.push = function (data) {
	  this.trigger('data', data);
	};

	Stream$2.prototype.flush = function (flushSource) {
	  this.trigger('done', flushSource);
	};

	var stream = Stream$2;

	// Convert an array of nal units into an array of frames with each frame being
	// composed of the nal units that make up that frame
	// Also keep track of cummulative data about the frame from the nal units such
	// as the frame duration, starting pts, etc.
	var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {
	  var i,
	      currentNal,
	      currentFrame = [],
	      frames = [];

	  currentFrame.byteLength = 0;

	  for (i = 0; i < nalUnits.length; i++) {
	    currentNal = nalUnits[i];

	    // Split on 'aud'-type nal units
	    if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {
	      // Since the very first nal unit is expected to be an AUD
	      // only push to the frames array when currentFrame is not empty
	      if (currentFrame.length) {
	        currentFrame.duration = currentNal.dts - currentFrame.dts;
	        frames.push(currentFrame);
	      }
	      currentFrame = [currentNal];
	      currentFrame.byteLength = currentNal.data.byteLength;
	      currentFrame.pts = currentNal.pts;
	      currentFrame.dts = currentNal.dts;
	    } else {
	      // Specifically flag key frames for ease of use later
	      if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {
	        currentFrame.keyFrame = true;
	      }
	      currentFrame.duration = currentNal.dts - currentFrame.dts;
	      currentFrame.byteLength += currentNal.data.byteLength;
	      currentFrame.push(currentNal);
	    }
	  }

	  // For the last frame, use the duration of the previous frame if we
	  // have nothing better to go on
	  if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {
	    currentFrame.duration = frames[frames.length - 1].duration;
	  }

	  // Push the final frame
	  frames.push(currentFrame);
	  return frames;
	};

	// Convert an array of frames into an array of Gop with each Gop being composed
	// of the frames that make up that Gop
	// Also keep track of cummulative data about the Gop from the frames such as the
	// Gop duration, starting pts, etc.
	var groupFramesIntoGops = function groupFramesIntoGops(frames) {
	  var i,
	      currentFrame,
	      currentGop = [],
	      gops = [];

	  // We must pre-set some of the values on the Gop since we
	  // keep running totals of these values
	  currentGop.byteLength = 0;
	  currentGop.nalCount = 0;
	  currentGop.duration = 0;
	  currentGop.pts = frames[0].pts;
	  currentGop.dts = frames[0].dts;

	  // store some metadata about all the Gops
	  gops.byteLength = 0;
	  gops.nalCount = 0;
	  gops.duration = 0;
	  gops.pts = frames[0].pts;
	  gops.dts = frames[0].dts;

	  for (i = 0; i < frames.length; i++) {
	    currentFrame = frames[i];

	    if (currentFrame.keyFrame) {
	      // Since the very first frame is expected to be an keyframe
	      // only push to the gops array when currentGop is not empty
	      if (currentGop.length) {
	        gops.push(currentGop);
	        gops.byteLength += currentGop.byteLength;
	        gops.nalCount += currentGop.nalCount;
	        gops.duration += currentGop.duration;
	      }

	      currentGop = [currentFrame];
	      currentGop.nalCount = currentFrame.length;
	      currentGop.byteLength = currentFrame.byteLength;
	      currentGop.pts = currentFrame.pts;
	      currentGop.dts = currentFrame.dts;
	      currentGop.duration = currentFrame.duration;
	    } else {
	      currentGop.duration += currentFrame.duration;
	      currentGop.nalCount += currentFrame.length;
	      currentGop.byteLength += currentFrame.byteLength;
	      currentGop.push(currentFrame);
	    }
	  }

	  if (gops.length && currentGop.duration <= 0) {
	    currentGop.duration = gops[gops.length - 1].duration;
	  }
	  gops.byteLength += currentGop.byteLength;
	  gops.nalCount += currentGop.nalCount;
	  gops.duration += currentGop.duration;

	  // push the final Gop
	  gops.push(currentGop);
	  return gops;
	};

	/*
	 * Search for the first keyframe in the GOPs and throw away all frames
	 * until that keyframe. Then extend the duration of the pulled keyframe
	 * and pull the PTS and DTS of the keyframe so that it covers the time
	 * range of the frames that were disposed.
	 *
	 * @param {Array} gops video GOPs
	 * @returns {Array} modified video GOPs
	 */
	var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {
	  var currentGop;

	  if (!gops[0][0].keyFrame && gops.length > 1) {
	    // Remove the first GOP
	    currentGop = gops.shift();

	    gops.byteLength -= currentGop.byteLength;
	    gops.nalCount -= currentGop.nalCount;

	    // Extend the first frame of what is now the
	    // first gop to cover the time period of the
	    // frames we just removed
	    gops[0][0].dts = currentGop.dts;
	    gops[0][0].pts = currentGop.pts;
	    gops[0][0].duration += currentGop.duration;
	  }

	  return gops;
	};

	/**
	 * Default sample object
	 * see ISO/IEC 14496-12:2012, section 8.6.4.3
	 */
	var createDefaultSample = function createDefaultSample() {
	  return {
	    size: 0,
	    flags: {
	      isLeading: 0,
	      dependsOn: 1,
	      isDependedOn: 0,
	      hasRedundancy: 0,
	      degradationPriority: 0,
	      isNonSyncSample: 1
	    }
	  };
	};

	/*
	 * Collates information from a video frame into an object for eventual
	 * entry into an MP4 sample table.
	 *
	 * @param {Object} frame the video frame
	 * @param {Number} dataOffset the byte offset to position the sample
	 * @return {Object} object containing sample table info for a frame
	 */
	var sampleForFrame = function sampleForFrame(frame, dataOffset) {
	  var sample = createDefaultSample();

	  sample.dataOffset = dataOffset;
	  sample.compositionTimeOffset = frame.pts - frame.dts;
	  sample.duration = frame.duration;
	  sample.size = 4 * frame.length; // Space for nal unit size
	  sample.size += frame.byteLength;

	  if (frame.keyFrame) {
	    sample.flags.dependsOn = 2;
	    sample.flags.isNonSyncSample = 0;
	  }

	  return sample;
	};

	// generate the track's sample table from an array of gops
	var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {
	  var h,
	      i,
	      sample,
	      currentGop,
	      currentFrame,
	      dataOffset = baseDataOffset || 0,
	      samples = [];

	  for (h = 0; h < gops.length; h++) {
	    currentGop = gops[h];

	    for (i = 0; i < currentGop.length; i++) {
	      currentFrame = currentGop[i];

	      sample = sampleForFrame(currentFrame, dataOffset);

	      dataOffset += sample.size;

	      samples.push(sample);
	    }
	  }
	  return samples;
	};

	// generate the track's raw mdat data from an array of gops
	var concatenateNalData = function concatenateNalData(gops) {
	  var h,
	      i,
	      j,
	      currentGop,
	      currentFrame,
	      currentNal,
	      dataOffset = 0,
	      nalsByteLength = gops.byteLength,
	      numberOfNals = gops.nalCount,
	      totalByteLength = nalsByteLength + 4 * numberOfNals,
	      data = new Uint8Array(totalByteLength),
	      view = new DataView(data.buffer);

	  // For each Gop..
	  for (h = 0; h < gops.length; h++) {
	    currentGop = gops[h];

	    // For each Frame..
	    for (i = 0; i < currentGop.length; i++) {
	      currentFrame = currentGop[i];

	      // For each NAL..
	      for (j = 0; j < currentFrame.length; j++) {
	        currentNal = currentFrame[j];

	        view.setUint32(dataOffset, currentNal.data.byteLength);
	        dataOffset += 4;
	        data.set(currentNal.data, dataOffset);
	        dataOffset += currentNal.data.byteLength;
	      }
	    }
	  }
	  return data;
	};

	var frameUtils = {
	  groupNalsIntoFrames: groupNalsIntoFrames,
	  groupFramesIntoGops: groupFramesIntoGops,
	  extendFirstKeyFrame: extendFirstKeyFrame,
	  generateSampleTable: generateSampleTable,
	  concatenateNalData: concatenateNalData
	};

	var highPrefix = [33, 16, 5, 32, 164, 27];
	var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];
	var zeroFill = function zeroFill(count) {
	  var a = [];
	  while (count--) {
	    a.push(0);
	  }
	  return a;
	};

	var makeTable = function makeTable(metaTable) {
	  return Object.keys(metaTable).reduce(function (obj, key) {
	    obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {
	      return arr.concat(part);
	    }, []));
	    return obj;
	  }, {});
	};

	// Frames-of-silence to use for filling in missing AAC frames
	var coneOfSilence = {
	  96000: [highPrefix, [227, 64], zeroFill(154), [56]],
	  88200: [highPrefix, [231], zeroFill(170), [56]],
	  64000: [highPrefix, [248, 192], zeroFill(240), [56]],
	  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],
	  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],
	  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],
	  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],
	  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],
	  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],
	  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],
	  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]
	};

	var silence = makeTable(coneOfSilence);

	var ONE_SECOND_IN_TS = 90000,
	    // 90kHz clock
	secondsToVideoTs,
	    secondsToAudioTs,
	    videoTsToSeconds,
	    audioTsToSeconds,
	    audioTsToVideoTs,
	    videoTsToAudioTs;

	secondsToVideoTs = function secondsToVideoTs(seconds) {
	  return seconds * ONE_SECOND_IN_TS;
	};

	secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {
	  return seconds * sampleRate;
	};

	videoTsToSeconds = function videoTsToSeconds(timestamp) {
	  return timestamp / ONE_SECOND_IN_TS;
	};

	audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {
	  return timestamp / sampleRate;
	};

	audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {
	  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
	};

	videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {
	  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
	};

	var clock = {
	  secondsToVideoTs: secondsToVideoTs,
	  secondsToAudioTs: secondsToAudioTs,
	  videoTsToSeconds: videoTsToSeconds,
	  audioTsToSeconds: audioTsToSeconds,
	  audioTsToVideoTs: audioTsToVideoTs,
	  videoTsToAudioTs: videoTsToAudioTs
	};

	var ONE_SECOND_IN_TS$1 = 90000; // 90kHz clock

	/**
	 * Sum the `byteLength` properties of the data in each AAC frame
	 */
	var sumFrameByteLengths = function sumFrameByteLengths(array) {
	  var i,
	      currentObj,
	      sum = 0;

	  // sum the byteLength's all each nal unit in the frame
	  for (i = 0; i < array.length; i++) {
	    currentObj = array[i];
	    sum += currentObj.data.byteLength;
	  }

	  return sum;
	};

	// Possibly pad (prefix) the audio track with silence if appending this track
	// would lead to the introduction of a gap in the audio buffer
	var prefixWithSilence = function prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {
	  var baseMediaDecodeTimeTs,
	      frameDuration = 0,
	      audioGapDuration = 0,
	      audioFillFrameCount = 0,
	      audioFillDuration = 0,
	      silentFrame,
	      i;

	  if (!frames.length) {
	    return;
	  }

	  baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);
	  // determine frame clock duration based on sample rate, round up to avoid overfills
	  frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 / (track.samplerate / 1024));

	  if (audioAppendStartTs && videoBaseMediaDecodeTime) {
	    // insert the shortest possible amount (audio gap or audio to video gap)
	    audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);
	    // number of full frames in the audio gap
	    audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);
	    audioFillDuration = audioFillFrameCount * frameDuration;
	  }

	  // don't attempt to fill gaps smaller than a single frame or larger
	  // than a half second
	  if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$1 / 2) {
	    return;
	  }

	  silentFrame = silence[track.samplerate];

	  if (!silentFrame) {
	    // we don't have a silent frame pregenerated for the sample rate, so use a frame
	    // from the content instead
	    silentFrame = frames[0].data;
	  }

	  for (i = 0; i < audioFillFrameCount; i++) {
	    frames.splice(i, 0, {
	      data: silentFrame
	    });
	  }

	  track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));
	};

	// If the audio segment extends before the earliest allowed dts
	// value, remove AAC frames until starts at or after the earliest
	// allowed DTS so that we don't end up with a negative baseMedia-
	// DecodeTime for the audio track
	var trimAdtsFramesByEarliestDts = function trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts) {
	  if (track.minSegmentDts >= earliestAllowedDts) {
	    return adtsFrames;
	  }

	  // We will need to recalculate the earliest segment Dts
	  track.minSegmentDts = Infinity;

	  return adtsFrames.filter(function (currentFrame) {
	    // If this is an allowed frame, keep it and record it's Dts
	    if (currentFrame.dts >= earliestAllowedDts) {
	      track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);
	      track.minSegmentPts = track.minSegmentDts;
	      return true;
	    }
	    // Otherwise, discard it
	    return false;
	  });
	};

	// generate the track's raw mdat data from an array of frames
	var generateSampleTable$1 = function generateSampleTable(frames) {
	  var i,
	      currentFrame,
	      samples = [];

	  for (i = 0; i < frames.length; i++) {
	    currentFrame = frames[i];
	    samples.push({
	      size: currentFrame.data.byteLength,
	      duration: 1024 // For AAC audio, all samples contain 1024 samples
	    });
	  }
	  return samples;
	};

	// generate the track's sample table from an array of frames
	var concatenateFrameData = function concatenateFrameData(frames) {
	  var i,
	      currentFrame,
	      dataOffset = 0,
	      data = new Uint8Array(sumFrameByteLengths(frames));

	  for (i = 0; i < frames.length; i++) {
	    currentFrame = frames[i];

	    data.set(currentFrame.data, dataOffset);
	    dataOffset += currentFrame.data.byteLength;
	  }
	  return data;
	};

	var audioFrameUtils = {
	  prefixWithSilence: prefixWithSilence,
	  trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,
	  generateSampleTable: generateSampleTable$1,
	  concatenateFrameData: concatenateFrameData
	};

	var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock

	/**
	 * Store information about the start and end of the track and the
	 * duration for each frame/sample we process in order to calculate
	 * the baseMediaDecodeTime
	 */
	var collectDtsInfo = function collectDtsInfo(track, data) {
	  if (typeof data.pts === 'number') {
	    if (track.timelineStartInfo.pts === undefined) {
	      track.timelineStartInfo.pts = data.pts;
	    }

	    if (track.minSegmentPts === undefined) {
	      track.minSegmentPts = data.pts;
	    } else {
	      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);
	    }

	    if (track.maxSegmentPts === undefined) {
	      track.maxSegmentPts = data.pts;
	    } else {
	      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);
	    }
	  }

	  if (typeof data.dts === 'number') {
	    if (track.timelineStartInfo.dts === undefined) {
	      track.timelineStartInfo.dts = data.dts;
	    }

	    if (track.minSegmentDts === undefined) {
	      track.minSegmentDts = data.dts;
	    } else {
	      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);
	    }

	    if (track.maxSegmentDts === undefined) {
	      track.maxSegmentDts = data.dts;
	    } else {
	      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);
	    }
	  }
	};

	/**
	 * Clear values used to calculate the baseMediaDecodeTime between
	 * tracks
	 */
	var clearDtsInfo = function clearDtsInfo(track) {
	  delete track.minSegmentDts;
	  delete track.maxSegmentDts;
	  delete track.minSegmentPts;
	  delete track.maxSegmentPts;
	};

	/**
	 * Calculate the track's baseMediaDecodeTime based on the earliest
	 * DTS the transmuxer has ever seen and the minimum DTS for the
	 * current track
	 * @param track {object} track metadata configuration
	 * @param keepOriginalTimestamps {boolean} If true, keep the timestamps
	 *        in the source; false to adjust the first segment to start at 0.
	 */
	var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {
	  var baseMediaDecodeTime,
	      scale,
	      minSegmentDts = track.minSegmentDts;

	  // Optionally adjust the time so the first segment starts at zero.
	  if (!keepOriginalTimestamps) {
	    minSegmentDts -= track.timelineStartInfo.dts;
	  }

	  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where
	  // we want the start of the first segment to be placed
	  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;

	  // Add to that the distance this segment is from the very first
	  baseMediaDecodeTime += minSegmentDts;

	  // baseMediaDecodeTime must not become negative
	  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);

	  if (track.type === 'audio') {
	    // Audio has a different clock equal to the sampling_rate so we need to
	    // scale the PTS values into the clock rate of the track
	    scale = track.samplerate / ONE_SECOND_IN_TS$2;
	    baseMediaDecodeTime *= scale;
	    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);
	  }

	  return baseMediaDecodeTime;
	};

	var trackDecodeInfo = {
	  clearDtsInfo: clearDtsInfo,
	  calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,
	  collectDtsInfo: collectDtsInfo
	};

	/**
	 * mux.js
	 *
	 * Copyright (c) 2015 Brightcove
	 * All rights reserved.
	 *
	 * Reads in-band caption information from a video elementary
	 * stream. Captions must follow the CEA-708 standard for injection
	 * into an MPEG-2 transport streams.
	 * @see https://en.wikipedia.org/wiki/CEA-708
	 * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf
	 */

	// Supplemental enhancement information (SEI) NAL units have a
	// payload type field to indicate how they are to be
	// interpreted. CEAS-708 caption content is always transmitted with
	// payload type 0x04.

	var USER_DATA_REGISTERED_ITU_T_T35 = 4,
	    RBSP_TRAILING_BITS = 128;

	/**
	  * Parse a supplemental enhancement information (SEI) NAL unit.
	  * Stops parsing once a message of type ITU T T35 has been found.
	  *
	  * @param bytes {Uint8Array} the bytes of a SEI NAL unit
	  * @return {object} the parsed SEI payload
	  * @see Rec. ITU-T H.264, 7.3.2.3.1
	  */
	var parseSei = function parseSei(bytes) {
	  var i = 0,
	      result = {
	    payloadType: -1,
	    payloadSize: 0
	  },
	      payloadType = 0,
	      payloadSize = 0;

	  // go through the sei_rbsp parsing each each individual sei_message
	  while (i < bytes.byteLength) {
	    // stop once we have hit the end of the sei_rbsp
	    if (bytes[i] === RBSP_TRAILING_BITS) {
	      break;
	    }

	    // Parse payload type
	    while (bytes[i] === 0xFF) {
	      payloadType += 255;
	      i++;
	    }
	    payloadType += bytes[i++];

	    // Parse payload size
	    while (bytes[i] === 0xFF) {
	      payloadSize += 255;
	      i++;
	    }
	    payloadSize += bytes[i++];

	    // this sei_message is a 608/708 caption so save it and break
	    // there can only ever be one caption message in a frame's sei
	    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {
	      result.payloadType = payloadType;
	      result.payloadSize = payloadSize;
	      result.payload = bytes.subarray(i, i + payloadSize);
	      break;
	    }

	    // skip the payload and parse the next message
	    i += payloadSize;
	    payloadType = 0;
	    payloadSize = 0;
	  }

	  return result;
	};

	// see ANSI/SCTE 128-1 (2013), section 8.1
	var parseUserData = function parseUserData(sei) {
	  // itu_t_t35_contry_code must be 181 (United States) for
	  // captions
	  if (sei.payload[0] !== 181) {
	    return null;
	  }

	  // itu_t_t35_provider_code should be 49 (ATSC) for captions
	  if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {
	    return null;
	  }

	  // the user_identifier should be "GA94" to indicate ATSC1 data
	  if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {
	    return null;
	  }

	  // finally, user_data_type_code should be 0x03 for caption data
	  if (sei.payload[7] !== 0x03) {
	    return null;
	  }

	  // return the user_data_type_structure and strip the trailing
	  // marker bits
	  return sei.payload.subarray(8, sei.payload.length - 1);
	};

	// see CEA-708-D, section 4.4
	var parseCaptionPackets = function parseCaptionPackets(pts, userData) {
	  var results = [],
	      i,
	      count,
	      offset,
	      data;

	  // if this is just filler, return immediately
	  if (!(userData[0] & 0x40)) {
	    return results;
	  }

	  // parse out the cc_data_1 and cc_data_2 fields
	  count = userData[0] & 0x1f;
	  for (i = 0; i < count; i++) {
	    offset = i * 3;
	    data = {
	      type: userData[offset + 2] & 0x03,
	      pts: pts
	    };

	    // capture cc data when cc_valid is 1
	    if (userData[offset + 2] & 0x04) {
	      data.ccData = userData[offset + 3] << 8 | userData[offset + 4];
	      results.push(data);
	    }
	  }
	  return results;
	};

	var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {
	  var length = data.byteLength,
	      emulationPreventionBytesPositions = [],
	      i = 1,
	      newLength,
	      newData;

	  // Find all `Emulation Prevention Bytes`
	  while (i < length - 2) {
	    if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
	      emulationPreventionBytesPositions.push(i + 2);
	      i += 2;
	    } else {
	      i++;
	    }
	  }

	  // If no Emulation Prevention Bytes were found just return the original
	  // array
	  if (emulationPreventionBytesPositions.length === 0) {
	    return data;
	  }

	  // Create a new array to hold the NAL unit data
	  newLength = length - emulationPreventionBytesPositions.length;
	  newData = new Uint8Array(newLength);
	  var sourceIndex = 0;

	  for (i = 0; i < newLength; sourceIndex++, i++) {
	    if (sourceIndex === emulationPreventionBytesPositions[0]) {
	      // Skip this byte
	      sourceIndex++;
	      // Remove this position index
	      emulationPreventionBytesPositions.shift();
	    }
	    newData[i] = data[sourceIndex];
	  }

	  return newData;
	};

	// exports
	var captionPacketParser = {
	  parseSei: parseSei,
	  parseUserData: parseUserData,
	  parseCaptionPackets: parseCaptionPackets,
	  discardEmulationPreventionBytes: discardEmulationPreventionBytes,
	  USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35
	};

	// -----------------
	// Link To Transport
	// -----------------


	var CaptionStream = function CaptionStream() {

	  CaptionStream.prototype.init.call(this);

	  this.captionPackets_ = [];

	  this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define
	  new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define
	  new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define
	  new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define
	  ];

	  this.reset();

	  // forward data and done events from CCs to this CaptionStream
	  this.ccStreams_.forEach(function (cc) {
	    cc.on('data', this.trigger.bind(this, 'data'));
	    cc.on('done', this.trigger.bind(this, 'done'));
	  }, this);
	};

	CaptionStream.prototype = new stream();
	CaptionStream.prototype.push = function (event) {
	  var sei, userData, newCaptionPackets;

	  // only examine SEI NALs
	  if (event.nalUnitType !== 'sei_rbsp') {
	    return;
	  }

	  // parse the sei
	  sei = captionPacketParser.parseSei(event.escapedRBSP);

	  // ignore everything but user_data_registered_itu_t_t35
	  if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {
	    return;
	  }

	  // parse out the user data payload
	  userData = captionPacketParser.parseUserData(sei);

	  // ignore unrecognized userData
	  if (!userData) {
	    return;
	  }

	  // Sometimes, the same segment # will be downloaded twice. To stop the
	  // caption data from being processed twice, we track the latest dts we've
	  // received and ignore everything with a dts before that. However, since
	  // data for a specific dts can be split across packets on either side of
	  // a segment boundary, we need to make sure we *don't* ignore the packets
	  // from the *next* segment that have dts === this.latestDts_. By constantly
	  // tracking the number of packets received with dts === this.latestDts_, we
	  // know how many should be ignored once we start receiving duplicates.
	  if (event.dts < this.latestDts_) {
	    // We've started getting older data, so set the flag.
	    this.ignoreNextEqualDts_ = true;
	    return;
	  } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
	    this.numSameDts_--;
	    if (!this.numSameDts_) {
	      // We've received the last duplicate packet, time to start processing again
	      this.ignoreNextEqualDts_ = false;
	    }
	    return;
	  }

	  // parse out CC data packets and save them for later
	  newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);
	  this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);
	  if (this.latestDts_ !== event.dts) {
	    this.numSameDts_ = 0;
	  }
	  this.numSameDts_++;
	  this.latestDts_ = event.dts;
	};

	CaptionStream.prototype.flush = function () {
	  // make sure we actually parsed captions before proceeding
	  if (!this.captionPackets_.length) {
	    this.ccStreams_.forEach(function (cc) {
	      cc.flush();
	    }, this);
	    return;
	  }

	  // In Chrome, the Array#sort function is not stable so add a
	  // presortIndex that we can use to ensure we get a stable-sort
	  this.captionPackets_.forEach(function (elem, idx) {
	    elem.presortIndex = idx;
	  });

	  // sort caption byte-pairs based on their PTS values
	  this.captionPackets_.sort(function (a, b) {
	    if (a.pts === b.pts) {
	      return a.presortIndex - b.presortIndex;
	    }
	    return a.pts - b.pts;
	  });

	  this.captionPackets_.forEach(function (packet) {
	    if (packet.type < 2) {
	      // Dispatch packet to the right Cea608Stream
	      this.dispatchCea608Packet(packet);
	    }
	    // this is where an 'else' would go for a dispatching packets
	    // to a theoretical Cea708Stream that handles SERVICEn data
	  }, this);

	  this.captionPackets_.length = 0;
	  this.ccStreams_.forEach(function (cc) {
	    cc.flush();
	  }, this);
	  return;
	};

	CaptionStream.prototype.reset = function () {
	  this.latestDts_ = null;
	  this.ignoreNextEqualDts_ = false;
	  this.numSameDts_ = 0;
	  this.activeCea608Channel_ = [null, null];
	  this.ccStreams_.forEach(function (ccStream) {
	    ccStream.reset();
	  });
	};

	CaptionStream.prototype.dispatchCea608Packet = function (packet) {
	  // NOTE: packet.type is the CEA608 field
	  if (this.setsChannel1Active(packet)) {
	    this.activeCea608Channel_[packet.type] = 0;
	  } else if (this.setsChannel2Active(packet)) {
	    this.activeCea608Channel_[packet.type] = 1;
	  }
	  if (this.activeCea608Channel_[packet.type] === null) {
	    // If we haven't received anything to set the active channel, discard the
	    // data; we don't want jumbled captions
	    return;
	  }
	  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);
	};

	CaptionStream.prototype.setsChannel1Active = function (packet) {
	  return (packet.ccData & 0x7800) === 0x1000;
	};
	CaptionStream.prototype.setsChannel2Active = function (packet) {
	  return (packet.ccData & 0x7800) === 0x1800;
	};

	// ----------------------
	// Session to Application
	// ----------------------

	// This hash maps non-ASCII, special, and extended character codes to their
	// proper Unicode equivalent. The first keys that are only a single byte
	// are the non-standard ASCII characters, which simply map the CEA608 byte
	// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608
	// character codes, but have their MSB bitmasked with 0x03 so that a lookup
	// can be performed regardless of the field and data channel on which the
	// character code was received.
	var CHARACTER_TRANSLATION = {
	  0x2a: 0xe1, // á
	  0x5c: 0xe9, // é
	  0x5e: 0xed, // í
	  0x5f: 0xf3, // ó
	  0x60: 0xfa, // ú
	  0x7b: 0xe7, // ç
	  0x7c: 0xf7, // ÷
	  0x7d: 0xd1, // Ñ
	  0x7e: 0xf1, // ñ
	  0x7f: 0x2588, // █
	  0x0130: 0xae, // ®
	  0x0131: 0xb0, // °
	  0x0132: 0xbd, // ½
	  0x0133: 0xbf, // ¿
	  0x0134: 0x2122, // ™
	  0x0135: 0xa2, // ¢
	  0x0136: 0xa3, // £
	  0x0137: 0x266a, // ♪
	  0x0138: 0xe0, // à
	  0x0139: 0xa0, //
	  0x013a: 0xe8, // è
	  0x013b: 0xe2, // â
	  0x013c: 0xea, // ê
	  0x013d: 0xee, // î
	  0x013e: 0xf4, // ô
	  0x013f: 0xfb, // û
	  0x0220: 0xc1, // Á
	  0x0221: 0xc9, // É
	  0x0222: 0xd3, // Ó
	  0x0223: 0xda, // Ú
	  0x0224: 0xdc, // Ü
	  0x0225: 0xfc, // ü
	  0x0226: 0x2018, // ‘
	  0x0227: 0xa1, // ¡
	  0x0228: 0x2a, // *
	  0x0229: 0x27, // '
	  0x022a: 0x2014, // —
	  0x022b: 0xa9, // ©
	  0x022c: 0x2120, // ℠
	  0x022d: 0x2022, // •
	  0x022e: 0x201c, // “
	  0x022f: 0x201d, // ”
	  0x0230: 0xc0, // À
	  0x0231: 0xc2, // Â
	  0x0232: 0xc7, // Ç
	  0x0233: 0xc8, // È
	  0x0234: 0xca, // Ê
	  0x0235: 0xcb, // Ë
	  0x0236: 0xeb, // ë
	  0x0237: 0xce, // Î
	  0x0238: 0xcf, // Ï
	  0x0239: 0xef, // ï
	  0x023a: 0xd4, // Ô
	  0x023b: 0xd9, // Ù
	  0x023c: 0xf9, // ù
	  0x023d: 0xdb, // Û
	  0x023e: 0xab, // «
	  0x023f: 0xbb, // »
	  0x0320: 0xc3, // Ã
	  0x0321: 0xe3, // ã
	  0x0322: 0xcd, // Í
	  0x0323: 0xcc, // Ì
	  0x0324: 0xec, // ì
	  0x0325: 0xd2, // Ò
	  0x0326: 0xf2, // ò
	  0x0327: 0xd5, // Õ
	  0x0328: 0xf5, // õ
	  0x0329: 0x7b, // {
	  0x032a: 0x7d, // }
	  0x032b: 0x5c, // \
	  0x032c: 0x5e, // ^
	  0x032d: 0x5f, // _
	  0x032e: 0x7c, // |
	  0x032f: 0x7e, // ~
	  0x0330: 0xc4, // Ä
	  0x0331: 0xe4, // ä
	  0x0332: 0xd6, // Ö
	  0x0333: 0xf6, // ö
	  0x0334: 0xdf, // ß
	  0x0335: 0xa5, // ¥
	  0x0336: 0xa4, // ¤
	  0x0337: 0x2502, // │
	  0x0338: 0xc5, // Å
	  0x0339: 0xe5, // å
	  0x033a: 0xd8, // Ø
	  0x033b: 0xf8, // ø
	  0x033c: 0x250c, // ┌
	  0x033d: 0x2510, // ┐
	  0x033e: 0x2514, // └
	  0x033f: 0x2518 // ┘
	};

	var getCharFromCode = function getCharFromCode(code) {
	  if (code === null) {
	    return '';
	  }
	  code = CHARACTER_TRANSLATION[code] || code;
	  return String.fromCharCode(code);
	};

	// the index of the last row in a CEA-608 display buffer
	var BOTTOM_ROW = 14;

	// This array is used for mapping PACs -> row #, since there's no way of
	// getting it through bit logic.
	var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];

	// CEA-608 captions are rendered onto a 34x15 matrix of character
	// cells. The "bottom" row is the last element in the outer array.
	var createDisplayBuffer = function createDisplayBuffer() {
	  var result = [],
	      i = BOTTOM_ROW + 1;
	  while (i--) {
	    result.push('');
	  }
	  return result;
	};

	var Cea608Stream = function Cea608Stream(field, dataChannel) {
	  Cea608Stream.prototype.init.call(this);

	  this.field_ = field || 0;
	  this.dataChannel_ = dataChannel || 0;

	  this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);

	  this.setConstants();
	  this.reset();

	  this.push = function (packet) {
	    var data, swap, char0, char1, text;
	    // remove the parity bits
	    data = packet.ccData & 0x7f7f;

	    // ignore duplicate control codes; the spec demands they're sent twice
	    if (data === this.lastControlCode_) {
	      this.lastControlCode_ = null;
	      return;
	    }

	    // Store control codes
	    if ((data & 0xf000) === 0x1000) {
	      this.lastControlCode_ = data;
	    } else if (data !== this.PADDING_) {
	      this.lastControlCode_ = null;
	    }

	    char0 = data >>> 8;
	    char1 = data & 0xff;

	    if (data === this.PADDING_) {
	      return;
	    } else if (data === this.RESUME_CAPTION_LOADING_) {
	      this.mode_ = 'popOn';
	    } else if (data === this.END_OF_CAPTION_) {
	      // If an EOC is received while in paint-on mode, the displayed caption
	      // text should be swapped to non-displayed memory as if it was a pop-on
	      // caption. Because of that, we should explicitly switch back to pop-on
	      // mode
	      this.mode_ = 'popOn';
	      this.clearFormatting(packet.pts);
	      // if a caption was being displayed, it's gone now
	      this.flushDisplayed(packet.pts);

	      // flip memory
	      swap = this.displayed_;
	      this.displayed_ = this.nonDisplayed_;
	      this.nonDisplayed_ = swap;

	      // start measuring the time to display the caption
	      this.startPts_ = packet.pts;
	    } else if (data === this.ROLL_UP_2_ROWS_) {
	      this.rollUpRows_ = 2;
	      this.setRollUp(packet.pts);
	    } else if (data === this.ROLL_UP_3_ROWS_) {
	      this.rollUpRows_ = 3;
	      this.setRollUp(packet.pts);
	    } else if (data === this.ROLL_UP_4_ROWS_) {
	      this.rollUpRows_ = 4;
	      this.setRollUp(packet.pts);
	    } else if (data === this.CARRIAGE_RETURN_) {
	      this.clearFormatting(packet.pts);
	      this.flushDisplayed(packet.pts);
	      this.shiftRowsUp_();
	      this.startPts_ = packet.pts;
	    } else if (data === this.BACKSPACE_) {
	      if (this.mode_ === 'popOn') {
	        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
	      } else {
	        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
	      }
	    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {
	      this.flushDisplayed(packet.pts);
	      this.displayed_ = createDisplayBuffer();
	    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {
	      this.nonDisplayed_ = createDisplayBuffer();
	    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {
	      if (this.mode_ !== 'paintOn') {
	        // NOTE: This should be removed when proper caption positioning is
	        // implemented
	        this.flushDisplayed(packet.pts);
	        this.displayed_ = createDisplayBuffer();
	      }
	      this.mode_ = 'paintOn';
	      this.startPts_ = packet.pts;

	      // Append special characters to caption text
	    } else if (this.isSpecialCharacter(char0, char1)) {
	      // Bitmask char0 so that we can apply character transformations
	      // regardless of field and data channel.
	      // Then byte-shift to the left and OR with char1 so we can pass the
	      // entire character code to `getCharFromCode`.
	      char0 = (char0 & 0x03) << 8;
	      text = getCharFromCode(char0 | char1);
	      this[this.mode_](packet.pts, text);
	      this.column_++;

	      // Append extended characters to caption text
	    } else if (this.isExtCharacter(char0, char1)) {
	      // Extended characters always follow their "non-extended" equivalents.
	      // IE if a "è" is desired, you'll always receive "eè"; non-compliant
	      // decoders are supposed to drop the "è", while compliant decoders
	      // backspace the "e" and insert "è".

	      // Delete the previous character
	      if (this.mode_ === 'popOn') {
	        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
	      } else {
	        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
	      }

	      // Bitmask char0 so that we can apply character transformations
	      // regardless of field and data channel.
	      // Then byte-shift to the left and OR with char1 so we can pass the
	      // entire character code to `getCharFromCode`.
	      char0 = (char0 & 0x03) << 8;
	      text = getCharFromCode(char0 | char1);
	      this[this.mode_](packet.pts, text);
	      this.column_++;

	      // Process mid-row codes
	    } else if (this.isMidRowCode(char0, char1)) {
	      // Attributes are not additive, so clear all formatting
	      this.clearFormatting(packet.pts);

	      // According to the standard, mid-row codes
	      // should be replaced with spaces, so add one now
	      this[this.mode_](packet.pts, ' ');
	      this.column_++;

	      if ((char1 & 0xe) === 0xe) {
	        this.addFormatting(packet.pts, ['i']);
	      }

	      if ((char1 & 0x1) === 0x1) {
	        this.addFormatting(packet.pts, ['u']);
	      }

	      // Detect offset control codes and adjust cursor
	    } else if (this.isOffsetControlCode(char0, char1)) {
	      // Cursor position is set by indent PAC (see below) in 4-column
	      // increments, with an additional offset code of 1-3 to reach any
	      // of the 32 columns specified by CEA-608. So all we need to do
	      // here is increment the column cursor by the given offset.
	      this.column_ += char1 & 0x03;

	      // Detect PACs (Preamble Address Codes)
	    } else if (this.isPAC(char0, char1)) {

	      // There's no logic for PAC -> row mapping, so we have to just
	      // find the row code in an array and use its index :(
	      var row = ROWS.indexOf(data & 0x1f20);

	      // Configure the caption window if we're in roll-up mode
	      if (this.mode_ === 'rollUp') {
	        // This implies that the base row is incorrectly set.
	        // As per the recommendation in CEA-608(Base Row Implementation), defer to the number
	        // of roll-up rows set.
	        if (row - this.rollUpRows_ + 1 < 0) {
	          row = this.rollUpRows_ - 1;
	        }

	        this.setRollUp(packet.pts, row);
	      }

	      if (row !== this.row_) {
	        // formatting is only persistent for current row
	        this.clearFormatting(packet.pts);
	        this.row_ = row;
	      }
	      // All PACs can apply underline, so detect and apply
	      // (All odd-numbered second bytes set underline)
	      if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {
	        this.addFormatting(packet.pts, ['u']);
	      }

	      if ((data & 0x10) === 0x10) {
	        // We've got an indent level code. Each successive even number
	        // increments the column cursor by 4, so we can get the desired
	        // column position by bit-shifting to the right (to get n/2)
	        // and multiplying by 4.
	        this.column_ = ((data & 0xe) >> 1) * 4;
	      }

	      if (this.isColorPAC(char1)) {
	        // it's a color code, though we only support white, which
	        // can be either normal or italicized. white italics can be
	        // either 0x4e or 0x6e depending on the row, so we just
	        // bitwise-and with 0xe to see if italics should be turned on
	        if ((char1 & 0xe) === 0xe) {
	          this.addFormatting(packet.pts, ['i']);
	        }
	      }

	      // We have a normal character in char0, and possibly one in char1
	    } else if (this.isNormalChar(char0)) {
	      if (char1 === 0x00) {
	        char1 = null;
	      }
	      text = getCharFromCode(char0);
	      text += getCharFromCode(char1);
	      this[this.mode_](packet.pts, text);
	      this.column_ += text.length;
	    } // finish data processing
	  };
	};
	Cea608Stream.prototype = new stream();
	// Trigger a cue point that captures the current state of the
	// display buffer
	Cea608Stream.prototype.flushDisplayed = function (pts) {
	  var content = this.displayed_
	  // remove spaces from the start and end of the string
	  .map(function (row) {
	    try {
	      return row.trim();
	    } catch (e) {
	      // Ordinarily, this shouldn't happen. However, caption
	      // parsing errors should not throw exceptions and
	      // break playback.
	      // eslint-disable-next-line no-console
	      console.error('Skipping malformed caption.');
	      return '';
	    }
	  })
	  // combine all text rows to display in one cue
	  .join('\n')
	  // and remove blank rows from the start and end, but not the middle
	  .replace(/^\n+|\n+$/g, '');

	  if (content.length) {
	    this.trigger('data', {
	      startPts: this.startPts_,
	      endPts: pts,
	      text: content,
	      stream: this.name_
	    });
	  }
	};

	/**
	 * Zero out the data, used for startup and on seek
	 */
	Cea608Stream.prototype.reset = function () {
	  this.mode_ = 'popOn';
	  // When in roll-up mode, the index of the last row that will
	  // actually display captions. If a caption is shifted to a row
	  // with a lower index than this, it is cleared from the display
	  // buffer
	  this.topRow_ = 0;
	  this.startPts_ = 0;
	  this.displayed_ = createDisplayBuffer();
	  this.nonDisplayed_ = createDisplayBuffer();
	  this.lastControlCode_ = null;

	  // Track row and column for proper line-breaking and spacing
	  this.column_ = 0;
	  this.row_ = BOTTOM_ROW;
	  this.rollUpRows_ = 2;

	  // This variable holds currently-applied formatting
	  this.formatting_ = [];
	};

	/**
	 * Sets up control code and related constants for this instance
	 */
	Cea608Stream.prototype.setConstants = function () {
	  // The following attributes have these uses:
	  // ext_ :    char0 for mid-row codes, and the base for extended
	  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for
	  //           extended codes)
	  // control_: char0 for control codes, except byte-shifted to the
	  //           left so that we can do this.control_ | CONTROL_CODE
	  // offset_:  char0 for tab offset codes
	  //
	  // It's also worth noting that control codes, and _only_ control codes,
	  // differ between field 1 and field2. Field 2 control codes are always
	  // their field 1 value plus 1. That's why there's the "| field" on the
	  // control value.
	  if (this.dataChannel_ === 0) {
	    this.BASE_ = 0x10;
	    this.EXT_ = 0x11;
	    this.CONTROL_ = (0x14 | this.field_) << 8;
	    this.OFFSET_ = 0x17;
	  } else if (this.dataChannel_ === 1) {
	    this.BASE_ = 0x18;
	    this.EXT_ = 0x19;
	    this.CONTROL_ = (0x1c | this.field_) << 8;
	    this.OFFSET_ = 0x1f;
	  }

	  // Constants for the LSByte command codes recognized by Cea608Stream. This
	  // list is not exhaustive. For a more comprehensive listing and semantics see
	  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf
	  // Padding
	  this.PADDING_ = 0x0000;
	  // Pop-on Mode
	  this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;
	  this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;
	  // Roll-up Mode
	  this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;
	  this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;
	  this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;
	  this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;
	  // paint-on mode
	  this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;
	  // Erasure
	  this.BACKSPACE_ = this.CONTROL_ | 0x21;
	  this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;
	  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;
	};

	/**
	 * Detects if the 2-byte packet data is a special character
	 *
	 * Special characters have a second byte in the range 0x30 to 0x3f,
	 * with the first byte being 0x11 (for data channel 1) or 0x19 (for
	 * data channel 2).
	 *
	 * @param  {Integer} char0 The first byte
	 * @param  {Integer} char1 The second byte
	 * @return {Boolean}       Whether the 2 bytes are an special character
	 */
	Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {
	  return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;
	};

	/**
	 * Detects if the 2-byte packet data is an extended character
	 *
	 * Extended characters have a second byte in the range 0x20 to 0x3f,
	 * with the first byte being 0x12 or 0x13 (for data channel 1) or
	 * 0x1a or 0x1b (for data channel 2).
	 *
	 * @param  {Integer} char0 The first byte
	 * @param  {Integer} char1 The second byte
	 * @return {Boolean}       Whether the 2 bytes are an extended character
	 */
	Cea608Stream.prototype.isExtCharacter = function (char0, char1) {
	  return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;
	};

	/**
	 * Detects if the 2-byte packet is a mid-row code
	 *
	 * Mid-row codes have a second byte in the range 0x20 to 0x2f, with
	 * the first byte being 0x11 (for data channel 1) or 0x19 (for data
	 * channel 2).
	 *
	 * @param  {Integer} char0 The first byte
	 * @param  {Integer} char1 The second byte
	 * @return {Boolean}       Whether the 2 bytes are a mid-row code
	 */
	Cea608Stream.prototype.isMidRowCode = function (char0, char1) {
	  return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;
	};

	/**
	 * Detects if the 2-byte packet is an offset control code
	 *
	 * Offset control codes have a second byte in the range 0x21 to 0x23,
	 * with the first byte being 0x17 (for data channel 1) or 0x1f (for
	 * data channel 2).
	 *
	 * @param  {Integer} char0 The first byte
	 * @param  {Integer} char1 The second byte
	 * @return {Boolean}       Whether the 2 bytes are an offset control code
	 */
	Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {
	  return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;
	};

	/**
	 * Detects if the 2-byte packet is a Preamble Address Code
	 *
	 * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)
	 * or 0x18 to 0x1f (for data channel 2), with the second byte in the
	 * range 0x40 to 0x7f.
	 *
	 * @param  {Integer} char0 The first byte
	 * @param  {Integer} char1 The second byte
	 * @return {Boolean}       Whether the 2 bytes are a PAC
	 */
	Cea608Stream.prototype.isPAC = function (char0, char1) {
	  return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;
	};

	/**
	 * Detects if a packet's second byte is in the range of a PAC color code
	 *
	 * PAC color codes have the second byte be in the range 0x40 to 0x4f, or
	 * 0x60 to 0x6f.
	 *
	 * @param  {Integer} char1 The second byte
	 * @return {Boolean}       Whether the byte is a color PAC
	 */
	Cea608Stream.prototype.isColorPAC = function (char1) {
	  return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;
	};

	/**
	 * Detects if a single byte is in the range of a normal character
	 *
	 * Normal text bytes are in the range 0x20 to 0x7f.
	 *
	 * @param  {Integer} char  The byte
	 * @return {Boolean}       Whether the byte is a normal character
	 */
	Cea608Stream.prototype.isNormalChar = function (char) {
	  return char >= 0x20 && char <= 0x7f;
	};

	/**
	 * Configures roll-up
	 *
	 * @param  {Integer} pts         Current PTS
	 * @param  {Integer} newBaseRow  Used by PACs to slide the current window to
	 *                               a new position
	 */
	Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {
	  // Reset the base row to the bottom row when switching modes
	  if (this.mode_ !== 'rollUp') {
	    this.row_ = BOTTOM_ROW;
	    this.mode_ = 'rollUp';
	    // Spec says to wipe memories when switching to roll-up
	    this.flushDisplayed(pts);
	    this.nonDisplayed_ = createDisplayBuffer();
	    this.displayed_ = createDisplayBuffer();
	  }

	  if (newBaseRow !== undefined && newBaseRow !== this.row_) {
	    // move currently displayed captions (up or down) to the new base row
	    for (var i = 0; i < this.rollUpRows_; i++) {
	      this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];
	      this.displayed_[this.row_ - i] = '';
	    }
	  }

	  if (newBaseRow === undefined) {
	    newBaseRow = this.row_;
	  }

	  this.topRow_ = newBaseRow - this.rollUpRows_ + 1;
	};

	// Adds the opening HTML tag for the passed character to the caption text,
	// and keeps track of it for later closing
	Cea608Stream.prototype.addFormatting = function (pts, format) {
	  this.formatting_ = this.formatting_.concat(format);
	  var text = format.reduce(function (text, format) {
	    return text + '<' + format + '>';
	  }, '');
	  this[this.mode_](pts, text);
	};

	// Adds HTML closing tags for current formatting to caption text and
	// clears remembered formatting
	Cea608Stream.prototype.clearFormatting = function (pts) {
	  if (!this.formatting_.length) {
	    return;
	  }
	  var text = this.formatting_.reverse().reduce(function (text, format) {
	    return text + '</' + format + '>';
	  }, '');
	  this.formatting_ = [];
	  this[this.mode_](pts, text);
	};

	// Mode Implementations
	Cea608Stream.prototype.popOn = function (pts, text) {
	  var baseRow = this.nonDisplayed_[this.row_];

	  // buffer characters
	  baseRow += text;
	  this.nonDisplayed_[this.row_] = baseRow;
	};

	Cea608Stream.prototype.rollUp = function (pts, text) {
	  var baseRow = this.displayed_[this.row_];

	  baseRow += text;
	  this.displayed_[this.row_] = baseRow;
	};

	Cea608Stream.prototype.shiftRowsUp_ = function () {
	  var i;
	  // clear out inactive rows
	  for (i = 0; i < this.topRow_; i++) {
	    this.displayed_[i] = '';
	  }
	  for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {
	    this.displayed_[i] = '';
	  }
	  // shift displayed rows up
	  for (i = this.topRow_; i < this.row_; i++) {
	    this.displayed_[i] = this.displayed_[i + 1];
	  }
	  // clear out the bottom row
	  this.displayed_[this.row_] = '';
	};

	Cea608Stream.prototype.paintOn = function (pts, text) {
	  var baseRow = this.displayed_[this.row_];

	  baseRow += text;
	  this.displayed_[this.row_] = baseRow;
	};

	// exports
	var captionStream = {
	  CaptionStream: CaptionStream,
	  Cea608Stream: Cea608Stream
	};

	var streamTypes = {
	  H264_STREAM_TYPE: 0x1B,
	  ADTS_STREAM_TYPE: 0x0F,
	  METADATA_STREAM_TYPE: 0x15
	};

	var MAX_TS = 8589934592;

	var RO_THRESH = 4294967296;

	var handleRollover = function handleRollover(value, reference) {
	  var direction = 1;

	  if (value > reference) {
	    // If the current timestamp value is greater than our reference timestamp and we detect a
	    // timestamp rollover, this means the roll over is happening in the opposite direction.
	    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference
	    // point will be set to a small number, e.g. 1. The user then seeks backwards over the
	    // rollover point. In loading this segment, the timestamp values will be very large,
	    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust
	    // the time stamp to be `value - 2^33`.
	    direction = -1;
	  }

	  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will
	  // cause an incorrect adjustment.
	  while (Math.abs(reference - value) > RO_THRESH) {
	    value += direction * MAX_TS;
	  }

	  return value;
	};

	var TimestampRolloverStream = function TimestampRolloverStream(type) {
	  var lastDTS, referenceDTS;

	  TimestampRolloverStream.prototype.init.call(this);

	  this.type_ = type;

	  this.push = function (data) {
	    if (data.type !== this.type_) {
	      return;
	    }

	    if (referenceDTS === undefined) {
	      referenceDTS = data.dts;
	    }

	    data.dts = handleRollover(data.dts, referenceDTS);
	    data.pts = handleRollover(data.pts, referenceDTS);

	    lastDTS = data.dts;

	    this.trigger('data', data);
	  };

	  this.flush = function () {
	    referenceDTS = lastDTS;
	    this.trigger('done');
	  };

	  this.discontinuity = function () {
	    referenceDTS = void 0;
	    lastDTS = void 0;
	  };
	};

	TimestampRolloverStream.prototype = new stream();

	var timestampRolloverStream = {
	  TimestampRolloverStream: TimestampRolloverStream,
	  handleRollover: handleRollover
	};

	var percentEncode = function percentEncode(bytes, start, end) {
	  var i,
	      result = '';
	  for (i = start; i < end; i++) {
	    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);
	  }
	  return result;
	},

	// return the string representation of the specified byte range,
	// interpreted as UTf-8.
	parseUtf8 = function parseUtf8(bytes, start, end) {
	  return decodeURIComponent(percentEncode(bytes, start, end));
	},

	// return the string representation of the specified byte range,
	// interpreted as ISO-8859-1.
	parseIso88591 = function parseIso88591(bytes, start, end) {
	  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line
	},
	    parseSyncSafeInteger = function parseSyncSafeInteger(data) {
	  return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
	},
	    tagParsers = {
	  TXXX: function TXXX(tag) {
	    var i;
	    if (tag.data[0] !== 3) {
	      // ignore frames with unrecognized character encodings
	      return;
	    }

	    for (i = 1; i < tag.data.length; i++) {
	      if (tag.data[i] === 0) {
	        // parse the text fields
	        tag.description = parseUtf8(tag.data, 1, i);
	        // do not include the null terminator in the tag value
	        tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\0*$/, '');
	        break;
	      }
	    }
	    tag.data = tag.value;
	  },
	  WXXX: function WXXX(tag) {
	    var i;
	    if (tag.data[0] !== 3) {
	      // ignore frames with unrecognized character encodings
	      return;
	    }

	    for (i = 1; i < tag.data.length; i++) {
	      if (tag.data[i] === 0) {
	        // parse the description and URL fields
	        tag.description = parseUtf8(tag.data, 1, i);
	        tag.url = parseUtf8(tag.data, i + 1, tag.data.length);
	        break;
	      }
	    }
	  },
	  PRIV: function PRIV(tag) {
	    var i;

	    for (i = 0; i < tag.data.length; i++) {
	      if (tag.data[i] === 0) {
	        // parse the description and URL fields
	        tag.owner = parseIso88591(tag.data, 0, i);
	        break;
	      }
	    }
	    tag.privateData = tag.data.subarray(i + 1);
	    tag.data = tag.privateData;
	  }
	},
	    _MetadataStream;

	_MetadataStream = function MetadataStream(options) {
	  var settings = {
	    debug: !!(options && options.debug),

	    // the bytes of the program-level descriptor field in MP2T
	    // see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
	    // program element descriptors"
	    descriptor: options && options.descriptor
	  },

	  // the total size in bytes of the ID3 tag being parsed
	  tagSize = 0,

	  // tag data that is not complete enough to be parsed
	  buffer = [],

	  // the total number of bytes currently in the buffer
	  bufferSize = 0,
	      i;

	  _MetadataStream.prototype.init.call(this);

	  // calculate the text track in-band metadata track dispatch type
	  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track
	  this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);
	  if (settings.descriptor) {
	    for (i = 0; i < settings.descriptor.length; i++) {
	      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);
	    }
	  }

	  this.push = function (chunk) {
	    var tag, frameStart, frameSize, frame, i, frameHeader;
	    if (chunk.type !== 'timed-metadata') {
	      return;
	    }

	    // if data_alignment_indicator is set in the PES header,
	    // we must have the start of a new ID3 tag. Assume anything
	    // remaining in the buffer was malformed and throw it out
	    if (chunk.dataAlignmentIndicator) {
	      bufferSize = 0;
	      buffer.length = 0;
	    }

	    // ignore events that don't look like ID3 data
	    if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {
	      if (settings.debug) {
	        // eslint-disable-next-line no-console
	        console.log('Skipping unrecognized metadata packet');
	      }
	      return;
	    }

	    // add this chunk to the data we've collected so far

	    buffer.push(chunk);
	    bufferSize += chunk.data.byteLength;

	    // grab the size of the entire frame from the ID3 header
	    if (buffer.length === 1) {
	      // the frame size is transmitted as a 28-bit integer in the
	      // last four bytes of the ID3 header.
	      // The most significant bit of each byte is dropped and the
	      // results concatenated to recover the actual value.
	      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));

	      // ID3 reports the tag size excluding the header but it's more
	      // convenient for our comparisons to include it
	      tagSize += 10;
	    }

	    // if the entire frame has not arrived, wait for more data
	    if (bufferSize < tagSize) {
	      return;
	    }

	    // collect the entire frame so it can be parsed
	    tag = {
	      data: new Uint8Array(tagSize),
	      frames: [],
	      pts: buffer[0].pts,
	      dts: buffer[0].dts
	    };
	    for (i = 0; i < tagSize;) {
	      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);
	      i += buffer[0].data.byteLength;
	      bufferSize -= buffer[0].data.byteLength;
	      buffer.shift();
	    }

	    // find the start of the first frame and the end of the tag
	    frameStart = 10;
	    if (tag.data[5] & 0x40) {
	      // advance the frame start past the extended header
	      frameStart += 4; // header size field
	      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));

	      // clip any padding off the end
	      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));
	    }

	    // parse one or more ID3 frames
	    // http://id3.org/id3v2.3.0#ID3v2_frame_overview
	    do {
	      // determine the number of bytes in this frame
	      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));
	      if (frameSize < 1) {
	        // eslint-disable-next-line no-console
	        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');
	      }
	      frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);

	      frame = {
	        id: frameHeader,
	        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)
	      };
	      frame.key = frame.id;
	      if (tagParsers[frame.id]) {
	        tagParsers[frame.id](frame);

	        // handle the special PRIV frame used to indicate the start
	        // time for raw AAC data
	        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {
	          var d = frame.data,
	              size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;

	          size *= 4;
	          size += d[7] & 0x03;
	          frame.timeStamp = size;
	          // in raw AAC, all subsequent data will be timestamped based
	          // on the value of this frame
	          // we couldn't have known the appropriate pts and dts before
	          // parsing this ID3 tag so set those values now
	          if (tag.pts === undefined && tag.dts === undefined) {
	            tag.pts = frame.timeStamp;
	            tag.dts = frame.timeStamp;
	          }
	          this.trigger('timestamp', frame);
	        }
	      }
	      tag.frames.push(frame);

	      frameStart += 10; // advance past the frame header
	      frameStart += frameSize; // advance past the frame body
	    } while (frameStart < tagSize);
	    this.trigger('data', tag);
	  };
	};
	_MetadataStream.prototype = new stream();

	var metadataStream = _MetadataStream;

	var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream;

	// object types
	var _TransportPacketStream, _TransportParseStream, _ElementaryStream;

	// constants
	var MP2T_PACKET_LENGTH = 188,
	    // bytes
	SYNC_BYTE = 0x47;

	/**
	 * Splits an incoming stream of binary data into MPEG-2 Transport
	 * Stream packets.
	 */
	_TransportPacketStream = function TransportPacketStream() {
	  var buffer = new Uint8Array(MP2T_PACKET_LENGTH),
	      bytesInBuffer = 0;

	  _TransportPacketStream.prototype.init.call(this);

	  // Deliver new bytes to the stream.

	  /**
	   * Split a stream of data into M2TS packets
	  **/
	  this.push = function (bytes) {
	    var startIndex = 0,
	        endIndex = MP2T_PACKET_LENGTH,
	        everything;

	    // If there are bytes remaining from the last segment, prepend them to the
	    // bytes that were pushed in
	    if (bytesInBuffer) {
	      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);
	      everything.set(buffer.subarray(0, bytesInBuffer));
	      everything.set(bytes, bytesInBuffer);
	      bytesInBuffer = 0;
	    } else {
	      everything = bytes;
	    }

	    // While we have enough data for a packet
	    while (endIndex < everything.byteLength) {
	      // Look for a pair of start and end sync bytes in the data..
	      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {
	        // We found a packet so emit it and jump one whole packet forward in
	        // the stream
	        this.trigger('data', everything.subarray(startIndex, endIndex));
	        startIndex += MP2T_PACKET_LENGTH;
	        endIndex += MP2T_PACKET_LENGTH;
	        continue;
	      }
	      // If we get here, we have somehow become de-synchronized and we need to step
	      // forward one byte at a time until we find a pair of sync bytes that denote
	      // a packet
	      startIndex++;
	      endIndex++;
	    }

	    // If there was some data left over at the end of the segment that couldn't
	    // possibly be a whole packet, keep it because it might be the start of a packet
	    // that continues in the next segment
	    if (startIndex < everything.byteLength) {
	      buffer.set(everything.subarray(startIndex), 0);
	      bytesInBuffer = everything.byteLength - startIndex;
	    }
	  };

	  /**
	   * Passes identified M2TS packets to the TransportParseStream to be parsed
	  **/
	  this.flush = function () {
	    // If the buffer contains a whole packet when we are being flushed, emit it
	    // and empty the buffer. Otherwise hold onto the data because it may be
	    // important for decoding the next segment
	    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {
	      this.trigger('data', buffer);
	      bytesInBuffer = 0;
	    }
	    this.trigger('done');
	  };
	};
	_TransportPacketStream.prototype = new stream();

	/**
	 * Accepts an MP2T TransportPacketStream and emits data events with parsed
	 * forms of the individual transport stream packets.
	 */
	_TransportParseStream = function TransportParseStream() {
	  var parsePsi, parsePat, parsePmt, self;
	  _TransportParseStream.prototype.init.call(this);
	  self = this;

	  this.packetsWaitingForPmt = [];
	  this.programMapTable = undefined;

	  parsePsi = function parsePsi(payload, psi) {
	    var offset = 0;

	    // PSI packets may be split into multiple sections and those
	    // sections may be split into multiple packets. If a PSI
	    // section starts in this packet, the payload_unit_start_indicator
	    // will be true and the first byte of the payload will indicate
	    // the offset from the current position to the start of the
	    // section.
	    if (psi.payloadUnitStartIndicator) {
	      offset += payload[offset] + 1;
	    }

	    if (psi.type === 'pat') {
	      parsePat(payload.subarray(offset), psi);
	    } else {
	      parsePmt(payload.subarray(offset), psi);
	    }
	  };

	  parsePat = function parsePat(payload, pat) {
	    pat.section_number = payload[7]; // eslint-disable-line camelcase
	    pat.last_section_number = payload[8]; // eslint-disable-line camelcase

	    // skip the PSI header and parse the first PMT entry
	    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];
	    pat.pmtPid = self.pmtPid;
	  };

	  /**
	   * Parse out the relevant fields of a Program Map Table (PMT).
	   * @param payload {Uint8Array} the PMT-specific portion of an MP2T
	   * packet. The first byte in this array should be the table_id
	   * field.
	   * @param pmt {object} the object that should be decorated with
	   * fields parsed from the PMT.
	   */
	  parsePmt = function parsePmt(payload, pmt) {
	    var sectionLength, tableEnd, programInfoLength, offset;

	    // PMTs can be sent ahead of the time when they should actually
	    // take effect. We don't believe this should ever be the case
	    // for HLS but we'll ignore "forward" PMT declarations if we see
	    // them. Future PMT declarations have the current_next_indicator
	    // set to zero.
	    if (!(payload[5] & 0x01)) {
	      return;
	    }

	    // overwrite any existing program map table
	    self.programMapTable = {
	      video: null,
	      audio: null,
	      'timed-metadata': {}
	    };

	    // the mapping table ends at the end of the current section
	    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];
	    tableEnd = 3 + sectionLength - 4;

	    // to determine where the table is, we have to figure out how
	    // long the program info descriptors are
	    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];

	    // advance the offset to the first entry in the mapping table
	    offset = 12 + programInfoLength;
	    while (offset < tableEnd) {
	      var streamType = payload[offset];
	      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];

	      // only map a single elementary_pid for audio and video stream types
	      // TODO: should this be done for metadata too? for now maintain behavior of
	      //       multiple metadata streams
	      if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {
	        self.programMapTable.video = pid;
	      } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {
	        self.programMapTable.audio = pid;
	      } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {
	        // map pid to stream type for metadata streams
	        self.programMapTable['timed-metadata'][pid] = streamType;
	      }

	      // move to the next table entry
	      // skip past the elementary stream descriptors, if present
	      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;
	    }

	    // record the map on the packet as well
	    pmt.programMapTable = self.programMapTable;
	  };

	  /**
	   * Deliver a new MP2T packet to the next stream in the pipeline.
	   */
	  this.push = function (packet) {
	    var result = {},
	        offset = 4;

	    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);

	    // pid is a 13-bit field starting at the last bit of packet[1]
	    result.pid = packet[1] & 0x1f;
	    result.pid <<= 8;
	    result.pid |= packet[2];

	    // if an adaption field is present, its length is specified by the
	    // fifth byte of the TS packet header. The adaptation field is
	    // used to add stuffing to PES packets that don't fill a complete
	    // TS packet, and to specify some forms of timing and control data
	    // that we do not currently use.
	    if ((packet[3] & 0x30) >>> 4 > 0x01) {
	      offset += packet[offset] + 1;
	    }

	    // parse the rest of the packet based on the type
	    if (result.pid === 0) {
	      result.type = 'pat';
	      parsePsi(packet.subarray(offset), result);
	      this.trigger('data', result);
	    } else if (result.pid === this.pmtPid) {
	      result.type = 'pmt';
	      parsePsi(packet.subarray(offset), result);
	      this.trigger('data', result);

	      // if there are any packets waiting for a PMT to be found, process them now
	      while (this.packetsWaitingForPmt.length) {
	        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
	      }
	    } else if (this.programMapTable === undefined) {
	      // When we have not seen a PMT yet, defer further processing of
	      // PES packets until one has been parsed
	      this.packetsWaitingForPmt.push([packet, offset, result]);
	    } else {
	      this.processPes_(packet, offset, result);
	    }
	  };

	  this.processPes_ = function (packet, offset, result) {
	    // set the appropriate stream type
	    if (result.pid === this.programMapTable.video) {
	      result.streamType = streamTypes.H264_STREAM_TYPE;
	    } else if (result.pid === this.programMapTable.audio) {
	      result.streamType = streamTypes.ADTS_STREAM_TYPE;
	    } else {
	      // if not video or audio, it is timed-metadata or unknown
	      // if unknown, streamType will be undefined
	      result.streamType = this.programMapTable['timed-metadata'][result.pid];
	    }

	    result.type = 'pes';
	    result.data = packet.subarray(offset);

	    this.trigger('data', result);
	  };
	};
	_TransportParseStream.prototype = new stream();
	_TransportParseStream.STREAM_TYPES = {
	  h264: 0x1b,
	  adts: 0x0f
	};

	/**
	 * Reconsistutes program elementary stream (PES) packets from parsed
	 * transport stream packets. That is, if you pipe an
	 * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output
	 * events will be events which capture the bytes for individual PES
	 * packets plus relevant metadata that has been extracted from the
	 * container.
	 */
	_ElementaryStream = function ElementaryStream() {
	  var self = this,

	  // PES packet fragments
	  video = {
	    data: [],
	    size: 0
	  },
	      audio = {
	    data: [],
	    size: 0
	  },
	      timedMetadata = {
	    data: [],
	    size: 0
	  },
	      parsePes = function parsePes(payload, pes) {
	    var ptsDtsFlags;

	    // get the packet length, this will be 0 for video
	    pes.packetLength = 6 + (payload[4] << 8 | payload[5]);

	    // find out if this packets starts a new keyframe
	    pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;
	    // PES packets may be annotated with a PTS value, or a PTS value
	    // and a DTS value. Determine what combination of values is
	    // available to work with.
	    ptsDtsFlags = payload[7];

	    // PTS and DTS are normally stored as a 33-bit number.  Javascript
	    // performs all bitwise operations on 32-bit integers but javascript
	    // supports a much greater range (52-bits) of integer using standard
	    // mathematical operations.
	    // We construct a 31-bit value using bitwise operators over the 31
	    // most significant bits and then multiply by 4 (equal to a left-shift
	    // of 2) before we add the final 2 least significant bits of the
	    // timestamp (equal to an OR.)
	    if (ptsDtsFlags & 0xC0) {
	      // the PTS and DTS are not written out directly. For information
	      // on how they are encoded, see
	      // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
	      pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;
	      pes.pts *= 4; // Left shift by 2
	      pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs
	      pes.dts = pes.pts;
	      if (ptsDtsFlags & 0x40) {
	        pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;
	        pes.dts *= 4; // Left shift by 2
	        pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs
	      }
	    }
	    // the data section starts immediately after the PES header.
	    // pes_header_data_length specifies the number of header bytes
	    // that follow the last byte of the field.
	    pes.data = payload.subarray(9 + payload[8]);
	  },

	  /**
	    * Pass completely parsed PES packets to the next stream in the pipeline
	   **/
	  flushStream = function flushStream(stream$$1, type, forceFlush) {
	    var packetData = new Uint8Array(stream$$1.size),
	        event = {
	      type: type
	    },
	        i = 0,
	        offset = 0,
	        packetFlushable = false,
	        fragment;

	    // do nothing if there is not enough buffered data for a complete
	    // PES header
	    if (!stream$$1.data.length || stream$$1.size < 9) {
	      return;
	    }
	    event.trackId = stream$$1.data[0].pid;

	    // reassemble the packet
	    for (i = 0; i < stream$$1.data.length; i++) {
	      fragment = stream$$1.data[i];

	      packetData.set(fragment.data, offset);
	      offset += fragment.data.byteLength;
	    }

	    // parse assembled packet's PES header
	    parsePes(packetData, event);

	    // non-video PES packets MUST have a non-zero PES_packet_length
	    // check that there is enough stream data to fill the packet
	    packetFlushable = type === 'video' || event.packetLength <= stream$$1.size;

	    // flush pending packets if the conditions are right
	    if (forceFlush || packetFlushable) {
	      stream$$1.size = 0;
	      stream$$1.data.length = 0;
	    }

	    // only emit packets that are complete. this is to avoid assembling
	    // incomplete PES packets due to poor segmentation
	    if (packetFlushable) {
	      self.trigger('data', event);
	    }
	  };

	  _ElementaryStream.prototype.init.call(this);

	  /**
	   * Identifies M2TS packet types and parses PES packets using metadata
	   * parsed from the PMT
	   **/
	  this.push = function (data) {
	    ({
	      pat: function pat() {
	        // we have to wait for the PMT to arrive as well before we
	        // have any meaningful metadata
	      },
	      pes: function pes() {
	        var stream$$1, streamType;

	        switch (data.streamType) {
	          case streamTypes.H264_STREAM_TYPE:
	          case streamTypes.H264_STREAM_TYPE:
	            stream$$1 = video;
	            streamType = 'video';
	            break;
	          case streamTypes.ADTS_STREAM_TYPE:
	            stream$$1 = audio;
	            streamType = 'audio';
	            break;
	          case streamTypes.METADATA_STREAM_TYPE:
	            stream$$1 = timedMetadata;
	            streamType = 'timed-metadata';
	            break;
	          default:
	            // ignore unknown stream types
	            return;
	        }

	        // if a new packet is starting, we can flush the completed
	        // packet
	        if (data.payloadUnitStartIndicator) {
	          flushStream(stream$$1, streamType, true);
	        }

	        // buffer this fragment until we are sure we've received the
	        // complete payload
	        stream$$1.data.push(data);
	        stream$$1.size += data.data.byteLength;
	      },
	      pmt: function pmt() {
	        var event = {
	          type: 'metadata',
	          tracks: []
	        },
	            programMapTable = data.programMapTable;

	        // translate audio and video streams to tracks
	        if (programMapTable.video !== null) {
	          event.tracks.push({
	            timelineStartInfo: {
	              baseMediaDecodeTime: 0
	            },
	            id: +programMapTable.video,
	            codec: 'avc',
	            type: 'video'
	          });
	        }
	        if (programMapTable.audio !== null) {
	          event.tracks.push({
	            timelineStartInfo: {
	              baseMediaDecodeTime: 0
	            },
	            id: +programMapTable.audio,
	            codec: 'adts',
	            type: 'audio'
	          });
	        }

	        self.trigger('data', event);
	      }
	    })[data.type]();
	  };

	  /**
	   * Flush any remaining input. Video PES packets may be of variable
	   * length. Normally, the start of a new video packet can trigger the
	   * finalization of the previous packet. That is not possible if no
	   * more video is forthcoming, however. In that case, some other
	   * mechanism (like the end of the file) has to be employed. When it is
	   * clear that no additional data is forthcoming, calling this method
	   * will flush the buffered packets.
	   */
	  this.flush = function () {
	    // !!THIS ORDER IS IMPORTANT!!
	    // video first then audio
	    flushStream(video, 'video');
	    flushStream(audio, 'audio');
	    flushStream(timedMetadata, 'timed-metadata');
	    this.trigger('done');
	  };
	};
	_ElementaryStream.prototype = new stream();

	var m2ts = {
	  PAT_PID: 0x0000,
	  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,
	  TransportPacketStream: _TransportPacketStream,
	  TransportParseStream: _TransportParseStream,
	  ElementaryStream: _ElementaryStream,
	  TimestampRolloverStream: TimestampRolloverStream$1,
	  CaptionStream: captionStream.CaptionStream,
	  Cea608Stream: captionStream.Cea608Stream,
	  MetadataStream: metadataStream
	};

	for (var type$1 in streamTypes) {
	  if (streamTypes.hasOwnProperty(type$1)) {
	    m2ts[type$1] = streamTypes[type$1];
	  }
	}

	var m2ts_1 = m2ts;

	var _AdtsStream;

	var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];

	/*
	 * Accepts a ElementaryStream and emits data events with parsed
	 * AAC Audio Frames of the individual packets. Input audio in ADTS
	 * format is unpacked and re-emitted as AAC frames.
	 *
	 * @see http://wiki.multimedia.cx/index.php?title=ADTS
	 * @see http://wiki.multimedia.cx/?title=Understanding_AAC
	 */
	_AdtsStream = function AdtsStream() {
	  var buffer;

	  _AdtsStream.prototype.init.call(this);

	  this.push = function (packet) {
	    var i = 0,
	        frameNum = 0,
	        frameLength,
	        protectionSkipBytes,
	        frameEnd,
	        oldBuffer,
	        sampleCount,
	        adtsFrameDuration;

	    if (packet.type !== 'audio') {
	      // ignore non-audio data
	      return;
	    }

	    // Prepend any data in the buffer to the input data so that we can parse
	    // aac frames the cross a PES packet boundary
	    if (buffer) {
	      oldBuffer = buffer;
	      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);
	      buffer.set(oldBuffer);
	      buffer.set(packet.data, oldBuffer.byteLength);
	    } else {
	      buffer = packet.data;
	    }

	    // unpack any ADTS frames which have been fully received
	    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS
	    while (i + 5 < buffer.length) {

	      // Loook for the start of an ADTS header..
	      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {
	        // If a valid header was not found,  jump one forward and attempt to
	        // find a valid ADTS header starting at the next byte
	        i++;
	        continue;
	      }

	      // The protection skip bit tells us if we have 2 bytes of CRC data at the
	      // end of the ADTS header
	      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;

	      // Frame length is a 13 bit integer starting 16 bits from the
	      // end of the sync sequence
	      frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;

	      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;
	      adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];

	      frameEnd = i + frameLength;

	      // If we don't have enough data to actually finish this ADTS frame, return
	      // and wait for more data
	      if (buffer.byteLength < frameEnd) {
	        return;
	      }

	      // Otherwise, deliver the complete AAC frame
	      this.trigger('data', {
	        pts: packet.pts + frameNum * adtsFrameDuration,
	        dts: packet.dts + frameNum * adtsFrameDuration,
	        sampleCount: sampleCount,
	        audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,
	        channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,
	        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],
	        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,
	        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16
	        samplesize: 16,
	        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)
	      });

	      // If the buffer is empty, clear it and return
	      if (buffer.byteLength === frameEnd) {
	        buffer = undefined;
	        return;
	      }

	      frameNum++;

	      // Remove the finished frame from the buffer and start the process again
	      buffer = buffer.subarray(frameEnd);
	    }
	  };
	  this.flush = function () {
	    this.trigger('done');
	  };
	};

	_AdtsStream.prototype = new stream();

	var adts = _AdtsStream;

	var ExpGolomb;

	/**
	 * Parser for exponential Golomb codes, a variable-bitwidth number encoding
	 * scheme used by h264.
	 */
	ExpGolomb = function ExpGolomb(workingData) {
	  var
	  // the number of bytes left to examine in workingData
	  workingBytesAvailable = workingData.byteLength,


	  // the current word being examined
	  workingWord = 0,
	      // :uint

	  // the number of bits left to examine in the current word
	  workingBitsAvailable = 0; // :uint;

	  // ():uint
	  this.length = function () {
	    return 8 * workingBytesAvailable;
	  };

	  // ():uint
	  this.bitsAvailable = function () {
	    return 8 * workingBytesAvailable + workingBitsAvailable;
	  };

	  // ():void
	  this.loadWord = function () {
	    var position = workingData.byteLength - workingBytesAvailable,
	        workingBytes = new Uint8Array(4),
	        availableBytes = Math.min(4, workingBytesAvailable);

	    if (availableBytes === 0) {
	      throw new Error('no bytes available');
	    }

	    workingBytes.set(workingData.subarray(position, position + availableBytes));
	    workingWord = new DataView(workingBytes.buffer).getUint32(0);

	    // track the amount of workingData that has been processed
	    workingBitsAvailable = availableBytes * 8;
	    workingBytesAvailable -= availableBytes;
	  };

	  // (count:int):void
	  this.skipBits = function (count) {
	    var skipBytes; // :int
	    if (workingBitsAvailable > count) {
	      workingWord <<= count;
	      workingBitsAvailable -= count;
	    } else {
	      count -= workingBitsAvailable;
	      skipBytes = Math.floor(count / 8);

	      count -= skipBytes * 8;
	      workingBytesAvailable -= skipBytes;

	      this.loadWord();

	      workingWord <<= count;
	      workingBitsAvailable -= count;
	    }
	  };

	  // (size:int):uint
	  this.readBits = function (size) {
	    var bits = Math.min(workingBitsAvailable, size),
	        // :uint
	    valu = workingWord >>> 32 - bits; // :uint
	    // if size > 31, handle error
	    workingBitsAvailable -= bits;
	    if (workingBitsAvailable > 0) {
	      workingWord <<= bits;
	    } else if (workingBytesAvailable > 0) {
	      this.loadWord();
	    }

	    bits = size - bits;
	    if (bits > 0) {
	      return valu << bits | this.readBits(bits);
	    }
	    return valu;
	  };

	  // ():uint
	  this.skipLeadingZeros = function () {
	    var leadingZeroCount; // :uint
	    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {
	      if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {
	        // the first bit of working word is 1
	        workingWord <<= leadingZeroCount;
	        workingBitsAvailable -= leadingZeroCount;
	        return leadingZeroCount;
	      }
	    }

	    // we exhausted workingWord and still have not found a 1
	    this.loadWord();
	    return leadingZeroCount + this.skipLeadingZeros();
	  };

	  // ():void
	  this.skipUnsignedExpGolomb = function () {
	    this.skipBits(1 + this.skipLeadingZeros());
	  };

	  // ():void
	  this.skipExpGolomb = function () {
	    this.skipBits(1 + this.skipLeadingZeros());
	  };

	  // ():uint
	  this.readUnsignedExpGolomb = function () {
	    var clz = this.skipLeadingZeros(); // :uint
	    return this.readBits(clz + 1) - 1;
	  };

	  // ():int
	  this.readExpGolomb = function () {
	    var valu = this.readUnsignedExpGolomb(); // :int
	    if (0x01 & valu) {
	      // the number is odd if the low order bit is set
	      return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
	    }
	    return -1 * (valu >>> 1); // divide by two then make it negative
	  };

	  // Some convenience functions
	  // :Boolean
	  this.readBoolean = function () {
	    return this.readBits(1) === 1;
	  };

	  // ():int
	  this.readUnsignedByte = function () {
	    return this.readBits(8);
	  };

	  this.loadWord();
	};

	var expGolomb = ExpGolomb;

	var _H264Stream, _NalByteStream;
	var PROFILES_WITH_OPTIONAL_SPS_DATA;

	/**
	 * Accepts a NAL unit byte stream and unpacks the embedded NAL units.
	 */
	_NalByteStream = function NalByteStream() {
	  var syncPoint = 0,
	      i,
	      buffer;
	  _NalByteStream.prototype.init.call(this);

	  /*
	   * Scans a byte stream and triggers a data event with the NAL units found.
	   * @param {Object} data Event received from H264Stream
	   * @param {Uint8Array} data.data The h264 byte stream to be scanned
	   *
	   * @see H264Stream.push
	   */
	  this.push = function (data) {
	    var swapBuffer;

	    if (!buffer) {
	      buffer = data.data;
	    } else {
	      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);
	      swapBuffer.set(buffer);
	      swapBuffer.set(data.data, buffer.byteLength);
	      buffer = swapBuffer;
	    }

	    // Rec. ITU-T H.264, Annex B
	    // scan for NAL unit boundaries

	    // a match looks like this:
	    // 0 0 1 .. NAL .. 0 0 1
	    // ^ sync point        ^ i
	    // or this:
	    // 0 0 1 .. NAL .. 0 0 0
	    // ^ sync point        ^ i

	    // advance the sync point to a NAL start, if necessary
	    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {
	      if (buffer[syncPoint + 2] === 1) {
	        // the sync point is properly aligned
	        i = syncPoint + 5;
	        break;
	      }
	    }

	    while (i < buffer.byteLength) {
	      // look at the current byte to determine if we've hit the end of
	      // a NAL unit boundary
	      switch (buffer[i]) {
	        case 0:
	          // skip past non-sync sequences
	          if (buffer[i - 1] !== 0) {
	            i += 2;
	            break;
	          } else if (buffer[i - 2] !== 0) {
	            i++;
	            break;
	          }

	          // deliver the NAL unit if it isn't empty
	          if (syncPoint + 3 !== i - 2) {
	            this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));
	          }

	          // drop trailing zeroes
	          do {
	            i++;
	          } while (buffer[i] !== 1 && i < buffer.length);
	          syncPoint = i - 2;
	          i += 3;
	          break;
	        case 1:
	          // skip past non-sync sequences
	          if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {
	            i += 3;
	            break;
	          }

	          // deliver the NAL unit
	          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));
	          syncPoint = i - 2;
	          i += 3;
	          break;
	        default:
	          // the current byte isn't a one or zero, so it cannot be part
	          // of a sync sequence
	          i += 3;
	          break;
	      }
	    }
	    // filter out the NAL units that were delivered
	    buffer = buffer.subarray(syncPoint);
	    i -= syncPoint;
	    syncPoint = 0;
	  };

	  this.flush = function () {
	    // deliver the last buffered NAL unit
	    if (buffer && buffer.byteLength > 3) {
	      this.trigger('data', buffer.subarray(syncPoint + 3));
	    }
	    // reset the stream state
	    buffer = null;
	    syncPoint = 0;
	    this.trigger('done');
	  };
	};
	_NalByteStream.prototype = new stream();

	// values of profile_idc that indicate additional fields are included in the SPS
	// see Recommendation ITU-T H.264 (4/2013),
	// 7.3.2.1.1 Sequence parameter set data syntax
	PROFILES_WITH_OPTIONAL_SPS_DATA = {
	  100: true,
	  110: true,
	  122: true,
	  244: true,
	  44: true,
	  83: true,
	  86: true,
	  118: true,
	  128: true,
	  138: true,
	  139: true,
	  134: true
	};

	/**
	 * Accepts input from a ElementaryStream and produces H.264 NAL unit data
	 * events.
	 */
	_H264Stream = function H264Stream() {
	  var nalByteStream = new _NalByteStream(),
	      self,
	      trackId,
	      currentPts,
	      currentDts,
	      discardEmulationPreventionBytes,
	      readSequenceParameterSet,
	      skipScalingList;

	  _H264Stream.prototype.init.call(this);
	  self = this;

	  /*
	   * Pushes a packet from a stream onto the NalByteStream
	   *
	   * @param {Object} packet - A packet received from a stream
	   * @param {Uint8Array} packet.data - The raw bytes of the packet
	   * @param {Number} packet.dts - Decode timestamp of the packet
	   * @param {Number} packet.pts - Presentation timestamp of the packet
	   * @param {Number} packet.trackId - The id of the h264 track this packet came from
	   * @param {('video'|'audio')} packet.type - The type of packet
	   *
	   */
	  this.push = function (packet) {
	    if (packet.type !== 'video') {
	      return;
	    }
	    trackId = packet.trackId;
	    currentPts = packet.pts;
	    currentDts = packet.dts;

	    nalByteStream.push(packet);
	  };

	  /*
	   * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps
	   * for the NALUs to the next stream component.
	   * Also, preprocess caption and sequence parameter NALUs.
	   *
	   * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`
	   * @see NalByteStream.push
	   */
	  nalByteStream.on('data', function (data) {
	    var event = {
	      trackId: trackId,
	      pts: currentPts,
	      dts: currentDts,
	      data: data
	    };

	    switch (data[0] & 0x1f) {
	      case 0x05:
	        event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';
	        break;
	      case 0x06:
	        event.nalUnitType = 'sei_rbsp';
	        event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
	        break;
	      case 0x07:
	        event.nalUnitType = 'seq_parameter_set_rbsp';
	        event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
	        event.config = readSequenceParameterSet(event.escapedRBSP);
	        break;
	      case 0x08:
	        event.nalUnitType = 'pic_parameter_set_rbsp';
	        break;
	      case 0x09:
	        event.nalUnitType = 'access_unit_delimiter_rbsp';
	        break;

	      default:
	        break;
	    }
	    // This triggers data on the H264Stream
	    self.trigger('data', event);
	  });
	  nalByteStream.on('done', function () {
	    self.trigger('done');
	  });

	  this.flush = function () {
	    nalByteStream.flush();
	  };

	  /**
	   * Advance the ExpGolomb decoder past a scaling list. The scaling
	   * list is optionally transmitted as part of a sequence parameter
	   * set and is not relevant to transmuxing.
	   * @param count {number} the number of entries in this scaling list
	   * @param expGolombDecoder {object} an ExpGolomb pointed to the
	   * start of a scaling list
	   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
	   */
	  skipScalingList = function skipScalingList(count, expGolombDecoder) {
	    var lastScale = 8,
	        nextScale = 8,
	        j,
	        deltaScale;

	    for (j = 0; j < count; j++) {
	      if (nextScale !== 0) {
	        deltaScale = expGolombDecoder.readExpGolomb();
	        nextScale = (lastScale + deltaScale + 256) % 256;
	      }

	      lastScale = nextScale === 0 ? lastScale : nextScale;
	    }
	  };

	  /**
	   * Expunge any "Emulation Prevention" bytes from a "Raw Byte
	   * Sequence Payload"
	   * @param data {Uint8Array} the bytes of a RBSP from a NAL
	   * unit
	   * @return {Uint8Array} the RBSP without any Emulation
	   * Prevention Bytes
	   */
	  discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {
	    var length = data.byteLength,
	        emulationPreventionBytesPositions = [],
	        i = 1,
	        newLength,
	        newData;

	    // Find all `Emulation Prevention Bytes`
	    while (i < length - 2) {
	      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
	        emulationPreventionBytesPositions.push(i + 2);
	        i += 2;
	      } else {
	        i++;
	      }
	    }

	    // If no Emulation Prevention Bytes were found just return the original
	    // array
	    if (emulationPreventionBytesPositions.length === 0) {
	      return data;
	    }

	    // Create a new array to hold the NAL unit data
	    newLength = length - emulationPreventionBytesPositions.length;
	    newData = new Uint8Array(newLength);
	    var sourceIndex = 0;

	    for (i = 0; i < newLength; sourceIndex++, i++) {
	      if (sourceIndex === emulationPreventionBytesPositions[0]) {
	        // Skip this byte
	        sourceIndex++;
	        // Remove this position index
	        emulationPreventionBytesPositions.shift();
	      }
	      newData[i] = data[sourceIndex];
	    }

	    return newData;
	  };

	  /**
	   * Read a sequence parameter set and return some interesting video
	   * properties. A sequence parameter set is the H264 metadata that
	   * describes the properties of upcoming video frames.
	   * @param data {Uint8Array} the bytes of a sequence parameter set
	   * @return {object} an object with configuration parsed from the
	   * sequence parameter set, including the dimensions of the
	   * associated video frames.
	   */
	  readSequenceParameterSet = function readSequenceParameterSet(data) {
	    var frameCropLeftOffset = 0,
	        frameCropRightOffset = 0,
	        frameCropTopOffset = 0,
	        frameCropBottomOffset = 0,
	        sarScale = 1,
	        expGolombDecoder,
	        profileIdc,
	        levelIdc,
	        profileCompatibility,
	        chromaFormatIdc,
	        picOrderCntType,
	        numRefFramesInPicOrderCntCycle,
	        picWidthInMbsMinus1,
	        picHeightInMapUnitsMinus1,
	        frameMbsOnlyFlag,
	        scalingListCount,
	        sarRatio,
	        aspectRatioIdc,
	        i;

	    expGolombDecoder = new expGolomb(data);
	    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc
	    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag
	    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)
	    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id

	    // some profiles have more optional data we don't need
	    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {
	      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();
	      if (chromaFormatIdc === 3) {
	        expGolombDecoder.skipBits(1); // separate_colour_plane_flag
	      }
	      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8
	      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8
	      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag
	      if (expGolombDecoder.readBoolean()) {
	        // seq_scaling_matrix_present_flag
	        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
	        for (i = 0; i < scalingListCount; i++) {
	          if (expGolombDecoder.readBoolean()) {
	            // seq_scaling_list_present_flag[ i ]
	            if (i < 6) {
	              skipScalingList(16, expGolombDecoder);
	            } else {
	              skipScalingList(64, expGolombDecoder);
	            }
	          }
	        }
	      }
	    }

	    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4
	    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();

	    if (picOrderCntType === 0) {
	      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4
	    } else if (picOrderCntType === 1) {
	      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag
	      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic
	      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field
	      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();
	      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
	        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]
	      }
	    }

	    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames
	    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag

	    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
	    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();

	    frameMbsOnlyFlag = expGolombDecoder.readBits(1);
	    if (frameMbsOnlyFlag === 0) {
	      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag
	    }

	    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag
	    if (expGolombDecoder.readBoolean()) {
	      // frame_cropping_flag
	      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();
	      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();
	      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();
	      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();
	    }
	    if (expGolombDecoder.readBoolean()) {
	      // vui_parameters_present_flag
	      if (expGolombDecoder.readBoolean()) {
	        // aspect_ratio_info_present_flag
	        aspectRatioIdc = expGolombDecoder.readUnsignedByte();
	        switch (aspectRatioIdc) {
	          case 1:
	            sarRatio = [1, 1];break;
	          case 2:
	            sarRatio = [12, 11];break;
	          case 3:
	            sarRatio = [10, 11];break;
	          case 4:
	            sarRatio = [16, 11];break;
	          case 5:
	            sarRatio = [40, 33];break;
	          case 6:
	            sarRatio = [24, 11];break;
	          case 7:
	            sarRatio = [20, 11];break;
	          case 8:
	            sarRatio = [32, 11];break;
	          case 9:
	            sarRatio = [80, 33];break;
	          case 10:
	            sarRatio = [18, 11];break;
	          case 11:
	            sarRatio = [15, 11];break;
	          case 12:
	            sarRatio = [64, 33];break;
	          case 13:
	            sarRatio = [160, 99];break;
	          case 14:
	            sarRatio = [4, 3];break;
	          case 15:
	            sarRatio = [3, 2];break;
	          case 16:
	            sarRatio = [2, 1];break;
	          case 255:
	            {
	              sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];
	              break;
	            }
	        }
	        if (sarRatio) {
	          sarScale = sarRatio[0] / sarRatio[1];
	        }
	      }
	    }
	    return {
	      profileIdc: profileIdc,
	      levelIdc: levelIdc,
	      profileCompatibility: profileCompatibility,
	      width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),
	      height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2
	    };
	  };
	};
	_H264Stream.prototype = new stream();

	var h264 = {
	  H264Stream: _H264Stream,
	  NalByteStream: _NalByteStream
	};

	/**
	 * mux.js
	 *
	 * Copyright (c) 2016 Brightcove
	 * All rights reserved.
	 *
	 * Utilities to detect basic properties and metadata about Aac data.
	 */

	var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];

	var isLikelyAacData = function isLikelyAacData(data) {
	  if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {
	    return true;
	  }
	  return false;
	};

	var parseSyncSafeInteger$1 = function parseSyncSafeInteger(data) {
	  return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
	};

	// return a percent-encoded representation of the specified byte range
	// @see http://en.wikipedia.org/wiki/Percent-encoding
	var percentEncode$1 = function percentEncode(bytes, start, end) {
	  var i,
	      result = '';
	  for (i = start; i < end; i++) {
	    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);
	  }
	  return result;
	};

	// return the string representation of the specified byte range,
	// interpreted as ISO-8859-1.
	var parseIso88591$1 = function parseIso88591(bytes, start, end) {
	  return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line
	};

	var parseId3TagSize = function parseId3TagSize(header, byteIndex) {
	  var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],
	      flags = header[byteIndex + 5],
	      footerPresent = (flags & 16) >> 4;

	  if (footerPresent) {
	    return returnSize + 20;
	  }
	  return returnSize + 10;
	};

	var parseAdtsSize = function parseAdtsSize(header, byteIndex) {
	  var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,
	      middle = header[byteIndex + 4] << 3,
	      highTwo = header[byteIndex + 3] & 0x3 << 11;

	  return highTwo | middle | lowThree;
	};

	var parseType$1 = function parseType(header, byteIndex) {
	  if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {
	    return 'timed-metadata';
	  } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {
	    return 'audio';
	  }
	  return null;
	};

	var parseSampleRate = function parseSampleRate(packet) {
	  var i = 0;

	  while (i + 5 < packet.length) {
	    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {
	      // If a valid header was not found,  jump one forward and attempt to
	      // find a valid ADTS header starting at the next byte
	      i++;
	      continue;
	    }
	    return ADTS_SAMPLING_FREQUENCIES$1[(packet[i + 2] & 0x3c) >>> 2];
	  }

	  return null;
	};

	var parseAacTimestamp = function parseAacTimestamp(packet) {
	  var frameStart, frameSize, frame, frameHeader;

	  // find the start of the first frame and the end of the tag
	  frameStart = 10;
	  if (packet[5] & 0x40) {
	    // advance the frame start past the extended header
	    frameStart += 4; // header size field
	    frameStart += parseSyncSafeInteger$1(packet.subarray(10, 14));
	  }

	  // parse one or more ID3 frames
	  // http://id3.org/id3v2.3.0#ID3v2_frame_overview
	  do {
	    // determine the number of bytes in this frame
	    frameSize = parseSyncSafeInteger$1(packet.subarray(frameStart + 4, frameStart + 8));
	    if (frameSize < 1) {
	      return null;
	    }
	    frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);

	    if (frameHeader === 'PRIV') {
	      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);

	      for (var i = 0; i < frame.byteLength; i++) {
	        if (frame[i] === 0) {
	          var owner = parseIso88591$1(frame, 0, i);
	          if (owner === 'com.apple.streaming.transportStreamTimestamp') {
	            var d = frame.subarray(i + 1);
	            var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;
	            size *= 4;
	            size += d[7] & 0x03;

	            return size;
	          }
	          break;
	        }
	      }
	    }

	    frameStart += 10; // advance past the frame header
	    frameStart += frameSize; // advance past the frame body
	  } while (frameStart < packet.byteLength);
	  return null;
	};

	var utils$1 = {
	  isLikelyAacData: isLikelyAacData,
	  parseId3TagSize: parseId3TagSize,
	  parseAdtsSize: parseAdtsSize,
	  parseType: parseType$1,
	  parseSampleRate: parseSampleRate,
	  parseAacTimestamp: parseAacTimestamp
	};

	// Constants
	var _AacStream;

	/**
	 * Splits an incoming stream of binary data into ADTS and ID3 Frames.
	 */

	_AacStream = function AacStream() {
	  var everything = new Uint8Array(),
	      timeStamp = 0;

	  _AacStream.prototype.init.call(this);

	  this.setTimestamp = function (timestamp) {
	    timeStamp = timestamp;
	  };

	  this.push = function (bytes) {
	    var frameSize = 0,
	        byteIndex = 0,
	        bytesLeft,
	        chunk,
	        packet,
	        tempLength;

	    // If there are bytes remaining from the last segment, prepend them to the
	    // bytes that were pushed in
	    if (everything.length) {
	      tempLength = everything.length;
	      everything = new Uint8Array(bytes.byteLength + tempLength);
	      everything.set(everything.subarray(0, tempLength));
	      everything.set(bytes, tempLength);
	    } else {
	      everything = bytes;
	    }

	    while (everything.length - byteIndex >= 3) {
	      if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {

	        // Exit early because we don't have enough to parse
	        // the ID3 tag header
	        if (everything.length - byteIndex < 10) {
	          break;
	        }

	        // check framesize
	        frameSize = utils$1.parseId3TagSize(everything, byteIndex);

	        // Exit early if we don't have enough in the buffer
	        // to emit a full packet
	        // Add to byteIndex to support multiple ID3 tags in sequence
	        if (byteIndex + frameSize > everything.length) {
	          break;
	        }
	        chunk = {
	          type: 'timed-metadata',
	          data: everything.subarray(byteIndex, byteIndex + frameSize)
	        };
	        this.trigger('data', chunk);
	        byteIndex += frameSize;
	        continue;
	      } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {

	        // Exit early because we don't have enough to parse
	        // the ADTS frame header
	        if (everything.length - byteIndex < 7) {
	          break;
	        }

	        frameSize = utils$1.parseAdtsSize(everything, byteIndex);

	        // Exit early if we don't have enough in the buffer
	        // to emit a full packet
	        if (byteIndex + frameSize > everything.length) {
	          break;
	        }

	        packet = {
	          type: 'audio',
	          data: everything.subarray(byteIndex, byteIndex + frameSize),
	          pts: timeStamp,
	          dts: timeStamp
	        };
	        this.trigger('data', packet);
	        byteIndex += frameSize;
	        continue;
	      }
	      byteIndex++;
	    }
	    bytesLeft = everything.length - byteIndex;

	    if (bytesLeft > 0) {
	      everything = everything.subarray(byteIndex);
	    } else {
	      everything = new Uint8Array();
	    }
	  };
	};

	_AacStream.prototype = new stream();

	var aac = _AacStream;

	var H264Stream = h264.H264Stream;

	var isLikelyAacData$1 = utils$1.isLikelyAacData;

	// constants
	var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];

	var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility'];

	// object types
	var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;

	/**
	 * Compare two arrays (even typed) for same-ness
	 */
	var arrayEquals = function arrayEquals(a, b) {
	  var i;

	  if (a.length !== b.length) {
	    return false;
	  }

	  // compare the value of each element in the array
	  for (i = 0; i < a.length; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }

	  return true;
	};

	/**
	 * Constructs a single-track, ISO BMFF media segment from AAC data
	 * events. The output of this stream can be fed to a SourceBuffer
	 * configured with a suitable initialization segment.
	 * @param track {object} track metadata configuration
	 * @param options {object} transmuxer options object
	 * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
	 *        in the source; false to adjust the first segment to start at 0.
	 */
	_AudioSegmentStream = function AudioSegmentStream(track, options) {
	  var adtsFrames = [],
	      sequenceNumber = 0,
	      earliestAllowedDts = 0,
	      audioAppendStartTs = 0,
	      videoBaseMediaDecodeTime = Infinity;

	  options = options || {};

	  _AudioSegmentStream.prototype.init.call(this);

	  this.push = function (data) {
	    trackDecodeInfo.collectDtsInfo(track, data);

	    if (track) {
	      AUDIO_PROPERTIES.forEach(function (prop) {
	        track[prop] = data[prop];
	      });
	    }

	    // buffer audio data until end() is called
	    adtsFrames.push(data);
	  };

	  this.setEarliestDts = function (earliestDts) {
	    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;
	  };

	  this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {
	    videoBaseMediaDecodeTime = baseMediaDecodeTime;
	  };

	  this.setAudioAppendStart = function (timestamp) {
	    audioAppendStartTs = timestamp;
	  };

	  this.flush = function () {
	    var frames, moof, mdat, boxes;

	    // return early if no audio data has been observed
	    if (adtsFrames.length === 0) {
	      this.trigger('done', 'AudioSegmentStream');
	      return;
	    }

	    frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);
	    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);

	    audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime);

	    // we have to build the index from byte locations to
	    // samples (that is, adts frames) in the audio data
	    track.samples = audioFrameUtils.generateSampleTable(frames);

	    // concatenate the audio data to constuct the mdat
	    mdat = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));

	    adtsFrames = [];

	    moof = mp4Generator.moof(sequenceNumber, [track]);
	    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);

	    // bump the sequence number for next time
	    sequenceNumber++;

	    boxes.set(moof);
	    boxes.set(mdat, moof.byteLength);

	    trackDecodeInfo.clearDtsInfo(track);

	    this.trigger('data', { track: track, boxes: boxes });
	    this.trigger('done', 'AudioSegmentStream');
	  };
	};

	_AudioSegmentStream.prototype = new stream();

	/**
	 * Constructs a single-track, ISO BMFF media segment from H264 data
	 * events. The output of this stream can be fed to a SourceBuffer
	 * configured with a suitable initialization segment.
	 * @param track {object} track metadata configuration
	 * @param options {object} transmuxer options object
	 * @param options.alignGopsAtEnd {boolean} If true, start from the end of the
	 *        gopsToAlignWith list when attempting to align gop pts
	 * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
	 *        in the source; false to adjust the first segment to start at 0.
	 */
	_VideoSegmentStream = function VideoSegmentStream(track, options) {
	  var sequenceNumber = 0,
	      nalUnits = [],
	      gopsToAlignWith = [],
	      config,
	      pps;

	  options = options || {};

	  _VideoSegmentStream.prototype.init.call(this);

	  delete track.minPTS;

	  this.gopCache_ = [];

	  /**
	    * Constructs a ISO BMFF segment given H264 nalUnits
	    * @param {Object} nalUnit A data event representing a nalUnit
	    * @param {String} nalUnit.nalUnitType
	    * @param {Object} nalUnit.config Properties for a mp4 track
	    * @param {Uint8Array} nalUnit.data The nalUnit bytes
	    * @see lib/codecs/h264.js
	   **/
	  this.push = function (nalUnit) {
	    trackDecodeInfo.collectDtsInfo(track, nalUnit);

	    // record the track config
	    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {
	      config = nalUnit.config;
	      track.sps = [nalUnit.data];

	      VIDEO_PROPERTIES.forEach(function (prop) {
	        track[prop] = config[prop];
	      }, this);
	    }

	    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {
	      pps = nalUnit.data;
	      track.pps = [nalUnit.data];
	    }

	    // buffer video until flush() is called
	    nalUnits.push(nalUnit);
	  };

	  /**
	    * Pass constructed ISO BMFF track and boxes on to the
	    * next stream in the pipeline
	   **/
	  this.flush = function () {
	    var frames, gopForFusion, gops, moof, mdat, boxes;

	    // Throw away nalUnits at the start of the byte stream until
	    // we find the first AUD
	    while (nalUnits.length) {
	      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {
	        break;
	      }
	      nalUnits.shift();
	    }

	    // Return early if no video data has been observed
	    if (nalUnits.length === 0) {
	      this.resetStream_();
	      this.trigger('done', 'VideoSegmentStream');
	      return;
	    }

	    // Organize the raw nal-units into arrays that represent
	    // higher-level constructs such as frames and gops
	    // (group-of-pictures)
	    frames = frameUtils.groupNalsIntoFrames(nalUnits);
	    gops = frameUtils.groupFramesIntoGops(frames);

	    // If the first frame of this fragment is not a keyframe we have
	    // a problem since MSE (on Chrome) requires a leading keyframe.
	    //
	    // We have two approaches to repairing this situation:
	    // 1) GOP-FUSION:
	    //    This is where we keep track of the GOPS (group-of-pictures)
	    //    from previous fragments and attempt to find one that we can
	    //    prepend to the current fragment in order to create a valid
	    //    fragment.
	    // 2) KEYFRAME-PULLING:
	    //    Here we search for the first keyframe in the fragment and
	    //    throw away all the frames between the start of the fragment
	    //    and that keyframe. We then extend the duration and pull the
	    //    PTS of the keyframe forward so that it covers the time range
	    //    of the frames that were disposed of.
	    //
	    // #1 is far prefereable over #2 which can cause "stuttering" but
	    // requires more things to be just right.
	    if (!gops[0][0].keyFrame) {
	      // Search for a gop for fusion from our gopCache
	      gopForFusion = this.getGopForFusion_(nalUnits[0], track);

	      if (gopForFusion) {
	        gops.unshift(gopForFusion);
	        // Adjust Gops' metadata to account for the inclusion of the
	        // new gop at the beginning
	        gops.byteLength += gopForFusion.byteLength;
	        gops.nalCount += gopForFusion.nalCount;
	        gops.pts = gopForFusion.pts;
	        gops.dts = gopForFusion.dts;
	        gops.duration += gopForFusion.duration;
	      } else {
	        // If we didn't find a candidate gop fall back to keyframe-pulling
	        gops = frameUtils.extendFirstKeyFrame(gops);
	      }
	    }

	    // Trim gops to align with gopsToAlignWith
	    if (gopsToAlignWith.length) {
	      var alignedGops;

	      if (options.alignGopsAtEnd) {
	        alignedGops = this.alignGopsAtEnd_(gops);
	      } else {
	        alignedGops = this.alignGopsAtStart_(gops);
	      }

	      if (!alignedGops) {
	        // save all the nals in the last GOP into the gop cache
	        this.gopCache_.unshift({
	          gop: gops.pop(),
	          pps: track.pps,
	          sps: track.sps
	        });

	        // Keep a maximum of 6 GOPs in the cache
	        this.gopCache_.length = Math.min(6, this.gopCache_.length);

	        // Clear nalUnits
	        nalUnits = [];

	        // return early no gops can be aligned with desired gopsToAlignWith
	        this.resetStream_();
	        this.trigger('done', 'VideoSegmentStream');
	        return;
	      }

	      // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct
	      // when recalculated before sending off to CoalesceStream
	      trackDecodeInfo.clearDtsInfo(track);

	      gops = alignedGops;
	    }

	    trackDecodeInfo.collectDtsInfo(track, gops);

	    // First, we have to build the index from byte locations to
	    // samples (that is, frames) in the video data
	    track.samples = frameUtils.generateSampleTable(gops);

	    // Concatenate the video data and construct the mdat
	    mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));

	    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);

	    this.trigger('processedGopsInfo', gops.map(function (gop) {
	      return {
	        pts: gop.pts,
	        dts: gop.dts,
	        byteLength: gop.byteLength
	      };
	    }));

	    // save all the nals in the last GOP into the gop cache
	    this.gopCache_.unshift({
	      gop: gops.pop(),
	      pps: track.pps,
	      sps: track.sps
	    });

	    // Keep a maximum of 6 GOPs in the cache
	    this.gopCache_.length = Math.min(6, this.gopCache_.length);

	    // Clear nalUnits
	    nalUnits = [];

	    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);
	    this.trigger('timelineStartInfo', track.timelineStartInfo);

	    moof = mp4Generator.moof(sequenceNumber, [track]);

	    // it would be great to allocate this array up front instead of
	    // throwing away hundreds of media segment fragments
	    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);

	    // Bump the sequence number for next time
	    sequenceNumber++;

	    boxes.set(moof);
	    boxes.set(mdat, moof.byteLength);

	    this.trigger('data', { track: track, boxes: boxes });

	    this.resetStream_();

	    // Continue with the flush process now
	    this.trigger('done', 'VideoSegmentStream');
	  };

	  this.resetStream_ = function () {
	    trackDecodeInfo.clearDtsInfo(track);

	    // reset config and pps because they may differ across segments
	    // for instance, when we are rendition switching
	    config = undefined;
	    pps = undefined;
	  };

	  // Search for a candidate Gop for gop-fusion from the gop cache and
	  // return it or return null if no good candidate was found
	  this.getGopForFusion_ = function (nalUnit) {
	    var halfSecond = 45000,
	        // Half-a-second in a 90khz clock
	    allowableOverlap = 10000,
	        // About 3 frames @ 30fps
	    nearestDistance = Infinity,
	        dtsDistance,
	        nearestGopObj,
	        currentGop,
	        currentGopObj,
	        i;

	    // Search for the GOP nearest to the beginning of this nal unit
	    for (i = 0; i < this.gopCache_.length; i++) {
	      currentGopObj = this.gopCache_[i];
	      currentGop = currentGopObj.gop;

	      // Reject Gops with different SPS or PPS
	      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {
	        continue;
	      }

	      // Reject Gops that would require a negative baseMediaDecodeTime
	      if (currentGop.dts < track.timelineStartInfo.dts) {
	        continue;
	      }

	      // The distance between the end of the gop and the start of the nalUnit
	      dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;

	      // Only consider GOPS that start before the nal unit and end within
	      // a half-second of the nal unit
	      if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {

	        // Always use the closest GOP we found if there is more than
	        // one candidate
	        if (!nearestGopObj || nearestDistance > dtsDistance) {
	          nearestGopObj = currentGopObj;
	          nearestDistance = dtsDistance;
	        }
	      }
	    }

	    if (nearestGopObj) {
	      return nearestGopObj.gop;
	    }
	    return null;
	  };

	  // trim gop list to the first gop found that has a matching pts with a gop in the list
	  // of gopsToAlignWith starting from the START of the list
	  this.alignGopsAtStart_ = function (gops) {
	    var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;

	    byteLength = gops.byteLength;
	    nalCount = gops.nalCount;
	    duration = gops.duration;
	    alignIndex = gopIndex = 0;

	    while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {
	      align = gopsToAlignWith[alignIndex];
	      gop = gops[gopIndex];

	      if (align.pts === gop.pts) {
	        break;
	      }

	      if (gop.pts > align.pts) {
	        // this current gop starts after the current gop we want to align on, so increment
	        // align index
	        alignIndex++;
	        continue;
	      }

	      // current gop starts before the current gop we want to align on. so increment gop
	      // index
	      gopIndex++;
	      byteLength -= gop.byteLength;
	      nalCount -= gop.nalCount;
	      duration -= gop.duration;
	    }

	    if (gopIndex === 0) {
	      // no gops to trim
	      return gops;
	    }

	    if (gopIndex === gops.length) {
	      // all gops trimmed, skip appending all gops
	      return null;
	    }

	    alignedGops = gops.slice(gopIndex);
	    alignedGops.byteLength = byteLength;
	    alignedGops.duration = duration;
	    alignedGops.nalCount = nalCount;
	    alignedGops.pts = alignedGops[0].pts;
	    alignedGops.dts = alignedGops[0].dts;

	    return alignedGops;
	  };

	  // trim gop list to the first gop found that has a matching pts with a gop in the list
	  // of gopsToAlignWith starting from the END of the list
	  this.alignGopsAtEnd_ = function (gops) {
	    var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;

	    alignIndex = gopsToAlignWith.length - 1;
	    gopIndex = gops.length - 1;
	    alignEndIndex = null;
	    matchFound = false;

	    while (alignIndex >= 0 && gopIndex >= 0) {
	      align = gopsToAlignWith[alignIndex];
	      gop = gops[gopIndex];

	      if (align.pts === gop.pts) {
	        matchFound = true;
	        break;
	      }

	      if (align.pts > gop.pts) {
	        alignIndex--;
	        continue;
	      }

	      if (alignIndex === gopsToAlignWith.length - 1) {
	        // gop.pts is greater than the last alignment candidate. If no match is found
	        // by the end of this loop, we still want to append gops that come after this
	        // point
	        alignEndIndex = gopIndex;
	      }

	      gopIndex--;
	    }

	    if (!matchFound && alignEndIndex === null) {
	      return null;
	    }

	    var trimIndex;

	    if (matchFound) {
	      trimIndex = gopIndex;
	    } else {
	      trimIndex = alignEndIndex;
	    }

	    if (trimIndex === 0) {
	      return gops;
	    }

	    var alignedGops = gops.slice(trimIndex);
	    var metadata = alignedGops.reduce(function (total, gop) {
	      total.byteLength += gop.byteLength;
	      total.duration += gop.duration;
	      total.nalCount += gop.nalCount;
	      return total;
	    }, { byteLength: 0, duration: 0, nalCount: 0 });

	    alignedGops.byteLength = metadata.byteLength;
	    alignedGops.duration = metadata.duration;
	    alignedGops.nalCount = metadata.nalCount;
	    alignedGops.pts = alignedGops[0].pts;
	    alignedGops.dts = alignedGops[0].dts;

	    return alignedGops;
	  };

	  this.alignGopsWith = function (newGopsToAlignWith) {
	    gopsToAlignWith = newGopsToAlignWith;
	  };
	};

	_VideoSegmentStream.prototype = new stream();

	/**
	 * A Stream that can combine multiple streams (ie. audio & video)
	 * into a single output segment for MSE. Also supports audio-only
	 * and video-only streams.
	 * @param options {object} transmuxer options object
	 * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
	 *        in the source; false to adjust the first segment to start at media timeline start.
	 */
	_CoalesceStream = function CoalesceStream(options, metadataStream) {
	  // Number of Tracks per output segment
	  // If greater than 1, we combine multiple
	  // tracks into a single segment
	  this.numberOfTracks = 0;
	  this.metadataStream = metadataStream;

	  options = options || {};

	  if (typeof options.remux !== 'undefined') {
	    this.remuxTracks = !!options.remux;
	  } else {
	    this.remuxTracks = true;
	  }

	  if (typeof options.keepOriginalTimestamps === 'boolean') {
	    this.keepOriginalTimestamps = options.keepOriginalTimestamps;
	  }

	  this.pendingTracks = [];
	  this.videoTrack = null;
	  this.pendingBoxes = [];
	  this.pendingCaptions = [];
	  this.pendingMetadata = [];
	  this.pendingBytes = 0;
	  this.emittedTracks = 0;

	  _CoalesceStream.prototype.init.call(this);

	  // Take output from multiple
	  this.push = function (output) {
	    // buffer incoming captions until the associated video segment
	    // finishes
	    if (output.text) {
	      return this.pendingCaptions.push(output);
	    }
	    // buffer incoming id3 tags until the final flush
	    if (output.frames) {
	      return this.pendingMetadata.push(output);
	    }

	    // Add this track to the list of pending tracks and store
	    // important information required for the construction of
	    // the final segment
	    this.pendingTracks.push(output.track);
	    this.pendingBoxes.push(output.boxes);
	    this.pendingBytes += output.boxes.byteLength;

	    if (output.track.type === 'video') {
	      this.videoTrack = output.track;
	    }
	    if (output.track.type === 'audio') {
	      this.audioTrack = output.track;
	    }
	  };
	};

	_CoalesceStream.prototype = new stream();
	_CoalesceStream.prototype.flush = function (flushSource) {
	  var offset = 0,
	      event = {
	    captions: [],
	    captionStreams: {},
	    metadata: [],
	    info: {}
	  },
	      caption,
	      id3,
	      initSegment,
	      timelineStartPts = 0,
	      i;

	  if (this.pendingTracks.length < this.numberOfTracks) {
	    if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {
	      // Return because we haven't received a flush from a data-generating
	      // portion of the segment (meaning that we have only recieved meta-data
	      // or captions.)
	      return;
	    } else if (this.remuxTracks) {
	      // Return until we have enough tracks from the pipeline to remux (if we
	      // are remuxing audio and video into a single MP4)
	      return;
	    } else if (this.pendingTracks.length === 0) {
	      // In the case where we receive a flush without any data having been
	      // received we consider it an emitted track for the purposes of coalescing
	      // `done` events.
	      // We do this for the case where there is an audio and video track in the
	      // segment but no audio data. (seen in several playlists with alternate
	      // audio tracks and no audio present in the main TS segments.)
	      this.emittedTracks++;

	      if (this.emittedTracks >= this.numberOfTracks) {
	        this.trigger('done');
	        this.emittedTracks = 0;
	      }
	      return;
	    }
	  }

	  if (this.videoTrack) {
	    timelineStartPts = this.videoTrack.timelineStartInfo.pts;
	    VIDEO_PROPERTIES.forEach(function (prop) {
	      event.info[prop] = this.videoTrack[prop];
	    }, this);
	  } else if (this.audioTrack) {
	    timelineStartPts = this.audioTrack.timelineStartInfo.pts;
	    AUDIO_PROPERTIES.forEach(function (prop) {
	      event.info[prop] = this.audioTrack[prop];
	    }, this);
	  }

	  if (this.pendingTracks.length === 1) {
	    event.type = this.pendingTracks[0].type;
	  } else {
	    event.type = 'combined';
	  }

	  this.emittedTracks += this.pendingTracks.length;

	  initSegment = mp4Generator.initSegment(this.pendingTracks);

	  // Create a new typed array to hold the init segment
	  event.initSegment = new Uint8Array(initSegment.byteLength);

	  // Create an init segment containing a moov
	  // and track definitions
	  event.initSegment.set(initSegment);

	  // Create a new typed array to hold the moof+mdats
	  event.data = new Uint8Array(this.pendingBytes);

	  // Append each moof+mdat (one per track) together
	  for (i = 0; i < this.pendingBoxes.length; i++) {
	    event.data.set(this.pendingBoxes[i], offset);
	    offset += this.pendingBoxes[i].byteLength;
	  }

	  // Translate caption PTS times into second offsets to match the
	  // video timeline for the segment, and add track info
	  for (i = 0; i < this.pendingCaptions.length; i++) {
	    caption = this.pendingCaptions[i];

	    caption.startTime = caption.startPts;
	    if (!this.keepOriginalTimestamps) {
	      caption.startTime -= timelineStartPts;
	    }
	    caption.startTime /= 90e3;

	    caption.endTime = caption.endPts;
	    if (!this.keepOriginalTimestamps) {
	      caption.endTime -= timelineStartPts;
	    }
	    caption.endTime /= 90e3;

	    event.captionStreams[caption.stream] = true;
	    event.captions.push(caption);
	  }

	  // Translate ID3 frame PTS times into second offsets to match the
	  // video timeline for the segment
	  for (i = 0; i < this.pendingMetadata.length; i++) {
	    id3 = this.pendingMetadata[i];

	    id3.cueTime = id3.pts;
	    if (!this.keepOriginalTimestamps) {
	      id3.cueTime -= timelineStartPts;
	    }
	    id3.cueTime /= 90e3;

	    event.metadata.push(id3);
	  }

	  // We add this to every single emitted segment even though we only need
	  // it for the first
	  event.metadata.dispatchType = this.metadataStream.dispatchType;

	  // Reset stream state
	  this.pendingTracks.length = 0;
	  this.videoTrack = null;
	  this.pendingBoxes.length = 0;
	  this.pendingCaptions.length = 0;
	  this.pendingBytes = 0;
	  this.pendingMetadata.length = 0;

	  // Emit the built segment
	  this.trigger('data', event);

	  // Only emit `done` if all tracks have been flushed and emitted
	  if (this.emittedTracks >= this.numberOfTracks) {
	    this.trigger('done');
	    this.emittedTracks = 0;
	  }
	};
	/**
	 * A Stream that expects MP2T binary data as input and produces
	 * corresponding media segments, suitable for use with Media Source
	 * Extension (MSE) implementations that support the ISO BMFF byte
	 * stream format, like Chrome.
	 */
	_Transmuxer = function Transmuxer(options) {
	  var self = this,
	      hasFlushed = true,
	      videoTrack,
	      audioTrack;

	  _Transmuxer.prototype.init.call(this);

	  options = options || {};
	  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
	  this.transmuxPipeline_ = {};

	  this.setupAacPipeline = function () {
	    var pipeline = {};
	    this.transmuxPipeline_ = pipeline;

	    pipeline.type = 'aac';
	    pipeline.metadataStream = new m2ts_1.MetadataStream();

	    // set up the parsing pipeline
	    pipeline.aacStream = new aac();
	    pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');
	    pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');
	    pipeline.adtsStream = new adts();
	    pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
	    pipeline.headOfPipeline = pipeline.aacStream;

	    pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);
	    pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);

	    pipeline.metadataStream.on('timestamp', function (frame) {
	      pipeline.aacStream.setTimestamp(frame.timeStamp);
	    });

	    pipeline.aacStream.on('data', function (data) {
	      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {
	        audioTrack = audioTrack || {
	          timelineStartInfo: {
	            baseMediaDecodeTime: self.baseMediaDecodeTime
	          },
	          codec: 'adts',
	          type: 'audio'
	        };
	        // hook up the audio segment stream to the first track with aac data
	        pipeline.coalesceStream.numberOfTracks++;
	        pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);
	        // Set up the final part of the audio pipeline
	        pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
	      }
	    });

	    // Re-emit any data coming from the coalesce stream to the outside world
	    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));
	    // Let the consumer know we have finished flushing the entire pipeline
	    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));
	  };

	  this.setupTsPipeline = function () {
	    var pipeline = {};
	    this.transmuxPipeline_ = pipeline;

	    pipeline.type = 'ts';
	    pipeline.metadataStream = new m2ts_1.MetadataStream();

	    // set up the parsing pipeline
	    pipeline.packetStream = new m2ts_1.TransportPacketStream();
	    pipeline.parseStream = new m2ts_1.TransportParseStream();
	    pipeline.elementaryStream = new m2ts_1.ElementaryStream();
	    pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');
	    pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');
	    pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');
	    pipeline.adtsStream = new adts();
	    pipeline.h264Stream = new H264Stream();
	    pipeline.captionStream = new m2ts_1.CaptionStream();
	    pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
	    pipeline.headOfPipeline = pipeline.packetStream;

	    // disassemble MPEG2-TS packets into elementary streams
	    pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream);

	    // !!THIS ORDER IS IMPORTANT!!
	    // demux the streams
	    pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);
	    pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);

	    pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);

	    // Hook up CEA-608/708 caption stream
	    pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);

	    pipeline.elementaryStream.on('data', function (data) {
	      var i;

	      if (data.type === 'metadata') {
	        i = data.tracks.length;

	        // scan the tracks listed in the metadata
	        while (i--) {
	          if (!videoTrack && data.tracks[i].type === 'video') {
	            videoTrack = data.tracks[i];
	            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;
	          } else if (!audioTrack && data.tracks[i].type === 'audio') {
	            audioTrack = data.tracks[i];
	            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;
	          }
	        }

	        // hook up the video segment stream to the first track with h264 data
	        if (videoTrack && !pipeline.videoSegmentStream) {
	          pipeline.coalesceStream.numberOfTracks++;
	          pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);

	          pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {
	            // When video emits timelineStartInfo data after a flush, we forward that
	            // info to the AudioSegmentStream, if it exists, because video timeline
	            // data takes precedence.
	            if (audioTrack) {
	              audioTrack.timelineStartInfo = timelineStartInfo;
	              // On the first segment we trim AAC frames that exist before the
	              // very earliest DTS we have seen in video because Chrome will
	              // interpret any video track with a baseMediaDecodeTime that is
	              // non-zero as a gap.
	              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);
	            }
	          });

	          pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));

	          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {
	            if (audioTrack) {
	              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);
	            }
	          });

	          // Set up the final part of the video pipeline
	          pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);
	        }

	        if (audioTrack && !pipeline.audioSegmentStream) {
	          // hook up the audio segment stream to the first track with aac data
	          pipeline.coalesceStream.numberOfTracks++;
	          pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);

	          // Set up the final part of the audio pipeline
	          pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
	        }
	      }
	    });

	    // Re-emit any data coming from the coalesce stream to the outside world
	    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));
	    // Let the consumer know we have finished flushing the entire pipeline
	    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));
	  };

	  // hook up the segment streams once track metadata is delivered
	  this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {
	    var pipeline = this.transmuxPipeline_;

	    if (!options.keepOriginalTimestamps) {
	      this.baseMediaDecodeTime = baseMediaDecodeTime;
	    }

	    if (audioTrack) {
	      audioTrack.timelineStartInfo.dts = undefined;
	      audioTrack.timelineStartInfo.pts = undefined;
	      trackDecodeInfo.clearDtsInfo(audioTrack);
	      if (!options.keepOriginalTimestamps) {
	        audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;
	      }
	      if (pipeline.audioTimestampRolloverStream) {
	        pipeline.audioTimestampRolloverStream.discontinuity();
	      }
	    }
	    if (videoTrack) {
	      if (pipeline.videoSegmentStream) {
	        pipeline.videoSegmentStream.gopCache_ = [];
	        pipeline.videoTimestampRolloverStream.discontinuity();
	      }
	      videoTrack.timelineStartInfo.dts = undefined;
	      videoTrack.timelineStartInfo.pts = undefined;
	      trackDecodeInfo.clearDtsInfo(videoTrack);
	      pipeline.captionStream.reset();
	      if (!options.keepOriginalTimestamps) {
	        videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;
	      }
	    }

	    if (pipeline.timedMetadataTimestampRolloverStream) {
	      pipeline.timedMetadataTimestampRolloverStream.discontinuity();
	    }
	  };

	  this.setAudioAppendStart = function (timestamp) {
	    if (audioTrack) {
	      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);
	    }
	  };

	  this.alignGopsWith = function (gopsToAlignWith) {
	    if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {
	      this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);
	    }
	  };

	  // feed incoming data to the front of the parsing pipeline
	  this.push = function (data) {
	    if (hasFlushed) {
	      var isAac = isLikelyAacData$1(data);

	      if (isAac && this.transmuxPipeline_.type !== 'aac') {
	        this.setupAacPipeline();
	      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {
	        this.setupTsPipeline();
	      }
	      hasFlushed = false;
	    }
	    this.transmuxPipeline_.headOfPipeline.push(data);
	  };

	  // flush any buffered data
	  this.flush = function () {
	    hasFlushed = true;
	    // Start at the top of the pipeline and flush all pending work
	    this.transmuxPipeline_.headOfPipeline.flush();
	  };

	  // Caption data has to be reset when seeking outside buffered range
	  this.resetCaptions = function () {
	    if (this.transmuxPipeline_.captionStream) {
	      this.transmuxPipeline_.captionStream.reset();
	    }
	  };
	};
	_Transmuxer.prototype = new stream();

	var transmuxer = {
	  Transmuxer: _Transmuxer,
	  VideoSegmentStream: _VideoSegmentStream,
	  AudioSegmentStream: _AudioSegmentStream,
	  AUDIO_PROPERTIES: AUDIO_PROPERTIES,
	  VIDEO_PROPERTIES: VIDEO_PROPERTIES
	};

	var inspectMp4,
	    _textifyMp,
	    parseType$2 = probe.parseType,
	    parseMp4Date = function parseMp4Date(seconds) {
	  return new Date(seconds * 1000 - 2082844800000);
	},
	    parseSampleFlags = function parseSampleFlags(flags) {
	  return {
	    isLeading: (flags[0] & 0x0c) >>> 2,
	    dependsOn: flags[0] & 0x03,
	    isDependedOn: (flags[1] & 0xc0) >>> 6,
	    hasRedundancy: (flags[1] & 0x30) >>> 4,
	    paddingValue: (flags[1] & 0x0e) >>> 1,
	    isNonSyncSample: flags[1] & 0x01,
	    degradationPriority: flags[2] << 8 | flags[3]
	  };
	},
	    nalParse = function nalParse(avcStream) {
	  var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),
	      result = [],
	      i,
	      length;
	  for (i = 0; i + 4 < avcStream.length; i += length) {
	    length = avcView.getUint32(i);
	    i += 4;

	    // bail if this doesn't appear to be an H264 stream
	    if (length <= 0) {
	      result.push('<span style=\'color:red;\'>MALFORMED DATA</span>');
	      continue;
	    }

	    switch (avcStream[i] & 0x1F) {
	      case 0x01:
	        result.push('slice_layer_without_partitioning_rbsp');
	        break;
	      case 0x05:
	        result.push('slice_layer_without_partitioning_rbsp_idr');
	        break;
	      case 0x06:
	        result.push('sei_rbsp');
	        break;
	      case 0x07:
	        result.push('seq_parameter_set_rbsp');
	        break;
	      case 0x08:
	        result.push('pic_parameter_set_rbsp');
	        break;
	      case 0x09:
	        result.push('access_unit_delimiter_rbsp');
	        break;
	      default:
	        result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);
	        break;
	    }
	  }
	  return result;
	},


	// registry of handlers for individual mp4 box types
	parse$1 = {
	  // codingname, not a first-class box type. stsd entries share the
	  // same format as real boxes so the parsing infrastructure can be
	  // shared
	  avc1: function avc1(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	    return {
	      dataReferenceIndex: view.getUint16(6),
	      width: view.getUint16(24),
	      height: view.getUint16(26),
	      horizresolution: view.getUint16(28) + view.getUint16(30) / 16,
	      vertresolution: view.getUint16(32) + view.getUint16(34) / 16,
	      frameCount: view.getUint16(40),
	      depth: view.getUint16(74),
	      config: inspectMp4(data.subarray(78, data.byteLength))
	    };
	  },
	  avcC: function avcC(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      configurationVersion: data[0],
	      avcProfileIndication: data[1],
	      profileCompatibility: data[2],
	      avcLevelIndication: data[3],
	      lengthSizeMinusOne: data[4] & 0x03,
	      sps: [],
	      pps: []
	    },
	        numOfSequenceParameterSets = data[5] & 0x1f,
	        numOfPictureParameterSets,
	        nalSize,
	        offset,
	        i;

	    // iterate past any SPSs
	    offset = 6;
	    for (i = 0; i < numOfSequenceParameterSets; i++) {
	      nalSize = view.getUint16(offset);
	      offset += 2;
	      result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
	      offset += nalSize;
	    }
	    // iterate past any PPSs
	    numOfPictureParameterSets = data[offset];
	    offset++;
	    for (i = 0; i < numOfPictureParameterSets; i++) {
	      nalSize = view.getUint16(offset);
	      offset += 2;
	      result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
	      offset += nalSize;
	    }
	    return result;
	  },
	  btrt: function btrt(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	    return {
	      bufferSizeDB: view.getUint32(0),
	      maxBitrate: view.getUint32(4),
	      avgBitrate: view.getUint32(8)
	    };
	  },
	  esds: function esds(data) {
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      esId: data[6] << 8 | data[7],
	      streamPriority: data[8] & 0x1f,
	      decoderConfig: {
	        objectProfileIndication: data[11],
	        streamType: data[12] >>> 2 & 0x3f,
	        bufferSize: data[13] << 16 | data[14] << 8 | data[15],
	        maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],
	        avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],
	        decoderConfigDescriptor: {
	          tag: data[24],
	          length: data[25],
	          audioObjectType: data[26] >>> 3 & 0x1f,
	          samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,
	          channelConfiguration: data[27] >>> 3 & 0x0f
	        }
	      }
	    };
	  },
	  ftyp: function ftyp(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      majorBrand: parseType$2(data.subarray(0, 4)),
	      minorVersion: view.getUint32(4),
	      compatibleBrands: []
	    },
	        i = 8;
	    while (i < data.byteLength) {
	      result.compatibleBrands.push(parseType$2(data.subarray(i, i + 4)));
	      i += 4;
	    }
	    return result;
	  },
	  dinf: function dinf(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  dref: function dref(data) {
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      dataReferences: inspectMp4(data.subarray(8))
	    };
	  },
	  hdlr: function hdlr(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      version: view.getUint8(0),
	      flags: new Uint8Array(data.subarray(1, 4)),
	      handlerType: parseType$2(data.subarray(8, 12)),
	      name: ''
	    },
	        i = 8;

	    // parse out the name field
	    for (i = 24; i < data.byteLength; i++) {
	      if (data[i] === 0x00) {
	        // the name field is null-terminated
	        i++;
	        break;
	      }
	      result.name += String.fromCharCode(data[i]);
	    }
	    // decode UTF-8 to javascript's internal representation
	    // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html
	    result.name = decodeURIComponent(escape(result.name));

	    return result;
	  },
	  mdat: function mdat(data) {
	    return {
	      byteLength: data.byteLength,
	      nals: nalParse(data)
	    };
	  },
	  mdhd: function mdhd(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        i = 4,
	        language,
	        result = {
	      version: view.getUint8(0),
	      flags: new Uint8Array(data.subarray(1, 4)),
	      language: ''
	    };
	    if (result.version === 1) {
	      i += 4;
	      result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	      i += 8;
	      result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	      i += 4;
	      result.timescale = view.getUint32(i);
	      i += 8;
	      result.duration = view.getUint32(i); // truncating top 4 bytes
	    } else {
	      result.creationTime = parseMp4Date(view.getUint32(i));
	      i += 4;
	      result.modificationTime = parseMp4Date(view.getUint32(i));
	      i += 4;
	      result.timescale = view.getUint32(i);
	      i += 4;
	      result.duration = view.getUint32(i);
	    }
	    i += 4;
	    // language is stored as an ISO-639-2/T code in an array of three 5-bit fields
	    // each field is the packed difference between its ASCII value and 0x60
	    language = view.getUint16(i);
	    result.language += String.fromCharCode((language >> 10) + 0x60);
	    result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);
	    result.language += String.fromCharCode((language & 0x1f) + 0x60);

	    return result;
	  },
	  mdia: function mdia(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  mfhd: function mfhd(data) {
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]
	    };
	  },
	  minf: function minf(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  // codingname, not a first-class box type. stsd entries share the
	  // same format as real boxes so the parsing infrastructure can be
	  // shared
	  mp4a: function mp4a(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      // 6 bytes reserved
	      dataReferenceIndex: view.getUint16(6),
	      // 4 + 4 bytes reserved
	      channelcount: view.getUint16(16),
	      samplesize: view.getUint16(18),
	      // 2 bytes pre_defined
	      // 2 bytes reserved
	      samplerate: view.getUint16(24) + view.getUint16(26) / 65536
	    };

	    // if there are more bytes to process, assume this is an ISO/IEC
	    // 14496-14 MP4AudioSampleEntry and parse the ESDBox
	    if (data.byteLength > 28) {
	      result.streamDescriptor = inspectMp4(data.subarray(28))[0];
	    }
	    return result;
	  },
	  moof: function moof(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  moov: function moov(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  mvex: function mvex(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  mvhd: function mvhd(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        i = 4,
	        result = {
	      version: view.getUint8(0),
	      flags: new Uint8Array(data.subarray(1, 4))
	    };

	    if (result.version === 1) {
	      i += 4;
	      result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	      i += 8;
	      result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	      i += 4;
	      result.timescale = view.getUint32(i);
	      i += 8;
	      result.duration = view.getUint32(i); // truncating top 4 bytes
	    } else {
	      result.creationTime = parseMp4Date(view.getUint32(i));
	      i += 4;
	      result.modificationTime = parseMp4Date(view.getUint32(i));
	      i += 4;
	      result.timescale = view.getUint32(i);
	      i += 4;
	      result.duration = view.getUint32(i);
	    }
	    i += 4;

	    // convert fixed-point, base 16 back to a number
	    result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;
	    i += 4;
	    result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
	    i += 2;
	    i += 2;
	    i += 2 * 4;
	    result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
	    i += 9 * 4;
	    i += 6 * 4;
	    result.nextTrackId = view.getUint32(i);
	    return result;
	  },
	  pdin: function pdin(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	    return {
	      version: view.getUint8(0),
	      flags: new Uint8Array(data.subarray(1, 4)),
	      rate: view.getUint32(4),
	      initialDelay: view.getUint32(8)
	    };
	  },
	  sdtp: function sdtp(data) {
	    var result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      samples: []
	    },
	        i;

	    for (i = 4; i < data.byteLength; i++) {
	      result.samples.push({
	        dependsOn: (data[i] & 0x30) >> 4,
	        isDependedOn: (data[i] & 0x0c) >> 2,
	        hasRedundancy: data[i] & 0x03
	      });
	    }
	    return result;
	  },
	  sidx: function sidx(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      references: [],
	      referenceId: view.getUint32(4),
	      timescale: view.getUint32(8),
	      earliestPresentationTime: view.getUint32(12),
	      firstOffset: view.getUint32(16)
	    },
	        referenceCount = view.getUint16(22),
	        i;

	    for (i = 24; referenceCount; i += 12, referenceCount--) {
	      result.references.push({
	        referenceType: (data[i] & 0x80) >>> 7,
	        referencedSize: view.getUint32(i) & 0x7FFFFFFF,
	        subsegmentDuration: view.getUint32(i + 4),
	        startsWithSap: !!(data[i + 8] & 0x80),
	        sapType: (data[i + 8] & 0x70) >>> 4,
	        sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF
	      });
	    }

	    return result;
	  },
	  smhd: function smhd(data) {
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      balance: data[4] + data[5] / 256
	    };
	  },
	  stbl: function stbl(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  stco: function stco(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      chunkOffsets: []
	    },
	        entryCount = view.getUint32(4),
	        i;
	    for (i = 8; entryCount; i += 4, entryCount--) {
	      result.chunkOffsets.push(view.getUint32(i));
	    }
	    return result;
	  },
	  stsc: function stsc(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        entryCount = view.getUint32(4),
	        result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      sampleToChunks: []
	    },
	        i;
	    for (i = 8; entryCount; i += 12, entryCount--) {
	      result.sampleToChunks.push({
	        firstChunk: view.getUint32(i),
	        samplesPerChunk: view.getUint32(i + 4),
	        sampleDescriptionIndex: view.getUint32(i + 8)
	      });
	    }
	    return result;
	  },
	  stsd: function stsd(data) {
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      sampleDescriptions: inspectMp4(data.subarray(8))
	    };
	  },
	  stsz: function stsz(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      sampleSize: view.getUint32(4),
	      entries: []
	    },
	        i;
	    for (i = 12; i < data.byteLength; i += 4) {
	      result.entries.push(view.getUint32(i));
	    }
	    return result;
	  },
	  stts: function stts(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      timeToSamples: []
	    },
	        entryCount = view.getUint32(4),
	        i;

	    for (i = 8; entryCount; i += 8, entryCount--) {
	      result.timeToSamples.push({
	        sampleCount: view.getUint32(i),
	        sampleDelta: view.getUint32(i + 4)
	      });
	    }
	    return result;
	  },
	  styp: function styp(data) {
	    return parse$1.ftyp(data);
	  },
	  tfdt: function tfdt(data) {
	    var result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]
	    };
	    if (result.version === 1) {
	      result.baseMediaDecodeTime *= Math.pow(2, 32);
	      result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];
	    }
	    return result;
	  },
	  tfhd: function tfhd(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      trackId: view.getUint32(4)
	    },
	        baseDataOffsetPresent = result.flags[2] & 0x01,
	        sampleDescriptionIndexPresent = result.flags[2] & 0x02,
	        defaultSampleDurationPresent = result.flags[2] & 0x08,
	        defaultSampleSizePresent = result.flags[2] & 0x10,
	        defaultSampleFlagsPresent = result.flags[2] & 0x20,
	        durationIsEmpty = result.flags[0] & 0x010000,
	        defaultBaseIsMoof = result.flags[0] & 0x020000,
	        i;

	    i = 8;
	    if (baseDataOffsetPresent) {
	      i += 4; // truncate top 4 bytes
	      // FIXME: should we read the full 64 bits?
	      result.baseDataOffset = view.getUint32(12);
	      i += 4;
	    }
	    if (sampleDescriptionIndexPresent) {
	      result.sampleDescriptionIndex = view.getUint32(i);
	      i += 4;
	    }
	    if (defaultSampleDurationPresent) {
	      result.defaultSampleDuration = view.getUint32(i);
	      i += 4;
	    }
	    if (defaultSampleSizePresent) {
	      result.defaultSampleSize = view.getUint32(i);
	      i += 4;
	    }
	    if (defaultSampleFlagsPresent) {
	      result.defaultSampleFlags = view.getUint32(i);
	    }
	    if (durationIsEmpty) {
	      result.durationIsEmpty = true;
	    }
	    if (!baseDataOffsetPresent && defaultBaseIsMoof) {
	      result.baseDataOffsetIsMoof = true;
	    }
	    return result;
	  },
	  tkhd: function tkhd(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
	        i = 4,
	        result = {
	      version: view.getUint8(0),
	      flags: new Uint8Array(data.subarray(1, 4))
	    };
	    if (result.version === 1) {
	      i += 4;
	      result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	      i += 8;
	      result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
	      i += 4;
	      result.trackId = view.getUint32(i);
	      i += 4;
	      i += 8;
	      result.duration = view.getUint32(i); // truncating top 4 bytes
	    } else {
	      result.creationTime = parseMp4Date(view.getUint32(i));
	      i += 4;
	      result.modificationTime = parseMp4Date(view.getUint32(i));
	      i += 4;
	      result.trackId = view.getUint32(i);
	      i += 4;
	      i += 4;
	      result.duration = view.getUint32(i);
	    }
	    i += 4;
	    i += 2 * 4;
	    result.layer = view.getUint16(i);
	    i += 2;
	    result.alternateGroup = view.getUint16(i);
	    i += 2;
	    // convert fixed-point, base 16 back to a number
	    result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
	    i += 2;
	    i += 2;
	    result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
	    i += 9 * 4;
	    result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;
	    i += 4;
	    result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;
	    return result;
	  },
	  traf: function traf(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  trak: function trak(data) {
	    return {
	      boxes: inspectMp4(data)
	    };
	  },
	  trex: function trex(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      trackId: view.getUint32(4),
	      defaultSampleDescriptionIndex: view.getUint32(8),
	      defaultSampleDuration: view.getUint32(12),
	      defaultSampleSize: view.getUint32(16),
	      sampleDependsOn: data[20] & 0x03,
	      sampleIsDependedOn: (data[21] & 0xc0) >> 6,
	      sampleHasRedundancy: (data[21] & 0x30) >> 4,
	      samplePaddingValue: (data[21] & 0x0e) >> 1,
	      sampleIsDifferenceSample: !!(data[21] & 0x01),
	      sampleDegradationPriority: view.getUint16(22)
	    };
	  },
	  trun: function trun(data) {
	    var result = {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      samples: []
	    },
	        view = new DataView(data.buffer, data.byteOffset, data.byteLength),

	    // Flag interpretation
	    dataOffsetPresent = result.flags[2] & 0x01,
	        // compare with 2nd byte of 0x1
	    firstSampleFlagsPresent = result.flags[2] & 0x04,
	        // compare with 2nd byte of 0x4
	    sampleDurationPresent = result.flags[1] & 0x01,
	        // compare with 2nd byte of 0x100
	    sampleSizePresent = result.flags[1] & 0x02,
	        // compare with 2nd byte of 0x200
	    sampleFlagsPresent = result.flags[1] & 0x04,
	        // compare with 2nd byte of 0x400
	    sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,
	        // compare with 2nd byte of 0x800
	    sampleCount = view.getUint32(4),
	        offset = 8,
	        sample;

	    if (dataOffsetPresent) {
	      // 32 bit signed integer
	      result.dataOffset = view.getInt32(offset);
	      offset += 4;
	    }

	    // Overrides the flags for the first sample only. The order of
	    // optional values will be: duration, size, compositionTimeOffset
	    if (firstSampleFlagsPresent && sampleCount) {
	      sample = {
	        flags: parseSampleFlags(data.subarray(offset, offset + 4))
	      };
	      offset += 4;
	      if (sampleDurationPresent) {
	        sample.duration = view.getUint32(offset);
	        offset += 4;
	      }
	      if (sampleSizePresent) {
	        sample.size = view.getUint32(offset);
	        offset += 4;
	      }
	      if (sampleCompositionTimeOffsetPresent) {
	        // Note: this should be a signed int if version is 1
	        sample.compositionTimeOffset = view.getUint32(offset);
	        offset += 4;
	      }
	      result.samples.push(sample);
	      sampleCount--;
	    }

	    while (sampleCount--) {
	      sample = {};
	      if (sampleDurationPresent) {
	        sample.duration = view.getUint32(offset);
	        offset += 4;
	      }
	      if (sampleSizePresent) {
	        sample.size = view.getUint32(offset);
	        offset += 4;
	      }
	      if (sampleFlagsPresent) {
	        sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));
	        offset += 4;
	      }
	      if (sampleCompositionTimeOffsetPresent) {
	        // Note: this should be a signed int if version is 1
	        sample.compositionTimeOffset = view.getUint32(offset);
	        offset += 4;
	      }
	      result.samples.push(sample);
	    }
	    return result;
	  },
	  'url ': function url(data) {
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4))
	    };
	  },
	  vmhd: function vmhd(data) {
	    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
	    return {
	      version: data[0],
	      flags: new Uint8Array(data.subarray(1, 4)),
	      graphicsmode: view.getUint16(4),
	      opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])
	    };
	  }
	};

	/**
	 * Return a javascript array of box objects parsed from an ISO base
	 * media file.
	 * @param data {Uint8Array} the binary data of the media to be inspected
	 * @return {array} a javascript array of potentially nested box objects
	 */
	inspectMp4 = function inspectMp4(data) {
	  var i = 0,
	      result = [],
	      view,
	      size,
	      type,
	      end,
	      box;

	  // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API
	  var ab = new ArrayBuffer(data.length);
	  var v = new Uint8Array(ab);
	  for (var z = 0; z < data.length; ++z) {
	    v[z] = data[z];
	  }
	  view = new DataView(ab);

	  while (i < data.byteLength) {
	    // parse box data
	    size = view.getUint32(i);
	    type = parseType$2(data.subarray(i + 4, i + 8));
	    end = size > 1 ? i + size : data.byteLength;

	    // parse type-specific data
	    box = (parse$1[type] || function (data) {
	      return {
	        data: data
	      };
	    })(data.subarray(i + 8, end));
	    box.size = size;
	    box.type = type;

	    // store this box and move to the next
	    result.push(box);
	    i = end;
	  }
	  return result;
	};

	/**
	 * Returns a textual representation of the javascript represtentation
	 * of an MP4 file. You can use it as an alternative to
	 * JSON.stringify() to compare inspected MP4s.
	 * @param inspectedMp4 {array} the parsed array of boxes in an MP4
	 * file
	 * @param depth {number} (optional) the number of ancestor boxes of
	 * the elements of inspectedMp4. Assumed to be zero if unspecified.
	 * @return {string} a text representation of the parsed MP4
	 */
	_textifyMp = function textifyMp4(inspectedMp4, depth) {
	  var indent;
	  depth = depth || 0;
	  indent = new Array(depth * 2 + 1).join(' ');

	  // iterate over all the boxes
	  return inspectedMp4.map(function (box, index) {

	    // list the box type first at the current indentation level
	    return indent + box.type + '\n' +

	    // the type is already included and handle child boxes separately
	    Object.keys(box).filter(function (key) {
	      return key !== 'type' && key !== 'boxes';

	      // output all the box properties
	    }).map(function (key) {
	      var prefix = indent + '  ' + key + ': ',
	          value = box[key];

	      // print out raw bytes as hexademical
	      if (value instanceof Uint8Array || value instanceof Uint32Array) {
	        var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {
	          return ' ' + ('00' + byte.toString(16)).slice(-2);
	        }).join('').match(/.{1,24}/g);
	        if (!bytes) {
	          return prefix + '<>';
	        }
	        if (bytes.length === 1) {
	          return prefix + '<' + bytes.join('').slice(1) + '>';
	        }
	        return prefix + '<\n' + bytes.map(function (line) {
	          return indent + '  ' + line;
	        }).join('\n') + '\n' + indent + '  >';
	      }

	      // stringify generic objects
	      return prefix + JSON.stringify(value, null, 2).split('\n').map(function (line, index) {
	        if (index === 0) {
	          return line;
	        }
	        return indent + '  ' + line;
	      }).join('\n');
	    }).join('\n') + (

	    // recursively textify the child boxes
	    box.boxes ? '\n' + _textifyMp(box.boxes, depth + 1) : '');
	  }).join('\n');
	};

	var mp4Inspector = {
	  inspect: inspectMp4,
	  textify: _textifyMp,
	  parseTfdt: parse$1.tfdt,
	  parseHdlr: parse$1.hdlr,
	  parseTfhd: parse$1.tfhd,
	  parseTrun: parse$1.trun
	};

	var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;
	var CaptionStream$1 = captionStream.CaptionStream;

	/**
	  * Maps an offset in the mdat to a sample based on the the size of the samples.
	  * Assumes that `parseSamples` has been called first.
	  *
	  * @param {Number} offset - The offset into the mdat
	  * @param {Object[]} samples - An array of samples, parsed using `parseSamples`
	  * @return {?Object} The matching sample, or null if no match was found.
	  *
	  * @see ISO-BMFF-12/2015, Section 8.8.8
	 **/
	var mapToSample = function mapToSample(offset, samples) {
	  var approximateOffset = offset;

	  for (var i = 0; i < samples.length; i++) {
	    var sample = samples[i];

	    if (approximateOffset < sample.size) {
	      return sample;
	    }

	    approximateOffset -= sample.size;
	  }

	  return null;
	};

	/**
	  * Finds SEI nal units contained in a Media Data Box.
	  * Assumes that `parseSamples` has been called first.
	  *
	  * @param {Uint8Array} avcStream - The bytes of the mdat
	  * @param {Object[]} samples - The samples parsed out by `parseSamples`
	  * @param {Number} trackId - The trackId of this video track
	  * @return {Object[]} seiNals - the parsed SEI NALUs found.
	  *   The contents of the seiNal should match what is expected by
	  *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)
	  *
	  * @see ISO-BMFF-12/2015, Section 8.1.1
	  * @see Rec. ITU-T H.264, 7.3.2.3.1
	 **/
	var findSeiNals = function findSeiNals(avcStream, samples, trackId) {
	  var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),
	      result = [],
	      seiNal,
	      i,
	      length,
	      lastMatchedSample;

	  for (i = 0; i + 4 < avcStream.length; i += length) {
	    length = avcView.getUint32(i);
	    i += 4;

	    // Bail if this doesn't appear to be an H264 stream
	    if (length <= 0) {
	      continue;
	    }

	    switch (avcStream[i] & 0x1F) {
	      case 0x06:
	        var data = avcStream.subarray(i + 1, i + 1 + length);
	        var matchingSample = mapToSample(i, samples);

	        seiNal = {
	          nalUnitType: 'sei_rbsp',
	          size: length,
	          data: data,
	          escapedRBSP: discardEmulationPreventionBytes$1(data),
	          trackId: trackId
	        };

	        if (matchingSample) {
	          seiNal.pts = matchingSample.pts;
	          seiNal.dts = matchingSample.dts;
	          lastMatchedSample = matchingSample;
	        } else {
	          // If a matching sample cannot be found, use the last
	          // sample's values as they should be as close as possible
	          seiNal.pts = lastMatchedSample.pts;
	          seiNal.dts = lastMatchedSample.dts;
	        }

	        result.push(seiNal);
	        break;
	      default:
	        break;
	    }
	  }

	  return result;
	};

	/**
	  * Parses sample information out of Track Run Boxes and calculates
	  * the absolute presentation and decode timestamps of each sample.
	  *
	  * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed
	  * @param {Number} baseMediaDecodeTime - base media decode time from tfdt
	      @see ISO-BMFF-12/2015, Section 8.8.12
	  * @param {Object} tfhd - The parsed Track Fragment Header
	  *   @see inspect.parseTfhd
	  * @return {Object[]} the parsed samples
	  *
	  * @see ISO-BMFF-12/2015, Section 8.8.8
	 **/
	var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {
	  var currentDts = baseMediaDecodeTime;
	  var defaultSampleDuration = tfhd.defaultSampleDuration || 0;
	  var defaultSampleSize = tfhd.defaultSampleSize || 0;
	  var trackId = tfhd.trackId;
	  var allSamples = [];

	  truns.forEach(function (trun) {
	    // Note: We currently do not parse the sample table as well
	    // as the trun. It's possible some sources will require this.
	    // moov > trak > mdia > minf > stbl
	    var trackRun = mp4Inspector.parseTrun(trun);
	    var samples = trackRun.samples;

	    samples.forEach(function (sample) {
	      if (sample.duration === undefined) {
	        sample.duration = defaultSampleDuration;
	      }
	      if (sample.size === undefined) {
	        sample.size = defaultSampleSize;
	      }
	      sample.trackId = trackId;
	      sample.dts = currentDts;
	      if (sample.compositionTimeOffset === undefined) {
	        sample.compositionTimeOffset = 0;
	      }
	      sample.pts = currentDts + sample.compositionTimeOffset;

	      currentDts += sample.duration;
	    });

	    allSamples = allSamples.concat(samples);
	  });

	  return allSamples;
	};

	/**
	  * Parses out caption nals from an FMP4 segment's video tracks.
	  *
	  * @param {Uint8Array} segment - The bytes of a single segment
	  * @param {Number} videoTrackId - The trackId of a video track in the segment
	  * @return {Object.<Number, Object[]>} A mapping of video trackId to
	  *   a list of seiNals found in that track
	 **/
	var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {
	  // To get the samples
	  var trafs = probe.findBox(segment, ['moof', 'traf']);
	  // To get SEI NAL units
	  var mdats = probe.findBox(segment, ['mdat']);
	  var captionNals = {};
	  var mdatTrafPairs = [];

	  // Pair up each traf with a mdat as moofs and mdats are in pairs
	  mdats.forEach(function (mdat, index) {
	    var matchingTraf = trafs[index];
	    mdatTrafPairs.push({
	      mdat: mdat,
	      traf: matchingTraf
	    });
	  });

	  mdatTrafPairs.forEach(function (pair) {
	    var mdat = pair.mdat;
	    var traf = pair.traf;
	    var tfhd = probe.findBox(traf, ['tfhd']);
	    // Exactly 1 tfhd per traf
	    var headerInfo = mp4Inspector.parseTfhd(tfhd[0]);
	    var trackId = headerInfo.trackId;
	    var tfdt = probe.findBox(traf, ['tfdt']);
	    // Either 0 or 1 tfdt per traf
	    var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;
	    var truns = probe.findBox(traf, ['trun']);
	    var samples;
	    var seiNals;

	    // Only parse video data for the chosen video track
	    if (videoTrackId === trackId && truns.length > 0) {
	      samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);

	      seiNals = findSeiNals(mdat, samples, trackId);

	      if (!captionNals[trackId]) {
	        captionNals[trackId] = [];
	      }

	      captionNals[trackId] = captionNals[trackId].concat(seiNals);
	    }
	  });

	  return captionNals;
	};

	/**
	  * Parses out inband captions from an MP4 container and returns
	  * caption objects that can be used by WebVTT and the TextTrack API.
	  * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue
	  * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack
	  * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first
	  *
	  * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
	  * @param {Number} trackId - The id of the video track to parse
	  * @param {Number} timescale - The timescale for the video track from the init segment
	  *
	  * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks
	  * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds
	  * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds
	  * @return {String} parsedCaptions[].text - The visible content of the caption
	 **/
	var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {
	  var seiNals;

	  if (!trackId) {
	    return null;
	  }

	  seiNals = parseCaptionNals(segment, trackId);

	  return {
	    seiNals: seiNals[trackId],
	    timescale: timescale
	  };
	};

	/**
	  * Converts SEI NALUs into captions that can be used by video.js
	 **/
	var CaptionParser = function CaptionParser() {
	  var isInitialized = false;
	  var captionStream$$1;

	  // Stores segments seen before trackId and timescale are set
	  var segmentCache;
	  // Stores video track ID of the track being parsed
	  var trackId;
	  // Stores the timescale of the track being parsed
	  var timescale;
	  // Stores captions parsed so far
	  var parsedCaptions;

	  /**
	    * A method to indicate whether a CaptionParser has been initalized
	    * @returns {Boolean}
	   **/
	  this.isInitialized = function () {
	    return isInitialized;
	  };

	  /**
	    * Initializes the underlying CaptionStream, SEI NAL parsing
	    * and management, and caption collection
	   **/
	  this.init = function () {
	    captionStream$$1 = new CaptionStream$1();
	    isInitialized = true;

	    // Collect dispatched captions
	    captionStream$$1.on('data', function (event) {
	      // Convert to seconds in the source's timescale
	      event.startTime = event.startPts / timescale;
	      event.endTime = event.endPts / timescale;

	      parsedCaptions.captions.push(event);
	      parsedCaptions.captionStreams[event.stream] = true;
	    });
	  };

	  /**
	    * Determines if a new video track will be selected
	    * or if the timescale changed
	    * @return {Boolean}
	   **/
	  this.isNewInit = function (videoTrackIds, timescales) {
	    if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {
	      return false;
	    }

	    return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];
	  };

	  /**
	    * Parses out SEI captions and interacts with underlying
	    * CaptionStream to return dispatched captions
	    *
	    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
	    * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment
	    * @param {Object.<Number, Number>} timescales - The timescales found in the init segment
	    * @see parseEmbeddedCaptions
	    * @see m2ts/caption-stream.js
	   **/
	  this.parse = function (segment, videoTrackIds, timescales) {
	    var parsedData;

	    if (!this.isInitialized()) {
	      return null;

	      // This is not likely to be a video segment
	    } else if (!videoTrackIds || !timescales) {
	      return null;
	    } else if (this.isNewInit(videoTrackIds, timescales)) {
	      // Use the first video track only as there is no
	      // mechanism to switch to other video tracks
	      trackId = videoTrackIds[0];
	      timescale = timescales[trackId];

	      // If an init segment has not been seen yet, hold onto segment
	      // data until we have one
	    } else if (!trackId || !timescale) {
	      segmentCache.push(segment);
	      return null;
	    }

	    // Now that a timescale and trackId is set, parse cached segments
	    while (segmentCache.length > 0) {
	      var cachedSegment = segmentCache.shift();

	      this.parse(cachedSegment, videoTrackIds, timescales);
	    }

	    parsedData = parseEmbeddedCaptions(segment, trackId, timescale);

	    if (parsedData === null || !parsedData.seiNals) {
	      return null;
	    }

	    this.pushNals(parsedData.seiNals);
	    // Force the parsed captions to be dispatched
	    this.flushStream();

	    return parsedCaptions;
	  };

	  /**
	    * Pushes SEI NALUs onto CaptionStream
	    * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`
	    * Assumes that `parseCaptionNals` has been called first
	    * @see m2ts/caption-stream.js
	    **/
	  this.pushNals = function (nals) {
	    if (!this.isInitialized() || !nals || nals.length === 0) {
	      return null;
	    }

	    nals.forEach(function (nal) {
	      captionStream$$1.push(nal);
	    });
	  };

	  /**
	    * Flushes underlying CaptionStream to dispatch processed, displayable captions
	    * @see m2ts/caption-stream.js
	   **/
	  this.flushStream = function () {
	    if (!this.isInitialized()) {
	      return null;
	    }

	    captionStream$$1.flush();
	  };

	  /**
	    * Reset caption buckets for new data
	   **/
	  this.clearParsedCaptions = function () {
	    parsedCaptions.captions = [];
	    parsedCaptions.captionStreams = {};
	  };

	  /**
	    * Resets underlying CaptionStream
	    * @see m2ts/caption-stream.js
	   **/
	  this.resetCaptionStream = function () {
	    if (!this.isInitialized()) {
	      return null;
	    }

	    captionStream$$1.reset();
	  };

	  /**
	    * Convenience method to clear all captions flushed from the
	    * CaptionStream and still being parsed
	    * @see m2ts/caption-stream.js
	   **/
	  this.clearAllCaptions = function () {
	    this.clearParsedCaptions();
	    this.resetCaptionStream();
	  };

	  /**
	    * Reset caption parser
	   **/
	  this.reset = function () {
	    segmentCache = [];
	    trackId = null;
	    timescale = null;

	    if (!parsedCaptions) {
	      parsedCaptions = {
	        captions: [],
	        // CC1, CC2, CC3, CC4
	        captionStreams: {}
	      };
	    } else {
	      this.clearParsedCaptions();
	    }

	    this.resetCaptionStream();
	  };

	  this.reset();
	};

	var captionParser = CaptionParser;

	var mp4 = {
	  generator: mp4Generator,
	  probe: probe,
	  Transmuxer: transmuxer.Transmuxer,
	  AudioSegmentStream: transmuxer.AudioSegmentStream,
	  VideoSegmentStream: transmuxer.VideoSegmentStream,
	  CaptionParser: captionParser
	};
	var mp4_6 = mp4.CaptionParser;

	/**
	 * @file segment-loader.js
	 */

	// in ms
	var CHECK_BUFFER_DELAY = 500;

	/**
	 * Determines if we should call endOfStream on the media source based
	 * on the state of the buffer or if appened segment was the final
	 * segment in the playlist.
	 *
	 * @param {Object} playlist a media playlist object
	 * @param {Object} mediaSource the MediaSource object
	 * @param {Number} segmentIndex the index of segment we last appended
	 * @returns {Boolean} do we need to call endOfStream on the MediaSource
	 */
	var detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {
	  if (!playlist || !mediaSource) {
	    return false;
	  }

	  var segments = playlist.segments;

	  // determine a few boolean values to help make the branch below easier
	  // to read
	  var appendedLastSegment = segmentIndex === segments.length;

	  // if we've buffered to the end of the video, we need to call endOfStream
	  // so that MediaSources can trigger the `ended` event when it runs out of
	  // buffered data instead of waiting for me
	  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;
	};

	var finite = function finite(num) {
	  return typeof num === 'number' && isFinite(num);
	};

	var illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {
	  // Although these checks should most likely cover non 'main' types, for now it narrows
	  // the scope of our checks.
	  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {
	    return null;
	  }

	  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {
	    return 'Neither audio nor video found in segment.';
	  }

	  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {
	    return 'Only audio found in segment when we expected video.' + ' We can\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';
	  }

	  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {
	    return 'Video found in segment when we expected only audio.' + ' We can\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';
	  }

	  return null;
	};

	/**
	 * Calculates a time value that is safe to remove from the back buffer without interupting
	 * playback.
	 *
	 * @param {TimeRange} seekable
	 *        The current seekable range
	 * @param {Number} currentTime
	 *        The current time of the player
	 * @param {Number} targetDuration
	 *        The target duration of the current playlist
	 * @return {Number}
	 *         Time that is safe to remove from the back buffer without interupting playback
	 */
	var safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable$$1, currentTime, targetDuration) {
	  var removeToTime = void 0;

	  if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {
	    // If we have a seekable range use that as the limit for what can be removed safely
	    removeToTime = seekable$$1.start(0);
	  } else {
	    // otherwise remove anything older than 30 seconds before the current play head
	    removeToTime = currentTime - 30;
	  }

	  // Don't allow removing from the buffer within target duration of current time
	  // to avoid the possibility of removing the GOP currently being played which could
	  // cause playback stalls.
	  return Math.min(removeToTime, currentTime - targetDuration);
	};

	var segmentInfoString = function segmentInfoString(segmentInfo) {
	  var _segmentInfo$segment = segmentInfo.segment,
	      start = _segmentInfo$segment.start,
	      end = _segmentInfo$segment.end,
	      _segmentInfo$playlist = segmentInfo.playlist,
	      seq = _segmentInfo$playlist.mediaSequence,
	      id = _segmentInfo$playlist.id,
	      _segmentInfo$playlist2 = _segmentInfo$playlist.segments,
	      segments = _segmentInfo$playlist2 === undefined ? [] : _segmentInfo$playlist2,
	      index = segmentInfo.mediaIndex,
	      timeline = segmentInfo.timeline;


	  return ['appending [' + index + '] of [' + seq + ', ' + (seq + segments.length) + '] from playlist [' + id + ']', '[' + start + ' => ' + end + '] in timeline [' + timeline + ']'].join(' ');
	};

	/**
	 * An object that manages segment loading and appending.
	 *
	 * @class SegmentLoader
	 * @param {Object} options required and optional options
	 * @extends videojs.EventTarget
	 */

	var SegmentLoader = function (_videojs$EventTarget) {
	  inherits$1(SegmentLoader, _videojs$EventTarget);

	  function SegmentLoader(settings) {
	    classCallCheck$1(this, SegmentLoader);

	    // check pre-conditions
	    var _this = possibleConstructorReturn$1(this, (SegmentLoader.__proto__ || Object.getPrototypeOf(SegmentLoader)).call(this));

	    if (!settings) {
	      throw new TypeError('Initialization settings are required');
	    }
	    if (typeof settings.currentTime !== 'function') {
	      throw new TypeError('No currentTime getter specified');
	    }
	    if (!settings.mediaSource) {
	      throw new TypeError('No MediaSource specified');
	    }
	    // public properties
	    _this.bandwidth = settings.bandwidth;
	    _this.throughput = { rate: 0, count: 0 };
	    _this.roundTrip = NaN;
	    _this.resetStats_();
	    _this.mediaIndex = null;

	    // private settings
	    _this.hasPlayed_ = settings.hasPlayed;
	    _this.currentTime_ = settings.currentTime;
	    _this.seekable_ = settings.seekable;
	    _this.seeking_ = settings.seeking;
	    _this.duration_ = settings.duration;
	    _this.mediaSource_ = settings.mediaSource;
	    _this.hls_ = settings.hls;
	    _this.loaderType_ = settings.loaderType;
	    _this.startingMedia_ = void 0;
	    _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;
	    _this.goalBufferLength_ = settings.goalBufferLength;
	    _this.sourceType_ = settings.sourceType;
	    _this.inbandTextTracks_ = settings.inbandTextTracks;
	    _this.state_ = 'INIT';

	    // private instance variables
	    _this.checkBufferTimeout_ = null;
	    _this.error_ = void 0;
	    _this.currentTimeline_ = -1;
	    _this.pendingSegment_ = null;
	    _this.mimeType_ = null;
	    _this.sourceUpdater_ = null;
	    _this.xhrOptions_ = null;

	    // Fragmented mp4 playback
	    _this.activeInitSegmentId_ = null;
	    _this.initSegments_ = {};
	    // Fmp4 CaptionParser
	    _this.captionParser_ = new mp4_6();

	    _this.decrypter_ = settings.decrypter;

	    // Manages the tracking and generation of sync-points, mappings
	    // between a time in the display time and a segment index within
	    // a playlist
	    _this.syncController_ = settings.syncController;
	    _this.syncPoint_ = {
	      segmentIndex: 0,
	      time: 0
	    };

	    _this.syncController_.on('syncinfoupdate', function () {
	      return _this.trigger('syncinfoupdate');
	    });

	    _this.mediaSource_.addEventListener('sourceopen', function () {
	      return _this.ended_ = false;
	    });

	    // ...for determining the fetch location
	    _this.fetchAtBuffer_ = false;

	    _this.logger_ = logger('SegmentLoader[' + _this.loaderType_ + ']');

	    Object.defineProperty(_this, 'state', {
	      get: function get$$1() {
	        return this.state_;
	      },
	      set: function set$$1(newState) {
	        if (newState !== this.state_) {
	          this.logger_(this.state_ + ' -> ' + newState);
	          this.state_ = newState;
	        }
	      }
	    });
	    return _this;
	  }

	  /**
	   * reset all of our media stats
	   *
	   * @private
	   */


	  createClass(SegmentLoader, [{
	    key: 'resetStats_',
	    value: function resetStats_() {
	      this.mediaBytesTransferred = 0;
	      this.mediaRequests = 0;
	      this.mediaRequestsAborted = 0;
	      this.mediaRequestsTimedout = 0;
	      this.mediaRequestsErrored = 0;
	      this.mediaTransferDuration = 0;
	      this.mediaSecondsLoaded = 0;
	    }

	    /**
	     * dispose of the SegmentLoader and reset to the default state
	     */

	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      this.state = 'DISPOSED';
	      this.pause();
	      this.abort_();
	      if (this.sourceUpdater_) {
	        this.sourceUpdater_.dispose();
	      }
	      this.resetStats_();
	      this.captionParser_.reset();
	    }

	    /**
	     * abort anything that is currently doing on with the SegmentLoader
	     * and reset to a default state
	     */

	  }, {
	    key: 'abort',
	    value: function abort() {
	      if (this.state !== 'WAITING') {
	        if (this.pendingSegment_) {
	          this.pendingSegment_ = null;
	        }
	        return;
	      }

	      this.abort_();

	      // We aborted the requests we were waiting on, so reset the loader's state to READY
	      // since we are no longer "waiting" on any requests. XHR callback is not always run
	      // when the request is aborted. This will prevent the loader from being stuck in the
	      // WAITING state indefinitely.
	      this.state = 'READY';

	      // don't wait for buffer check timeouts to begin fetching the
	      // next segment
	      if (!this.paused()) {
	        this.monitorBuffer_();
	      }
	    }

	    /**
	     * abort all pending xhr requests and null any pending segements
	     *
	     * @private
	     */

	  }, {
	    key: 'abort_',
	    value: function abort_() {
	      if (this.pendingSegment_) {
	        this.pendingSegment_.abortRequests();
	      }

	      // clear out the segment being processed
	      this.pendingSegment_ = null;
	    }

	    /**
	     * set an error on the segment loader and null out any pending segements
	     *
	     * @param {Error} error the error to set on the SegmentLoader
	     * @return {Error} the error that was set or that is currently set
	     */

	  }, {
	    key: 'error',
	    value: function error(_error) {
	      if (typeof _error !== 'undefined') {
	        this.error_ = _error;
	      }

	      this.pendingSegment_ = null;
	      return this.error_;
	    }
	  }, {
	    key: 'endOfStream',
	    value: function endOfStream() {
	      this.ended_ = true;
	      this.pause();
	      this.trigger('ended');
	    }

	    /**
	     * Indicates which time ranges are buffered
	     *
	     * @return {TimeRange}
	     *         TimeRange object representing the current buffered ranges
	     */

	  }, {
	    key: 'buffered_',
	    value: function buffered_() {
	      if (!this.sourceUpdater_) {
	        return videojs.createTimeRanges();
	      }

	      return this.sourceUpdater_.buffered();
	    }

	    /**
	     * Gets and sets init segment for the provided map
	     *
	     * @param {Object} map
	     *        The map object representing the init segment to get or set
	     * @param {Boolean=} set
	     *        If true, the init segment for the provided map should be saved
	     * @return {Object}
	     *         map object for desired init segment
	     */

	  }, {
	    key: 'initSegment',
	    value: function initSegment(map) {
	      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      if (!map) {
	        return null;
	      }

	      var id = initSegmentId(map);
	      var storedMap = this.initSegments_[id];

	      if (set$$1 && !storedMap && map.bytes) {
	        this.initSegments_[id] = storedMap = {
	          resolvedUri: map.resolvedUri,
	          byterange: map.byterange,
	          bytes: map.bytes,
	          timescales: map.timescales,
	          videoTrackIds: map.videoTrackIds
	        };
	      }

	      return storedMap || map;
	    }

	    /**
	     * Returns true if all configuration required for loading is present, otherwise false.
	     *
	     * @return {Boolean} True if the all configuration is ready for loading
	     * @private
	     */

	  }, {
	    key: 'couldBeginLoading_',
	    value: function couldBeginLoading_() {
	      return this.playlist_ && (
	      // the source updater is created when init_ is called, so either having a
	      // source updater or being in the INIT state with a mimeType is enough
	      // to say we have all the needed configuration to start loading.
	      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();
	    }

	    /**
	     * load a playlist and start to fill the buffer
	     */

	  }, {
	    key: 'load',
	    value: function load() {
	      // un-pause
	      this.monitorBuffer_();

	      // if we don't have a playlist yet, keep waiting for one to be
	      // specified
	      if (!this.playlist_) {
	        return;
	      }

	      // not sure if this is the best place for this
	      this.syncController_.setDateTimeMapping(this.playlist_);

	      // if all the configuration is ready, initialize and begin loading
	      if (this.state === 'INIT' && this.couldBeginLoading_()) {
	        return this.init_();
	      }

	      // if we're in the middle of processing a segment already, don't
	      // kick off an additional segment request
	      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {
	        return;
	      }

	      this.state = 'READY';
	    }

	    /**
	     * Once all the starting parameters have been specified, begin
	     * operation. This method should only be invoked from the INIT
	     * state.
	     *
	     * @private
	     */

	  }, {
	    key: 'init_',
	    value: function init_() {
	      this.state = 'READY';
	      this.sourceUpdater_ = new SourceUpdater(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_);
	      this.resetEverything();
	      return this.monitorBuffer_();
	    }

	    /**
	     * set a playlist on the segment loader
	     *
	     * @param {PlaylistLoader} media the playlist to set on the segment loader
	     */

	  }, {
	    key: 'playlist',
	    value: function playlist(newPlaylist) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      if (!newPlaylist) {
	        return;
	      }

	      var oldPlaylist = this.playlist_;
	      var segmentInfo = this.pendingSegment_;

	      this.playlist_ = newPlaylist;
	      this.xhrOptions_ = options;

	      // when we haven't started playing yet, the start of a live playlist
	      // is always our zero-time so force a sync update each time the playlist
	      // is refreshed from the server
	      if (!this.hasPlayed_()) {
	        newPlaylist.syncInfo = {
	          mediaSequence: newPlaylist.mediaSequence,
	          time: 0
	        };
	      }

	      var oldId = oldPlaylist ? oldPlaylist.id : null;

	      this.logger_('playlist update [' + oldId + ' => ' + newPlaylist.id + ']');

	      // in VOD, this is always a rendition switch (or we updated our syncInfo above)
	      // in LIVE, we always want to update with new playlists (including refreshes)
	      this.trigger('syncinfoupdate');

	      // if we were unpaused but waiting for a playlist, start
	      // buffering now
	      if (this.state === 'INIT' && this.couldBeginLoading_()) {
	        return this.init_();
	      }

	      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {
	        if (this.mediaIndex !== null) {
	          // we must "resync" the segment loader when we switch renditions and
	          // the segment loader is already synced to the previous rendition
	          this.resyncLoader();
	        }

	        // the rest of this function depends on `oldPlaylist` being defined
	        return;
	      }

	      // we reloaded the same playlist so we are in a live scenario
	      // and we will likely need to adjust the mediaIndex
	      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;

	      this.logger_('live window shift [' + mediaSequenceDiff + ']');

	      // update the mediaIndex on the SegmentLoader
	      // this is important because we can abort a request and this value must be
	      // equal to the last appended mediaIndex
	      if (this.mediaIndex !== null) {
	        this.mediaIndex -= mediaSequenceDiff;
	      }

	      // update the mediaIndex on the SegmentInfo object
	      // this is important because we will update this.mediaIndex with this value
	      // in `handleUpdateEnd_` after the segment has been successfully appended
	      if (segmentInfo) {
	        segmentInfo.mediaIndex -= mediaSequenceDiff;

	        // we need to update the referenced segment so that timing information is
	        // saved for the new playlist's segment, however, if the segment fell off the
	        // playlist, we can leave the old reference and just lose the timing info
	        if (segmentInfo.mediaIndex >= 0) {
	          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];
	        }
	      }

	      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);
	    }

	    /**
	     * Prevent the loader from fetching additional segments. If there
	     * is a segment request outstanding, it will finish processing
	     * before the loader halts. A segment loader can be unpaused by
	     * calling load().
	     */

	  }, {
	    key: 'pause',
	    value: function pause() {
	      if (this.checkBufferTimeout_) {
	        window_1.clearTimeout(this.checkBufferTimeout_);

	        this.checkBufferTimeout_ = null;
	      }
	    }

	    /**
	     * Returns whether the segment loader is fetching additional
	     * segments when given the opportunity. This property can be
	     * modified through calls to pause() and load().
	     */

	  }, {
	    key: 'paused',
	    value: function paused() {
	      return this.checkBufferTimeout_ === null;
	    }

	    /**
	     * create/set the following mimetype on the SourceBuffer through a
	     * SourceUpdater
	     *
	     * @param {String} mimeType the mime type string to use
	     * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer
	     * is added to the media source
	     */

	  }, {
	    key: 'mimeType',
	    value: function mimeType(_mimeType, sourceBufferEmitter) {
	      if (this.mimeType_) {
	        return;
	      }

	      this.mimeType_ = _mimeType;
	      this.sourceBufferEmitter_ = sourceBufferEmitter;
	      // if we were unpaused but waiting for a sourceUpdater, start
	      // buffering now
	      if (this.state === 'INIT' && this.couldBeginLoading_()) {
	        this.init_();
	      }
	    }

	    /**
	     * Delete all the buffered data and reset the SegmentLoader
	     * @param {Function} [done] an optional callback to be executed when the remove
	     * operation is complete
	     */

	  }, {
	    key: 'resetEverything',
	    value: function resetEverything(done) {
	      this.ended_ = false;
	      this.resetLoader();
	      this.remove(0, this.duration_(), done);
	      // clears fmp4 captions
	      this.captionParser_.clearAllCaptions();
	      this.trigger('reseteverything');
	    }

	    /**
	     * Force the SegmentLoader to resync and start loading around the currentTime instead
	     * of starting at the end of the buffer
	     *
	     * Useful for fast quality changes
	     */

	  }, {
	    key: 'resetLoader',
	    value: function resetLoader() {
	      this.fetchAtBuffer_ = false;
	      this.resyncLoader();
	    }

	    /**
	     * Force the SegmentLoader to restart synchronization and make a conservative guess
	     * before returning to the simple walk-forward method
	     */

	  }, {
	    key: 'resyncLoader',
	    value: function resyncLoader() {
	      this.mediaIndex = null;
	      this.syncPoint_ = null;
	      this.abort();
	    }

	    /**
	     * Remove any data in the source buffer between start and end times
	     * @param {Number} start - the start time of the region to remove from the buffer
	     * @param {Number} end - the end time of the region to remove from the buffer
	     * @param {Function} [done] - an optional callback to be executed when the remove
	     * operation is complete
	     */

	  }, {
	    key: 'remove',
	    value: function remove(start, end, done) {
	      if (this.sourceUpdater_) {
	        this.sourceUpdater_.remove(start, end, done);
	      }
	      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);

	      if (this.inbandTextTracks_) {
	        for (var id in this.inbandTextTracks_) {
	          removeCuesFromTrack(start, end, this.inbandTextTracks_[id]);
	        }
	      }
	    }

	    /**
	     * (re-)schedule monitorBufferTick_ to run as soon as possible
	     *
	     * @private
	     */

	  }, {
	    key: 'monitorBuffer_',
	    value: function monitorBuffer_() {
	      if (this.checkBufferTimeout_) {
	        window_1.clearTimeout(this.checkBufferTimeout_);
	      }

	      this.checkBufferTimeout_ = window_1.setTimeout(this.monitorBufferTick_.bind(this), 1);
	    }

	    /**
	     * As long as the SegmentLoader is in the READY state, periodically
	     * invoke fillBuffer_().
	     *
	     * @private
	     */

	  }, {
	    key: 'monitorBufferTick_',
	    value: function monitorBufferTick_() {
	      if (this.state === 'READY') {
	        this.fillBuffer_();
	      }

	      if (this.checkBufferTimeout_) {
	        window_1.clearTimeout(this.checkBufferTimeout_);
	      }

	      this.checkBufferTimeout_ = window_1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);
	    }

	    /**
	     * fill the buffer with segements unless the sourceBuffers are
	     * currently updating
	     *
	     * Note: this function should only ever be called by monitorBuffer_
	     * and never directly
	     *
	     * @private
	     */

	  }, {
	    key: 'fillBuffer_',
	    value: function fillBuffer_() {
	      if (this.sourceUpdater_.updating()) {
	        return;
	      }

	      if (!this.syncPoint_) {
	        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
	      }

	      // see if we need to begin loading immediately
	      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);

	      if (!segmentInfo) {
	        return;
	      }

	      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);

	      if (isEndOfStream) {
	        this.endOfStream();
	        return;
	      }

	      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {
	        return;
	      }

	      // We will need to change timestampOffset of the sourceBuffer if either of
	      // the following conditions are true:
	      // - The segment.timeline !== this.currentTimeline
	      //   (we are crossing a discontinuity somehow)
	      // - The "timestampOffset" for the start of this segment is less than
	      //   the currently set timestampOffset
	      // Also, clear captions if we are crossing a discontinuity boundary
	      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {
	        this.syncController_.reset();
	        segmentInfo.timestampOffset = segmentInfo.startOfSegment;
	        this.captionParser_.clearAllCaptions();
	      }

	      this.loadSegment_(segmentInfo);
	    }

	    /**
	     * Determines what segment request should be made, given current playback
	     * state.
	     *
	     * @param {TimeRanges} buffered - the state of the buffer
	     * @param {Object} playlist - the playlist object to fetch segments from
	     * @param {Number} mediaIndex - the previous mediaIndex fetched or null
	     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not
	     * @param {Number} currentTime - the playback position in seconds
	     * @param {Object} syncPoint - a segment info object that describes the
	     * @returns {Object} a segment request object that describes the segment to load
	     */

	  }, {
	    key: 'checkBuffer_',
	    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {
	      var lastBufferedEnd = 0;
	      var startOfSegment = void 0;

	      if (buffered.length) {
	        lastBufferedEnd = buffered.end(buffered.length - 1);
	      }

	      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);

	      if (!playlist.segments.length) {
	        return null;
	      }

	      // if there is plenty of content buffered, and the video has
	      // been played before relax for awhile
	      if (bufferedTime >= this.goalBufferLength_()) {
	        return null;
	      }

	      // if the video has not yet played once, and we already have
	      // one segment downloaded do nothing
	      if (!hasPlayed && bufferedTime >= 1) {
	        return null;
	      }

	      // When the syncPoint is null, there is no way of determining a good
	      // conservative segment index to fetch from
	      // The best thing to do here is to get the kind of sync-point data by
	      // making a request
	      if (syncPoint === null) {
	        mediaIndex = this.getSyncSegmentCandidate_(playlist);
	        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);
	      }

	      // Under normal playback conditions fetching is a simple walk forward
	      if (mediaIndex !== null) {
	        var segment = playlist.segments[mediaIndex];

	        if (segment && segment.end) {
	          startOfSegment = segment.end;
	        } else {
	          startOfSegment = lastBufferedEnd;
	        }
	        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);
	      }

	      // There is a sync-point but the lack of a mediaIndex indicates that
	      // we need to make a good conservative guess about which segment to
	      // fetch
	      if (this.fetchAtBuffer_) {
	        // Find the segment containing the end of the buffer
	        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);

	        mediaIndex = mediaSourceInfo.mediaIndex;
	        startOfSegment = mediaSourceInfo.startTime;
	      } else {
	        // Find the segment containing currentTime
	        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);

	        mediaIndex = _mediaSourceInfo.mediaIndex;
	        startOfSegment = _mediaSourceInfo.startTime;
	      }

	      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);
	    }

	    /**
	     * The segment loader has no recourse except to fetch a segment in the
	     * current playlist and use the internal timestamps in that segment to
	     * generate a syncPoint. This function returns a good candidate index
	     * for that process.
	     *
	     * @param {Object} playlist - the playlist object to look for a
	     * @returns {Number} An index of a segment from the playlist to load
	     */

	  }, {
	    key: 'getSyncSegmentCandidate_',
	    value: function getSyncSegmentCandidate_(playlist) {
	      var _this2 = this;

	      if (this.currentTimeline_ === -1) {
	        return 0;
	      }

	      var segmentIndexArray = playlist.segments.map(function (s, i) {
	        return {
	          timeline: s.timeline,
	          segmentIndex: i
	        };
	      }).filter(function (s) {
	        return s.timeline === _this2.currentTimeline_;
	      });

	      if (segmentIndexArray.length) {
	        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;
	      }

	      return Math.max(playlist.segments.length - 1, 0);
	    }
	  }, {
	    key: 'generateSegmentInfo_',
	    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {
	      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {
	        return null;
	      }

	      var segment = playlist.segments[mediaIndex];

	      return {
	        requestId: 'segment-loader-' + Math.random(),
	        // resolve the segment URL relative to the playlist
	        uri: segment.resolvedUri,
	        // the segment's mediaIndex at the time it was requested
	        mediaIndex: mediaIndex,
	        // whether or not to update the SegmentLoader's state with this
	        // segment's mediaIndex
	        isSyncRequest: isSyncRequest,
	        startOfSegment: startOfSegment,
	        // the segment's playlist
	        playlist: playlist,
	        // unencrypted bytes of the segment
	        bytes: null,
	        // when a key is defined for this segment, the encrypted bytes
	        encryptedBytes: null,
	        // The target timestampOffset for this segment when we append it
	        // to the source buffer
	        timestampOffset: null,
	        // The timeline that the segment is in
	        timeline: segment.timeline,
	        // The expected duration of the segment in seconds
	        duration: segment.duration,
	        // retain the segment in case the playlist updates while doing an async process
	        segment: segment
	      };
	    }

	    /**
	     * Determines if the network has enough bandwidth to complete the current segment
	     * request in a timely manner. If not, the request will be aborted early and bandwidth
	     * updated to trigger a playlist switch.
	     *
	     * @param {Object} stats
	     *        Object containing stats about the request timing and size
	     * @return {Boolean} True if the request was aborted, false otherwise
	     * @private
	     */

	  }, {
	    key: 'abortRequestEarly_',
	    value: function abortRequestEarly_(stats) {
	      if (this.hls_.tech_.paused() ||
	      // Don't abort if the current playlist is on the lowestEnabledRendition
	      // TODO: Replace using timeout with a boolean indicating whether this playlist is
	      //       the lowestEnabledRendition.
	      !this.xhrOptions_.timeout ||
	      // Don't abort if we have no bandwidth information to estimate segment sizes
	      !this.playlist_.attributes.BANDWIDTH) {
	        return false;
	      }

	      // Wait at least 1 second since the first byte of data has been received before
	      // using the calculated bandwidth from the progress event to allow the bitrate
	      // to stabilize
	      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {
	        return false;
	      }

	      var currentTime = this.currentTime_();
	      var measuredBandwidth = stats.bandwidth;
	      var segmentDuration = this.pendingSegment_.duration;

	      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);

	      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort
	      // if we are only left with less than 1 second when the request completes.
	      // A negative timeUntilRebuffering indicates we are already rebuffering
	      var timeUntilRebuffer$$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;

	      // Only consider aborting early if the estimated time to finish the download
	      // is larger than the estimated time until the player runs out of forward buffer
	      if (requestTimeRemaining <= timeUntilRebuffer$$1) {
	        return false;
	      }

	      var switchCandidate = minRebufferMaxBandwidthSelector({
	        master: this.hls_.playlists.master,
	        currentTime: currentTime,
	        bandwidth: measuredBandwidth,
	        duration: this.duration_(),
	        segmentDuration: segmentDuration,
	        timeUntilRebuffer: timeUntilRebuffer$$1,
	        currentTimeline: this.currentTimeline_,
	        syncController: this.syncController_
	      });

	      if (!switchCandidate) {
	        return;
	      }

	      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$$1;

	      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;

	      var minimumTimeSaving = 0.5;

	      // If we are already rebuffering, increase the amount of variance we add to the
	      // potential round trip time of the new request so that we are not too aggressive
	      // with switching to a playlist that might save us a fraction of a second.
	      if (timeUntilRebuffer$$1 <= TIME_FUDGE_FACTOR) {
	        minimumTimeSaving = 1;
	      }

	      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {
	        return false;
	      }

	      // set the bandwidth to that of the desired playlist being sure to scale by
	      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it
	      // don't trigger a bandwidthupdate as the bandwidth is artifial
	      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;
	      this.abort();
	      this.trigger('earlyabort');
	      return true;
	    }

	    /**
	     * XHR `progress` event handler
	     *
	     * @param {Event}
	     *        The XHR `progress` event
	     * @param {Object} simpleSegment
	     *        A simplified segment object copy
	     * @private
	     */

	  }, {
	    key: 'handleProgress_',
	    value: function handleProgress_(event, simpleSegment) {
	      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {
	        return;
	      }

	      this.trigger('progress');
	    }

	    /**
	     * load a specific segment from a request into the buffer
	     *
	     * @private
	     */

	  }, {
	    key: 'loadSegment_',
	    value: function loadSegment_(segmentInfo) {
	      this.state = 'WAITING';
	      this.pendingSegment_ = segmentInfo;
	      this.trimBackBuffer_(segmentInfo);

	      segmentInfo.abortRequests = mediaSegmentRequest(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(segmentInfo),
	      // progress callback
	      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));
	    }

	    /**
	     * trim the back buffer so that we don't have too much data
	     * in the source buffer
	     *
	     * @private
	     *
	     * @param {Object} segmentInfo - the current segment
	     */

	  }, {
	    key: 'trimBackBuffer_',
	    value: function trimBackBuffer_(segmentInfo) {
	      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);

	      // Chrome has a hard limit of 150MB of
	      // buffer and a very conservative "garbage collector"
	      // We manually clear out the old buffer to ensure
	      // we don't trigger the QuotaExceeded error
	      // on the source buffer during subsequent appends

	      if (removeToTime > 0) {
	        this.remove(0, removeToTime);
	      }
	    }

	    /**
	     * created a simplified copy of the segment object with just the
	     * information necessary to perform the XHR and decryption
	     *
	     * @private
	     *
	     * @param {Object} segmentInfo - the current segment
	     * @returns {Object} a simplified segment object copy
	     */

	  }, {
	    key: 'createSimplifiedSegmentObj_',
	    value: function createSimplifiedSegmentObj_(segmentInfo) {
	      var segment = segmentInfo.segment;
	      var simpleSegment = {
	        resolvedUri: segment.resolvedUri,
	        byterange: segment.byterange,
	        requestId: segmentInfo.requestId
	      };

	      if (segment.key) {
	        // if the media sequence is greater than 2^32, the IV will be incorrect
	        // assuming 10s segments, that would be about 1300 years
	        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);

	        simpleSegment.key = {
	          resolvedUri: segment.key.resolvedUri,
	          iv: iv
	        };
	      }

	      if (segment.map) {
	        simpleSegment.map = this.initSegment(segment.map);
	      }

	      return simpleSegment;
	    }

	    /**
	     * Handle the callback from the segmentRequest function and set the
	     * associated SegmentLoader state and errors if necessary
	     *
	     * @private
	     */

	  }, {
	    key: 'segmentRequestFinished_',
	    value: function segmentRequestFinished_(error, simpleSegment) {
	      // every request counts as a media request even if it has been aborted
	      // or canceled due to a timeout
	      this.mediaRequests += 1;

	      if (simpleSegment.stats) {
	        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;
	        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;
	      }

	      // The request was aborted and the SegmentLoader has already been reset
	      if (!this.pendingSegment_) {
	        this.mediaRequestsAborted += 1;
	        return;
	      }

	      // the request was aborted and the SegmentLoader has already started
	      // another request. this can happen when the timeout for an aborted
	      // request triggers due to a limitation in the XHR library
	      // do not count this as any sort of request or we risk double-counting
	      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {
	        return;
	      }

	      // an error occurred from the active pendingSegment_ so reset everything
	      if (error) {
	        this.pendingSegment_ = null;
	        this.state = 'READY';

	        // the requests were aborted just record the aborted stat and exit
	        // this is not a true error condition and nothing corrective needs
	        // to be done
	        if (error.code === REQUEST_ERRORS.ABORTED) {
	          this.mediaRequestsAborted += 1;
	          return;
	        }

	        this.pause();

	        // the error is really just that at least one of the requests timed-out
	        // set the bandwidth to a very low value and trigger an ABR switch to
	        // take emergency action
	        if (error.code === REQUEST_ERRORS.TIMEOUT) {
	          this.mediaRequestsTimedout += 1;
	          this.bandwidth = 1;
	          this.roundTrip = NaN;
	          this.trigger('bandwidthupdate');
	          return;
	        }

	        // if control-flow has arrived here, then the error is real
	        // emit an error event to blacklist the current playlist
	        this.mediaRequestsErrored += 1;
	        this.error(error);
	        this.trigger('error');
	        return;
	      }

	      // the response was a success so set any bandwidth stats the request
	      // generated for ABR purposes
	      this.bandwidth = simpleSegment.stats.bandwidth;
	      this.roundTrip = simpleSegment.stats.roundTripTime;

	      // if this request included an initialization segment, save that data
	      // to the initSegment cache
	      if (simpleSegment.map) {
	        simpleSegment.map = this.initSegment(simpleSegment.map, true);
	      }

	      this.processSegmentResponse_(simpleSegment);
	    }

	    /**
	     * Move any important data from the simplified segment object
	     * back to the real segment object for future phases
	     *
	     * @private
	     */

	  }, {
	    key: 'processSegmentResponse_',
	    value: function processSegmentResponse_(simpleSegment) {
	      var segmentInfo = this.pendingSegment_;

	      segmentInfo.bytes = simpleSegment.bytes;
	      if (simpleSegment.map) {
	        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;
	      }

	      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;

	      // This has fmp4 captions, add them to text tracks
	      if (simpleSegment.fmp4Captions) {
	        createCaptionsTrackIfNotExists(this.inbandTextTracks_, this.hls_.tech_, simpleSegment.captionStreams);
	        addCaptionData({
	          inbandTextTracks: this.inbandTextTracks_,
	          captionArray: simpleSegment.fmp4Captions,
	          // fmp4s will not have a timestamp offset
	          timestampOffset: 0
	        });
	        // Reset stored captions since we added parsed
	        // captions to a text track at this point
	        this.captionParser_.clearParsedCaptions();
	      }

	      this.handleSegment_();
	    }

	    /**
	     * append a decrypted segement to the SourceBuffer through a SourceUpdater
	     *
	     * @private
	     */

	  }, {
	    key: 'handleSegment_',
	    value: function handleSegment_() {
	      var _this3 = this;

	      if (!this.pendingSegment_) {
	        this.state = 'READY';
	        return;
	      }

	      var segmentInfo = this.pendingSegment_;
	      var segment = segmentInfo.segment;
	      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo);

	      // When we have our first timing info, determine what media types this loader is
	      // dealing with. Although we're maintaining extra state, it helps to preserve the
	      // separation of segment loader from the actual source buffers.
	      if (typeof this.startingMedia_ === 'undefined' && timingInfo && (
	      // Guard against cases where we're not getting timing info at all until we are
	      // certain that all streams will provide it.
	      timingInfo.containsAudio || timingInfo.containsVideo)) {
	        this.startingMedia_ = {
	          containsAudio: timingInfo.containsAudio,
	          containsVideo: timingInfo.containsVideo
	        };
	      }

	      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);

	      if (illegalMediaSwitchError) {
	        this.error({
	          message: illegalMediaSwitchError,
	          blacklistDuration: Infinity
	        });
	        this.trigger('error');
	        return;
	      }

	      if (segmentInfo.isSyncRequest) {
	        this.trigger('syncinfoupdate');
	        this.pendingSegment_ = null;
	        this.state = 'READY';
	        return;
	      }

	      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {
	        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);
	        // fired when a timestamp offset is set in HLS (can also identify discontinuities)
	        this.trigger('timestampoffset');
	      }

	      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);

	      if (timelineMapping !== null) {
	        this.trigger({
	          type: 'segmenttimemapping',
	          mapping: timelineMapping
	        });
	      }

	      this.state = 'APPENDING';

	      // if the media initialization segment is changing, append it
	      // before the content segment
	      if (segment.map) {
	        var initId = initSegmentId(segment.map);

	        if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== initId) {
	          var initSegment = this.initSegment(segment.map);

	          this.sourceUpdater_.appendBuffer(initSegment.bytes, function () {
	            _this3.activeInitSegmentId_ = initId;
	          });
	        }
	      }

	      segmentInfo.byteLength = segmentInfo.bytes.byteLength;
	      if (typeof segment.start === 'number' && typeof segment.end === 'number') {
	        this.mediaSecondsLoaded += segment.end - segment.start;
	      } else {
	        this.mediaSecondsLoaded += segment.duration;
	      }

	      this.logger_(segmentInfoString(segmentInfo));

	      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));
	    }

	    /**
	     * callback to run when appendBuffer is finished. detects if we are
	     * in a good state to do things with the data we got, or if we need
	     * to wait for more
	     *
	     * @private
	     */

	  }, {
	    key: 'handleUpdateEnd_',
	    value: function handleUpdateEnd_() {
	      if (!this.pendingSegment_) {
	        this.state = 'READY';
	        if (!this.paused()) {
	          this.monitorBuffer_();
	        }
	        return;
	      }

	      var segmentInfo = this.pendingSegment_;
	      var segment = segmentInfo.segment;
	      var isWalkingForward = this.mediaIndex !== null;

	      this.pendingSegment_ = null;
	      this.recordThroughput_(segmentInfo);
	      this.addSegmentMetadataCue_(segmentInfo);

	      this.state = 'READY';

	      this.mediaIndex = segmentInfo.mediaIndex;
	      this.fetchAtBuffer_ = true;
	      this.currentTimeline_ = segmentInfo.timeline;

	      // We must update the syncinfo to recalculate the seekable range before
	      // the following conditional otherwise it may consider this a bad "guess"
	      // and attempt to resync when the post-update seekable window and live
	      // point would mean that this was the perfect segment to fetch
	      this.trigger('syncinfoupdate');

	      // If we previously appended a segment that ends more than 3 targetDurations before
	      // the currentTime_ that means that our conservative guess was too conservative.
	      // In that case, reset the loader state so that we try to use any information gained
	      // from the previous request to create a new, more accurate, sync-point.
	      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {
	        this.resetEverything();
	        return;
	      }

	      // Don't do a rendition switch unless we have enough time to get a sync segment
	      // and conservatively guess
	      if (isWalkingForward) {
	        this.trigger('bandwidthupdate');
	      }
	      this.trigger('progress');

	      // any time an update finishes and the last segment is in the
	      // buffer, end the stream. this ensures the "ended" event will
	      // fire if playback reaches that point.
	      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);

	      if (isEndOfStream) {
	        this.endOfStream();
	      }

	      if (!this.paused()) {
	        this.monitorBuffer_();
	      }
	    }

	    /**
	     * Records the current throughput of the decrypt, transmux, and append
	     * portion of the semgment pipeline. `throughput.rate` is a the cumulative
	     * moving average of the throughput. `throughput.count` is the number of
	     * data points in the average.
	     *
	     * @private
	     * @param {Object} segmentInfo the object returned by loadSegment
	     */

	  }, {
	    key: 'recordThroughput_',
	    value: function recordThroughput_(segmentInfo) {
	      var rate = this.throughput.rate;
	      // Add one to the time to ensure that we don't accidentally attempt to divide
	      // by zero in the case where the throughput is ridiculously high
	      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;
	      // Multiply by 8000 to convert from bytes/millisecond to bits/second
	      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);

	      // This is just a cumulative moving average calculation:
	      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)
	      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;
	    }

	    /**
	     * Adds a cue to the segment-metadata track with some metadata information about the
	     * segment
	     *
	     * @private
	     * @param {Object} segmentInfo
	     *        the object returned by loadSegment
	     * @method addSegmentMetadataCue_
	     */

	  }, {
	    key: 'addSegmentMetadataCue_',
	    value: function addSegmentMetadataCue_(segmentInfo) {
	      if (!this.segmentMetadataTrack_) {
	        return;
	      }

	      var segment = segmentInfo.segment;
	      var start = segment.start;
	      var end = segment.end;

	      // Do not try adding the cue if the start and end times are invalid.
	      if (!finite(start) || !finite(end)) {
	        return;
	      }

	      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);

	      var Cue = window_1.WebKitDataCue || window_1.VTTCue;
	      var value = {
	        dateTimeObject: segment.dateTimeObject,
	        dateTimeString: segment.dateTimeString,
	        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,
	        resolution: segmentInfo.playlist.attributes.RESOLUTION,
	        codecs: segmentInfo.playlist.attributes.CODECS,
	        byteLength: segmentInfo.byteLength,
	        uri: segmentInfo.uri,
	        timeline: segmentInfo.timeline,
	        playlist: segmentInfo.playlist.uri,
	        start: start,
	        end: end
	      };
	      var data = JSON.stringify(value);
	      var cue = new Cue(start, end, data);

	      // Attach the metadata to the value property of the cue to keep consistency between
	      // the differences of WebKitDataCue in safari and VTTCue in other browsers
	      cue.value = value;

	      this.segmentMetadataTrack_.addCue(cue);
	    }
	  }]);
	  return SegmentLoader;
	}(videojs.EventTarget);

	var uint8ToUtf8 = function uint8ToUtf8(uintArray) {
	  return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));
	};

	/**
	 * @file vtt-segment-loader.js
	 */

	var VTT_LINE_TERMINATORS = new Uint8Array('\n\n'.split('').map(function (char) {
	  return char.charCodeAt(0);
	}));

	/**
	 * An object that manages segment loading and appending.
	 *
	 * @class VTTSegmentLoader
	 * @param {Object} options required and optional options
	 * @extends videojs.EventTarget
	 */

	var VTTSegmentLoader = function (_SegmentLoader) {
	  inherits$1(VTTSegmentLoader, _SegmentLoader);

	  function VTTSegmentLoader(settings) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck$1(this, VTTSegmentLoader);

	    // SegmentLoader requires a MediaSource be specified or it will throw an error;
	    // however, VTTSegmentLoader has no need of a media source, so delete the reference
	    var _this = possibleConstructorReturn$1(this, (VTTSegmentLoader.__proto__ || Object.getPrototypeOf(VTTSegmentLoader)).call(this, settings, options));

	    _this.mediaSource_ = null;

	    _this.subtitlesTrack_ = null;
	    return _this;
	  }

	  /**
	   * Indicates which time ranges are buffered
	   *
	   * @return {TimeRange}
	   *         TimeRange object representing the current buffered ranges
	   */


	  createClass(VTTSegmentLoader, [{
	    key: 'buffered_',
	    value: function buffered_() {
	      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {
	        return videojs.createTimeRanges();
	      }

	      var cues = this.subtitlesTrack_.cues;
	      var start = cues[0].startTime;
	      var end = cues[cues.length - 1].startTime;

	      return videojs.createTimeRanges([[start, end]]);
	    }

	    /**
	     * Gets and sets init segment for the provided map
	     *
	     * @param {Object} map
	     *        The map object representing the init segment to get or set
	     * @param {Boolean=} set
	     *        If true, the init segment for the provided map should be saved
	     * @return {Object}
	     *         map object for desired init segment
	     */

	  }, {
	    key: 'initSegment',
	    value: function initSegment(map) {
	      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      if (!map) {
	        return null;
	      }

	      var id = initSegmentId(map);
	      var storedMap = this.initSegments_[id];

	      if (set$$1 && !storedMap && map.bytes) {
	        // append WebVTT line terminators to the media initialization segment if it exists
	        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that
	        // requires two or more WebVTT line terminators between the WebVTT header and the
	        // rest of the file
	        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;
	        var combinedSegment = new Uint8Array(combinedByteLength);

	        combinedSegment.set(map.bytes);
	        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);

	        this.initSegments_[id] = storedMap = {
	          resolvedUri: map.resolvedUri,
	          byterange: map.byterange,
	          bytes: combinedSegment
	        };
	      }

	      return storedMap || map;
	    }

	    /**
	     * Returns true if all configuration required for loading is present, otherwise false.
	     *
	     * @return {Boolean} True if the all configuration is ready for loading
	     * @private
	     */

	  }, {
	    key: 'couldBeginLoading_',
	    value: function couldBeginLoading_() {
	      return this.playlist_ && this.subtitlesTrack_ && !this.paused();
	    }

	    /**
	     * Once all the starting parameters have been specified, begin
	     * operation. This method should only be invoked from the INIT
	     * state.
	     *
	     * @private
	     */

	  }, {
	    key: 'init_',
	    value: function init_() {
	      this.state = 'READY';
	      this.resetEverything();
	      return this.monitorBuffer_();
	    }

	    /**
	     * Set a subtitle track on the segment loader to add subtitles to
	     *
	     * @param {TextTrack=} track
	     *        The text track to add loaded subtitles to
	     * @return {TextTrack}
	     *        Returns the subtitles track
	     */

	  }, {
	    key: 'track',
	    value: function track(_track) {
	      if (typeof _track === 'undefined') {
	        return this.subtitlesTrack_;
	      }

	      this.subtitlesTrack_ = _track;

	      // if we were unpaused but waiting for a sourceUpdater, start
	      // buffering now
	      if (this.state === 'INIT' && this.couldBeginLoading_()) {
	        this.init_();
	      }

	      return this.subtitlesTrack_;
	    }

	    /**
	     * Remove any data in the source buffer between start and end times
	     * @param {Number} start - the start time of the region to remove from the buffer
	     * @param {Number} end - the end time of the region to remove from the buffer
	     */

	  }, {
	    key: 'remove',
	    value: function remove(start, end) {
	      removeCuesFromTrack(start, end, this.subtitlesTrack_);
	    }

	    /**
	     * fill the buffer with segements unless the sourceBuffers are
	     * currently updating
	     *
	     * Note: this function should only ever be called by monitorBuffer_
	     * and never directly
	     *
	     * @private
	     */

	  }, {
	    key: 'fillBuffer_',
	    value: function fillBuffer_() {
	      var _this2 = this;

	      if (!this.syncPoint_) {
	        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
	      }

	      // see if we need to begin loading immediately
	      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);

	      segmentInfo = this.skipEmptySegments_(segmentInfo);

	      if (!segmentInfo) {
	        return;
	      }

	      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {
	        // We don't have the timestamp offset that we need to sync subtitles.
	        // Rerun on a timestamp offset or user interaction.
	        var checkTimestampOffset = function checkTimestampOffset() {
	          _this2.state = 'READY';
	          if (!_this2.paused()) {
	            // if not paused, queue a buffer check as soon as possible
	            _this2.monitorBuffer_();
	          }
	        };

	        this.syncController_.one('timestampoffset', checkTimestampOffset);
	        this.state = 'WAITING_ON_TIMELINE';
	        return;
	      }

	      this.loadSegment_(segmentInfo);
	    }

	    /**
	     * Prevents the segment loader from requesting segments we know contain no subtitles
	     * by walking forward until we find the next segment that we don't know whether it is
	     * empty or not.
	     *
	     * @param {Object} segmentInfo
	     *        a segment info object that describes the current segment
	     * @return {Object}
	     *         a segment info object that describes the current segment
	     */

	  }, {
	    key: 'skipEmptySegments_',
	    value: function skipEmptySegments_(segmentInfo) {
	      while (segmentInfo && segmentInfo.segment.empty) {
	        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);
	      }
	      return segmentInfo;
	    }

	    /**
	     * append a decrypted segement to the SourceBuffer through a SourceUpdater
	     *
	     * @private
	     */

	  }, {
	    key: 'handleSegment_',
	    value: function handleSegment_() {
	      var _this3 = this;

	      if (!this.pendingSegment_ || !this.subtitlesTrack_) {
	        this.state = 'READY';
	        return;
	      }

	      this.state = 'APPENDING';

	      var segmentInfo = this.pendingSegment_;
	      var segment = segmentInfo.segment;

	      // Make sure that vttjs has loaded, otherwise, wait till it finished loading
	      if (typeof window_1.WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {

	        var loadHandler = function loadHandler() {
	          _this3.handleSegment_();
	        };

	        this.state = 'WAITING_ON_VTTJS';
	        this.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);
	        this.subtitlesTrack_.tech_.one('vttjserror', function () {
	          _this3.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);
	          _this3.error({
	            message: 'Error loading vtt.js'
	          });
	          _this3.state = 'READY';
	          _this3.pause();
	          _this3.trigger('error');
	        });

	        return;
	      }

	      segment.requested = true;

	      try {
	        this.parseVTTCues_(segmentInfo);
	      } catch (e) {
	        this.error({
	          message: e.message
	        });
	        this.state = 'READY';
	        this.pause();
	        return this.trigger('error');
	      }

	      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);

	      if (segmentInfo.isSyncRequest) {
	        this.trigger('syncinfoupdate');
	        this.pendingSegment_ = null;
	        this.state = 'READY';
	        return;
	      }

	      segmentInfo.byteLength = segmentInfo.bytes.byteLength;

	      this.mediaSecondsLoaded += segment.duration;

	      if (segmentInfo.cues.length) {
	        // remove any overlapping cues to prevent doubling
	        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);
	      }

	      segmentInfo.cues.forEach(function (cue) {
	        _this3.subtitlesTrack_.addCue(cue);
	      });

	      this.handleUpdateEnd_();
	    }

	    /**
	     * Uses the WebVTT parser to parse the segment response
	     *
	     * @param {Object} segmentInfo
	     *        a segment info object that describes the current segment
	     * @private
	     */

	  }, {
	    key: 'parseVTTCues_',
	    value: function parseVTTCues_(segmentInfo) {
	      var decoder = void 0;
	      var decodeBytesToString = false;

	      if (typeof window_1.TextDecoder === 'function') {
	        decoder = new window_1.TextDecoder('utf8');
	      } else {
	        decoder = window_1.WebVTT.StringDecoder();
	        decodeBytesToString = true;
	      }

	      var parser = new window_1.WebVTT.Parser(window_1, window_1.vttjs, decoder);

	      segmentInfo.cues = [];
	      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };

	      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);
	      parser.ontimestampmap = function (map) {
	        return segmentInfo.timestampmap = map;
	      };
	      parser.onparsingerror = function (error) {
	        videojs.log.warn('Error encountered when parsing cues: ' + error.message);
	      };

	      if (segmentInfo.segment.map) {
	        var mapData = segmentInfo.segment.map.bytes;

	        if (decodeBytesToString) {
	          mapData = uint8ToUtf8(mapData);
	        }

	        parser.parse(mapData);
	      }

	      var segmentData = segmentInfo.bytes;

	      if (decodeBytesToString) {
	        segmentData = uint8ToUtf8(segmentData);
	      }

	      parser.parse(segmentData);
	      parser.flush();
	    }

	    /**
	     * Updates the start and end times of any cues parsed by the WebVTT parser using
	     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping
	     * from the SyncController
	     *
	     * @param {Object} segmentInfo
	     *        a segment info object that describes the current segment
	     * @param {Object} mappingObj
	     *        object containing a mapping from TS to media time
	     * @param {Object} playlist
	     *        the playlist object containing the segment
	     * @private
	     */

	  }, {
	    key: 'updateTimeMapping_',
	    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {
	      var segment = segmentInfo.segment;

	      if (!mappingObj) {
	        // If the sync controller does not have a mapping of TS to Media Time for the
	        // timeline, then we don't have enough information to update the cue
	        // start/end times
	        return;
	      }

	      if (!segmentInfo.cues.length) {
	        // If there are no cues, we also do not have enough information to figure out
	        // segment timing. Mark that the segment contains no cues so we don't re-request
	        // an empty segment.
	        segment.empty = true;
	        return;
	      }

	      var timestampmap = segmentInfo.timestampmap;
	      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;

	      segmentInfo.cues.forEach(function (cue) {
	        // First convert cue time to TS time using the timestamp-map provided within the vtt
	        cue.startTime += diff;
	        cue.endTime += diff;
	      });

	      if (!playlist.syncInfo) {
	        var firstStart = segmentInfo.cues[0].startTime;
	        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;

	        playlist.syncInfo = {
	          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,
	          time: Math.min(firstStart, lastStart - segment.duration)
	        };
	      }
	    }
	  }]);
	  return VTTSegmentLoader;
	}(SegmentLoader);

	/**
	 * @file ad-cue-tags.js
	 */

	/**
	 * Searches for an ad cue that overlaps with the given mediaTime
	 */
	var findAdCue = function findAdCue(track, mediaTime) {
	  var cues = track.cues;

	  for (var i = 0; i < cues.length; i++) {
	    var cue = cues[i];

	    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {
	      return cue;
	    }
	  }
	  return null;
	};

	var updateAdCues = function updateAdCues(media, track) {
	  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	  if (!media.segments) {
	    return;
	  }

	  var mediaTime = offset;
	  var cue = void 0;

	  for (var i = 0; i < media.segments.length; i++) {
	    var segment = media.segments[i];

	    if (!cue) {
	      // Since the cues will span for at least the segment duration, adding a fudge
	      // factor of half segment duration will prevent duplicate cues from being
	      // created when timing info is not exact (e.g. cue start time initialized
	      // at 10.006677, but next call mediaTime is 10.003332 )
	      cue = findAdCue(track, mediaTime + segment.duration / 2);
	    }

	    if (cue) {
	      if ('cueIn' in segment) {
	        // Found a CUE-IN so end the cue
	        cue.endTime = mediaTime;
	        cue.adEndTime = mediaTime;
	        mediaTime += segment.duration;
	        cue = null;
	        continue;
	      }

	      if (mediaTime < cue.endTime) {
	        // Already processed this mediaTime for this cue
	        mediaTime += segment.duration;
	        continue;
	      }

	      // otherwise extend cue until a CUE-IN is found
	      cue.endTime += segment.duration;
	    } else {
	      if ('cueOut' in segment) {
	        cue = new window_1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);
	        cue.adStartTime = mediaTime;
	        // Assumes tag format to be
	        // #EXT-X-CUE-OUT:30
	        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);
	        track.addCue(cue);
	      }

	      if ('cueOutCont' in segment) {
	        // Entered into the middle of an ad cue
	        var adOffset = void 0;
	        var adTotal = void 0;

	        // Assumes tag formate to be
	        // #EXT-X-CUE-OUT-CONT:10/30

	        var _segment$cueOutCont$s = segment.cueOutCont.split('/').map(parseFloat);

	        var _segment$cueOutCont$s2 = slicedToArray(_segment$cueOutCont$s, 2);

	        adOffset = _segment$cueOutCont$s2[0];
	        adTotal = _segment$cueOutCont$s2[1];


	        cue = new window_1.VTTCue(mediaTime, mediaTime + segment.duration, '');
	        cue.adStartTime = mediaTime - adOffset;
	        cue.adEndTime = cue.adStartTime + adTotal;
	        track.addCue(cue);
	      }
	    }
	    mediaTime += segment.duration;
	  }
	};

	var parsePid = function parsePid(packet) {
	  var pid = packet[1] & 0x1f;
	  pid <<= 8;
	  pid |= packet[2];
	  return pid;
	};

	var parsePayloadUnitStartIndicator = function parsePayloadUnitStartIndicator(packet) {
	  return !!(packet[1] & 0x40);
	};

	var parseAdaptionField = function parseAdaptionField(packet) {
	  var offset = 0;
	  // if an adaption field is present, its length is specified by the
	  // fifth byte of the TS packet header. The adaptation field is
	  // used to add stuffing to PES packets that don't fill a complete
	  // TS packet, and to specify some forms of timing and control data
	  // that we do not currently use.
	  if ((packet[3] & 0x30) >>> 4 > 0x01) {
	    offset += packet[4] + 1;
	  }
	  return offset;
	};

	var parseType$3 = function parseType(packet, pmtPid) {
	  var pid = parsePid(packet);
	  if (pid === 0) {
	    return 'pat';
	  } else if (pid === pmtPid) {
	    return 'pmt';
	  } else if (pmtPid) {
	    return 'pes';
	  }
	  return null;
	};

	var parsePat = function parsePat(packet) {
	  var pusi = parsePayloadUnitStartIndicator(packet);
	  var offset = 4 + parseAdaptionField(packet);

	  if (pusi) {
	    offset += packet[offset] + 1;
	  }

	  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];
	};

	var parsePmt = function parsePmt(packet) {
	  var programMapTable = {};
	  var pusi = parsePayloadUnitStartIndicator(packet);
	  var payloadOffset = 4 + parseAdaptionField(packet);

	  if (pusi) {
	    payloadOffset += packet[payloadOffset] + 1;
	  }

	  // PMTs can be sent ahead of the time when they should actually
	  // take effect. We don't believe this should ever be the case
	  // for HLS but we'll ignore "forward" PMT declarations if we see
	  // them. Future PMT declarations have the current_next_indicator
	  // set to zero.
	  if (!(packet[payloadOffset + 5] & 0x01)) {
	    return;
	  }

	  var sectionLength, tableEnd, programInfoLength;
	  // the mapping table ends at the end of the current section
	  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];
	  tableEnd = 3 + sectionLength - 4;

	  // to determine where the table is, we have to figure out how
	  // long the program info descriptors are
	  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];

	  // advance the offset to the first entry in the mapping table
	  var offset = 12 + programInfoLength;
	  while (offset < tableEnd) {
	    var i = payloadOffset + offset;
	    // add an entry that maps the elementary_pid to the stream_type
	    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];

	    // move to the next table entry
	    // skip past the elementary stream descriptors, if present
	    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;
	  }
	  return programMapTable;
	};

	var parsePesType = function parsePesType(packet, programMapTable) {
	  var pid = parsePid(packet);
	  var type = programMapTable[pid];
	  switch (type) {
	    case streamTypes.H264_STREAM_TYPE:
	      return 'video';
	    case streamTypes.ADTS_STREAM_TYPE:
	      return 'audio';
	    case streamTypes.METADATA_STREAM_TYPE:
	      return 'timed-metadata';
	    default:
	      return null;
	  }
	};

	var parsePesTime = function parsePesTime(packet) {
	  var pusi = parsePayloadUnitStartIndicator(packet);
	  if (!pusi) {
	    return null;
	  }

	  var offset = 4 + parseAdaptionField(packet);

	  if (offset >= packet.byteLength) {
	    // From the H 222.0 MPEG-TS spec
	    // "For transport stream packets carrying PES packets, stuffing is needed when there
	    //  is insufficient PES packet data to completely fill the transport stream packet
	    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than
	    //  the sum of the lengths of the data elements in it, so that the payload bytes
	    //  remaining after the adaptation field exactly accommodates the available PES packet
	    //  data."
	    //
	    // If the offset is >= the length of the packet, then the packet contains no data
	    // and instead is just adaption field stuffing bytes
	    return null;
	  }

	  var pes = null;
	  var ptsDtsFlags;

	  // PES packets may be annotated with a PTS value, or a PTS value
	  // and a DTS value. Determine what combination of values is
	  // available to work with.
	  ptsDtsFlags = packet[offset + 7];

	  // PTS and DTS are normally stored as a 33-bit number.  Javascript
	  // performs all bitwise operations on 32-bit integers but javascript
	  // supports a much greater range (52-bits) of integer using standard
	  // mathematical operations.
	  // We construct a 31-bit value using bitwise operators over the 31
	  // most significant bits and then multiply by 4 (equal to a left-shift
	  // of 2) before we add the final 2 least significant bits of the
	  // timestamp (equal to an OR.)
	  if (ptsDtsFlags & 0xC0) {
	    pes = {};
	    // the PTS and DTS are not written out directly. For information
	    // on how they are encoded, see
	    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
	    pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;
	    pes.pts *= 4; // Left shift by 2
	    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs
	    pes.dts = pes.pts;
	    if (ptsDtsFlags & 0x40) {
	      pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;
	      pes.dts *= 4; // Left shift by 2
	      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs
	    }
	  }
	  return pes;
	};

	var parseNalUnitType = function parseNalUnitType(type) {
	  switch (type) {
	    case 0x05:
	      return 'slice_layer_without_partitioning_rbsp_idr';
	    case 0x06:
	      return 'sei_rbsp';
	    case 0x07:
	      return 'seq_parameter_set_rbsp';
	    case 0x08:
	      return 'pic_parameter_set_rbsp';
	    case 0x09:
	      return 'access_unit_delimiter_rbsp';
	    default:
	      return null;
	  }
	};

	var videoPacketContainsKeyFrame = function videoPacketContainsKeyFrame(packet) {
	  var offset = 4 + parseAdaptionField(packet);
	  var frameBuffer = packet.subarray(offset);
	  var frameI = 0;
	  var frameSyncPoint = 0;
	  var foundKeyFrame = false;
	  var nalType;

	  // advance the sync point to a NAL start, if necessary
	  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {
	    if (frameBuffer[frameSyncPoint + 2] === 1) {
	      // the sync point is properly aligned
	      frameI = frameSyncPoint + 5;
	      break;
	    }
	  }

	  while (frameI < frameBuffer.byteLength) {
	    // look at the current byte to determine if we've hit the end of
	    // a NAL unit boundary
	    switch (frameBuffer[frameI]) {
	      case 0:
	        // skip past non-sync sequences
	        if (frameBuffer[frameI - 1] !== 0) {
	          frameI += 2;
	          break;
	        } else if (frameBuffer[frameI - 2] !== 0) {
	          frameI++;
	          break;
	        }

	        if (frameSyncPoint + 3 !== frameI - 2) {
	          nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);
	          if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {
	            foundKeyFrame = true;
	          }
	        }

	        // drop trailing zeroes
	        do {
	          frameI++;
	        } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);
	        frameSyncPoint = frameI - 2;
	        frameI += 3;
	        break;
	      case 1:
	        // skip past non-sync sequences
	        if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {
	          frameI += 3;
	          break;
	        }

	        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);
	        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {
	          foundKeyFrame = true;
	        }
	        frameSyncPoint = frameI - 2;
	        frameI += 3;
	        break;
	      default:
	        // the current byte isn't a one or zero, so it cannot be part
	        // of a sync sequence
	        frameI += 3;
	        break;
	    }
	  }
	  frameBuffer = frameBuffer.subarray(frameSyncPoint);
	  frameI -= frameSyncPoint;
	  frameSyncPoint = 0;
	  // parse the final nal
	  if (frameBuffer && frameBuffer.byteLength > 3) {
	    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);
	    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {
	      foundKeyFrame = true;
	    }
	  }

	  return foundKeyFrame;
	};

	var probe$1 = {
	  parseType: parseType$3,
	  parsePat: parsePat,
	  parsePmt: parsePmt,
	  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,
	  parsePesType: parsePesType,
	  parsePesTime: parsePesTime,
	  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame
	};

	var handleRollover$1 = timestampRolloverStream.handleRollover;
	var probe$2 = {};
	probe$2.ts = probe$1;
	probe$2.aac = utils$1;

	var PES_TIMESCALE = 90000,
	    MP2T_PACKET_LENGTH$1 = 188,
	    // bytes
	SYNC_BYTE$1 = 0x47;

	/**
	 * walks through segment data looking for pat and pmt packets to parse out
	 * program map table information
	 */
	var parsePsi_ = function parsePsi_(bytes, pmt) {
	  var startIndex = 0,
	      endIndex = MP2T_PACKET_LENGTH$1,
	      packet,
	      type;

	  while (endIndex < bytes.byteLength) {
	    // Look for a pair of start and end sync bytes in the data..
	    if (bytes[startIndex] === SYNC_BYTE$1 && bytes[endIndex] === SYNC_BYTE$1) {
	      // We found a packet
	      packet = bytes.subarray(startIndex, endIndex);
	      type = probe$2.ts.parseType(packet, pmt.pid);

	      switch (type) {
	        case 'pat':
	          if (!pmt.pid) {
	            pmt.pid = probe$2.ts.parsePat(packet);
	          }
	          break;
	        case 'pmt':
	          if (!pmt.table) {
	            pmt.table = probe$2.ts.parsePmt(packet);
	          }
	          break;
	        default:
	          break;
	      }

	      // Found the pat and pmt, we can stop walking the segment
	      if (pmt.pid && pmt.table) {
	        return;
	      }

	      startIndex += MP2T_PACKET_LENGTH$1;
	      endIndex += MP2T_PACKET_LENGTH$1;
	      continue;
	    }

	    // If we get here, we have somehow become de-synchronized and we need to step
	    // forward one byte at a time until we find a pair of sync bytes that denote
	    // a packet
	    startIndex++;
	    endIndex++;
	  }
	};

	/**
	 * walks through the segment data from the start and end to get timing information
	 * for the first and last audio pes packets
	 */
	var parseAudioPes_ = function parseAudioPes_(bytes, pmt, result) {
	  var startIndex = 0,
	      endIndex = MP2T_PACKET_LENGTH$1,
	      packet,
	      type,
	      pesType,
	      pusi,
	      parsed;

	  var endLoop = false;

	  // Start walking from start of segment to get first audio packet
	  while (endIndex <= bytes.byteLength) {
	    // Look for a pair of start and end sync bytes in the data..
	    if (bytes[startIndex] === SYNC_BYTE$1 && (bytes[endIndex] === SYNC_BYTE$1 || endIndex === bytes.byteLength)) {
	      // We found a packet
	      packet = bytes.subarray(startIndex, endIndex);
	      type = probe$2.ts.parseType(packet, pmt.pid);

	      switch (type) {
	        case 'pes':
	          pesType = probe$2.ts.parsePesType(packet, pmt.table);
	          pusi = probe$2.ts.parsePayloadUnitStartIndicator(packet);
	          if (pesType === 'audio' && pusi) {
	            parsed = probe$2.ts.parsePesTime(packet);
	            if (parsed) {
	              parsed.type = 'audio';
	              result.audio.push(parsed);
	              endLoop = true;
	            }
	          }
	          break;
	        default:
	          break;
	      }

	      if (endLoop) {
	        break;
	      }

	      startIndex += MP2T_PACKET_LENGTH$1;
	      endIndex += MP2T_PACKET_LENGTH$1;
	      continue;
	    }

	    // If we get here, we have somehow become de-synchronized and we need to step
	    // forward one byte at a time until we find a pair of sync bytes that denote
	    // a packet
	    startIndex++;
	    endIndex++;
	  }

	  // Start walking from end of segment to get last audio packet
	  endIndex = bytes.byteLength;
	  startIndex = endIndex - MP2T_PACKET_LENGTH$1;
	  endLoop = false;
	  while (startIndex >= 0) {
	    // Look for a pair of start and end sync bytes in the data..
	    if (bytes[startIndex] === SYNC_BYTE$1 && (bytes[endIndex] === SYNC_BYTE$1 || endIndex === bytes.byteLength)) {
	      // We found a packet
	      packet = bytes.subarray(startIndex, endIndex);
	      type = probe$2.ts.parseType(packet, pmt.pid);

	      switch (type) {
	        case 'pes':
	          pesType = probe$2.ts.parsePesType(packet, pmt.table);
	          pusi = probe$2.ts.parsePayloadUnitStartIndicator(packet);
	          if (pesType === 'audio' && pusi) {
	            parsed = probe$2.ts.parsePesTime(packet);
	            if (parsed) {
	              parsed.type = 'audio';
	              result.audio.push(parsed);
	              endLoop = true;
	            }
	          }
	          break;
	        default:
	          break;
	      }

	      if (endLoop) {
	        break;
	      }

	      startIndex -= MP2T_PACKET_LENGTH$1;
	      endIndex -= MP2T_PACKET_LENGTH$1;
	      continue;
	    }

	    // If we get here, we have somehow become de-synchronized and we need to step
	    // forward one byte at a time until we find a pair of sync bytes that denote
	    // a packet
	    startIndex--;
	    endIndex--;
	  }
	};

	/**
	 * walks through the segment data from the start and end to get timing information
	 * for the first and last video pes packets as well as timing information for the first
	 * key frame.
	 */
	var parseVideoPes_ = function parseVideoPes_(bytes, pmt, result) {
	  var startIndex = 0,
	      endIndex = MP2T_PACKET_LENGTH$1,
	      packet,
	      type,
	      pesType,
	      pusi,
	      parsed,
	      frame,
	      i,
	      pes;

	  var endLoop = false;

	  var currentFrame = {
	    data: [],
	    size: 0
	  };

	  // Start walking from start of segment to get first video packet
	  while (endIndex < bytes.byteLength) {
	    // Look for a pair of start and end sync bytes in the data..
	    if (bytes[startIndex] === SYNC_BYTE$1 && bytes[endIndex] === SYNC_BYTE$1) {
	      // We found a packet
	      packet = bytes.subarray(startIndex, endIndex);
	      type = probe$2.ts.parseType(packet, pmt.pid);

	      switch (type) {
	        case 'pes':
	          pesType = probe$2.ts.parsePesType(packet, pmt.table);
	          pusi = probe$2.ts.parsePayloadUnitStartIndicator(packet);
	          if (pesType === 'video') {
	            if (pusi && !endLoop) {
	              parsed = probe$2.ts.parsePesTime(packet);
	              if (parsed) {
	                parsed.type = 'video';
	                result.video.push(parsed);
	                endLoop = true;
	              }
	            }
	            if (!result.firstKeyFrame) {
	              if (pusi) {
	                if (currentFrame.size !== 0) {
	                  frame = new Uint8Array(currentFrame.size);
	                  i = 0;
	                  while (currentFrame.data.length) {
	                    pes = currentFrame.data.shift();
	                    frame.set(pes, i);
	                    i += pes.byteLength;
	                  }
	                  if (probe$2.ts.videoPacketContainsKeyFrame(frame)) {
	                    result.firstKeyFrame = probe$2.ts.parsePesTime(frame);
	                    result.firstKeyFrame.type = 'video';
	                  }
	                  currentFrame.size = 0;
	                }
	              }
	              currentFrame.data.push(packet);
	              currentFrame.size += packet.byteLength;
	            }
	          }
	          break;
	        default:
	          break;
	      }

	      if (endLoop && result.firstKeyFrame) {
	        break;
	      }

	      startIndex += MP2T_PACKET_LENGTH$1;
	      endIndex += MP2T_PACKET_LENGTH$1;
	      continue;
	    }

	    // If we get here, we have somehow become de-synchronized and we need to step
	    // forward one byte at a time until we find a pair of sync bytes that denote
	    // a packet
	    startIndex++;
	    endIndex++;
	  }

	  // Start walking from end of segment to get last video packet
	  endIndex = bytes.byteLength;
	  startIndex = endIndex - MP2T_PACKET_LENGTH$1;
	  endLoop = false;
	  while (startIndex >= 0) {
	    // Look for a pair of start and end sync bytes in the data..
	    if (bytes[startIndex] === SYNC_BYTE$1 && bytes[endIndex] === SYNC_BYTE$1) {
	      // We found a packet
	      packet = bytes.subarray(startIndex, endIndex);
	      type = probe$2.ts.parseType(packet, pmt.pid);

	      switch (type) {
	        case 'pes':
	          pesType = probe$2.ts.parsePesType(packet, pmt.table);
	          pusi = probe$2.ts.parsePayloadUnitStartIndicator(packet);
	          if (pesType === 'video' && pusi) {
	            parsed = probe$2.ts.parsePesTime(packet);
	            if (parsed) {
	              parsed.type = 'video';
	              result.video.push(parsed);
	              endLoop = true;
	            }
	          }
	          break;
	        default:
	          break;
	      }

	      if (endLoop) {
	        break;
	      }

	      startIndex -= MP2T_PACKET_LENGTH$1;
	      endIndex -= MP2T_PACKET_LENGTH$1;
	      continue;
	    }

	    // If we get here, we have somehow become de-synchronized and we need to step
	    // forward one byte at a time until we find a pair of sync bytes that denote
	    // a packet
	    startIndex--;
	    endIndex--;
	  }
	};

	/**
	 * Adjusts the timestamp information for the segment to account for
	 * rollover and convert to seconds based on pes packet timescale (90khz clock)
	 */
	var adjustTimestamp_ = function adjustTimestamp_(segmentInfo, baseTimestamp) {
	  if (segmentInfo.audio && segmentInfo.audio.length) {
	    var audioBaseTimestamp = baseTimestamp;
	    if (typeof audioBaseTimestamp === 'undefined') {
	      audioBaseTimestamp = segmentInfo.audio[0].dts;
	    }
	    segmentInfo.audio.forEach(function (info) {
	      info.dts = handleRollover$1(info.dts, audioBaseTimestamp);
	      info.pts = handleRollover$1(info.pts, audioBaseTimestamp);
	      // time in seconds
	      info.dtsTime = info.dts / PES_TIMESCALE;
	      info.ptsTime = info.pts / PES_TIMESCALE;
	    });
	  }

	  if (segmentInfo.video && segmentInfo.video.length) {
	    var videoBaseTimestamp = baseTimestamp;
	    if (typeof videoBaseTimestamp === 'undefined') {
	      videoBaseTimestamp = segmentInfo.video[0].dts;
	    }
	    segmentInfo.video.forEach(function (info) {
	      info.dts = handleRollover$1(info.dts, videoBaseTimestamp);
	      info.pts = handleRollover$1(info.pts, videoBaseTimestamp);
	      // time in seconds
	      info.dtsTime = info.dts / PES_TIMESCALE;
	      info.ptsTime = info.pts / PES_TIMESCALE;
	    });
	    if (segmentInfo.firstKeyFrame) {
	      var frame = segmentInfo.firstKeyFrame;
	      frame.dts = handleRollover$1(frame.dts, videoBaseTimestamp);
	      frame.pts = handleRollover$1(frame.pts, videoBaseTimestamp);
	      // time in seconds
	      frame.dtsTime = frame.dts / PES_TIMESCALE;
	      frame.ptsTime = frame.dts / PES_TIMESCALE;
	    }
	  }
	};

	/**
	 * inspects the aac data stream for start and end time information
	 */
	var inspectAac_ = function inspectAac_(bytes) {
	  var endLoop = false,
	      audioCount = 0,
	      sampleRate = null,
	      timestamp = null,
	      frameSize = 0,
	      byteIndex = 0,
	      packet;

	  while (bytes.length - byteIndex >= 3) {
	    var type = probe$2.aac.parseType(bytes, byteIndex);
	    switch (type) {
	      case 'timed-metadata':
	        // Exit early because we don't have enough to parse
	        // the ID3 tag header
	        if (bytes.length - byteIndex < 10) {
	          endLoop = true;
	          break;
	        }

	        frameSize = probe$2.aac.parseId3TagSize(bytes, byteIndex);

	        // Exit early if we don't have enough in the buffer
	        // to emit a full packet
	        if (frameSize > bytes.length) {
	          endLoop = true;
	          break;
	        }
	        if (timestamp === null) {
	          packet = bytes.subarray(byteIndex, byteIndex + frameSize);
	          timestamp = probe$2.aac.parseAacTimestamp(packet);
	        }
	        byteIndex += frameSize;
	        break;
	      case 'audio':
	        // Exit early because we don't have enough to parse
	        // the ADTS frame header
	        if (bytes.length - byteIndex < 7) {
	          endLoop = true;
	          break;
	        }

	        frameSize = probe$2.aac.parseAdtsSize(bytes, byteIndex);

	        // Exit early if we don't have enough in the buffer
	        // to emit a full packet
	        if (frameSize > bytes.length) {
	          endLoop = true;
	          break;
	        }
	        if (sampleRate === null) {
	          packet = bytes.subarray(byteIndex, byteIndex + frameSize);
	          sampleRate = probe$2.aac.parseSampleRate(packet);
	        }
	        audioCount++;
	        byteIndex += frameSize;
	        break;
	      default:
	        byteIndex++;
	        break;
	    }
	    if (endLoop) {
	      return null;
	    }
	  }
	  if (sampleRate === null || timestamp === null) {
	    return null;
	  }

	  var audioTimescale = PES_TIMESCALE / sampleRate;

	  var result = {
	    audio: [{
	      type: 'audio',
	      dts: timestamp,
	      pts: timestamp
	    }, {
	      type: 'audio',
	      dts: timestamp + audioCount * 1024 * audioTimescale,
	      pts: timestamp + audioCount * 1024 * audioTimescale
	    }]
	  };

	  return result;
	};

	/**
	 * inspects the transport stream segment data for start and end time information
	 * of the audio and video tracks (when present) as well as the first key frame's
	 * start time.
	 */
	var inspectTs_ = function inspectTs_(bytes) {
	  var pmt = {
	    pid: null,
	    table: null
	  };

	  var result = {};

	  parsePsi_(bytes, pmt);

	  for (var pid in pmt.table) {
	    if (pmt.table.hasOwnProperty(pid)) {
	      var type = pmt.table[pid];
	      switch (type) {
	        case streamTypes.H264_STREAM_TYPE:
	          result.video = [];
	          parseVideoPes_(bytes, pmt, result);
	          if (result.video.length === 0) {
	            delete result.video;
	          }
	          break;
	        case streamTypes.ADTS_STREAM_TYPE:
	          result.audio = [];
	          parseAudioPes_(bytes, pmt, result);
	          if (result.audio.length === 0) {
	            delete result.audio;
	          }
	          break;
	        default:
	          break;
	      }
	    }
	  }
	  return result;
	};

	/**
	 * Inspects segment byte data and returns an object with start and end timing information
	 *
	 * @param {Uint8Array} bytes The segment byte data
	 * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame
	 *  timestamps for rollover. This value must be in 90khz clock.
	 * @return {Object} Object containing start and end frame timing info of segment.
	 */
	var inspect = function inspect(bytes, baseTimestamp) {
	  var isAacData = probe$2.aac.isLikelyAacData(bytes);

	  var result;

	  if (isAacData) {
	    result = inspectAac_(bytes);
	  } else {
	    result = inspectTs_(bytes);
	  }

	  if (!result || !result.audio && !result.video) {
	    return null;
	  }

	  adjustTimestamp_(result, baseTimestamp);

	  return result;
	};

	var tsInspector = {
	  inspect: inspect,
	  parseAudioPes_: parseAudioPes_
	};

	/**
	 * @file sync-controller.js
	 */

	var tsprobe = tsInspector.inspect;

	var syncPointStrategies = [
	// Stategy "VOD": Handle the VOD-case where the sync-point is *always*
	//                the equivalence display-time 0 === segment-index 0
	{
	  name: 'VOD',
	  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
	    if (duration$$1 !== Infinity) {
	      var syncPoint = {
	        time: 0,
	        segmentIndex: 0
	      };

	      return syncPoint;
	    }
	    return null;
	  }
	},
	// Stategy "ProgramDateTime": We have a program-date-time tag in this playlist
	{
	  name: 'ProgramDateTime',
	  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
	    if (!syncController.datetimeToDisplayTime) {
	      return null;
	    }

	    var segments = playlist.segments || [];
	    var syncPoint = null;
	    var lastDistance = null;

	    currentTime = currentTime || 0;

	    for (var i = 0; i < segments.length; i++) {
	      var segment = segments[i];

	      if (segment.dateTimeObject) {
	        var segmentTime = segment.dateTimeObject.getTime() / 1000;
	        var segmentStart = segmentTime + syncController.datetimeToDisplayTime;
	        var distance = Math.abs(currentTime - segmentStart);

	        // Once the distance begins to increase, we have passed
	        // currentTime and can stop looking for better candidates
	        if (lastDistance !== null && lastDistance < distance) {
	          break;
	        }

	        lastDistance = distance;
	        syncPoint = {
	          time: segmentStart,
	          segmentIndex: i
	        };
	      }
	    }
	    return syncPoint;
	  }
	},
	// Stategy "Segment": We have a known time mapping for a timeline and a
	//                    segment in the current timeline with timing data
	{
	  name: 'Segment',
	  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
	    var segments = playlist.segments || [];
	    var syncPoint = null;
	    var lastDistance = null;

	    currentTime = currentTime || 0;

	    for (var i = 0; i < segments.length; i++) {
	      var segment = segments[i];

	      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {
	        var distance = Math.abs(currentTime - segment.start);

	        // Once the distance begins to increase, we have passed
	        // currentTime and can stop looking for better candidates
	        if (lastDistance !== null && lastDistance < distance) {
	          break;
	        }

	        if (!syncPoint || lastDistance === null || lastDistance >= distance) {
	          lastDistance = distance;
	          syncPoint = {
	            time: segment.start,
	            segmentIndex: i
	          };
	        }
	      }
	    }
	    return syncPoint;
	  }
	},
	// Stategy "Discontinuity": We have a discontinuity with a known
	//                          display-time
	{
	  name: 'Discontinuity',
	  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
	    var syncPoint = null;

	    currentTime = currentTime || 0;

	    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {
	      var lastDistance = null;

	      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {
	        var segmentIndex = playlist.discontinuityStarts[i];
	        var discontinuity = playlist.discontinuitySequence + i + 1;
	        var discontinuitySync = syncController.discontinuities[discontinuity];

	        if (discontinuitySync) {
	          var distance = Math.abs(currentTime - discontinuitySync.time);

	          // Once the distance begins to increase, we have passed
	          // currentTime and can stop looking for better candidates
	          if (lastDistance !== null && lastDistance < distance) {
	            break;
	          }

	          if (!syncPoint || lastDistance === null || lastDistance >= distance) {
	            lastDistance = distance;
	            syncPoint = {
	              time: discontinuitySync.time,
	              segmentIndex: segmentIndex
	            };
	          }
	        }
	      }
	    }
	    return syncPoint;
	  }
	},
	// Stategy "Playlist": We have a playlist with a known mapping of
	//                     segment index to display time
	{
	  name: 'Playlist',
	  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
	    if (playlist.syncInfo) {
	      var syncPoint = {
	        time: playlist.syncInfo.time,
	        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence
	      };

	      return syncPoint;
	    }
	    return null;
	  }
	}];

	var SyncController = function (_videojs$EventTarget) {
	  inherits$1(SyncController, _videojs$EventTarget);

	  function SyncController() {
	    classCallCheck$1(this, SyncController);

	    // Segment Loader state variables...
	    // ...for synching across variants
	    var _this = possibleConstructorReturn$1(this, (SyncController.__proto__ || Object.getPrototypeOf(SyncController)).call(this));

	    _this.inspectCache_ = undefined;

	    // ...for synching across variants
	    _this.timelines = [];
	    _this.discontinuities = [];
	    _this.datetimeToDisplayTime = null;

	    _this.logger_ = logger('SyncController');
	    return _this;
	  }

	  /**
	   * Find a sync-point for the playlist specified
	   *
	   * A sync-point is defined as a known mapping from display-time to
	   * a segment-index in the current playlist.
	   *
	   * @param {Playlist} playlist
	   *        The playlist that needs a sync-point
	   * @param {Number} duration
	   *        Duration of the MediaSource (Infinite if playing a live source)
	   * @param {Number} currentTimeline
	   *        The last timeline from which a segment was loaded
	   * @returns {Object}
	   *          A sync-point object
	   */


	  createClass(SyncController, [{
	    key: 'getSyncPoint',
	    value: function getSyncPoint(playlist, duration$$1, currentTimeline, currentTime) {
	      var syncPoints = this.runStrategies_(playlist, duration$$1, currentTimeline, currentTime);

	      if (!syncPoints.length) {
	        // Signal that we need to attempt to get a sync-point manually
	        // by fetching a segment in the playlist and constructing
	        // a sync-point from that information
	        return null;
	      }

	      // Now find the sync-point that is closest to the currentTime because
	      // that should result in the most accurate guess about which segment
	      // to fetch
	      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });
	    }

	    /**
	     * Calculate the amount of time that has expired off the playlist during playback
	     *
	     * @param {Playlist} playlist
	     *        Playlist object to calculate expired from
	     * @param {Number} duration
	     *        Duration of the MediaSource (Infinity if playling a live source)
	     * @returns {Number|null}
	     *          The amount of time that has expired off the playlist during playback. Null
	     *          if no sync-points for the playlist can be found.
	     */

	  }, {
	    key: 'getExpiredTime',
	    value: function getExpiredTime(playlist, duration$$1) {
	      if (!playlist || !playlist.segments) {
	        return null;
	      }

	      var syncPoints = this.runStrategies_(playlist, duration$$1, playlist.discontinuitySequence, 0);

	      // Without sync-points, there is not enough information to determine the expired time
	      if (!syncPoints.length) {
	        return null;
	      }

	      var syncPoint = this.selectSyncPoint_(syncPoints, {
	        key: 'segmentIndex',
	        value: 0
	      });

	      // If the sync-point is beyond the start of the playlist, we want to subtract the
	      // duration from index 0 to syncPoint.segmentIndex instead of adding.
	      if (syncPoint.segmentIndex > 0) {
	        syncPoint.time *= -1;
	      }

	      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));
	    }

	    /**
	     * Runs each sync-point strategy and returns a list of sync-points returned by the
	     * strategies
	     *
	     * @private
	     * @param {Playlist} playlist
	     *        The playlist that needs a sync-point
	     * @param {Number} duration
	     *        Duration of the MediaSource (Infinity if playing a live source)
	     * @param {Number} currentTimeline
	     *        The last timeline from which a segment was loaded
	     * @returns {Array}
	     *          A list of sync-point objects
	     */

	  }, {
	    key: 'runStrategies_',
	    value: function runStrategies_(playlist, duration$$1, currentTimeline, currentTime) {
	      var syncPoints = [];

	      // Try to find a sync-point in by utilizing various strategies...
	      for (var i = 0; i < syncPointStrategies.length; i++) {
	        var strategy = syncPointStrategies[i];
	        var syncPoint = strategy.run(this, playlist, duration$$1, currentTimeline, currentTime);

	        if (syncPoint) {
	          syncPoint.strategy = strategy.name;
	          syncPoints.push({
	            strategy: strategy.name,
	            syncPoint: syncPoint
	          });
	        }
	      }

	      return syncPoints;
	    }

	    /**
	     * Selects the sync-point nearest the specified target
	     *
	     * @private
	     * @param {Array} syncPoints
	     *        List of sync-points to select from
	     * @param {Object} target
	     *        Object specifying the property and value we are targeting
	     * @param {String} target.key
	     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'
	     * @param {Number} target.value
	     *        The value to target for the specified key.
	     * @returns {Object}
	     *          The sync-point nearest the target
	     */

	  }, {
	    key: 'selectSyncPoint_',
	    value: function selectSyncPoint_(syncPoints, target) {
	      var bestSyncPoint = syncPoints[0].syncPoint;
	      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);
	      var bestStrategy = syncPoints[0].strategy;

	      for (var i = 1; i < syncPoints.length; i++) {
	        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);

	        if (newDistance < bestDistance) {
	          bestDistance = newDistance;
	          bestSyncPoint = syncPoints[i].syncPoint;
	          bestStrategy = syncPoints[i].strategy;
	        }
	      }

	      this.logger_('syncPoint for [' + target.key + ': ' + target.value + '] chosen with strategy' + (' [' + bestStrategy + ']: [time:' + bestSyncPoint.time + ',') + (' segmentIndex:' + bestSyncPoint.segmentIndex + ']'));

	      return bestSyncPoint;
	    }

	    /**
	     * Save any meta-data present on the segments when segments leave
	     * the live window to the playlist to allow for synchronization at the
	     * playlist level later.
	     *
	     * @param {Playlist} oldPlaylist - The previous active playlist
	     * @param {Playlist} newPlaylist - The updated and most current playlist
	     */

	  }, {
	    key: 'saveExpiredSegmentInfo',
	    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {
	      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;

	      // When a segment expires from the playlist and it has a start time
	      // save that information as a possible sync-point reference in future
	      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {
	        var lastRemovedSegment = oldPlaylist.segments[i];

	        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {
	          newPlaylist.syncInfo = {
	            mediaSequence: oldPlaylist.mediaSequence + i,
	            time: lastRemovedSegment.start
	          };
	          this.logger_('playlist refresh sync: [time:' + newPlaylist.syncInfo.time + ',' + (' mediaSequence: ' + newPlaylist.syncInfo.mediaSequence + ']'));
	          this.trigger('syncinfoupdate');
	          break;
	        }
	      }
	    }

	    /**
	     * Save the mapping from playlist's ProgramDateTime to display. This should
	     * only ever happen once at the start of playback.
	     *
	     * @param {Playlist} playlist - The currently active playlist
	     */

	  }, {
	    key: 'setDateTimeMapping',
	    value: function setDateTimeMapping(playlist) {
	      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {
	        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1000;

	        this.datetimeToDisplayTime = -playlistTimestamp;
	      }
	    }

	    /**
	     * Reset the state of the inspection cache when we do a rendition
	     * switch
	     */

	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.inspectCache_ = undefined;
	    }

	    /**
	     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start
	     * and end of the segment in it's internal "media time". Used to generate
	     * mappings from that internal "media time" to the display time that is
	     * shown on the player.
	     *
	     * @param {SegmentInfo} segmentInfo - The current active request information
	     */

	  }, {
	    key: 'probeSegmentInfo',
	    value: function probeSegmentInfo(segmentInfo) {
	      var segment = segmentInfo.segment;
	      var playlist = segmentInfo.playlist;
	      var timingInfo = void 0;

	      if (segment.map) {
	        timingInfo = this.probeMp4Segment_(segmentInfo);
	      } else {
	        timingInfo = this.probeTsSegment_(segmentInfo);
	      }

	      if (timingInfo) {
	        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {
	          this.saveDiscontinuitySyncInfo_(segmentInfo);

	          // If the playlist does not have sync information yet, record that information
	          // now with segment timing information
	          if (!playlist.syncInfo) {
	            playlist.syncInfo = {
	              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,
	              time: segment.start
	            };
	          }
	        }
	      }

	      return timingInfo;
	    }

	    /**
	     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment
	     * in it's internal "media time".
	     *
	     * @private
	     * @param {SegmentInfo} segmentInfo - The current active request information
	     * @return {object} The start and end time of the current segment in "media time"
	     */

	  }, {
	    key: 'probeMp4Segment_',
	    value: function probeMp4Segment_(segmentInfo) {
	      var segment = segmentInfo.segment;
	      var timescales = probe.timescale(segment.map.bytes);
	      var startTime = probe.startTime(timescales, segmentInfo.bytes);

	      if (segmentInfo.timestampOffset !== null) {
	        segmentInfo.timestampOffset -= startTime;
	      }

	      return {
	        start: startTime,
	        end: startTime + segment.duration
	      };
	    }

	    /**
	     * Probe an mpeg2-ts segment to determine the start and end of the segment
	     * in it's internal "media time".
	     *
	     * @private
	     * @param {SegmentInfo} segmentInfo - The current active request information
	     * @return {object} The start and end time of the current segment in "media time"
	     */

	  }, {
	    key: 'probeTsSegment_',
	    value: function probeTsSegment_(segmentInfo) {
	      var timeInfo = tsprobe(segmentInfo.bytes, this.inspectCache_);
	      var segmentStartTime = void 0;
	      var segmentEndTime = void 0;

	      if (!timeInfo) {
	        return null;
	      }

	      if (timeInfo.video && timeInfo.video.length === 2) {
	        this.inspectCache_ = timeInfo.video[1].dts;
	        segmentStartTime = timeInfo.video[0].dtsTime;
	        segmentEndTime = timeInfo.video[1].dtsTime;
	      } else if (timeInfo.audio && timeInfo.audio.length === 2) {
	        this.inspectCache_ = timeInfo.audio[1].dts;
	        segmentStartTime = timeInfo.audio[0].dtsTime;
	        segmentEndTime = timeInfo.audio[1].dtsTime;
	      }

	      return {
	        start: segmentStartTime,
	        end: segmentEndTime,
	        containsVideo: timeInfo.video && timeInfo.video.length === 2,
	        containsAudio: timeInfo.audio && timeInfo.audio.length === 2
	      };
	    }
	  }, {
	    key: 'timestampOffsetForTimeline',
	    value: function timestampOffsetForTimeline(timeline) {
	      if (typeof this.timelines[timeline] === 'undefined') {
	        return null;
	      }
	      return this.timelines[timeline].time;
	    }
	  }, {
	    key: 'mappingForTimeline',
	    value: function mappingForTimeline(timeline) {
	      if (typeof this.timelines[timeline] === 'undefined') {
	        return null;
	      }
	      return this.timelines[timeline].mapping;
	    }

	    /**
	     * Use the "media time" for a segment to generate a mapping to "display time" and
	     * save that display time to the segment.
	     *
	     * @private
	     * @param {SegmentInfo} segmentInfo
	     *        The current active request information
	     * @param {object} timingInfo
	     *        The start and end time of the current segment in "media time"
	     * @returns {Boolean}
	     *          Returns false if segment time mapping could not be calculated
	     */

	  }, {
	    key: 'calculateSegmentTimeMapping_',
	    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {
	      var segment = segmentInfo.segment;
	      var mappingObj = this.timelines[segmentInfo.timeline];

	      if (segmentInfo.timestampOffset !== null) {
	        mappingObj = {
	          time: segmentInfo.startOfSegment,
	          mapping: segmentInfo.startOfSegment - timingInfo.start
	        };
	        this.timelines[segmentInfo.timeline] = mappingObj;
	        this.trigger('timestampoffset');

	        this.logger_('time mapping for timeline ' + segmentInfo.timeline + ': ' + ('[time: ' + mappingObj.time + '] [mapping: ' + mappingObj.mapping + ']'));

	        segment.start = segmentInfo.startOfSegment;
	        segment.end = timingInfo.end + mappingObj.mapping;
	      } else if (mappingObj) {
	        segment.start = timingInfo.start + mappingObj.mapping;
	        segment.end = timingInfo.end + mappingObj.mapping;
	      } else {
	        return false;
	      }

	      return true;
	    }

	    /**
	     * Each time we have discontinuity in the playlist, attempt to calculate the location
	     * in display of the start of the discontinuity and save that. We also save an accuracy
	     * value so that we save values with the most accuracy (closest to 0.)
	     *
	     * @private
	     * @param {SegmentInfo} segmentInfo - The current active request information
	     */

	  }, {
	    key: 'saveDiscontinuitySyncInfo_',
	    value: function saveDiscontinuitySyncInfo_(segmentInfo) {
	      var playlist = segmentInfo.playlist;
	      var segment = segmentInfo.segment;

	      // If the current segment is a discontinuity then we know exactly where
	      // the start of the range and it's accuracy is 0 (greater accuracy values
	      // mean more approximation)
	      if (segment.discontinuity) {
	        this.discontinuities[segment.timeline] = {
	          time: segment.start,
	          accuracy: 0
	        };
	      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {
	        // Search for future discontinuities that we can provide better timing
	        // information for and save that information for sync purposes
	        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {
	          var segmentIndex = playlist.discontinuityStarts[i];
	          var discontinuity = playlist.discontinuitySequence + i + 1;
	          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;
	          var accuracy = Math.abs(mediaIndexDiff);

	          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {
	            var time = void 0;

	            if (mediaIndexDiff < 0) {
	              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);
	            } else {
	              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);
	            }

	            this.discontinuities[discontinuity] = {
	              time: time,
	              accuracy: accuracy
	            };
	          }
	        }
	      }
	    }
	  }]);
	  return SyncController;
	}(videojs.EventTarget);

	var Decrypter$1 = new shimWorker("./decrypter-worker.worker.js", function (window, document) {
	  var self = this;
	  var decrypterWorker = function () {

	    /*
	     * pkcs7.pad
	     * https://github.com/brightcove/pkcs7
	     *
	     * Copyright (c) 2014 Brightcove
	     * Licensed under the apache2 license.
	     */

	    /**
	     * Returns the subarray of a Uint8Array without PKCS#7 padding.
	     * @param padded {Uint8Array} unencrypted bytes that have been padded
	     * @return {Uint8Array} the unpadded bytes
	     * @see http://tools.ietf.org/html/rfc5652
	     */

	    function unpad(padded) {
	      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
	    }

	    var classCallCheck = function classCallCheck(instance, Constructor) {
	      if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	      }
	    };

	    var createClass = function () {
	      function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	          var descriptor = props[i];
	          descriptor.enumerable = descriptor.enumerable || false;
	          descriptor.configurable = true;
	          if ("value" in descriptor) descriptor.writable = true;
	          Object.defineProperty(target, descriptor.key, descriptor);
	        }
	      }

	      return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	      };
	    }();

	    var inherits = function inherits(subClass, superClass) {
	      if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	      }

	      subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: {
	          value: subClass,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	    };

	    var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
	      if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	      }

	      return call && (typeof call === "object" || typeof call === "function") ? call : self;
	    };

	    /**
	     * @file aes.js
	     *
	     * This file contains an adaptation of the AES decryption algorithm
	     * from the Standford Javascript Cryptography Library. That work is
	     * covered by the following copyright and permissions notice:
	     *
	     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.
	     * All rights reserved.
	     *
	     * Redistribution and use in source and binary forms, with or without
	     * modification, are permitted provided that the following conditions are
	     * met:
	     *
	     * 1. Redistributions of source code must retain the above copyright
	     *    notice, this list of conditions and the following disclaimer.
	     *
	     * 2. Redistributions in binary form must reproduce the above
	     *    copyright notice, this list of conditions and the following
	     *    disclaimer in the documentation and/or other materials provided
	     *    with the distribution.
	     *
	     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
	     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE
	     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
	     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
	     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
	     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	     *
	     * The views and conclusions contained in the software and documentation
	     * are those of the authors and should not be interpreted as representing
	     * official policies, either expressed or implied, of the authors.
	     */

	    /**
	     * Expand the S-box tables.
	     *
	     * @private
	     */
	    var precompute = function precompute() {
	      var tables = [[[], [], [], [], []], [[], [], [], [], []]];
	      var encTable = tables[0];
	      var decTable = tables[1];
	      var sbox = encTable[4];
	      var sboxInv = decTable[4];
	      var i = void 0;
	      var x = void 0;
	      var xInv = void 0;
	      var d = [];
	      var th = [];
	      var x2 = void 0;
	      var x4 = void 0;
	      var x8 = void 0;
	      var s = void 0;
	      var tEnc = void 0;
	      var tDec = void 0;

	      // Compute double and third tables
	      for (i = 0; i < 256; i++) {
	        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
	      }

	      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {
	        // Compute sbox
	        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
	        s = s >> 8 ^ s & 255 ^ 99;
	        sbox[x] = s;
	        sboxInv[s] = x;

	        // Compute MixColumns
	        x8 = d[x4 = d[x2 = d[x]]];
	        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
	        tEnc = d[s] * 0x101 ^ s * 0x1010100;

	        for (i = 0; i < 4; i++) {
	          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
	          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
	        }
	      }

	      // Compactify. Considerable speedup on Firefox.
	      for (i = 0; i < 5; i++) {
	        encTable[i] = encTable[i].slice(0);
	        decTable[i] = decTable[i].slice(0);
	      }
	      return tables;
	    };
	    var aesTables = null;

	    /**
	     * Schedule out an AES key for both encryption and decryption. This
	     * is a low-level class. Use a cipher mode to do bulk encryption.
	     *
	     * @class AES
	     * @param key {Array} The key as an array of 4, 6 or 8 words.
	     */

	    var AES = function () {
	      function AES(key) {
	        classCallCheck(this, AES);

	        /**
	         * The expanded S-box and inverse S-box tables. These will be computed
	         * on the client so that we don't have to send them down the wire.
	         *
	         * There are two tables, _tables[0] is for encryption and
	         * _tables[1] is for decryption.
	         *
	         * The first 4 sub-tables are the expanded S-box with MixColumns. The
	         * last (_tables[01][4]) is the S-box itself.
	         *
	         * @private
	         */
	        // if we have yet to precompute the S-box tables
	        // do so now
	        if (!aesTables) {
	          aesTables = precompute();
	        }
	        // then make a copy of that object for use
	        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];
	        var i = void 0;
	        var j = void 0;
	        var tmp = void 0;
	        var encKey = void 0;
	        var decKey = void 0;
	        var sbox = this._tables[0][4];
	        var decTable = this._tables[1];
	        var keyLen = key.length;
	        var rcon = 1;

	        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {
	          throw new Error('Invalid aes key size');
	        }

	        encKey = key.slice(0);
	        decKey = [];
	        this._key = [encKey, decKey];

	        // schedule encryption keys
	        for (i = keyLen; i < 4 * keyLen + 28; i++) {
	          tmp = encKey[i - 1];

	          // apply sbox
	          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
	            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];

	            // shift rows and add rcon
	            if (i % keyLen === 0) {
	              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
	              rcon = rcon << 1 ^ (rcon >> 7) * 283;
	            }
	          }

	          encKey[i] = encKey[i - keyLen] ^ tmp;
	        }

	        // schedule decryption keys
	        for (j = 0; i; j++, i--) {
	          tmp = encKey[j & 3 ? i : i - 4];
	          if (i <= 4 || j < 4) {
	            decKey[j] = tmp;
	          } else {
	            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
	          }
	        }
	      }

	      /**
	       * Decrypt 16 bytes, specified as four 32-bit words.
	       *
	       * @param {Number} encrypted0 the first word to decrypt
	       * @param {Number} encrypted1 the second word to decrypt
	       * @param {Number} encrypted2 the third word to decrypt
	       * @param {Number} encrypted3 the fourth word to decrypt
	       * @param {Int32Array} out the array to write the decrypted words
	       * into
	       * @param {Number} offset the offset into the output array to start
	       * writing results
	       * @return {Array} The plaintext.
	       */

	      AES.prototype.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {
	        var key = this._key[1];
	        // state variables a,b,c,d are loaded with pre-whitened data
	        var a = encrypted0 ^ key[0];
	        var b = encrypted3 ^ key[1];
	        var c = encrypted2 ^ key[2];
	        var d = encrypted1 ^ key[3];
	        var a2 = void 0;
	        var b2 = void 0;
	        var c2 = void 0;

	        // key.length === 2 ?
	        var nInnerRounds = key.length / 4 - 2;
	        var i = void 0;
	        var kIndex = 4;
	        var table = this._tables[1];

	        // load up the tables
	        var table0 = table[0];
	        var table1 = table[1];
	        var table2 = table[2];
	        var table3 = table[3];
	        var sbox = table[4];

	        // Inner rounds. Cribbed from OpenSSL.
	        for (i = 0; i < nInnerRounds; i++) {
	          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];
	          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];
	          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];
	          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];
	          kIndex += 4;
	          a = a2;b = b2;c = c2;
	        }

	        // Last round.
	        for (i = 0; i < 4; i++) {
	          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];
	          a2 = a;a = b;b = c;c = d;d = a2;
	        }
	      };

	      return AES;
	    }();

	    /**
	     * @file stream.js
	     */
	    /**
	     * A lightweight readable stream implemention that handles event dispatching.
	     *
	     * @class Stream
	     */
	    var Stream = function () {
	      function Stream() {
	        classCallCheck(this, Stream);

	        this.listeners = {};
	      }

	      /**
	       * Add a listener for a specified event type.
	       *
	       * @param {String} type the event name
	       * @param {Function} listener the callback to be invoked when an event of
	       * the specified type occurs
	       */

	      Stream.prototype.on = function on(type, listener) {
	        if (!this.listeners[type]) {
	          this.listeners[type] = [];
	        }
	        this.listeners[type].push(listener);
	      };

	      /**
	       * Remove a listener for a specified event type.
	       *
	       * @param {String} type the event name
	       * @param {Function} listener  a function previously registered for this
	       * type of event through `on`
	       * @return {Boolean} if we could turn it off or not
	       */

	      Stream.prototype.off = function off(type, listener) {
	        if (!this.listeners[type]) {
	          return false;
	        }

	        var index = this.listeners[type].indexOf(listener);

	        this.listeners[type].splice(index, 1);
	        return index > -1;
	      };

	      /**
	       * Trigger an event of the specified type on this stream. Any additional
	       * arguments to this function are passed as parameters to event listeners.
	       *
	       * @param {String} type the event name
	       */

	      Stream.prototype.trigger = function trigger(type) {
	        var callbacks = this.listeners[type];

	        if (!callbacks) {
	          return;
	        }

	        // Slicing the arguments on every invocation of this method
	        // can add a significant amount of overhead. Avoid the
	        // intermediate object creation for the common case of a
	        // single callback argument
	        if (arguments.length === 2) {
	          var length = callbacks.length;

	          for (var i = 0; i < length; ++i) {
	            callbacks[i].call(this, arguments[1]);
	          }
	        } else {
	          var args = Array.prototype.slice.call(arguments, 1);
	          var _length = callbacks.length;

	          for (var _i = 0; _i < _length; ++_i) {
	            callbacks[_i].apply(this, args);
	          }
	        }
	      };

	      /**
	       * Destroys the stream and cleans up.
	       */

	      Stream.prototype.dispose = function dispose() {
	        this.listeners = {};
	      };
	      /**
	       * Forwards all `data` events on this stream to the destination stream. The
	       * destination stream should provide a method `push` to receive the data
	       * events as they arrive.
	       *
	       * @param {Stream} destination the stream that will receive all `data` events
	       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
	       */

	      Stream.prototype.pipe = function pipe(destination) {
	        this.on('data', function (data) {
	          destination.push(data);
	        });
	      };

	      return Stream;
	    }();

	    /**
	     * @file async-stream.js
	     */
	    /**
	     * A wrapper around the Stream class to use setTiemout
	     * and run stream "jobs" Asynchronously
	     *
	     * @class AsyncStream
	     * @extends Stream
	     */

	    var AsyncStream = function (_Stream) {
	      inherits(AsyncStream, _Stream);

	      function AsyncStream() {
	        classCallCheck(this, AsyncStream);

	        var _this = possibleConstructorReturn(this, _Stream.call(this, Stream));

	        _this.jobs = [];
	        _this.delay = 1;
	        _this.timeout_ = null;
	        return _this;
	      }

	      /**
	       * process an async job
	       *
	       * @private
	       */

	      AsyncStream.prototype.processJob_ = function processJob_() {
	        this.jobs.shift()();
	        if (this.jobs.length) {
	          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
	        } else {
	          this.timeout_ = null;
	        }
	      };

	      /**
	       * push a job into the stream
	       *
	       * @param {Function} job the job to push into the stream
	       */

	      AsyncStream.prototype.push = function push(job) {
	        this.jobs.push(job);
	        if (!this.timeout_) {
	          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
	        }
	      };

	      return AsyncStream;
	    }(Stream);

	    /**
	     * @file decrypter.js
	     *
	     * An asynchronous implementation of AES-128 CBC decryption with
	     * PKCS#7 padding.
	     */

	    /**
	     * Convert network-order (big-endian) bytes into their little-endian
	     * representation.
	     */
	    var ntoh = function ntoh(word) {
	      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
	    };

	    /**
	     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.
	     *
	     * @param {Uint8Array} encrypted the encrypted bytes
	     * @param {Uint32Array} key the bytes of the decryption key
	     * @param {Uint32Array} initVector the initialization vector (IV) to
	     * use for the first round of CBC.
	     * @return {Uint8Array} the decrypted bytes
	     *
	     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
	     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
	     * @see https://tools.ietf.org/html/rfc2315
	     */
	    var decrypt = function decrypt(encrypted, key, initVector) {
	      // word-level access to the encrypted bytes
	      var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);

	      var decipher = new AES(Array.prototype.slice.call(key));

	      // byte and word-level access for the decrypted output
	      var decrypted = new Uint8Array(encrypted.byteLength);
	      var decrypted32 = new Int32Array(decrypted.buffer);

	      // temporary variables for working with the IV, encrypted, and
	      // decrypted data
	      var init0 = void 0;
	      var init1 = void 0;
	      var init2 = void 0;
	      var init3 = void 0;
	      var encrypted0 = void 0;
	      var encrypted1 = void 0;
	      var encrypted2 = void 0;
	      var encrypted3 = void 0;

	      // iteration variable
	      var wordIx = void 0;

	      // pull out the words of the IV to ensure we don't modify the
	      // passed-in reference and easier access
	      init0 = initVector[0];
	      init1 = initVector[1];
	      init2 = initVector[2];
	      init3 = initVector[3];

	      // decrypt four word sequences, applying cipher-block chaining (CBC)
	      // to each decrypted block
	      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {
	        // convert big-endian (network order) words into little-endian
	        // (javascript order)
	        encrypted0 = ntoh(encrypted32[wordIx]);
	        encrypted1 = ntoh(encrypted32[wordIx + 1]);
	        encrypted2 = ntoh(encrypted32[wordIx + 2]);
	        encrypted3 = ntoh(encrypted32[wordIx + 3]);

	        // decrypt the block
	        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);

	        // XOR with the IV, and restore network byte-order to obtain the
	        // plaintext
	        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);
	        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);
	        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);
	        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);

	        // setup the IV for the next round
	        init0 = encrypted0;
	        init1 = encrypted1;
	        init2 = encrypted2;
	        init3 = encrypted3;
	      }

	      return decrypted;
	    };

	    /**
	     * The `Decrypter` class that manages decryption of AES
	     * data through `AsyncStream` objects and the `decrypt`
	     * function
	     *
	     * @param {Uint8Array} encrypted the encrypted bytes
	     * @param {Uint32Array} key the bytes of the decryption key
	     * @param {Uint32Array} initVector the initialization vector (IV) to
	     * @param {Function} done the function to run when done
	     * @class Decrypter
	     */

	    var Decrypter = function () {
	      function Decrypter(encrypted, key, initVector, done) {
	        classCallCheck(this, Decrypter);

	        var step = Decrypter.STEP;
	        var encrypted32 = new Int32Array(encrypted.buffer);
	        var decrypted = new Uint8Array(encrypted.byteLength);
	        var i = 0;

	        this.asyncStream_ = new AsyncStream();

	        // split up the encryption job and do the individual chunks asynchronously
	        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
	        for (i = step; i < encrypted32.length; i += step) {
	          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);
	          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
	        }
	        // invoke the done() callback when everything is finished
	        this.asyncStream_.push(function () {
	          // remove pkcs#7 padding from the decrypted bytes
	          done(null, unpad(decrypted));
	        });
	      }

	      /**
	       * a getter for step the maximum number of bytes to process at one time
	       *
	       * @return {Number} the value of step 32000
	       */

	      /**
	       * @private
	       */
	      Decrypter.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {
	        return function () {
	          var bytes = decrypt(encrypted, key, initVector);

	          decrypted.set(bytes, encrypted.byteOffset);
	        };
	      };

	      createClass(Decrypter, null, [{
	        key: 'STEP',
	        get: function get$$1() {
	          // 4 * 8000;
	          return 32000;
	        }
	      }]);
	      return Decrypter;
	    }();

	    /**
	     * @file bin-utils.js
	     */

	    /**
	     * Creates an object for sending to a web worker modifying properties that are TypedArrays
	     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.
	     *
	     * @param {Object} message
	     *        Object of properties and values to send to the web worker
	     * @return {Object}
	     *         Modified message with TypedArray values expanded
	     * @function createTransferableMessage
	     */
	    var createTransferableMessage = function createTransferableMessage(message) {
	      var transferable = {};

	      Object.keys(message).forEach(function (key) {
	        var value = message[key];

	        if (ArrayBuffer.isView(value)) {
	          transferable[key] = {
	            bytes: value.buffer,
	            byteOffset: value.byteOffset,
	            byteLength: value.byteLength
	          };
	        } else {
	          transferable[key] = value;
	        }
	      });

	      return transferable;
	    };

	    /**
	     * Our web worker interface so that things can talk to aes-decrypter
	     * that will be running in a web worker. the scope is passed to this by
	     * webworkify.
	     *
	     * @param {Object} self
	     *        the scope for the web worker
	     */
	    var DecrypterWorker = function DecrypterWorker(self) {
	      self.onmessage = function (event) {
	        var data = event.data;
	        var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);
	        var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);
	        var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);

	        /* eslint-disable no-new, handle-callback-err */
	        new Decrypter(encrypted, key, iv, function (err, bytes) {
	          self.postMessage(createTransferableMessage({
	            source: data.source,
	            decrypted: bytes
	          }), [bytes.buffer]);
	        });
	        /* eslint-enable */
	      };
	    };

	    var decrypterWorker = new DecrypterWorker(self);

	    return decrypterWorker;
	  }();
	});

	/**
	 * Convert the properties of an HLS track into an audioTrackKind.
	 *
	 * @private
	 */
	var audioTrackKind_ = function audioTrackKind_(properties) {
	  var kind = properties.default ? 'main' : 'alternative';

	  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {
	    kind = 'main-desc';
	  }

	  return kind;
	};

	/**
	 * Pause provided segment loader and playlist loader if active
	 *
	 * @param {SegmentLoader} segmentLoader
	 *        SegmentLoader to pause
	 * @param {Object} mediaType
	 *        Active media type
	 * @function stopLoaders
	 */
	var stopLoaders = function stopLoaders(segmentLoader, mediaType) {
	  segmentLoader.abort();
	  segmentLoader.pause();

	  if (mediaType && mediaType.activePlaylistLoader) {
	    mediaType.activePlaylistLoader.pause();
	    mediaType.activePlaylistLoader = null;
	  }
	};

	/**
	 * Start loading provided segment loader and playlist loader
	 *
	 * @param {PlaylistLoader} playlistLoader
	 *        PlaylistLoader to start loading
	 * @param {Object} mediaType
	 *        Active media type
	 * @function startLoaders
	 */
	var startLoaders = function startLoaders(playlistLoader, mediaType) {
	  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the
	  // playlist loader
	  mediaType.activePlaylistLoader = playlistLoader;
	  playlistLoader.load();
	};

	/**
	 * Returns a function to be called when the media group changes. It performs a
	 * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a
	 * change of group is merely a rendition switch of the same content at another encoding,
	 * rather than a change of content, such as switching audio from English to Spanish.
	 *
	 * @param {String} type
	 *        MediaGroup type
	 * @param {Object} settings
	 *        Object containing required information for media groups
	 * @return {Function}
	 *         Handler for a non-destructive resync of SegmentLoader when the active media
	 *         group changes.
	 * @function onGroupChanged
	 */
	var onGroupChanged = function onGroupChanged(type, settings) {
	  return function () {
	    var _settings$segmentLoad = settings.segmentLoaders,
	        segmentLoader = _settings$segmentLoad[type],
	        mainSegmentLoader = _settings$segmentLoad.main,
	        mediaType = settings.mediaTypes[type];

	    var activeTrack = mediaType.activeTrack();
	    var activeGroup = mediaType.activeGroup(activeTrack);
	    var previousActiveLoader = mediaType.activePlaylistLoader;

	    stopLoaders(segmentLoader, mediaType);

	    if (!activeGroup) {
	      // there is no group active
	      return;
	    }

	    if (!activeGroup.playlistLoader) {
	      if (previousActiveLoader) {
	        // The previous group had a playlist loader but the new active group does not
	        // this means we are switching from demuxed to muxed audio. In this case we want to
	        // do a destructive reset of the main segment loader and not restart the audio
	        // loaders.
	        mainSegmentLoader.resetEverything();
	      }
	      return;
	    }

	    // Non-destructive resync
	    segmentLoader.resyncLoader();

	    startLoaders(activeGroup.playlistLoader, mediaType);
	  };
	};

	/**
	 * Returns a function to be called when the media track changes. It performs a
	 * destructive reset of the SegmentLoader to ensure we start loading as close to
	 * currentTime as possible.
	 *
	 * @param {String} type
	 *        MediaGroup type
	 * @param {Object} settings
	 *        Object containing required information for media groups
	 * @return {Function}
	 *         Handler for a destructive reset of SegmentLoader when the active media
	 *         track changes.
	 * @function onTrackChanged
	 */
	var onTrackChanged = function onTrackChanged(type, settings) {
	  return function () {
	    var _settings$segmentLoad2 = settings.segmentLoaders,
	        segmentLoader = _settings$segmentLoad2[type],
	        mainSegmentLoader = _settings$segmentLoad2.main,
	        mediaType = settings.mediaTypes[type];

	    var activeTrack = mediaType.activeTrack();
	    var activeGroup = mediaType.activeGroup(activeTrack);
	    var previousActiveLoader = mediaType.activePlaylistLoader;

	    stopLoaders(segmentLoader, mediaType);

	    if (!activeGroup) {
	      // there is no group active so we do not want to restart loaders
	      return;
	    }

	    if (!activeGroup.playlistLoader) {
	      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist
	      // loader for the audio group), we want to do a destructive reset of the main segment
	      // loader and not restart the audio loaders
	      mainSegmentLoader.resetEverything();
	      return;
	    }

	    if (previousActiveLoader === activeGroup.playlistLoader) {
	      // Nothing has actually changed. This can happen because track change events can fire
	      // multiple times for a "single" change. One for enabling the new active track, and
	      // one for disabling the track that was active
	      startLoaders(activeGroup.playlistLoader, mediaType);
	      return;
	    }

	    if (segmentLoader.track) {
	      // For WebVTT, set the new text track in the segmentloader
	      segmentLoader.track(activeTrack);
	    }

	    // destructive reset
	    segmentLoader.resetEverything();

	    startLoaders(activeGroup.playlistLoader, mediaType);
	  };
	};

	var onError = {
	  /**
	   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
	   * an error.
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @return {Function}
	   *         Error handler. Logs warning (or error if the playlist is blacklisted) to
	   *         console and switches back to default audio track.
	   * @function onError.AUDIO
	   */
	  AUDIO: function AUDIO(type, settings) {
	    return function () {
	      var segmentLoader = settings.segmentLoaders[type],
	          mediaType = settings.mediaTypes[type],
	          blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;


	      stopLoaders(segmentLoader, mediaType);

	      // switch back to default audio track
	      var activeTrack = mediaType.activeTrack();
	      var activeGroup = mediaType.activeGroup();
	      var id = (activeGroup.filter(function (group) {
	        return group.default;
	      })[0] || activeGroup[0]).id;
	      var defaultTrack = mediaType.tracks[id];

	      if (activeTrack === defaultTrack) {
	        // Default track encountered an error. All we can do now is blacklist the current
	        // rendition and hope another will switch audio groups
	        blacklistCurrentPlaylist({
	          message: 'Problem encountered loading the default audio track.'
	        });
	        return;
	      }

	      videojs.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');

	      for (var trackId in mediaType.tracks) {
	        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;
	      }

	      mediaType.onTrackChanged();
	    };
	  },
	  /**
	   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
	   * an error.
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @return {Function}
	   *         Error handler. Logs warning to console and disables the active subtitle track
	   * @function onError.SUBTITLES
	   */
	  SUBTITLES: function SUBTITLES(type, settings) {
	    return function () {
	      var segmentLoader = settings.segmentLoaders[type],
	          mediaType = settings.mediaTypes[type];


	      videojs.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');

	      stopLoaders(segmentLoader, mediaType);

	      var track = mediaType.activeTrack();

	      if (track) {
	        track.mode = 'disabled';
	      }

	      mediaType.onTrackChanged();
	    };
	  }
	};

	var setupListeners = {
	  /**
	   * Setup event listeners for audio playlist loader
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {PlaylistLoader|null} playlistLoader
	   *        PlaylistLoader to register listeners on
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @function setupListeners.AUDIO
	   */
	  AUDIO: function AUDIO(type, playlistLoader, settings) {
	    if (!playlistLoader) {
	      // no playlist loader means audio will be muxed with the video
	      return;
	    }

	    var tech = settings.tech,
	        requestOptions = settings.requestOptions,
	        segmentLoader = settings.segmentLoaders[type];


	    playlistLoader.on('loadedmetadata', function () {
	      var media = playlistLoader.media();

	      segmentLoader.playlist(media, requestOptions);

	      // if the video is already playing, or if this isn't a live video and preload
	      // permits, start downloading segments
	      if (!tech.paused() || media.endList && tech.preload() !== 'none') {
	        segmentLoader.load();
	      }
	    });

	    playlistLoader.on('loadedplaylist', function () {
	      segmentLoader.playlist(playlistLoader.media(), requestOptions);

	      // If the player isn't paused, ensure that the segment loader is running
	      if (!tech.paused()) {
	        segmentLoader.load();
	      }
	    });

	    playlistLoader.on('error', onError[type](type, settings));
	  },
	  /**
	   * Setup event listeners for subtitle playlist loader
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {PlaylistLoader|null} playlistLoader
	   *        PlaylistLoader to register listeners on
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @function setupListeners.SUBTITLES
	   */
	  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {
	    var tech = settings.tech,
	        requestOptions = settings.requestOptions,
	        segmentLoader = settings.segmentLoaders[type],
	        mediaType = settings.mediaTypes[type];


	    playlistLoader.on('loadedmetadata', function () {
	      var media = playlistLoader.media();

	      segmentLoader.playlist(media, requestOptions);
	      segmentLoader.track(mediaType.activeTrack());

	      // if the video is already playing, or if this isn't a live video and preload
	      // permits, start downloading segments
	      if (!tech.paused() || media.endList && tech.preload() !== 'none') {
	        segmentLoader.load();
	      }
	    });

	    playlistLoader.on('loadedplaylist', function () {
	      segmentLoader.playlist(playlistLoader.media(), requestOptions);

	      // If the player isn't paused, ensure that the segment loader is running
	      if (!tech.paused()) {
	        segmentLoader.load();
	      }
	    });

	    playlistLoader.on('error', onError[type](type, settings));
	  }
	};

	var byGroupId = function byGroupId(type, groupId) {
	  return function (playlist) {
	    return playlist.attributes[type] === groupId;
	  };
	};

	var byResolvedUri = function byResolvedUri(resolvedUri) {
	  return function (playlist) {
	    return playlist.resolvedUri === resolvedUri;
	  };
	};

	var initialize = {
	  /**
	   * Setup PlaylistLoaders and AudioTracks for the audio groups
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @function initialize.AUDIO
	   */
	  'AUDIO': function AUDIO(type, settings) {
	    var hls = settings.hls,
	        sourceType = settings.sourceType,
	        segmentLoader = settings.segmentLoaders[type],
	        withCredentials = settings.requestOptions.withCredentials,
	        _settings$master = settings.master,
	        mediaGroups = _settings$master.mediaGroups,
	        playlists = _settings$master.playlists,
	        _settings$mediaTypes$ = settings.mediaTypes[type],
	        groups = _settings$mediaTypes$.groups,
	        tracks = _settings$mediaTypes$.tracks,
	        masterPlaylistLoader = settings.masterPlaylistLoader;

	    // force a default if we have none

	    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {
	      mediaGroups[type] = { main: { default: { default: true } } };
	    }

	    for (var groupId in mediaGroups[type]) {
	      if (!groups[groupId]) {
	        groups[groupId] = [];
	      }

	      // List of playlists that have an AUDIO attribute value matching the current
	      // group ID
	      var groupPlaylists = playlists.filter(byGroupId(type, groupId));

	      for (var variantLabel in mediaGroups[type][groupId]) {
	        var properties = mediaGroups[type][groupId][variantLabel];

	        // List of playlists for the current group ID that have a matching uri with
	        // this alternate audio variant
	        var matchingPlaylists = groupPlaylists.filter(byResolvedUri(properties.resolvedUri));

	        if (matchingPlaylists.length) {
	          // If there is a playlist that has the same uri as this audio variant, assume
	          // that the playlist is audio only. We delete the resolvedUri property here
	          // to prevent a playlist loader from being created so that we don't have
	          // both the main and audio segment loaders loading the same audio segments
	          // from the same playlist.
	          delete properties.resolvedUri;
	        }

	        var playlistLoader = void 0;

	        if (properties.resolvedUri) {
	          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);
	        } else if (properties.playlists && sourceType === 'dash') {
	          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);
	        } else {
	          // no resolvedUri means the audio is muxed with the video when using this
	          // audio track
	          playlistLoader = null;
	        }

	        properties = videojs.mergeOptions({ id: variantLabel, playlistLoader: playlistLoader }, properties);

	        setupListeners[type](type, properties.playlistLoader, settings);

	        groups[groupId].push(properties);

	        if (typeof tracks[variantLabel] === 'undefined') {
	          var track = new videojs.AudioTrack({
	            id: variantLabel,
	            kind: audioTrackKind_(properties),
	            enabled: false,
	            language: properties.language,
	            default: properties.default,
	            label: variantLabel
	          });

	          tracks[variantLabel] = track;
	        }
	      }
	    }

	    // setup single error event handler for the segment loader
	    segmentLoader.on('error', onError[type](type, settings));
	  },
	  /**
	   * Setup PlaylistLoaders and TextTracks for the subtitle groups
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @function initialize.SUBTITLES
	   */
	  'SUBTITLES': function SUBTITLES(type, settings) {
	    var tech = settings.tech,
	        hls = settings.hls,
	        sourceType = settings.sourceType,
	        segmentLoader = settings.segmentLoaders[type],
	        withCredentials = settings.requestOptions.withCredentials,
	        mediaGroups = settings.master.mediaGroups,
	        _settings$mediaTypes$2 = settings.mediaTypes[type],
	        groups = _settings$mediaTypes$2.groups,
	        tracks = _settings$mediaTypes$2.tracks,
	        masterPlaylistLoader = settings.masterPlaylistLoader;


	    for (var groupId in mediaGroups[type]) {
	      if (!groups[groupId]) {
	        groups[groupId] = [];
	      }

	      for (var variantLabel in mediaGroups[type][groupId]) {
	        if (mediaGroups[type][groupId][variantLabel].forced) {
	          // Subtitle playlists with the forced attribute are not selectable in Safari.
	          // According to Apple's HLS Authoring Specification:
	          //   If content has forced subtitles and regular subtitles in a given language,
	          //   the regular subtitles track in that language MUST contain both the forced
	          //   subtitles and the regular subtitles for that language.
	          // Because of this requirement and that Safari does not add forced subtitles,
	          // forced subtitles are skipped here to maintain consistent experience across
	          // all platforms
	          continue;
	        }

	        var properties = mediaGroups[type][groupId][variantLabel];

	        var playlistLoader = void 0;

	        if (sourceType === 'hls') {
	          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);
	        } else if (sourceType === 'dash') {
	          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);
	        }

	        properties = videojs.mergeOptions({
	          id: variantLabel,
	          playlistLoader: playlistLoader
	        }, properties);

	        setupListeners[type](type, properties.playlistLoader, settings);

	        groups[groupId].push(properties);

	        if (typeof tracks[variantLabel] === 'undefined') {
	          var track = tech.addRemoteTextTrack({
	            id: variantLabel,
	            kind: 'subtitles',
	            default: properties.default && properties.autoselect,
	            language: properties.language,
	            label: variantLabel
	          }, false).track;

	          tracks[variantLabel] = track;
	        }
	      }
	    }

	    // setup single error event handler for the segment loader
	    segmentLoader.on('error', onError[type](type, settings));
	  },
	  /**
	   * Setup TextTracks for the closed-caption groups
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @function initialize['CLOSED-CAPTIONS']
	   */
	  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {
	    var tech = settings.tech,
	        mediaGroups = settings.master.mediaGroups,
	        _settings$mediaTypes$3 = settings.mediaTypes[type],
	        groups = _settings$mediaTypes$3.groups,
	        tracks = _settings$mediaTypes$3.tracks;


	    for (var groupId in mediaGroups[type]) {
	      if (!groups[groupId]) {
	        groups[groupId] = [];
	      }

	      for (var variantLabel in mediaGroups[type][groupId]) {
	        var properties = mediaGroups[type][groupId][variantLabel];

	        // We only support CEA608 captions for now, so ignore anything that
	        // doesn't use a CCx INSTREAM-ID
	        if (!properties.instreamId.match(/CC\d/)) {
	          continue;
	        }

	        // No PlaylistLoader is required for Closed-Captions because the captions are
	        // embedded within the video stream
	        groups[groupId].push(videojs.mergeOptions({ id: variantLabel }, properties));

	        if (typeof tracks[variantLabel] === 'undefined') {
	          var track = tech.addRemoteTextTrack({
	            id: properties.instreamId,
	            kind: 'captions',
	            default: properties.default && properties.autoselect,
	            language: properties.language,
	            label: variantLabel
	          }, false).track;

	          tracks[variantLabel] = track;
	        }
	      }
	    }
	  }
	};

	/**
	 * Returns a function used to get the active group of the provided type
	 *
	 * @param {String} type
	 *        MediaGroup type
	 * @param {Object} settings
	 *        Object containing required information for media groups
	 * @return {Function}
	 *         Function that returns the active media group for the provided type. Takes an
	 *         optional parameter {TextTrack} track. If no track is provided, a list of all
	 *         variants in the group, otherwise the variant corresponding to the provided
	 *         track is returned.
	 * @function activeGroup
	 */
	var activeGroup = function activeGroup(type, settings) {
	  return function (track) {
	    var masterPlaylistLoader = settings.masterPlaylistLoader,
	        groups = settings.mediaTypes[type].groups;


	    var media = masterPlaylistLoader.media();

	    if (!media) {
	      return null;
	    }

	    var variants = null;

	    if (media.attributes[type]) {
	      variants = groups[media.attributes[type]];
	    }

	    variants = variants || groups.main;

	    if (typeof track === 'undefined') {
	      return variants;
	    }

	    if (track === null) {
	      // An active track was specified so a corresponding group is expected. track === null
	      // means no track is currently active so there is no corresponding group
	      return null;
	    }

	    return variants.filter(function (props) {
	      return props.id === track.id;
	    })[0] || null;
	  };
	};

	var activeTrack = {
	  /**
	   * Returns a function used to get the active track of type provided
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @return {Function}
	   *         Function that returns the active media track for the provided type. Returns
	   *         null if no track is active
	   * @function activeTrack.AUDIO
	   */
	  AUDIO: function AUDIO(type, settings) {
	    return function () {
	      var tracks = settings.mediaTypes[type].tracks;


	      for (var id in tracks) {
	        if (tracks[id].enabled) {
	          return tracks[id];
	        }
	      }

	      return null;
	    };
	  },
	  /**
	   * Returns a function used to get the active track of type provided
	   *
	   * @param {String} type
	   *        MediaGroup type
	   * @param {Object} settings
	   *        Object containing required information for media groups
	   * @return {Function}
	   *         Function that returns the active media track for the provided type. Returns
	   *         null if no track is active
	   * @function activeTrack.SUBTITLES
	   */
	  SUBTITLES: function SUBTITLES(type, settings) {
	    return function () {
	      var tracks = settings.mediaTypes[type].tracks;


	      for (var id in tracks) {
	        if (tracks[id].mode === 'showing') {
	          return tracks[id];
	        }
	      }

	      return null;
	    };
	  }
	};

	/**
	 * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,
	 * Closed-Captions) specified in the master manifest.
	 *
	 * @param {Object} settings
	 *        Object containing required information for setting up the media groups
	 * @param {SegmentLoader} settings.segmentLoaders.AUDIO
	 *        Audio segment loader
	 * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES
	 *        Subtitle segment loader
	 * @param {SegmentLoader} settings.segmentLoaders.main
	 *        Main segment loader
	 * @param {Tech} settings.tech
	 *        The tech of the player
	 * @param {Object} settings.requestOptions
	 *        XHR request options used by the segment loaders
	 * @param {PlaylistLoader} settings.masterPlaylistLoader
	 *        PlaylistLoader for the master source
	 * @param {HlsHandler} settings.hls
	 *        HLS SourceHandler
	 * @param {Object} settings.master
	 *        The parsed master manifest
	 * @param {Object} settings.mediaTypes
	 *        Object to store the loaders, tracks, and utility methods for each media type
	 * @param {Function} settings.blacklistCurrentPlaylist
	 *        Blacklists the current rendition and forces a rendition switch.
	 * @function setupMediaGroups
	 */
	var setupMediaGroups = function setupMediaGroups(settings) {
	  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {
	    initialize[type](type, settings);
	  });

	  var mediaTypes = settings.mediaTypes,
	      masterPlaylistLoader = settings.masterPlaylistLoader,
	      tech = settings.tech,
	      hls = settings.hls;

	  // setup active group and track getters and change event handlers

	  ['AUDIO', 'SUBTITLES'].forEach(function (type) {
	    mediaTypes[type].activeGroup = activeGroup(type, settings);
	    mediaTypes[type].activeTrack = activeTrack[type](type, settings);
	    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);
	    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);
	  });

	  // DO NOT enable the default subtitle or caption track.
	  // DO enable the default audio track
	  var audioGroup = mediaTypes.AUDIO.activeGroup();
	  var groupId = (audioGroup.filter(function (group) {
	    return group.default;
	  })[0] || audioGroup[0]).id;

	  mediaTypes.AUDIO.tracks[groupId].enabled = true;
	  mediaTypes.AUDIO.onTrackChanged();

	  masterPlaylistLoader.on('mediachange', function () {
	    ['AUDIO', 'SUBTITLES'].forEach(function (type) {
	      return mediaTypes[type].onGroupChanged();
	    });
	  });

	  // custom audio track change event handler for usage event
	  var onAudioTrackChanged = function onAudioTrackChanged() {
	    mediaTypes.AUDIO.onTrackChanged();
	    tech.trigger({ type: 'usage', name: 'hls-audio-change' });
	  };

	  tech.audioTracks().addEventListener('change', onAudioTrackChanged);
	  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);

	  hls.on('dispose', function () {
	    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);
	    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);
	  });

	  // clear existing audio tracks and add the ones we just created
	  tech.clearTracks('audio');

	  for (var id in mediaTypes.AUDIO.tracks) {
	    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);
	  }
	};

	/**
	 * Creates skeleton object used to store the loaders, tracks, and utility methods for each
	 * media type
	 *
	 * @return {Object}
	 *         Object to store the loaders, tracks, and utility methods for each media type
	 * @function createMediaTypes
	 */
	var createMediaTypes = function createMediaTypes() {
	  var mediaTypes = {};

	  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {
	    mediaTypes[type] = {
	      groups: {},
	      tracks: {},
	      activePlaylistLoader: null,
	      activeGroup: noop,
	      activeTrack: noop,
	      onGroupChanged: noop,
	      onTrackChanged: noop
	    };
	  });

	  return mediaTypes;
	};

	/**
	 * @file master-playlist-controller.js
	 */

	var ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;

	var Hls = void 0;

	// SegmentLoader stats that need to have each loader's
	// values summed to calculate the final value
	var loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];
	var sumLoaderStat = function sumLoaderStat(stat) {
	  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];
	};

	/**
	 * the master playlist controller controller all interactons
	 * between playlists and segmentloaders. At this time this mainly
	 * involves a master playlist and a series of audio playlists
	 * if they are available
	 *
	 * @class MasterPlaylistController
	 * @extends videojs.EventTarget
	 */
	var MasterPlaylistController = function (_videojs$EventTarget) {
	  inherits$1(MasterPlaylistController, _videojs$EventTarget);

	  function MasterPlaylistController(options) {
	    classCallCheck$1(this, MasterPlaylistController);

	    var _this = possibleConstructorReturn$1(this, (MasterPlaylistController.__proto__ || Object.getPrototypeOf(MasterPlaylistController)).call(this));

	    var url = options.url,
	        withCredentials = options.withCredentials,
	        tech = options.tech,
	        bandwidth = options.bandwidth,
	        externHls = options.externHls,
	        useCueTags = options.useCueTags,
	        blacklistDuration = options.blacklistDuration,
	        enableLowInitialPlaylist = options.enableLowInitialPlaylist,
	        sourceType = options.sourceType,
	        seekTo = options.seekTo;


	    if (!url) {
	      throw new Error('A non-empty playlist URL is required');
	    }

	    Hls = externHls;

	    _this.withCredentials = withCredentials;
	    _this.tech_ = tech;
	    _this.hls_ = tech.hls;
	    _this.seekTo_ = seekTo;
	    _this.sourceType_ = sourceType;
	    _this.useCueTags_ = useCueTags;
	    _this.blacklistDuration = blacklistDuration;
	    _this.enableLowInitialPlaylist = enableLowInitialPlaylist;
	    if (_this.useCueTags_) {
	      _this.cueTagsTrack_ = _this.tech_.addTextTrack('metadata', 'ad-cues');
	      _this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';
	    }

	    _this.requestOptions_ = {
	      withCredentials: _this.withCredentials,
	      timeout: null
	    };

	    _this.mediaTypes_ = createMediaTypes();

	    _this.mediaSource = new videojs.MediaSource();

	    // load the media source into the player
	    _this.mediaSource.addEventListener('sourceopen', _this.handleSourceOpen_.bind(_this));

	    _this.seekable_ = videojs.createTimeRanges();
	    _this.hasPlayed_ = function () {
	      return false;
	    };

	    _this.syncController_ = new SyncController(options);
	    _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({
	      kind: 'metadata',
	      label: 'segment-metadata'
	    }, false).track;

	    _this.decrypter_ = new Decrypter$1();
	    _this.inbandTextTracks_ = {};

	    var segmentLoaderSettings = {
	      hls: _this.hls_,
	      mediaSource: _this.mediaSource,
	      currentTime: _this.tech_.currentTime.bind(_this.tech_),
	      seekable: function seekable$$1() {
	        return _this.seekable();
	      },
	      seeking: function seeking() {
	        return _this.tech_.seeking();
	      },
	      duration: function duration$$1() {
	        return _this.mediaSource.duration;
	      },
	      hasPlayed: function hasPlayed() {
	        return _this.hasPlayed_();
	      },
	      goalBufferLength: function goalBufferLength() {
	        return _this.goalBufferLength();
	      },
	      bandwidth: bandwidth,
	      syncController: _this.syncController_,
	      decrypter: _this.decrypter_,
	      sourceType: _this.sourceType_,
	      inbandTextTracks: _this.inbandTextTracks_
	    };

	    _this.masterPlaylistLoader_ = _this.sourceType_ === 'dash' ? new DashPlaylistLoader(url, _this.hls_, _this.withCredentials) : new PlaylistLoader(url, _this.hls_, _this.withCredentials);
	    _this.setupMasterPlaylistLoaderListeners_();

	    // setup segment loaders
	    // combined audio/video or just video when alternate audio track is selected
	    _this.mainSegmentLoader_ = new SegmentLoader(videojs.mergeOptions(segmentLoaderSettings, {
	      segmentMetadataTrack: _this.segmentMetadataTrack_,
	      loaderType: 'main'
	    }), options);

	    // alternate audio track
	    _this.audioSegmentLoader_ = new SegmentLoader(videojs.mergeOptions(segmentLoaderSettings, {
	      loaderType: 'audio'
	    }), options);

	    _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs.mergeOptions(segmentLoaderSettings, {
	      loaderType: 'vtt'
	    }), options);

	    _this.setupSegmentLoaderListeners_();

	    // Create SegmentLoader stat-getters
	    loaderStats.forEach(function (stat) {
	      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);
	    });

	    _this.logger_ = logger('MPC');

	    _this.masterPlaylistLoader_.load();
	    return _this;
	  }

	  /**
	   * Register event handlers on the master playlist loader. A helper
	   * function for construction time.
	   *
	   * @private
	   */


	  createClass(MasterPlaylistController, [{
	    key: 'setupMasterPlaylistLoaderListeners_',
	    value: function setupMasterPlaylistLoaderListeners_() {
	      var _this2 = this;

	      this.masterPlaylistLoader_.on('loadedmetadata', function () {
	        var media = _this2.masterPlaylistLoader_.media();
	        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;

	        // If we don't have any more available playlists, we don't want to
	        // timeout the request.
	        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {
	          _this2.requestOptions_.timeout = 0;
	        } else {
	          _this2.requestOptions_.timeout = requestTimeout;
	        }

	        // if this isn't a live video and preload permits, start
	        // downloading segments
	        if (media.endList && _this2.tech_.preload() !== 'none') {
	          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);
	          _this2.mainSegmentLoader_.load();
	        }

	        setupMediaGroups({
	          sourceType: _this2.sourceType_,
	          segmentLoaders: {
	            AUDIO: _this2.audioSegmentLoader_,
	            SUBTITLES: _this2.subtitleSegmentLoader_,
	            main: _this2.mainSegmentLoader_
	          },
	          tech: _this2.tech_,
	          requestOptions: _this2.requestOptions_,
	          masterPlaylistLoader: _this2.masterPlaylistLoader_,
	          hls: _this2.hls_,
	          master: _this2.master(),
	          mediaTypes: _this2.mediaTypes_,
	          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)
	        });

	        _this2.triggerPresenceUsage_(_this2.master(), media);

	        try {
	          _this2.setupSourceBuffers_();
	        } catch (e) {
	          videojs.log.warn('Failed to create SourceBuffers', e);
	          return _this2.mediaSource.endOfStream('decode');
	        }
	        _this2.setupFirstPlay();

	        _this2.trigger('selectedinitialmedia');
	      });

	      this.masterPlaylistLoader_.on('loadedplaylist', function () {
	        var updatedPlaylist = _this2.masterPlaylistLoader_.media();

	        if (!updatedPlaylist) {
	          // blacklist any variants that are not supported by the browser before selecting
	          // an initial media as the playlist selectors do not consider browser support
	          _this2.excludeUnsupportedVariants_();

	          var selectedMedia = void 0;

	          if (_this2.enableLowInitialPlaylist) {
	            selectedMedia = _this2.selectInitialPlaylist();
	          }

	          if (!selectedMedia) {
	            selectedMedia = _this2.selectPlaylist();
	          }

	          _this2.initialMedia_ = selectedMedia;
	          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);
	          return;
	        }

	        if (_this2.useCueTags_) {
	          _this2.updateAdCues_(updatedPlaylist);
	        }

	        // TODO: Create a new event on the PlaylistLoader that signals
	        // that the segments have changed in some way and use that to
	        // update the SegmentLoader instead of doing it twice here and
	        // on `mediachange`
	        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);
	        _this2.updateDuration();

	        // If the player isn't paused, ensure that the segment loader is running,
	        // as it is possible that it was temporarily stopped while waiting for
	        // a playlist (e.g., in case the playlist errored and we re-requested it).
	        if (!_this2.tech_.paused()) {
	          _this2.mainSegmentLoader_.load();
	          if (_this2.audioSegmentLoader_) {
	            _this2.audioSegmentLoader_.load();
	          }
	        }

	        if (!updatedPlaylist.endList) {
	          var addSeekableRange = function addSeekableRange() {
	            var seekable$$1 = _this2.seekable();

	            if (seekable$$1.length !== 0) {
	              _this2.mediaSource.addSeekableRange_(seekable$$1.start(0), seekable$$1.end(0));
	            }
	          };

	          if (_this2.duration() !== Infinity) {
	            var onDurationchange = function onDurationchange() {
	              if (_this2.duration() === Infinity) {
	                addSeekableRange();
	              } else {
	                _this2.tech_.one('durationchange', onDurationchange);
	              }
	            };

	            _this2.tech_.one('durationchange', onDurationchange);
	          } else {
	            addSeekableRange();
	          }
	        }
	      });

	      this.masterPlaylistLoader_.on('error', function () {
	        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);
	      });

	      this.masterPlaylistLoader_.on('mediachanging', function () {
	        _this2.mainSegmentLoader_.abort();
	        _this2.mainSegmentLoader_.pause();
	      });

	      this.masterPlaylistLoader_.on('mediachange', function () {
	        var media = _this2.masterPlaylistLoader_.media();
	        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;

	        // If we don't have any more available playlists, we don't want to
	        // timeout the request.
	        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {
	          _this2.requestOptions_.timeout = 0;
	        } else {
	          _this2.requestOptions_.timeout = requestTimeout;
	        }

	        // TODO: Create a new event on the PlaylistLoader that signals
	        // that the segments have changed in some way and use that to
	        // update the SegmentLoader instead of doing it twice here and
	        // on `loadedplaylist`
	        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);

	        _this2.mainSegmentLoader_.load();

	        _this2.tech_.trigger({
	          type: 'mediachange',
	          bubbles: true
	        });
	      });

	      this.masterPlaylistLoader_.on('playlistunchanged', function () {
	        var updatedPlaylist = _this2.masterPlaylistLoader_.media();
	        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);

	        if (playlistOutdated) {
	          // Playlist has stopped updating and we're stuck at its end. Try to
	          // blacklist it and switch to another playlist in the hope that that
	          // one is updating (and give the player a chance to re-adjust to the
	          // safe live point).
	          _this2.blacklistCurrentPlaylist({
	            message: 'Playlist no longer updating.'
	          });
	          // useful for monitoring QoS
	          _this2.tech_.trigger('playliststuck');
	        }
	      });

	      this.masterPlaylistLoader_.on('renditiondisabled', function () {
	        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });
	      });
	      this.masterPlaylistLoader_.on('renditionenabled', function () {
	        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });
	      });
	    }

	    /**
	     * A helper function for triggerring presence usage events once per source
	     *
	     * @private
	     */

	  }, {
	    key: 'triggerPresenceUsage_',
	    value: function triggerPresenceUsage_(master, media) {
	      var mediaGroups = master.mediaGroups || {};
	      var defaultDemuxed = true;
	      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);

	      for (var mediaGroup in mediaGroups.AUDIO) {
	        for (var label in mediaGroups.AUDIO[mediaGroup]) {
	          var properties = mediaGroups.AUDIO[mediaGroup][label];

	          if (!properties.uri) {
	            defaultDemuxed = false;
	          }
	        }
	      }

	      if (defaultDemuxed) {
	        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });
	      }

	      if (Object.keys(mediaGroups.SUBTITLES).length) {
	        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });
	      }

	      if (Hls.Playlist.isAes(media)) {
	        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });
	      }

	      if (Hls.Playlist.isFmp4(media)) {
	        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });
	      }

	      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {
	        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });
	      }

	      if (this.useCueTags_) {
	        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });
	      }
	    }
	    /**
	     * Register event handlers on the segment loaders. A helper function
	     * for construction time.
	     *
	     * @private
	     */

	  }, {
	    key: 'setupSegmentLoaderListeners_',
	    value: function setupSegmentLoaderListeners_() {
	      var _this3 = this;

	      this.mainSegmentLoader_.on('bandwidthupdate', function () {
	        var nextPlaylist = _this3.selectPlaylist();
	        var currentPlaylist = _this3.masterPlaylistLoader_.media();
	        var buffered = _this3.tech_.buffered();
	        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;

	        var bufferLowWaterLine = _this3.bufferLowWaterLine();

	        // If the playlist is live, then we want to not take low water line into account.
	        // This is because in LIVE, the player plays 3 segments from the end of the
	        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble
	        // in those segments, a viewer will never experience a rendition upswitch.
	        if (!currentPlaylist.endList ||
	        // For the same reason as LIVE, we ignore the low water line when the VOD
	        // duration is below the max potential low water line
	        _this3.duration() < Config.MAX_BUFFER_LOW_WATER_LINE ||
	        // we want to switch down to lower resolutions quickly to continue playback, but
	        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||
	        // ensure we have some buffer before we switch up to prevent us running out of
	        // buffer while loading a higher rendition.
	        forwardBuffer >= bufferLowWaterLine) {
	          _this3.masterPlaylistLoader_.media(nextPlaylist);
	        }

	        _this3.tech_.trigger('bandwidthupdate');
	      });
	      this.mainSegmentLoader_.on('progress', function () {
	        _this3.trigger('progress');
	      });

	      this.mainSegmentLoader_.on('error', function () {
	        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());
	      });

	      this.mainSegmentLoader_.on('syncinfoupdate', function () {
	        _this3.onSyncInfoUpdate_();
	      });

	      this.mainSegmentLoader_.on('timestampoffset', function () {
	        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });
	      });
	      this.audioSegmentLoader_.on('syncinfoupdate', function () {
	        _this3.onSyncInfoUpdate_();
	      });

	      this.mainSegmentLoader_.on('ended', function () {
	        _this3.onEndOfStream();
	      });

	      this.mainSegmentLoader_.on('earlyabort', function () {
	        _this3.blacklistCurrentPlaylist({
	          message: 'Aborted early because there isn\'t enough bandwidth to complete the ' + 'request without rebuffering.'
	        }, ABORT_EARLY_BLACKLIST_SECONDS);
	      });

	      this.mainSegmentLoader_.on('reseteverything', function () {
	        // If playing an MTS stream, a videojs.MediaSource is listening for
	        // hls-reset to reset caption parsing state in the transmuxer
	        _this3.tech_.trigger('hls-reset');
	      });

	      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {
	        // If playing an MTS stream in html, a videojs.MediaSource is listening for
	        // hls-segment-time-mapping update its internal mapping of stream to display time
	        _this3.tech_.trigger({
	          type: 'hls-segment-time-mapping',
	          mapping: event.mapping
	        });
	      });

	      this.audioSegmentLoader_.on('ended', function () {
	        _this3.onEndOfStream();
	      });
	    }
	  }, {
	    key: 'mediaSecondsLoaded_',
	    value: function mediaSecondsLoaded_() {
	      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
	    }

	    /**
	     * Call load on our SegmentLoaders
	     */

	  }, {
	    key: 'load',
	    value: function load() {
	      this.mainSegmentLoader_.load();
	      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
	        this.audioSegmentLoader_.load();
	      }
	      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
	        this.subtitleSegmentLoader_.load();
	      }
	    }

	    /**
	     * Re-tune playback quality level for the current player
	     * conditions without performing destructive actions, like
	     * removing already buffered content
	     *
	     * @private
	     */

	  }, {
	    key: 'smoothQualityChange_',
	    value: function smoothQualityChange_() {
	      var media = this.selectPlaylist();

	      if (media !== this.masterPlaylistLoader_.media()) {
	        this.masterPlaylistLoader_.media(media);

	        this.mainSegmentLoader_.resetLoader();
	        // don't need to reset audio as it is reset when media changes
	      }
	    }

	    /**
	     * Re-tune playback quality level for the current player
	     * conditions. This method will perform destructive actions like removing
	     * already buffered content in order to readjust the currently active
	     * playlist quickly. This is good for manual quality changes
	     *
	     * @private
	     */

	  }, {
	    key: 'fastQualityChange_',
	    value: function fastQualityChange_() {
	      var _this4 = this;

	      var media = this.selectPlaylist();

	      if (media === this.masterPlaylistLoader_.media()) {
	        return;
	      }

	      this.masterPlaylistLoader_.media(media);

	      // Delete all buffered data to allow an immediate quality switch, then seek to give
	      // the browser a kick to remove any cached frames from the previous rendtion (.04 seconds
	      // ahead is roughly the minimum that will accomplish this across a variety of content
	      // in IE and Edge, but seeking in place is sufficient on all other browsers)
	      // Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/
	      // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904
	      this.mainSegmentLoader_.resetEverything(function () {
	        // Since this is not a typical seek, we avoid the seekTo method which can cause segments
	        // from the previously enabled rendition to load before the new playlist has finished loading
	        if (videojs.browser.IE_VERSION || videojs.browser.IS_EDGE) {
	          _this4.tech_.setCurrentTime(_this4.tech_.currentTime() + 0.04);
	        } else {
	          _this4.tech_.setCurrentTime(_this4.tech_.currentTime());
	        }
	      });

	      // don't need to reset audio as it is reset when media changes
	    }

	    /**
	     * Begin playback.
	     */

	  }, {
	    key: 'play',
	    value: function play() {
	      if (this.setupFirstPlay()) {
	        return;
	      }

	      if (this.tech_.ended()) {
	        this.seekTo_(0);
	      }

	      if (this.hasPlayed_()) {
	        this.load();
	      }

	      var seekable$$1 = this.tech_.seekable();

	      // if the viewer has paused and we fell out of the live window,
	      // seek forward to the live point
	      if (this.tech_.duration() === Infinity) {
	        if (this.tech_.currentTime() < seekable$$1.start(0)) {
	          return this.seekTo_(seekable$$1.end(seekable$$1.length - 1));
	        }
	      }
	    }

	    /**
	     * Seek to the latest media position if this is a live video and the
	     * player and video are loaded and initialized.
	     */

	  }, {
	    key: 'setupFirstPlay',
	    value: function setupFirstPlay() {
	      var _this5 = this;

	      var media = this.masterPlaylistLoader_.media();

	      // Check that everything is ready to begin buffering for the first call to play
	      //  If 1) there is no active media
	      //     2) the player is paused
	      //     3) the first play has already been setup
	      // then exit early
	      if (!media || this.tech_.paused() || this.hasPlayed_()) {
	        return false;
	      }

	      // when the video is a live stream
	      if (!media.endList) {
	        var seekable$$1 = this.seekable();

	        if (!seekable$$1.length) {
	          // without a seekable range, the player cannot seek to begin buffering at the live
	          // point
	          return false;
	        }

	        if (videojs.browser.IE_VERSION && this.tech_.readyState() === 0) {
	          // IE11 throws an InvalidStateError if you try to set currentTime while the
	          // readyState is 0, so it must be delayed until the tech fires loadedmetadata.
	          this.tech_.one('loadedmetadata', function () {
	            _this5.trigger('firstplay');
	            _this5.seekTo_(seekable$$1.end(0));
	            _this5.hasPlayed_ = function () {
	              return true;
	            };
	          });

	          return false;
	        }

	        // trigger firstplay to inform the source handler to ignore the next seek event
	        this.trigger('firstplay');
	        // seek to the live point
	        this.seekTo_(seekable$$1.end(0));
	      }

	      this.hasPlayed_ = function () {
	        return true;
	      };
	      // we can begin loading now that everything is ready
	      this.load();
	      return true;
	    }

	    /**
	     * handle the sourceopen event on the MediaSource
	     *
	     * @private
	     */

	  }, {
	    key: 'handleSourceOpen_',
	    value: function handleSourceOpen_() {
	      // Only attempt to create the source buffer if none already exist.
	      // handleSourceOpen is also called when we are "re-opening" a source buffer
	      // after `endOfStream` has been called (in response to a seek for instance)
	      try {
	        this.setupSourceBuffers_();
	      } catch (e) {
	        videojs.log.warn('Failed to create Source Buffers', e);
	        return this.mediaSource.endOfStream('decode');
	      }

	      // if autoplay is enabled, begin playback. This is duplicative of
	      // code in video.js but is required because play() must be invoked
	      // *after* the media source has opened.
	      if (this.tech_.autoplay()) {
	        var playPromise = this.tech_.play();

	        // Catch/silence error when a pause interrupts a play request
	        // on browsers which return a promise
	        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {
	          playPromise.then(null, function (e) {});
	        }
	      }

	      this.trigger('sourceopen');
	    }

	    /**
	     * Calls endOfStream on the media source when all active stream types have called
	     * endOfStream
	     *
	     * @param {string} streamType
	     *        Stream type of the segment loader that called endOfStream
	     * @private
	     */

	  }, {
	    key: 'onEndOfStream',
	    value: function onEndOfStream() {
	      var isEndOfStream = this.mainSegmentLoader_.ended_;

	      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
	        // if the audio playlist loader exists, then alternate audio is active
	        if (!this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo) {
	          // if we do not know if the main segment loader contains video yet or if we
	          // definitively know the main segment loader contains video, then we need to wait
	          // for both main and audio segment loaders to call endOfStream
	          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;
	        } else {
	          // otherwise just rely on the audio loader
	          isEndOfStream = this.audioSegmentLoader_.ended_;
	        }
	      }

	      if (isEndOfStream) {
	        this.mediaSource.endOfStream();
	      }
	    }

	    /**
	     * Check if a playlist has stopped being updated
	     * @param {Object} playlist the media playlist object
	     * @return {boolean} whether the playlist has stopped being updated or not
	     */

	  }, {
	    key: 'stuckAtPlaylistEnd_',
	    value: function stuckAtPlaylistEnd_(playlist) {
	      var seekable$$1 = this.seekable();

	      if (!seekable$$1.length) {
	        // playlist doesn't have enough information to determine whether we are stuck
	        return false;
	      }

	      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);

	      if (expired === null) {
	        return false;
	      }

	      // does not use the safe live end to calculate playlist end, since we
	      // don't want to say we are stuck while there is still content
	      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);
	      var currentTime = this.tech_.currentTime();
	      var buffered = this.tech_.buffered();

	      if (!buffered.length) {
	        // return true if the playhead reached the absolute end of the playlist
	        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;
	      }
	      var bufferedEnd = buffered.end(buffered.length - 1);

	      // return true if there is too little buffer left and buffer has reached absolute
	      // end of playlist
	      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;
	    }

	    /**
	     * Blacklists a playlist when an error occurs for a set amount of time
	     * making it unavailable for selection by the rendition selection algorithm
	     * and then forces a new playlist (rendition) selection.
	     *
	     * @param {Object=} error an optional error that may include the playlist
	     * to blacklist
	     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the
	     * playlist
	     */

	  }, {
	    key: 'blacklistCurrentPlaylist',
	    value: function blacklistCurrentPlaylist() {
	      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var blacklistDuration = arguments[1];

	      var currentPlaylist = void 0;
	      var nextPlaylist = void 0;

	      // If the `error` was generated by the playlist loader, it will contain
	      // the playlist we were trying to load (but failed) and that should be
	      // blacklisted instead of the currently selected playlist which is likely
	      // out-of-date in this scenario
	      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();

	      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration;

	      // If there is no current playlist, then an error occurred while we were
	      // trying to load the master OR while we were disposing of the tech
	      if (!currentPlaylist) {
	        this.error = error;

	        try {
	          return this.mediaSource.endOfStream('network');
	        } catch (e) {
	          return this.trigger('error');
	        }
	      }

	      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length === 1;

	      if (isFinalRendition) {
	        // Never blacklisting this playlist because it's final rendition
	        videojs.log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');

	        this.tech_.trigger('retryplaylist');
	        return this.masterPlaylistLoader_.load(isFinalRendition);
	      }
	      // Blacklist this playlist
	      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;
	      this.tech_.trigger('blacklistplaylist');
	      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });

	      // Select a new playlist
	      nextPlaylist = this.selectPlaylist();
	      videojs.log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');

	      return this.masterPlaylistLoader_.media(nextPlaylist);
	    }

	    /**
	     * Pause all segment loaders
	     */

	  }, {
	    key: 'pauseLoading',
	    value: function pauseLoading() {
	      this.mainSegmentLoader_.pause();
	      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
	        this.audioSegmentLoader_.pause();
	      }
	      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
	        this.subtitleSegmentLoader_.pause();
	      }
	    }

	    /**
	     * set the current time on all segment loaders
	     *
	     * @param {TimeRange} currentTime the current time to set
	     * @return {TimeRange} the current time
	     */

	  }, {
	    key: 'setCurrentTime',
	    value: function setCurrentTime(currentTime) {
	      var buffered = findRange(this.tech_.buffered(), currentTime);

	      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {
	        // return immediately if the metadata is not ready yet
	        return 0;
	      }

	      // it's clearly an edge-case but don't thrown an error if asked to
	      // seek within an empty playlist
	      if (!this.masterPlaylistLoader_.media().segments) {
	        return 0;
	      }

	      // In flash playback, the segment loaders should be reset on every seek, even
	      // in buffer seeks. If the seek location is already buffered, continue buffering as
	      // usual
	      // TODO: redo this comment
	      if (buffered && buffered.length) {
	        return currentTime;
	      }

	      // cancel outstanding requests so we begin buffering at the new
	      // location
	      this.mainSegmentLoader_.resetEverything();
	      this.mainSegmentLoader_.abort();
	      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
	        this.audioSegmentLoader_.resetEverything();
	        this.audioSegmentLoader_.abort();
	      }
	      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
	        this.subtitleSegmentLoader_.resetEverything();
	        this.subtitleSegmentLoader_.abort();
	      }

	      // start segment loader loading in case they are paused
	      this.load();
	    }

	    /**
	     * get the current duration
	     *
	     * @return {TimeRange} the duration
	     */

	  }, {
	    key: 'duration',
	    value: function duration$$1() {
	      if (!this.masterPlaylistLoader_) {
	        return 0;
	      }

	      if (this.mediaSource) {
	        return this.mediaSource.duration;
	      }

	      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());
	    }

	    /**
	     * check the seekable range
	     *
	     * @return {TimeRange} the seekable range
	     */

	  }, {
	    key: 'seekable',
	    value: function seekable$$1() {
	      return this.seekable_;
	    }
	  }, {
	    key: 'onSyncInfoUpdate_',
	    value: function onSyncInfoUpdate_() {
	      var mainSeekable = void 0;
	      var audioSeekable = void 0;

	      if (!this.masterPlaylistLoader_) {
	        return;
	      }

	      var media = this.masterPlaylistLoader_.media();

	      if (!media) {
	        return;
	      }

	      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);

	      if (expired === null) {
	        // not enough information to update seekable
	        return;
	      }

	      mainSeekable = Hls.Playlist.seekable(media, expired);

	      if (mainSeekable.length === 0) {
	        return;
	      }

	      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
	        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
	        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);

	        if (expired === null) {
	          return;
	        }

	        audioSeekable = Hls.Playlist.seekable(media, expired);

	        if (audioSeekable.length === 0) {
	          return;
	        }
	      }

	      if (!audioSeekable) {
	        // seekable has been calculated based on buffering video data so it
	        // can be returned directly
	        this.seekable_ = mainSeekable;
	      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {
	        // seekables are pretty far off, rely on main
	        this.seekable_ = mainSeekable;
	      } else {
	        this.seekable_ = videojs.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);
	      }

	      this.logger_('seekable updated [' + printableRange(this.seekable_) + ']');

	      this.tech_.trigger('seekablechanged');
	    }

	    /**
	     * Update the player duration
	     */

	  }, {
	    key: 'updateDuration',
	    value: function updateDuration() {
	      var _this6 = this;

	      var oldDuration = this.mediaSource.duration;
	      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());
	      var buffered = this.tech_.buffered();
	      var setDuration = function setDuration() {
	        _this6.mediaSource.duration = newDuration;
	        _this6.tech_.trigger('durationchange');

	        _this6.mediaSource.removeEventListener('sourceopen', setDuration);
	      };

	      if (buffered.length > 0) {
	        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));
	      }

	      // if the duration has changed, invalidate the cached value
	      if (oldDuration !== newDuration) {
	        // update the duration
	        if (this.mediaSource.readyState !== 'open') {
	          this.mediaSource.addEventListener('sourceopen', setDuration);
	        } else {
	          setDuration();
	        }
	      }
	    }

	    /**
	     * dispose of the MasterPlaylistController and everything
	     * that it controls
	     */

	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      var _this7 = this;

	      this.decrypter_.terminate();
	      this.masterPlaylistLoader_.dispose();
	      this.mainSegmentLoader_.dispose();

	      ['AUDIO', 'SUBTITLES'].forEach(function (type) {
	        var groups = _this7.mediaTypes_[type].groups;

	        for (var id in groups) {
	          groups[id].forEach(function (group) {
	            if (group.playlistLoader) {
	              group.playlistLoader.dispose();
	            }
	          });
	        }
	      });

	      this.audioSegmentLoader_.dispose();
	      this.subtitleSegmentLoader_.dispose();
	    }

	    /**
	     * return the master playlist object if we have one
	     *
	     * @return {Object} the master playlist object that we parsed
	     */

	  }, {
	    key: 'master',
	    value: function master() {
	      return this.masterPlaylistLoader_.master;
	    }

	    /**
	     * return the currently selected playlist
	     *
	     * @return {Object} the currently selected playlist object that we parsed
	     */

	  }, {
	    key: 'media',
	    value: function media() {
	      // playlist loader will not return media if it has not been fully loaded
	      return this.masterPlaylistLoader_.media() || this.initialMedia_;
	    }

	    /**
	     * setup our internal source buffers on our segment Loaders
	     *
	     * @private
	     */

	  }, {
	    key: 'setupSourceBuffers_',
	    value: function setupSourceBuffers_() {
	      var media = this.masterPlaylistLoader_.media();
	      var mimeTypes = void 0;

	      // wait until a media playlist is available and the Media Source is
	      // attached
	      if (!media || this.mediaSource.readyState !== 'open') {
	        return;
	      }

	      mimeTypes = mimeTypesForPlaylist(this.masterPlaylistLoader_.master, media);
	      if (mimeTypes.length < 1) {
	        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;
	        return this.mediaSource.endOfStream('decode');
	      }

	      this.configureLoaderMimeTypes_(mimeTypes);
	      // exclude any incompatible variant streams from future playlist
	      // selection
	      this.excludeIncompatibleVariants_(media);
	    }
	  }, {
	    key: 'configureLoaderMimeTypes_',
	    value: function configureLoaderMimeTypes_(mimeTypes) {
	      // If the content is demuxed, we can't start appending segments to a source buffer
	      // until both source buffers are set up, or else the browser may not let us add the
	      // second source buffer (it will assume we are playing either audio only or video
	      // only).
	      var sourceBufferEmitter =
	      // If there is more than one mime type
	      mimeTypes.length > 1 &&
	      // and the first mime type does not have muxed video and audio
	      mimeTypes[0].indexOf(',') === -1 &&
	      // and the two mime types are different (they can be the same in the case of audio
	      // only with alternate audio)
	      mimeTypes[0] !== mimeTypes[1] ?
	      // then we want to wait on the second source buffer
	      new videojs.EventTarget() :
	      // otherwise there is no need to wait as the content is either audio only,
	      // video only, or muxed content.
	      null;

	      this.mainSegmentLoader_.mimeType(mimeTypes[0], sourceBufferEmitter);
	      if (mimeTypes[1]) {
	        this.audioSegmentLoader_.mimeType(mimeTypes[1], sourceBufferEmitter);
	      }
	    }

	    /**
	     * Blacklists playlists with codecs that are unsupported by the browser.
	     */

	  }, {
	    key: 'excludeUnsupportedVariants_',
	    value: function excludeUnsupportedVariants_() {
	      this.master().playlists.forEach(function (variant) {
	        if (variant.attributes.CODECS && window_1.MediaSource && window_1.MediaSource.isTypeSupported && !window_1.MediaSource.isTypeSupported('video/mp4; codecs="' + mapLegacyAvcCodecs(variant.attributes.CODECS) + '"')) {
	          variant.excludeUntil = Infinity;
	        }
	      });
	    }

	    /**
	     * Blacklist playlists that are known to be codec or
	     * stream-incompatible with the SourceBuffer configuration. For
	     * instance, Media Source Extensions would cause the video element to
	     * stall waiting for video data if you switched from a variant with
	     * video and audio to an audio-only one.
	     *
	     * @param {Object} media a media playlist compatible with the current
	     * set of SourceBuffers. Variants in the current master playlist that
	     * do not appear to have compatible codec or stream configurations
	     * will be excluded from the default playlist selection algorithm
	     * indefinitely.
	     * @private
	     */

	  }, {
	    key: 'excludeIncompatibleVariants_',
	    value: function excludeIncompatibleVariants_(media) {
	      var codecCount = 2;
	      var videoCodec = null;
	      var codecs = void 0;

	      if (media.attributes.CODECS) {
	        codecs = parseCodecs(media.attributes.CODECS);
	        videoCodec = codecs.videoCodec;
	        codecCount = codecs.codecCount;
	      }

	      this.master().playlists.forEach(function (variant) {
	        var variantCodecs = {
	          codecCount: 2,
	          videoCodec: null
	        };

	        if (variant.attributes.CODECS) {
	          variantCodecs = parseCodecs(variant.attributes.CODECS);
	        }

	        // if the streams differ in the presence or absence of audio or
	        // video, they are incompatible
	        if (variantCodecs.codecCount !== codecCount) {
	          variant.excludeUntil = Infinity;
	        }

	        // if h.264 is specified on the current playlist, some flavor of
	        // it must be specified on all compatible variants
	        if (variantCodecs.videoCodec !== videoCodec) {
	          variant.excludeUntil = Infinity;
	        }
	      });
	    }
	  }, {
	    key: 'updateAdCues_',
	    value: function updateAdCues_(media) {
	      var offset = 0;
	      var seekable$$1 = this.seekable();

	      if (seekable$$1.length) {
	        offset = seekable$$1.start(0);
	      }

	      updateAdCues(media, this.cueTagsTrack_, offset);
	    }

	    /**
	     * Calculates the desired forward buffer length based on current time
	     *
	     * @return {Number} Desired forward buffer length in seconds
	     */

	  }, {
	    key: 'goalBufferLength',
	    value: function goalBufferLength() {
	      var currentTime = this.tech_.currentTime();
	      var initial = Config.GOAL_BUFFER_LENGTH;
	      var rate = Config.GOAL_BUFFER_LENGTH_RATE;
	      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);

	      return Math.min(initial + currentTime * rate, max);
	    }

	    /**
	     * Calculates the desired buffer low water line based on current time
	     *
	     * @return {Number} Desired buffer low water line in seconds
	     */

	  }, {
	    key: 'bufferLowWaterLine',
	    value: function bufferLowWaterLine() {
	      var currentTime = this.tech_.currentTime();
	      var initial = Config.BUFFER_LOW_WATER_LINE;
	      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;
	      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);

	      return Math.min(initial + currentTime * rate, max);
	    }
	  }]);
	  return MasterPlaylistController;
	}(videojs.EventTarget);

	/**
	 * Returns a function that acts as the Enable/disable playlist function.
	 *
	 * @param {PlaylistLoader} loader - The master playlist loader
	 * @param {String} playlistUri - uri of the playlist
	 * @param {Function} changePlaylistFn - A function to be called after a
	 * playlist's enabled-state has been changed. Will NOT be called if a
	 * playlist's enabled-state is unchanged
	 * @param {Boolean=} enable - Value to set the playlist enabled-state to
	 * or if undefined returns the current enabled-state for the playlist
	 * @return {Function} Function for setting/getting enabled
	 */
	var enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {
	  return function (enable) {
	    var playlist = loader.master.playlists[playlistUri];
	    var incompatible = isIncompatible(playlist);
	    var currentlyEnabled = isEnabled(playlist);

	    if (typeof enable === 'undefined') {
	      return currentlyEnabled;
	    }

	    if (enable) {
	      delete playlist.disabled;
	    } else {
	      playlist.disabled = true;
	    }

	    if (enable !== currentlyEnabled && !incompatible) {
	      // Ensure the outside world knows about our changes
	      changePlaylistFn();
	      if (enable) {
	        loader.trigger('renditionenabled');
	      } else {
	        loader.trigger('renditiondisabled');
	      }
	    }
	    return enable;
	  };
	};

	/**
	 * The representation object encapsulates the publicly visible information
	 * in a media playlist along with a setter/getter-type function (enabled)
	 * for changing the enabled-state of a particular playlist entry
	 *
	 * @class Representation
	 */

	var Representation = function Representation(hlsHandler, playlist, id) {
	  classCallCheck$1(this, Representation);
	  var mpc = hlsHandler.masterPlaylistController_,
	      smoothQualityChange = hlsHandler.options_.smoothQualityChange;
	  // Get a reference to a bound version of the quality change function

	  var changeType = smoothQualityChange ? 'smooth' : 'fast';
	  var qualityChangeFunction = mpc[changeType + 'QualityChange_'].bind(mpc);

	  // some playlist attributes are optional
	  if (playlist.attributes.RESOLUTION) {
	    var resolution = playlist.attributes.RESOLUTION;

	    this.width = resolution.width;
	    this.height = resolution.height;
	  }

	  this.bandwidth = playlist.attributes.BANDWIDTH;

	  // The id is simply the ordinality of the media playlist
	  // within the master playlist
	  this.id = id;

	  // Partially-apply the enableFunction to create a playlist-
	  // specific variant
	  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, qualityChangeFunction);
	};

	/**
	 * A mixin function that adds the `representations` api to an instance
	 * of the HlsHandler class
	 * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the
	 * representation API into
	 */


	var renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {
	  var playlists = hlsHandler.playlists;

	  // Add a single API-specific function to the HlsHandler instance
	  hlsHandler.representations = function () {
	    return playlists.master.playlists.filter(function (media) {
	      return !isIncompatible(media);
	    }).map(function (e, i) {
	      return new Representation(hlsHandler, e, e.uri);
	    });
	  };
	};

	/**
	 * @file playback-watcher.js
	 *
	 * Playback starts, and now my watch begins. It shall not end until my death. I shall
	 * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns
	 * and win no glory. I shall live and die at my post. I am the corrector of the underflow.
	 * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge
	 * my life and honor to the Playback Watch, for this Player and all the Players to come.
	 */

	// Set of events that reset the playback-watcher time check logic and clear the timeout
	var timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];

	/**
	 * @class PlaybackWatcher
	 */

	var PlaybackWatcher = function () {
	  /**
	   * Represents an PlaybackWatcher object.
	   * @constructor
	   * @param {object} options an object that includes the tech and settings
	   */
	  function PlaybackWatcher(options) {
	    var _this = this;

	    classCallCheck$1(this, PlaybackWatcher);

	    this.tech_ = options.tech;
	    this.seekable = options.seekable;
	    this.seekTo = options.seekTo;

	    this.consecutiveUpdates = 0;
	    this.lastRecordedTime = null;
	    this.timer_ = null;
	    this.checkCurrentTimeTimeout_ = null;
	    this.logger_ = logger('PlaybackWatcher');

	    this.logger_('initialize');

	    var canPlayHandler = function canPlayHandler() {
	      return _this.monitorCurrentTime_();
	    };
	    var waitingHandler = function waitingHandler() {
	      return _this.techWaiting_();
	    };
	    var cancelTimerHandler = function cancelTimerHandler() {
	      return _this.cancelTimer_();
	    };
	    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {
	      return _this.fixesBadSeeks_();
	    };

	    this.tech_.on('seekablechanged', fixesBadSeeksHandler);
	    this.tech_.on('waiting', waitingHandler);
	    this.tech_.on(timerCancelEvents, cancelTimerHandler);
	    this.tech_.on('canplay', canPlayHandler);

	    // Define the dispose function to clean up our events
	    this.dispose = function () {
	      _this.logger_('dispose');
	      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);
	      _this.tech_.off('waiting', waitingHandler);
	      _this.tech_.off(timerCancelEvents, cancelTimerHandler);
	      _this.tech_.off('canplay', canPlayHandler);
	      if (_this.checkCurrentTimeTimeout_) {
	        window_1.clearTimeout(_this.checkCurrentTimeTimeout_);
	      }
	      _this.cancelTimer_();
	    };
	  }

	  /**
	   * Periodically check current time to see if playback stopped
	   *
	   * @private
	   */


	  createClass(PlaybackWatcher, [{
	    key: 'monitorCurrentTime_',
	    value: function monitorCurrentTime_() {
	      this.checkCurrentTime_();

	      if (this.checkCurrentTimeTimeout_) {
	        window_1.clearTimeout(this.checkCurrentTimeTimeout_);
	      }

	      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
	      this.checkCurrentTimeTimeout_ = window_1.setTimeout(this.monitorCurrentTime_.bind(this), 250);
	    }

	    /**
	     * The purpose of this function is to emulate the "waiting" event on
	     * browsers that do not emit it when they are waiting for more
	     * data to continue playback
	     *
	     * @private
	     */

	  }, {
	    key: 'checkCurrentTime_',
	    value: function checkCurrentTime_() {
	      if (this.tech_.seeking() && this.fixesBadSeeks_()) {
	        this.consecutiveUpdates = 0;
	        this.lastRecordedTime = this.tech_.currentTime();
	        return;
	      }

	      if (this.tech_.paused() || this.tech_.seeking()) {
	        return;
	      }

	      var currentTime = this.tech_.currentTime();
	      var buffered = this.tech_.buffered();

	      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {
	        // If current time is at the end of the final buffered region, then any playback
	        // stall is most likely caused by buffering in a low bandwidth environment. The tech
	        // should fire a `waiting` event in this scenario, but due to browser and tech
	        // inconsistencies. Calling `techWaiting_` here allows us to simulate
	        // responding to a native `waiting` event when the tech fails to emit one.
	        return this.techWaiting_();
	      }

	      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {
	        this.consecutiveUpdates++;
	        this.waiting_();
	      } else if (currentTime === this.lastRecordedTime) {
	        this.consecutiveUpdates++;
	      } else {
	        this.consecutiveUpdates = 0;
	        this.lastRecordedTime = currentTime;
	      }
	    }

	    /**
	     * Cancels any pending timers and resets the 'timeupdate' mechanism
	     * designed to detect that we are stalled
	     *
	     * @private
	     */

	  }, {
	    key: 'cancelTimer_',
	    value: function cancelTimer_() {
	      this.consecutiveUpdates = 0;

	      if (this.timer_) {
	        this.logger_('cancelTimer_');
	        clearTimeout(this.timer_);
	      }

	      this.timer_ = null;
	    }

	    /**
	     * Fixes situations where there's a bad seek
	     *
	     * @return {Boolean} whether an action was taken to fix the seek
	     * @private
	     */

	  }, {
	    key: 'fixesBadSeeks_',
	    value: function fixesBadSeeks_() {
	      var seeking = this.tech_.seeking();
	      var seekable = this.seekable();
	      var currentTime = this.tech_.currentTime();
	      var seekTo = void 0;

	      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {
	        var seekableEnd = seekable.end(seekable.length - 1);

	        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)
	        seekTo = seekableEnd;
	      }

	      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {
	        var seekableStart = seekable.start(0);

	        // sync to the beginning of the live window
	        // provide a buffer of .1 seconds to handle rounding/imprecise numbers
	        seekTo = seekableStart + SAFE_TIME_DELTA;
	      }

	      if (typeof seekTo !== 'undefined') {
	        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));

	        this.seekTo(seekTo);
	        return true;
	      }

	      return false;
	    }

	    /**
	     * Handler for situations when we determine the player is waiting.
	     *
	     * @private
	     */

	  }, {
	    key: 'waiting_',
	    value: function waiting_() {
	      if (this.techWaiting_()) {
	        return;
	      }

	      // All tech waiting checks failed. Use last resort correction
	      var currentTime = this.tech_.currentTime();
	      var buffered = this.tech_.buffered();
	      var currentRange = findRange(buffered, currentTime);

	      // Sometimes the player can stall for unknown reasons within a contiguous buffered
	      // region with no indication that anything is amiss (seen in Firefox). Seeking to
	      // currentTime is usually enough to kickstart the player. This checks that the player
	      // is currently within a buffered region before attempting a corrective seek.
	      // Chrome does not appear to continue `timeupdate` events after a `waiting` event
	      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also
	      // make sure there is ~3 seconds of forward buffer before taking any corrective action
	      // to avoid triggering an `unknownwaiting` event when the network is slow.
	      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {
	        this.cancelTimer_();
	        this.seekTo(currentTime);

	        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');

	        // unknown waiting corrections may be useful for monitoring QoS
	        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });
	        return;
	      }
	    }

	    /**
	     * Handler for situations when the tech fires a `waiting` event
	     *
	     * @return {Boolean}
	     *         True if an action (or none) was needed to correct the waiting. False if no
	     *         checks passed
	     * @private
	     */

	  }, {
	    key: 'techWaiting_',
	    value: function techWaiting_() {
	      var seekable = this.seekable();
	      var currentTime = this.tech_.currentTime();

	      if (this.tech_.seeking() && this.fixesBadSeeks_()) {
	        // Tech is seeking or bad seek fixed, no action needed
	        return true;
	      }

	      if (this.tech_.seeking() || this.timer_ !== null) {
	        // Tech is seeking or already waiting on another action, no action needed
	        return true;
	      }

	      if (this.beforeSeekableWindow_(seekable, currentTime)) {
	        var livePoint = seekable.end(seekable.length - 1);

	        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));
	        this.cancelTimer_();
	        this.seekTo(livePoint);

	        // live window resyncs may be useful for monitoring QoS
	        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });
	        return true;
	      }

	      var buffered = this.tech_.buffered();
	      var nextRange = findNextRange(buffered, currentTime);

	      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {
	        // Even though the video underflowed and was stuck in a gap, the audio overplayed
	        // the gap, leading currentTime into a buffered range. Seeking to currentTime
	        // allows the video to catch up to the audio position without losing any audio
	        // (only suffering ~3 seconds of frozen video and a pause in audio playback).
	        this.cancelTimer_();
	        this.seekTo(currentTime);

	        // video underflow may be useful for monitoring QoS
	        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });
	        return true;
	      }

	      // check for gap
	      if (nextRange.length > 0) {
	        var difference = nextRange.start(0) - currentTime;

	        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));

	        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);
	        return true;
	      }

	      // All checks failed. Returning false to indicate failure to correct waiting
	      return false;
	    }
	  }, {
	    key: 'afterSeekableWindow_',
	    value: function afterSeekableWindow_(seekable, currentTime) {
	      if (!seekable.length) {
	        // we can't make a solid case if there's no seekable, default to false
	        return false;
	      }

	      if (currentTime > seekable.end(seekable.length - 1) + SAFE_TIME_DELTA) {
	        return true;
	      }

	      return false;
	    }
	  }, {
	    key: 'beforeSeekableWindow_',
	    value: function beforeSeekableWindow_(seekable, currentTime) {
	      if (seekable.length &&
	      // can't fall before 0 and 0 seekable start identifies VOD stream
	      seekable.start(0) > 0 && currentTime < seekable.start(0) - SAFE_TIME_DELTA) {
	        return true;
	      }

	      return false;
	    }
	  }, {
	    key: 'videoUnderflow_',
	    value: function videoUnderflow_(nextRange, buffered, currentTime) {
	      if (nextRange.length === 0) {
	        // Even if there is no available next range, there is still a possibility we are
	        // stuck in a gap due to video underflow.
	        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);

	        if (gap) {
	          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));

	          return true;
	        }
	      }

	      return false;
	    }

	    /**
	     * Timer callback. If playback still has not proceeded, then we seek
	     * to the start of the next buffered region.
	     *
	     * @private
	     */

	  }, {
	    key: 'skipTheGap_',
	    value: function skipTheGap_(scheduledCurrentTime) {
	      var buffered = this.tech_.buffered();
	      var currentTime = this.tech_.currentTime();
	      var nextRange = findNextRange(buffered, currentTime);

	      this.cancelTimer_();

	      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {
	        return;
	      }

	      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));

	      // only seek if we still have not played
	      this.seekTo(nextRange.start(0) + TIME_FUDGE_FACTOR);

	      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });
	    }
	  }, {
	    key: 'gapFromVideoUnderflow_',
	    value: function gapFromVideoUnderflow_(buffered, currentTime) {
	      // At least in Chrome, if there is a gap in the video buffer, the audio will continue
	      // playing for ~3 seconds after the video gap starts. This is done to account for
	      // video buffer underflow/underrun (note that this is not done when there is audio
	      // buffer underflow/underrun -- in that case the video will stop as soon as it
	      // encounters the gap, as audio stalls are more noticeable/jarring to a user than
	      // video stalls). The player's time will reflect the playthrough of audio, so the
	      // time will appear as if we are in a buffered region, even if we are stuck in a
	      // "gap."
	      //
	      // Example:
	      // video buffer:   0 => 10.1, 10.2 => 20
	      // audio buffer:   0 => 20
	      // overall buffer: 0 => 10.1, 10.2 => 20
	      // current time: 13
	      //
	      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,
	      // however, the audio continued playing until it reached ~3 seconds past the gap
	      // (13 seconds), at which point it stops as well. Since current time is past the
	      // gap, findNextRange will return no ranges.
	      //
	      // To check for this issue, we see if there is a gap that starts somewhere within
	      // a 3 second range (3 seconds +/- 1 second) back from our current time.
	      var gaps = findGaps(buffered);

	      for (var i = 0; i < gaps.length; i++) {
	        var start = gaps.start(i);
	        var end = gaps.end(i);

	        // gap is starts no more than 4 seconds back
	        if (currentTime - start < 4 && currentTime - start > 2) {
	          return {
	            start: start,
	            end: end
	          };
	        }
	      }

	      return null;
	    }
	  }]);
	  return PlaybackWatcher;
	}();

	var defaultOptions = {
	  errorInterval: 30,
	  getSource: function getSource(next) {
	    var tech = this.tech({ IWillNotUseThisInPlugins: true });
	    var sourceObj = tech.currentSource_;

	    return next(sourceObj);
	  }
	};

	/**
	 * Main entry point for the plugin
	 *
	 * @param {Player} player a reference to a videojs Player instance
	 * @param {Object} [options] an object with plugin options
	 * @private
	 */
	var initPlugin = function initPlugin(player, options) {
	  var lastCalled = 0;
	  var seekTo = 0;
	  var localOptions = videojs.mergeOptions(defaultOptions, options);

	  player.ready(function () {
	    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });
	  });

	  /**
	   * Player modifications to perform that must wait until `loadedmetadata`
	   * has been triggered
	   *
	   * @private
	   */
	  var loadedMetadataHandler = function loadedMetadataHandler() {
	    if (seekTo) {
	      player.currentTime(seekTo);
	    }
	  };

	  /**
	   * Set the source on the player element, play, and seek if necessary
	   *
	   * @param {Object} sourceObj An object specifying the source url and mime-type to play
	   * @private
	   */
	  var setSource = function setSource(sourceObj) {
	    if (sourceObj === null || sourceObj === undefined) {
	      return;
	    }
	    seekTo = player.duration() !== Infinity && player.currentTime() || 0;

	    player.one('loadedmetadata', loadedMetadataHandler);

	    player.src(sourceObj);
	    player.trigger({ type: 'usage', name: 'hls-error-reload' });
	    player.play();
	  };

	  /**
	   * Attempt to get a source from either the built-in getSource function
	   * or a custom function provided via the options
	   *
	   * @private
	   */
	  var errorHandler = function errorHandler() {
	    // Do not attempt to reload the source if a source-reload occurred before
	    // 'errorInterval' time has elapsed since the last source-reload
	    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {
	      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });
	      return;
	    }

	    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {
	      videojs.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');
	      return;
	    }
	    lastCalled = Date.now();

	    return localOptions.getSource.call(player, setSource);
	  };

	  /**
	   * Unbind any event handlers that were bound by the plugin
	   *
	   * @private
	   */
	  var cleanupEvents = function cleanupEvents() {
	    player.off('loadedmetadata', loadedMetadataHandler);
	    player.off('error', errorHandler);
	    player.off('dispose', cleanupEvents);
	  };

	  /**
	   * Cleanup before re-initializing the plugin
	   *
	   * @param {Object} [newOptions] an object with plugin options
	   * @private
	   */
	  var reinitPlugin = function reinitPlugin(newOptions) {
	    cleanupEvents();
	    initPlugin(player, newOptions);
	  };

	  player.on('error', errorHandler);
	  player.on('dispose', cleanupEvents);

	  // Overwrite the plugin function so that we can correctly cleanup before
	  // initializing the plugin
	  player.reloadSourceOnError = reinitPlugin;
	};

	/**
	 * Reload the source when an error is detected as long as there
	 * wasn't an error previously within the last 30 seconds
	 *
	 * @param {Object} [options] an object with plugin options
	 */
	var reloadSourceOnError = function reloadSourceOnError(options) {
	  initPlugin(this, options);
	};

	var version$2 = "1.5.1";

	// since VHS handles HLS and DASH (and in the future, more types), use * to capture all
	videojs.use('*', function (player) {
	  return {
	    setSource: function setSource(srcObj, next) {
	      // pass null as the first argument to indicate that the source is not rejected
	      next(null, srcObj);
	    },


	    // VHS needs to know when seeks happen. For external seeks (generated at the player
	    // level), this middleware will capture the action. For internal seeks (generated at
	    // the tech level), we use a wrapped function so that we can handle it on our own
	    // (specified elsewhere).
	    setCurrentTime: function setCurrentTime(time) {
	      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {
	        player.vhs.setCurrentTime(time);
	      }

	      return time;
	    },


	    // Sync VHS after play requests.
	    // This specifically handles replay where the order of actions is
	    // play, video element will seek to 0 (skipping the setCurrentTime middleware)
	    // then triggers a play event.
	    play: function play() {
	      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {
	        player.vhs.setCurrentTime(player.currentTime());
	      }
	    }
	  };
	});

	/**
	 * @file videojs-http-streaming.js
	 *
	 * The main file for the HLS project.
	 * License: https://github.com/videojs/videojs-http-streaming/blob/master/LICENSE
	 */

	var Hls$1 = {
	  PlaylistLoader: PlaylistLoader,
	  Playlist: Playlist,
	  Decrypter: Decrypter,
	  AsyncStream: AsyncStream,
	  decrypt: decrypt,
	  utils: utils,

	  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,
	  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,
	  comparePlaylistBandwidth: comparePlaylistBandwidth,
	  comparePlaylistResolution: comparePlaylistResolution,

	  xhr: xhrFactory()
	};

	// Define getter/setters for config properites
	['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {
	  Object.defineProperty(Hls$1, prop, {
	    get: function get$$1() {
	      videojs.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');
	      return Config[prop];
	    },
	    set: function set$$1(value) {
	      videojs.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');

	      if (typeof value !== 'number' || value < 0) {
	        videojs.log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');
	        return;
	      }

	      Config[prop] = value;
	    }
	  });
	});

	var LOCAL_STORAGE_KEY = 'videojs-vhs';

	var simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {
	  var mpegurlRE = /^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i;

	  if (mpegurlRE.test(type)) {
	    return 'hls';
	  }

	  var dashRE = /^application\/dash\+xml/i;

	  if (dashRE.test(type)) {
	    return 'dash';
	  }

	  return null;
	};

	/**
	 * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.
	 *
	 * @param {QualityLevelList} qualityLevels The QualityLevelList to update.
	 * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.
	 * @function handleHlsMediaChange
	 */
	var handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {
	  var newPlaylist = playlistLoader.media();
	  var selectedIndex = -1;

	  for (var i = 0; i < qualityLevels.length; i++) {
	    if (qualityLevels[i].id === newPlaylist.uri) {
	      selectedIndex = i;
	      break;
	    }
	  }

	  qualityLevels.selectedIndex_ = selectedIndex;
	  qualityLevels.trigger({
	    selectedIndex: selectedIndex,
	    type: 'change'
	  });
	};

	/**
	 * Adds quality levels to list once playlist metadata is available
	 *
	 * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.
	 * @param {Object} hls Hls object to listen to for media events.
	 * @function handleHlsLoadedMetadata
	 */
	var handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {
	  hls.representations().forEach(function (rep) {
	    qualityLevels.addQualityLevel(rep);
	  });
	  handleHlsMediaChange(qualityLevels, hls.playlists);
	};

	// HLS is a source handler, not a tech. Make sure attempts to use it
	// as one do not cause exceptions.
	Hls$1.canPlaySource = function () {
	  return videojs.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\'s techOrder.');
	};

	var emeKeySystems = function emeKeySystems(keySystemOptions, videoPlaylist, audioPlaylist) {
	  if (!keySystemOptions) {
	    return keySystemOptions;
	  }

	  // upsert the content types based on the selected playlist
	  var keySystemContentTypes = {};

	  for (var keySystem in keySystemOptions) {
	    keySystemContentTypes[keySystem] = {
	      audioContentType: 'audio/mp4; codecs="' + audioPlaylist.attributes.CODECS + '"',
	      videoContentType: 'video/mp4; codecs="' + videoPlaylist.attributes.CODECS + '"'
	    };

	    if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {
	      keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;
	    }

	    // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'
	    // so we need to prevent overwriting the URL entirely
	    if (typeof keySystemOptions[keySystem] === 'string') {
	      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];
	    }
	  }

	  return videojs.mergeOptions(keySystemOptions, keySystemContentTypes);
	};

	var setupEmeOptions = function setupEmeOptions(hlsHandler) {
	  if (hlsHandler.options_.sourceType !== 'dash') {
	    return;
	  }
	  var player = videojs.players[hlsHandler.tech_.options_.playerId];

	  if (player.eme) {
	    var sourceOptions = emeKeySystems(hlsHandler.source_.keySystems, hlsHandler.playlists.media(), hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());

	    if (sourceOptions) {
	      player.currentSource().keySystems = sourceOptions;

	      // works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449
	      if (player.eme.initializeMediaKeys) {
	        player.eme.initializeMediaKeys();
	      }
	    }
	  }
	};

	var getVhsLocalStorage = function getVhsLocalStorage() {
	  if (!window.localStorage) {
	    return null;
	  }

	  var storedObject = window.localStorage.getItem(LOCAL_STORAGE_KEY);

	  if (!storedObject) {
	    return null;
	  }

	  try {
	    return JSON.parse(storedObject);
	  } catch (e) {
	    // someone may have tampered with the value
	    return null;
	  }
	};

	var updateVhsLocalStorage = function updateVhsLocalStorage(options) {
	  if (!window.localStorage) {
	    return false;
	  }

	  var objectToStore = getVhsLocalStorage();

	  objectToStore = objectToStore ? videojs.mergeOptions(objectToStore, options) : options;

	  try {
	    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(objectToStore));
	  } catch (e) {
	    // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where
	    // storage is set to 0).
	    // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions
	    // No need to perform any operation.
	    return false;
	  }

	  return objectToStore;
	};

	/**
	 * Whether the browser has built-in HLS support.
	 */
	Hls$1.supportsNativeHls = function () {
	  var video = document_1.createElement('video');

	  // native HLS is definitely not supported if HTML5 video isn't
	  if (!videojs.getTech('Html5').isSupported()) {
	    return false;
	  }

	  // HLS manifests can go by many mime-types
	  var canPlay = [
	  // Apple santioned
	  'application/vnd.apple.mpegurl',
	  // Apple sanctioned for backwards compatibility
	  'audio/mpegurl',
	  // Very common
	  'audio/x-mpegurl',
	  // Very common
	  'application/x-mpegurl',
	  // Included for completeness
	  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];

	  return canPlay.some(function (canItPlay) {
	    return (/maybe|probably/i.test(video.canPlayType(canItPlay))
	    );
	  });
	}();

	Hls$1.supportsNativeDash = function () {
	  if (!videojs.getTech('Html5').isSupported()) {
	    return false;
	  }

	  return (/maybe|probably/i.test(document_1.createElement('video').canPlayType('application/dash+xml'))
	  );
	}();

	Hls$1.supportsTypeNatively = function (type) {
	  if (type === 'hls') {
	    return Hls$1.supportsNativeHls;
	  }

	  if (type === 'dash') {
	    return Hls$1.supportsNativeDash;
	  }

	  return false;
	};

	/**
	 * HLS is a source handler, not a tech. Make sure attempts to use it
	 * as one do not cause exceptions.
	 */
	Hls$1.isSupported = function () {
	  return videojs.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\'s techOrder.');
	};

	var Component = videojs.getComponent('Component');

	/**
	 * The Hls Handler object, where we orchestrate all of the parts
	 * of HLS to interact with video.js
	 *
	 * @class HlsHandler
	 * @extends videojs.Component
	 * @param {Object} source the soruce object
	 * @param {Tech} tech the parent tech object
	 * @param {Object} options optional and required options
	 */

	var HlsHandler = function (_Component) {
	  inherits$1(HlsHandler, _Component);

	  function HlsHandler(source, tech, options) {
	    classCallCheck$1(this, HlsHandler);

	    // tech.player() is deprecated but setup a reference to HLS for
	    // backwards-compatibility
	    var _this = possibleConstructorReturn$1(this, (HlsHandler.__proto__ || Object.getPrototypeOf(HlsHandler)).call(this, tech, options.hls));

	    if (tech.options_ && tech.options_.playerId) {
	      var _player = videojs(tech.options_.playerId);

	      if (!_player.hasOwnProperty('hls')) {
	        Object.defineProperty(_player, 'hls', {
	          get: function get$$1() {
	            videojs.log.warn('player.hls is deprecated. Use player.tech().hls instead.');
	            tech.trigger({ type: 'usage', name: 'hls-player-access' });
	            return _this;
	          },
	          configurable: true
	        });
	      }

	      // Set up a reference to the HlsHandler from player.vhs. This allows users to start
	      // migrating from player.tech_.hls... to player.vhs... for API access. Although this
	      // isn't the most appropriate form of reference for video.js (since all APIs should
	      // be provided through core video.js), it is a common pattern for plugins, and vhs
	      // will act accordingly.
	      _player.vhs = _this;
	      // deprecated, for backwards compatibility
	      _player.dash = _this;

	      _this.player_ = _player;
	    }

	    _this.tech_ = tech;
	    _this.source_ = source;
	    _this.stats = {};
	    _this.setOptions_();

	    if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {
	      tech.overrideNativeAudioTracks(true);
	      tech.overrideNativeVideoTracks(true);
	    } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {
	      // overriding native HLS only works if audio tracks have been emulated
	      // error early if we're misconfigured
	      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');
	    }

	    // listen for fullscreenchange events for this player so that we
	    // can adjust our quality selection quickly
	    _this.on(document_1, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {
	      var fullscreenElement = document_1.fullscreenElement || document_1.webkitFullscreenElement || document_1.mozFullScreenElement || document_1.msFullscreenElement;

	      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {
	        _this.masterPlaylistController_.smoothQualityChange_();
	      }
	    });

	    // Handle seeking when looping - middleware doesn't handle this seek event from the tech
	    _this.on(_this.tech_, 'seeking', function () {
	      if (this.tech_.seeking() && this.tech_.currentTime() === 0 && this.tech_.player_.loop()) {
	        this.setCurrentTime(0);
	      }
	    });

	    _this.on(_this.tech_, 'error', function () {
	      if (this.masterPlaylistController_) {
	        this.masterPlaylistController_.pauseLoading();
	      }
	    });

	    _this.on(_this.tech_, 'play', _this.play);
	    return _this;
	  }

	  createClass(HlsHandler, [{
	    key: 'setOptions_',
	    value: function setOptions_() {
	      var _this2 = this;

	      // defaults
	      this.options_.withCredentials = this.options_.withCredentials || false;
	      this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;
	      this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;
	      this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== 'undefined' ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;

	      if (typeof this.options_.blacklistDuration !== 'number') {
	        this.options_.blacklistDuration = 5 * 60;
	      }

	      if (typeof this.options_.bandwidth !== 'number') {
	        if (this.options_.useBandwidthFromLocalStorage) {
	          var storedObject = getVhsLocalStorage();

	          if (storedObject && storedObject.bandwidth) {
	            this.options_.bandwidth = storedObject.bandwidth;
	            this.tech_.trigger({ type: 'usage', name: 'hls-bandwidth-from-local-storage' });
	          }
	          if (storedObject && storedObject.throughput) {
	            this.options_.throughput = storedObject.throughput;
	            this.tech_.trigger({ type: 'usage', name: 'hls-throughput-from-local-storage' });
	          }
	        }
	      }
	      // if bandwidth was not set by options or pulled from local storage, start playlist
	      // selection at a reasonable bandwidth
	      if (typeof this.options_.bandwidth !== 'number') {
	        this.options_.bandwidth = Config.INITIAL_BANDWIDTH;
	      }

	      // If the bandwidth number is unchanged from the initial setting
	      // then this takes precedence over the enableLowInitialPlaylist option
	      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH;

	      // grab options passed to player.src
	      ['withCredentials', 'limitRenditionByPlayerDimensions', 'bandwidth', 'smoothQualityChange'].forEach(function (option) {
	        if (typeof _this2.source_[option] !== 'undefined') {
	          _this2.options_[option] = _this2.source_[option];
	        }
	      });

	      this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
	    }
	    /**
	     * called when player.src gets called, handle a new source
	     *
	     * @param {Object} src the source object to handle
	     */

	  }, {
	    key: 'src',
	    value: function src(_src, type) {
	      var _this3 = this;

	      // do nothing if the src is falsey
	      if (!_src) {
	        return;
	      }
	      this.setOptions_();
	      // add master playlist controller options
	      this.options_.url = this.source_.src;
	      this.options_.tech = this.tech_;
	      this.options_.externHls = Hls$1;
	      this.options_.sourceType = simpleTypeFromSourceType(type);
	      // Whenever we seek internally, we should update both the tech and call our own
	      // setCurrentTime function. This is needed because "seeking" events aren't always
	      // reliable. External seeks (via the player object) are handled via middleware.
	      this.options_.seekTo = function (time) {
	        _this3.tech_.setCurrentTime(time);
	        _this3.setCurrentTime(time);
	      };

	      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);
	      this.playbackWatcher_ = new PlaybackWatcher(videojs.mergeOptions(this.options_, {
	        seekable: function seekable$$1() {
	          return _this3.seekable();
	        }
	      }));

	      this.masterPlaylistController_.on('error', function () {
	        var player = videojs.players[_this3.tech_.options_.playerId];

	        player.error(_this3.masterPlaylistController_.error);
	      });

	      // `this` in selectPlaylist should be the HlsHandler for backwards
	      // compatibility with < v2
	      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this);

	      this.masterPlaylistController_.selectInitialPlaylist = Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this);

	      // re-expose some internal objects for backwards compatibility with < v2
	      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;
	      this.mediaSource = this.masterPlaylistController_.mediaSource;

	      // Proxy assignment of some properties to the master playlist
	      // controller. Using a custom property for backwards compatibility
	      // with < v2
	      Object.defineProperties(this, {
	        selectPlaylist: {
	          get: function get$$1() {
	            return this.masterPlaylistController_.selectPlaylist;
	          },
	          set: function set$$1(selectPlaylist) {
	            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);
	          }
	        },
	        throughput: {
	          get: function get$$1() {
	            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
	          },
	          set: function set$$1(throughput) {
	            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;
	            // By setting `count` to 1 the throughput value becomes the starting value
	            // for the cumulative average
	            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
	          }
	        },
	        bandwidth: {
	          get: function get$$1() {
	            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
	          },
	          set: function set$$1(bandwidth) {
	            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;
	            // setting the bandwidth manually resets the throughput counter
	            // `count` is set to zero that current value of `rate` isn't included
	            // in the cumulative average
	            this.masterPlaylistController_.mainSegmentLoader_.throughput = {
	              rate: 0,
	              count: 0
	            };
	          }
	        },
	        /**
	         * `systemBandwidth` is a combination of two serial processes bit-rates. The first
	         * is the network bitrate provided by `bandwidth` and the second is the bitrate of
	         * the entire process after that - decryption, transmuxing, and appending - provided
	         * by `throughput`.
	         *
	         * Since the two process are serial, the overall system bandwidth is given by:
	         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)
	         */
	        systemBandwidth: {
	          get: function get$$1() {
	            var invBandwidth = 1 / (this.bandwidth || 1);
	            var invThroughput = void 0;

	            if (this.throughput > 0) {
	              invThroughput = 1 / this.throughput;
	            } else {
	              invThroughput = 0;
	            }

	            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));

	            return systemBitrate;
	          },
	          set: function set$$1() {
	            videojs.log.error('The "systemBandwidth" property is read-only');
	          }
	        }
	      });

	      if (this.options_.bandwidth) {
	        this.bandwidth = this.options_.bandwidth;
	      }
	      if (this.options_.throughput) {
	        this.throughput = this.options_.throughput;
	      }

	      Object.defineProperties(this.stats, {
	        bandwidth: {
	          get: function get$$1() {
	            return _this3.bandwidth || 0;
	          },
	          enumerable: true
	        },
	        mediaRequests: {
	          get: function get$$1() {
	            return _this3.masterPlaylistController_.mediaRequests_() || 0;
	          },
	          enumerable: true
	        },
	        mediaRequestsAborted: {
	          get: function get$$1() {
	            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;
	          },
	          enumerable: true
	        },
	        mediaRequestsTimedout: {
	          get: function get$$1() {
	            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;
	          },
	          enumerable: true
	        },
	        mediaRequestsErrored: {
	          get: function get$$1() {
	            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;
	          },
	          enumerable: true
	        },
	        mediaTransferDuration: {
	          get: function get$$1() {
	            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;
	          },
	          enumerable: true
	        },
	        mediaBytesTransferred: {
	          get: function get$$1() {
	            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;
	          },
	          enumerable: true
	        },
	        mediaSecondsLoaded: {
	          get: function get$$1() {
	            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;
	          },
	          enumerable: true
	        },
	        buffered: {
	          get: function get$$1() {
	            return timeRangesToArray(_this3.tech_.buffered());
	          },
	          enumerable: true
	        },
	        currentTime: {
	          get: function get$$1() {
	            return _this3.tech_.currentTime();
	          },
	          enumerable: true
	        },
	        currentSource: {
	          get: function get$$1() {
	            return _this3.tech_.currentSource_;
	          },
	          enumerable: true
	        },
	        currentTech: {
	          get: function get$$1() {
	            return _this3.tech_.name_;
	          },
	          enumerable: true
	        },
	        duration: {
	          get: function get$$1() {
	            return _this3.tech_.duration();
	          },
	          enumerable: true
	        },
	        master: {
	          get: function get$$1() {
	            return _this3.playlists.master;
	          },
	          enumerable: true
	        },
	        playerDimensions: {
	          get: function get$$1() {
	            return _this3.tech_.currentDimensions();
	          },
	          enumerable: true
	        },
	        seekable: {
	          get: function get$$1() {
	            return timeRangesToArray(_this3.tech_.seekable());
	          },
	          enumerable: true
	        },
	        timestamp: {
	          get: function get$$1() {
	            return Date.now();
	          },
	          enumerable: true
	        },
	        videoPlaybackQuality: {
	          get: function get$$1() {
	            return _this3.tech_.getVideoPlaybackQuality();
	          },
	          enumerable: true
	        }
	      });

	      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));

	      this.tech_.on('bandwidthupdate', function () {
	        if (_this3.options_.useBandwidthFromLocalStorage) {
	          updateVhsLocalStorage({
	            bandwidth: _this3.bandwidth,
	            throughput: Math.round(_this3.throughput)
	          });
	        }
	      });

	      this.masterPlaylistController_.on('selectedinitialmedia', function () {
	        // Add the manual rendition mix-in to HlsHandler
	        renditionSelectionMixin(_this3);
	        setupEmeOptions(_this3);
	      });

	      // the bandwidth of the primary segment loader is our best
	      // estimate of overall bandwidth
	      this.on(this.masterPlaylistController_, 'progress', function () {
	        this.tech_.trigger('progress');
	      });

	      this.tech_.ready(function () {
	        return _this3.setupQualityLevels_();
	      });

	      // do nothing if the tech has been disposed already
	      // this can occur if someone sets the src in player.ready(), for instance
	      if (!this.tech_.el()) {
	        return;
	      }

	      this.tech_.src(videojs.URL.createObjectURL(this.masterPlaylistController_.mediaSource));
	    }

	    /**
	     * Initializes the quality levels and sets listeners to update them.
	     *
	     * @method setupQualityLevels_
	     * @private
	     */

	  }, {
	    key: 'setupQualityLevels_',
	    value: function setupQualityLevels_() {
	      var _this4 = this;

	      var player = videojs.players[this.tech_.options_.playerId];

	      if (player && player.qualityLevels) {
	        this.qualityLevels_ = player.qualityLevels();

	        this.masterPlaylistController_.on('selectedinitialmedia', function () {
	          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);
	        });

	        this.playlists.on('mediachange', function () {
	          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);
	        });
	      }
	    }

	    /**
	     * Begin playing the video.
	     */

	  }, {
	    key: 'play',
	    value: function play() {
	      this.masterPlaylistController_.play();
	    }

	    /**
	     * a wrapper around the function in MasterPlaylistController
	     */

	  }, {
	    key: 'setCurrentTime',
	    value: function setCurrentTime(currentTime) {
	      this.masterPlaylistController_.setCurrentTime(currentTime);
	    }

	    /**
	     * a wrapper around the function in MasterPlaylistController
	     */

	  }, {
	    key: 'duration',
	    value: function duration$$1() {
	      return this.masterPlaylistController_.duration();
	    }

	    /**
	     * a wrapper around the function in MasterPlaylistController
	     */

	  }, {
	    key: 'seekable',
	    value: function seekable$$1() {
	      return this.masterPlaylistController_.seekable();
	    }

	    /**
	     * Abort all outstanding work and cleanup.
	     */

	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      if (this.playbackWatcher_) {
	        this.playbackWatcher_.dispose();
	      }
	      if (this.masterPlaylistController_) {
	        this.masterPlaylistController_.dispose();
	      }
	      if (this.qualityLevels_) {
	        this.qualityLevels_.dispose();
	      }

	      if (this.player_) {
	        delete this.player_.vhs;
	        delete this.player_.dash;
	        delete this.player_.hls;
	      }

	      if (this.tech_ && this.tech_.hls) {
	        delete this.tech_.hls;
	      }

	      get(HlsHandler.prototype.__proto__ || Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);
	    }
	  }, {
	    key: 'convertToStreamTime',
	    value: function convertToStreamTime(time, callback) {
	      return getStreamTime({
	        playlist: this.masterPlaylistController_.media(),
	        time: time,
	        callback: callback
	      });
	    }

	    // the player must be playing before calling this

	  }, {
	    key: 'seekToStreamTime',
	    value: function seekToStreamTime$$1(streamTime, callback) {
	      var pauseAfterSeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	      var retryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;

	      return seekToStreamTime({
	        streamTime: streamTime,
	        playlist: this.masterPlaylistController_.media(),
	        retryCount: retryCount,
	        pauseAfterSeek: pauseAfterSeek,
	        seekTo: this.options_.seekTo,
	        tech: this.options_.tech,
	        callback: callback
	      });
	    }
	  }]);
	  return HlsHandler;
	}(Component);

	/**
	 * The Source Handler object, which informs video.js what additional
	 * MIME types are supported and sets up playback. It is registered
	 * automatically to the appropriate tech based on the capabilities of
	 * the browser it is running in. It is not necessary to use or modify
	 * this object in normal usage.
	 */


	var HlsSourceHandler = {
	  name: 'videojs-http-streaming',
	  VERSION: version$2,
	  canHandleSource: function canHandleSource(srcObj) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var localOptions = videojs.mergeOptions(videojs.options, options);

	    return HlsSourceHandler.canPlayType(srcObj.type, localOptions);
	  },
	  handleSource: function handleSource(source, tech) {
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    var localOptions = videojs.mergeOptions(videojs.options, options);

	    tech.hls = new HlsHandler(source, tech, localOptions);
	    tech.hls.xhr = xhrFactory();

	    tech.hls.src(source.src, source.type);
	    return tech.hls;
	  },
	  canPlayType: function canPlayType(type) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var _videojs$mergeOptions = videojs.mergeOptions(videojs.options, options),
	        overrideNative = _videojs$mergeOptions.hls.overrideNative;

	    var supportedType = simpleTypeFromSourceType(type);
	    var canUseMsePlayback = supportedType && (!Hls$1.supportsTypeNatively(supportedType) || overrideNative);

	    return canUseMsePlayback ? 'maybe' : '';
	  }
	};

	if (typeof videojs.MediaSource === 'undefined' || typeof videojs.URL === 'undefined') {
	  videojs.MediaSource = MediaSource;
	  videojs.URL = URL$1;
	}

	// register source handlers with the appropriate techs
	if (MediaSource.supportsNativeMediaSources()) {
	  videojs.getTech('Html5').registerSourceHandler(HlsSourceHandler, 0);
	}

	videojs.HlsHandler = HlsHandler;
	videojs.HlsSourceHandler = HlsSourceHandler;
	videojs.Hls = Hls$1;
	if (!videojs.use) {
	  videojs.registerComponent('Hls', Hls$1);
	}
	videojs.options.hls = videojs.options.hls || {};

	if (videojs.registerPlugin) {
	  videojs.registerPlugin('reloadSourceOnError', reloadSourceOnError);
	} else {
	  videojs.plugin('reloadSourceOnError', reloadSourceOnError);
	}

	exports.LOCAL_STORAGE_KEY = LOCAL_STORAGE_KEY;
	exports.Hls = Hls$1;
	exports.HlsHandler = HlsHandler;
	exports.HlsSourceHandler = HlsSourceHandler;
	exports.emeKeySystems = emeKeySystems;
	exports.simpleTypeFromSourceType = simpleTypeFromSourceType;

	Object.defineProperty(exports, '__esModule', { value: true });

})));

//console.log('watermark: Start');

(function() {
  console.log('watermark: Init defaults');
  var defaults = {
        file: 'Owned_Stamp.png',
        xpos: 0,
        ypos: 0,
        xrepeat: 0,
        opacity: 100,
        clickable: false,
        url: "",
        className: 'vjs-watermark',
  text: false,
  debug: false
    },
    extend = function() {
      var args, target, i, object, property;
      args = Array.prototype.slice.call(arguments);
      target = args.shift() || {};
      for (i in args) {
        object = args[i];
        for (property in object) {
          if (object.hasOwnProperty(property)) {
            if (typeof object[property] === 'object') {
              target[property] = extend(target[property], object[property]);
            } else {
              target[property] = object[property];
            }
          }
        }
      }
      return target;
    };

    //! global varible containing reference to the DOM element
    var div;

  /**
   * register the thubmnails plugin
   */
  videojs.registerPlugin('watermark', function(settings) {
    if (settings.debug) console.log('watermark: Register init');

    var options, player, video, img, link;
    options = extend(defaults, settings);

    /* Grab the necessary DOM elements */
    player = this.el();
    video = this.el().getElementsByTagName('video')[0];

    // create the watermark element
    if (!div) {
        div = document.createElement('div');
        div.className = options.className;
    }
    else {
        //! if div already exists, empty it
        div.innerHTML = '';
    }

    // if text is set, display text
    if (options.text)
        div.textContent = options.text;

    // if img is set, add img
    if (options.file) {
        img = document.createElement('img');
        div.appendChild(img);
        img.src = options.file;
        img.style.maxWidth = options.width+"px";
    }

    //img.style.bottom = "0";
    //img.style.right = "0";
    if ((options.ypos === 0) && (options.xpos === 0)) // Top left
    {
      div.style.top = "0";
      div.style.left = "0";
    }
    else if ((options.ypos === 0) && (options.xpos === 100)) // Top right
    {
      div.style.top = "0";
      div.style.right = "0";
    }
    else if ((options.ypos === 100) && (options.xpos === 100)) // Bottom right
    {
      div.style.bottom = "0";
      div.style.right = "0";
      //console.log('watermark: player:' + player.width + 'x' + player.height);
    }
    else if ((options.ypos === 100) && (options.xpos === 0)) // Bottom left
    {
      div.style.bottom = "0";
      div.style.left = "0";
    }
    else if ((options.ypos === 80) && (options.xpos === 80)) // Bottom left
    {
      //div.style.bottom = (this.width() / 5)+50+"px";
      //div.style.left = (this.height() / 5)+15+"px";
      div.style.top = "0px";
      div.style.position = 'absolute';
    }
    else if ((options.ypos === 50) && (options.xpos === 50)) // Center
    {
      if (options.debug) console.log('watermark: player:' + player.width + 'x' + player.height);
      if (options.debug) console.log('watermark: video:' + video.videoWidth + 'x' + video.videoHeight);
      if (options.debug) console.log('watermark: image:' + img.width + 'x' + img.height);
      div.style.top = (this.height()*3)+"px";
      div.style.left = (this.width()*3)+"px";
    }
    div.style.opacity = options.opacity;

    //div.style.backgroundImage = "url("+options.file+")";
    //div.style.backgroundPosition.x = options.xpos+"%";
    //div.style.backgroundPosition.y = options.ypos+"%";
    //div.style.backgroundRepeat = options.xrepeat;
    //div.style.opacity = (options.opacity/100);

    //if user wants watermark to be clickable, add anchor elem
    //todo: check if options.url is an actual url?
    if (options.clickable && options.url !== "") {
      link = document.createElement("a");
      link.href = options.url;
      link.target = "_blank";
      link.appendChild(div);
      //add clickable watermark to the player
      player.appendChild(link);
    } else {
      //add normal watermark to the player
      player.appendChild(div);
    }

    if (options.debug) console.log('watermark: Register end');
  });
})();

/**
 * Video.js Social Share
 * Created by Justin McCraw
 * License information: https://github.com/jmccraw/videojs-socialShare/blob/master/LICENSE
 * Plugin details: https://github.com/jmccraw/videojs-socialShare
 */

(function(videojs) {
  'use strict';

  videojs.plugin('socialShare', function(opts) {
    opts = opts || {};
    var player = this;
    var _ss;
    var fbIcon = '<svg class="vjs-social-share-svg" xmlns="http://www.w3.org/2000/svg" role="presentation" width="36" height="36" viewBox="0 0 36 36" preserveAspectRatio="xMinYMin meet"><path fill-rule="evenodd" clip-rule="evenodd" fill="#3E5C9B" d="M5.4 0h25.2c3 0 5.4 2.4 5.4 5.4v25.2c0 3-2.4 5.4-5.4 5.4h-25.2c-3 0-5.4-2.4-5.4-5.4v-25.2c0-3 2.4-5.4 5.4-5.4z"></path><path fill="#fff" d="M19.4 28v-9.2h4l.6-3.3h-4.6v-2.4c0-1.1.3-1.8 2-1.8h2.6v-3.1c-.4 0-1.1-.2-2.6-.2-3.1 0-5.7 1.8-5.7 5v2.5h-3.7v3.3h3.7v9.2h3.7z"></path></svg>';
    var twIcon = '<svg class="vjs-social-share-svg" xmlns="http://www.w3.org/2000/svg" role="presentation" width="36" height="36" viewBox="0 0 36 36" preserveAspectRatio="xMinYMin meet"><path fill-rule="evenodd" clip-rule="evenodd" fill="#28A9E1" d="M5.4 0h25.2c3 0 5.4 2.4 5.4 5.4v25.2c0 3-2.4 5.4-5.4 5.4h-25.2c-3 0-5.4-2.4-5.4-5.4v-25.2c0-3 2.4-5.4 5.4-5.4z"></path><path fill="#fff" d="M28.2 12.3c-.7.3-1.4.5-2.2.6.8-.5 1.4-1.2 1.7-2.1-.7.4-1.5.7-2.4.9-.7-.7-1.7-1.2-2.8-1.2-2.1 0-3.8 1.7-3.8 3.8 0 .3 0 .6.1.9-3.1-.2-5.9-1.7-7.8-3.9-.3.6-.5 1.2-.5 1.9 0 1.3.7 2.5 1.7 3.1-.6 0-1.2-.2-1.7-.5 0 1.8 1.3 3.3 3 3.7-.3.1-.6.1-1 .1-.2 0-.5 0-.7-.1.5 1.5 1.9 2.6 3.5 2.6-1.3 1-2.9 1.6-4.7 1.6-.3 0-.6 0-.9-.1 1.7 1.1 3.6 1.7 5.8 1.7 6.9 0 10.7-5.7 10.7-10.7v-.5c.8-.4 1.5-1 2-1.8z"></path></svg>';
    var embedIcon = '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 36 36" height="36" width="36" role="presentation" class="vjs-social-share-svg"><path fill-rule="evenodd" clip-rule="evenodd" fill="#666" d="M5.4 0h25.2c3 0 5.4 2.4 5.4 5.4v25.2c0 3-2.4 5.4-5.4 5.4h-25.2c-3 0-5.4-2.4-5.4-5.4v-25.2c0-3 2.4-5.4 5.4-5.4z"></path><path fill="#fff" d="m 15.110455,24.59026 -1.59668,1.611328 -9.8437499,-8.217774 9.8437499,-8.2177732 1.59668,1.6259762 -7.9833986,6.5625 7.9833986,6.635743 z"></path><path fill="#fff" d="m 21.24815,11.392017 1.582031,-1.6259762 9.84375,8.2177732 -9.84375,8.217774 -1.582031,-1.611328 7.983399,-6.577149 -7.983399,-6.621094 z" ></path></svg>';

    /**
     * Launches the Twitter Web Intent form in a new window
     * @type {function}
     */
    function launchTweet(e) {
      e.preventDefault();
      var twitter_url = 'http://twitter.com/intent/tweet' +
                        '?text=' + encodeURIComponent(opts.twitter.shareText ? opts.twitter.shareText : '') +
                        '&url=' + encodeURIComponent(opts.twitter.shareUrl ? opts.twitter.shareUrl : window.location.href)
 
      if (opts.twitter.handle !== '' && typeof opts.twitter.handle !== 'undefined') {
        twitter_url += '&via=' + opts.twitter.handle
      }

      window.open(
        twitter_url,
        'Share This Video to Twitter',
        'width=600,height=300,left=' + Math.ceil((window.innerWidth / 2) - 300) + ',top=' +
          Math.ceil((window.innerHeight / 2) - 127)
      );
    }

    /**
     * Launches the Facebook modal
     * @type {function}
     */
    function launchFacebook(e) {
      e.preventDefault();
      var url = opts.facebook.shareUrl ? opts.facebook.shareUrl : window.location.href;
      var fb_app_id = opts.facebook.app_id ? opts.facebook.app_id : '';
      if (fb_app_id == '') {
            if (!!document.querySelector('meta[property="fb:app_id"]')) {
                fb_app_id = document.querySelector('meta[property="fb:app_id"]').content;
            }
      }

      if (typeof FB !== 'undefined') {
        // assumes you have the proper og metadata filled out for your site
        FB.ui({
          method: 'share',
          href: url,
          picture: opts.facebook.shareImage ? opts.facebook.shareImage : '',
          name: '',
          caption: '',
          description: opts.facebook.shareText ? opts.facebook.shareText : ''
        }, function (response) {
        });
      } else if (fb_app_id !== '') {
        // since the FB object doesn't exist, try to scrape the page for og information and use a new window URL method
        window.open(
          'https://www.facebook.com/dialog/share' +
            '?app_id=' + fb_app_id +
            '&display=popup' +
            '&href=' + encodeURIComponent(url) +
            '&redirect_uri=' + encodeURIComponent(url),
          'Share This Video to Facebook',
          'width=600,height=300,left=' + Math.ceil((window.innerWidth / 2) - 300) + ',top=' +
            Math.ceil((window.innerHeight / 2) - 127)
        );
      } else {
        // Facebook isn't implemented properly in your site's metadata, so we'll just hide this element
        // a little jarring, but better than failing, perhaps
        this.style.display = 'none';
      }
    }

    var _embed_window = null;
    function launchEmbed(e) {
      e.preventDefault();

      if (_embed_window === null) {
        _embed_window = document.createElement('div');
        _embed_window.className = 'embed-window';
        _embed_window.innerHTML = '<input type="text" name="embed-code" class="embed-code" readonly="readonly"><br /><button id="btn-copy">Copy</button>';

        var embed_close = document.createElement('div');
        embed_close.className = "embed-window-close";
        embed_close.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" height="24" width="24"><path fill="#fff" id="path9812" d="m 3.9425039,20.057495 c -4.45165455,-4.451654 -4.45165455,-11.6633357 0,-16.1149908 4.4516552,-4.45165472 11.6633371,-4.45165472 16.1149911,0 4.451656,4.4516551 4.451656,11.6633368 0,16.1149908 -4.451654,4.451656 -11.6633359,4.451656 -16.1149911,0 z M 18.054251,5.9457492 c -3.338741,-3.3387414 -8.7697602,-3.3387414 -12.1085023,0 -3.338741,3.338741 -3.338741,8.7697618 0,12.1085018 3.3387421,3.338741 8.7697613,3.338741 12.1085023,0 3.338741,-3.33874 3.338741,-8.7697608 0,-12.1085018 z M 8.9728744,17.030371 6.9696295,15.027126 9.996756,12 6.9696295,8.9728742 8.9728744,6.9696296 12.000001,9.9967548 15.027127,6.9696296 17.030371,8.9728742 14.003246,12 l 3.027125,3.027126 -2.003244,2.003245 -3.027126,-3.027126 z" /></svg>';

        embed_close.onclick = launchEmbed;
        _embed_window.insertBefore(embed_close, _embed_window.firstChild);

        var embed_title = document.createElement('span');
        embed_title.className = 'embed-window-title';
        embed_title.innerHTML = 'Embed Video';
        _embed_window.insertBefore(embed_title, _embed_window.firstChild);

        player.el().appendChild(_embed_window);

        var el_btn = _embed_window.getElementsByTagName('button')[0];
        el_btn.addEventListener('click', function(event) {
          var el_input = _embed_window.getElementsByTagName('input')[0];
          el_input.focus ();
          el_input.setSelectionRange (0, opts.embed.embedMarkup.length);

          var result = false;
          try {
            result = document.queryCommandSupported('copy');
            if (result) {
                console.log ("copy is supported");
            } else {
                console.log ("copy is not supported");
            }
            result = document.execCommand('copy');
          }
          catch (err) {
            result = false;
          }

          if (result) {
            console.log('copied embed code to clipboard.');
          } else {
            console.log('unable to copy embed code to clipboard.');
          }

          _embed_window.style.display = 'none';
        });
      }

      if (_embed_window.style.display === 'block') {
        _embed_window.style.display = 'none';
      } else {
        var el_input = _embed_window.getElementsByTagName('input')[0];
        el_input.value = opts.embed.embedMarkup;
        el_input.setSelectionRange (0, opts.embed.embedMarkup.length);

        _embed_window.getElementsByTagName('input')[0].value = opts.embed.embedMarkup;
        _embed_window.style.display = 'block';
      }
    }

    /**
     * Generate the DOM elements for the social share tool
     * @type {function}
     */
    function constructSocialShareContent() {
      var _frag = document.createDocumentFragment();
      var _aside = document.createElement('aside');
      var _button;

      var channel = '';
      for (channel in opts) {
        switch (channel) {
          case 'twitter':
            _button = document.createElement('a');
            _button.className = 'vjs-social-share-link';
            _button.setAttribute('data-network', 'twitter');
            _button.innerHTML = twIcon;
            _button.addEventListener('click', launchTweet, false);
            _aside.appendChild(_button);
            break;

          case 'facebook':
            _button = document.createElement('a');
            _button.className = 'vjs-social-share-link';
            _button.setAttribute('data-network', 'facebook');
            _button.innerHTML = fbIcon;
            _button.addEventListener('click', launchFacebook, false);
            _aside.appendChild(_button);
            break;

          case 'embed':
            _button = document.createElement('a');
            _button.className = 'vjs-social-share-link';
            _button.setAttribute('data-network', 'embed');
            _button.innerHTML = embedIcon;
            _button.addEventListener('click', launchEmbed, false);
            _aside.appendChild(_button);
            break;

          default:
            if ((typeof opts[channel].iconsvg !== 'undefined')
                && (typeof opts[channel].callback === 'function')) {
                var network = 'custom';

                if (typeof opts[channel].network !== 'undefined') {
                    network = opts[channel].network;
                }

                _button = document.createElement('a');
                _button.className = 'vjs-social-share-link';
                _button.setAttribute('data-network', network);
                _button.innerHTML = opts[channel].iconsvg;
                _button.addEventListener('click', function(e) {
                  opts[channel].callback (e);
                }, false);
                _aside.appendChild(_button);
            }
            break;
        }
      }

      // remove previously created elements (e.g. the user calls the plugin multiple
      // times as videos are changed out)
      var el = player.el().querySelector('.vjs-social-share');
      if (el) {
        el.remove ();
      }

      _aside.className = 'vjs-social-share';
      _ss = _aside;
      _frag.appendChild(_aside);

      player.el().appendChild(_frag);
    }

    // attach VideoJS event handlers
    player.on('mouseover', function() {
      // on hover, fade in the social share tools
      if (typeof _ss !== 'undefined') {
          _ss.classList.add('is-visible');
      }
    });

    player.on('mouseout', function() {
      // when not hovering, fade share tools back out
      if (typeof _ss !== 'undefined') {
          _ss.classList.remove('is-visible');
      }
    });

    player.ready(function() {
      if (opts.facebook || opts.twitter) {
        constructSocialShareContent();
      }
    });

  });
}(window.videojs));

/*! @name videojs-playlist @version 4.2.2 @license Apache-2.0 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) :
  typeof define === 'function' && define.amd ? define(['video.js'], factory) :
  (global.videojsPlaylist = factory(global.videojs));
}(this, (function (videojs) { 'use strict';

  videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;

  /**
   * Validates a number of seconds to use as the auto-advance delay.
   *
   * @private
   * @param   {number} s
   *          The number to check
   *
   * @return  {boolean}
   *          Whether this is a valid second or not
   */
  var validSeconds = function validSeconds(s) {
    return typeof s === 'number' && !isNaN(s) && s >= 0 && s < Infinity;
  };

  /**
   * Resets the auto-advance behavior of a player.
   *
   * @param {Player} player
   *        The player to reset the behavior on
   */
  var reset = function reset(player) {
    var aa = player.playlist.autoadvance_;

    if (aa.timeout) {
      player.clearTimeout(aa.timeout);
    }

    if (aa.trigger) {
      player.off('ended', aa.trigger);
    }

    aa.timeout = null;
    aa.trigger = null;
  };

  /**
   * Sets up auto-advance behavior on a player.
   *
   * @param  {Player} player
   *         the current player
   *
   * @param  {number} delay
   *         The number of seconds to wait before each auto-advance.
   *
   * @return {undefined}
   *         Used to short circuit function logic
   */
  var setup = function setup(player, delay) {
    reset(player);

    // Before queuing up new auto-advance behavior, check if `seconds` was
    // called with a valid value.
    if (!validSeconds(delay)) {
      player.playlist.autoadvance_.delay = null;
      return;
    }

    player.playlist.autoadvance_.delay = delay;

    player.playlist.autoadvance_.trigger = function () {

      // This calls setup again, which will reset the existing auto-advance and
      // set up another auto-advance for the next "ended" event.
      var cancelOnPlay = function cancelOnPlay() {
        return setup(player, delay);
      };

      // If there is a "play" event while we're waiting for an auto-advance,
      // we need to cancel the auto-advance. This could mean the user seeked
      // back into the content or restarted the content. This is reproducible
      // with an auto-advance > 0.
      player.one('play', cancelOnPlay);

      player.playlist.autoadvance_.timeout = player.setTimeout(function () {
        reset(player);
        player.off('play', cancelOnPlay);
        player.playlist.next();
      }, delay * 1000);
    };

    player.one('ended', player.playlist.autoadvance_.trigger);
  };

  /**
   * Removes all remote text tracks from a player.
   *
   * @param  {Player} player
   *         The player to clear tracks on
   */
  var clearTracks = function clearTracks(player) {
    var tracks = player.remoteTextTracks();
    var i = tracks && tracks.length || 0;

    // This uses a `while` loop rather than `forEach` because the
    // `TextTrackList` object is a live DOM list (not an array).
    while (i--) {
      player.removeRemoteTextTrack(tracks[i]);
    }
  };

  /**
   * Plays an item on a player's playlist.
   *
   * @param  {Player} player
   *         The player to play the item on
   *
   * @param  {Object} item
   *         A source from the playlist.
   *
   * @return {Player}
   *         The player that is now playing the item
   */
  var playItem = function playItem(player, item) {
    var replay = !player.paused() || player.ended();

    player.trigger('beforeplaylistitem', item);
    player.poster(item.poster || '');
    player.src(item.sources);
    clearTracks(player);

    player.ready(function () {
      (item.textTracks || []).forEach(player.addRemoteTextTrack.bind(player));
      player.trigger('playlistitem', item);

      if (replay) {
        var playPromise = player.play();

        // silence error when a pause interrupts a play request
        // on browsers which return a promise
        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {
          playPromise.then(null, function (e) {});
        }
      }

      setup(player, player.playlist.autoadvance_.delay);
    });

    return player;
  };

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  /**
   * Given two sources, check to see whether the two sources are equal.
   * If both source urls have a protocol, the protocols must match, otherwise, protocols
   * are ignored.
   *
   * @private
   * @param {string|Object} source1
   *        The first source
   *
   * @param {string|Object} source2
   *        The second source
   *
   * @return {boolean}
   *         The result
   */
  var sourceEquals = function sourceEquals(source1, source2) {
    var src1 = source1;
    var src2 = source2;

    if ((typeof source1 === 'undefined' ? 'undefined' : _typeof(source1)) === 'object') {
      src1 = source1.src;
    }
    if ((typeof source2 === 'undefined' ? 'undefined' : _typeof(source2)) === 'object') {
      src2 = source2.src;
    }

    if (/^\/\//.test(src1)) {
      src2 = src2.slice(src2.indexOf('//'));
    }
    if (/^\/\//.test(src2)) {
      src1 = src1.slice(src1.indexOf('//'));
    }

    return src1 === src2;
  };

  /**
   * Look through an array of playlist items for a specific `source`;
   * checking both the value of elements and the value of their `src`
   * property.
   *
   * @private
   * @param   {Array} arr
   *          An array of playlist items to look through
   *
   * @param   {string} src
   *          The source to look for
   *
   * @return  {number}
   *          The index of that source or -1
   */
  var indexInSources = function indexInSources(arr, src) {
    for (var i = 0; i < arr.length; i++) {
      var sources = arr[i].sources;

      if (Array.isArray(sources)) {
        for (var j = 0; j < sources.length; j++) {
          var source = sources[j];

          if (source && sourceEquals(source, src)) {
            return i;
          }
        }
      }
    }

    return -1;
  };

  /**
   * Randomize the contents of an array.
   *
   * @private
   * @param  {Array} arr
   *         An array.
   *
   * @return {Array}
   *         The same array that was passed in.
   */
  var randomize = function randomize(arr) {
    var index = -1;
    var lastIndex = arr.length - 1;

    while (++index < arr.length) {
      var rand = index + Math.floor(Math.random() * (lastIndex - index + 1));
      var value = arr[rand];

      arr[rand] = arr[index];
      arr[index] = value;
    }

    return arr;
  };

  /**
   * Factory function for creating new playlist implementation on the given player.
   *
   * API summary:
   *
   * playlist(['a', 'b', 'c']) // setter
   * playlist() // getter
   * playlist.currentItem() // getter, 0
   * playlist.currentItem(1) // setter, 1
   * playlist.next() // 'c'
   * playlist.previous() // 'b'
   * playlist.first() // 'a'
   * playlist.last() // 'c'
   * playlist.autoadvance(5) // 5 second delay
   * playlist.autoadvance() // cancel autoadvance
   *
   * @param  {Player} player
   *         The current player
   *
   * @param  {Array=} initialList
   *         If given, an initial list of sources with which to populate
   *         the playlist.
   *
   * @param  {number=}  initialIndex
   *         If given, the index of the item in the list that should
   *         be loaded first. If -1, no video is loaded. If omitted, The
   *         the first video is loaded.
   *
   * @return {Function}
   *         Returns the playlist function specific to the given player.
   */
  function factory(player, initialList) {
    var initialIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var list = null;
    var changing = false;

    /**
     * Get/set the playlist for a player.
     *
     * This function is added as an own property of the player and has its
     * own methods which can be called to manipulate the internal state.
     *
     * @param  {Array} [newList]
     *         If given, a new list of sources with which to populate the
     *         playlist. Without this, the function acts as a getter.
     *
     * @param  {number}  [newIndex]
     *         If given, the index of the item in the list that should
     *         be loaded first. If -1, no video is loaded. If omitted, The
     *         the first video is loaded.
     *
     * @return {Array}
     *         The playlist
     */
    var playlist = player.playlist = function (newList) {
      var newIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (changing) {
        throw new Error('do not call playlist() during a playlist change');
      }

      if (Array.isArray(newList)) {

        // @todo - Simplify this to `list.slice()` for v5.
        var previousPlaylist = Array.isArray(list) ? list.slice() : null;

        list = newList.slice();

        // Mark the playlist as changing during the duringplaylistchange lifecycle.
        changing = true;

        player.trigger({
          type: 'duringplaylistchange',
          nextIndex: newIndex,
          nextPlaylist: list,
          previousIndex: playlist.currentIndex_,

          // @todo - Simplify this to simply pass along `previousPlaylist` for v5.
          previousPlaylist: previousPlaylist || []
        });

        changing = false;

        if (newIndex !== -1) {
          playlist.currentItem(newIndex);
        }

        // The only time the previous playlist is null is the first call to this
        // function. This allows us to fire the `duringplaylistchange` event
        // every time the playlist is populated and to maintain backward
        // compatibility by not firing the `playlistchange` event on the initial
        // population of the list.
        //
        // @todo - Remove this condition in preparation for v5.
        if (previousPlaylist) {
          player.setTimeout(function () {
            player.trigger('playlistchange');
          }, 0);
        }
      }

      // Always return a shallow clone of the playlist list.
      return list.slice();
    };

    // On a new source, if there is no current item, disable auto-advance.
    player.on('loadstart', function () {
      if (playlist.currentItem() === -1) {
        reset(player);
      }
    });

    playlist.currentIndex_ = -1;
    playlist.player_ = player;
    playlist.autoadvance_ = {};
    playlist.repeat_ = false;

    /**
     * Get or set the current item in the playlist.
     *
     * During the duringplaylistchange event, acts only as a getter.
     *
     * @param  {number} [index]
     *         If given as a valid value, plays the playlist item at that index.
     *
     * @return {number}
     *         The current item index.
     */
    playlist.currentItem = function (index) {

      // If the playlist is changing, only act as a getter.
      if (changing) {
        return playlist.currentIndex_;
      }

      if (typeof index === 'number' && playlist.currentIndex_ !== index && index >= 0 && index < list.length) {
        playlist.currentIndex_ = index;
        playItem(playlist.player_, list[playlist.currentIndex_]);
      } else {
        playlist.currentIndex_ = playlist.indexOf(playlist.player_.currentSrc() || '');
      }

      return playlist.currentIndex_;
    };

    /**
     * Checks if the playlist contains a value.
     *
     * @param  {string|Object|Array} value
     *         The value to check
     *
     * @return {boolean}
     *         The result
     */
    playlist.contains = function (value) {
      return playlist.indexOf(value) !== -1;
    };

    /**
     * Gets the index of a value in the playlist or -1 if not found.
     *
     * @param  {string|Object|Array} value
     *         The value to find the index of
     *
     * @return {number}
     *         The index or -1
     */
    playlist.indexOf = function (value) {
      if (typeof value === 'string') {
        return indexInSources(list, value);
      }

      var sources = Array.isArray(value) ? value : value.sources;

      for (var i = 0; i < sources.length; i++) {
        var source = sources[i];

        if (typeof source === 'string') {
          return indexInSources(list, source);
        } else if (source.src) {
          return indexInSources(list, source.src);
        }
      }

      return -1;
    };

    /**
     * Get the index of the current item in the playlist. This is identical to
     * calling `currentItem()` with no arguments.
     *
     * @return {number}
     *         The current item index.
     */
    playlist.currentIndex = function () {
      return playlist.currentItem();
    };

    /**
     * Get the index of the last item in the playlist.
     *
     * @return {number}
     *         The index of the last item in the playlist or -1 if there are no
     *         items.
     */
    playlist.lastIndex = function () {
      return list.length - 1;
    };

    /**
     * Get the index of the next item in the playlist.
     *
     * @return {number}
     *         The index of the next item in the playlist or -1 if there is no
     *         current item.
     */
    playlist.nextIndex = function () {
      var current = playlist.currentItem();

      if (current === -1) {
        return -1;
      }

      var lastIndex = playlist.lastIndex();

      // When repeating, loop back to the beginning on the last item.
      if (playlist.repeat_ && current === lastIndex) {
        return 0;
      }

      // Don't go past the end of the playlist.
      return Math.min(current + 1, lastIndex);
    };

    /**
     * Get the index of the previous item in the playlist.
     *
     * @return {number}
     *         The index of the previous item in the playlist or -1 if there is
     *         no current item.
     */
    playlist.previousIndex = function () {
      var current = playlist.currentItem();

      if (current === -1) {
        return -1;
      }

      // When repeating, loop back to the end of the playlist.
      if (playlist.repeat_ && current === 0) {
        return playlist.lastIndex();
      }

      // Don't go past the beginning of the playlist.
      return Math.max(current - 1, 0);
    };

    /**
     * Plays the first item in the playlist.
     *
     * @return {Object|undefined}
     *         Returns undefined and has no side effects if the list is empty.
     */
    playlist.first = function () {
      if (changing) {
        return;
      }

      if (list.length) {
        return list[playlist.currentItem(0)];
      }

      playlist.currentIndex_ = -1;
    };

    /**
     * Plays the last item in the playlist.
     *
     * @return {Object|undefined}
     *         Returns undefined and has no side effects if the list is empty.
     */
    playlist.last = function () {
      if (changing) {
        return;
      }

      if (list.length) {
        return list[playlist.currentItem(playlist.lastIndex())];
      }

      playlist.currentIndex_ = -1;
    };

    /**
     * Plays the next item in the playlist.
     *
     * @return {Object|undefined}
     *         Returns undefined and has no side effects if on last item.
     */
    playlist.next = function () {
      if (changing) {
        return;
      }

      var index = playlist.nextIndex();

      if (index !== playlist.currentIndex_) {
        return list[playlist.currentItem(index)];
      }
    };

    /**
     * Plays the previous item in the playlist.
     *
     * @return {Object|undefined}
     *         Returns undefined and has no side effects if on first item.
     */
    playlist.previous = function () {
      if (changing) {
        return;
      }

      var index = playlist.previousIndex();

      if (index !== playlist.currentIndex_) {
        return list[playlist.currentItem(index)];
      }
    };

    /**
     * Set up auto-advance on the playlist.
     *
     * @param  {number} [delay]
     *         The number of seconds to wait before each auto-advance.
     */
    playlist.autoadvance = function (delay) {
      setup(playlist.player_, delay);
    };

    /**
     * Sets `repeat` option, which makes the "next" video of the last video in
     * the playlist be the first video in the playlist.
     *
     * @param  {boolean} [val]
     *         The value to set repeat to
     *
     * @return {boolean}
     *         The current value of repeat
     */
    playlist.repeat = function (val) {
      if (val === undefined) {
        return playlist.repeat_;
      }

      if (typeof val !== 'boolean') {
        videojs.log.error('videojs-playlist: Invalid value for repeat', val);
        return;
      }

      playlist.repeat_ = !!val;
      return playlist.repeat_;
    };

    /**
     * Sorts the playlist array.
     *
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}
     * @fires playlistsorted
     *
     * @param {Function} compare
     *        A comparator function as per the native Array method.
     */
    playlist.sort = function (compare) {

      // Bail if the array is empty.
      if (!list.length) {
        return;
      }

      list.sort(compare);

      // If the playlist is changing, don't trigger events.
      if (changing) {
        return;
      }

      /**
       * Triggered after the playlist is sorted internally.
       *
       * @event playlistsorted
       * @type {Object}
       */
      player.trigger('playlistsorted');
    };

    /**
     * Reverses the playlist array.
     *
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse}
     * @fires playlistsorted
     */
    playlist.reverse = function () {

      // Bail if the array is empty.
      if (!list.length) {
        return;
      }

      list.reverse();

      // If the playlist is changing, don't trigger events.
      if (changing) {
        return;
      }

      /**
       * Triggered after the playlist is sorted internally.
       *
       * @event playlistsorted
       * @type {Object}
       */
      player.trigger('playlistsorted');
    };

    /**
     * Shuffle the contents of the list randomly.
     *
     * @see   {@link https://github.com/lodash/lodash/blob/40e096b6d5291a025e365a0f4c010d9a0efb9a69/shuffle.js}
     * @fires playlistsorted
     * @todo  Make the `rest` option default to `true` in v5.0.0.
     * @param {Object} [options]
     *        An object containing shuffle options.
     *
     * @param {boolean} [options.rest = false]
     *        By default, the entire playlist is randomized. However, this may
     *        not be desirable in all cases, such as when a user is already
     *        watching a video.
     *
     *        When `true` is passed for this option, it will only shuffle
     *        playlist items after the current item. For example, when on the
     *        first item, will shuffle the second item and beyond.
     */
    playlist.shuffle = function () {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          rest = _ref.rest;

      var index = 0;
      var arr = list;

      // When options.rest is true, start randomization at the item after the
      // current item.
      if (rest) {
        index = playlist.currentIndex_ + 1;
        arr = list.slice(index);
      }

      // Bail if the array is empty or too short to shuffle.
      if (arr.length <= 1) {
        return;
      }

      randomize(arr);

      // When options.rest is true, splice the randomized sub-array back into
      // the original array.
      if (rest) {
        var _list;

        (_list = list).splice.apply(_list, [index, arr.length].concat(arr));
      }

      // If the playlist is changing, don't trigger events.
      if (changing) {
        return;
      }

      /**
       * Triggered after the playlist is sorted internally.
       *
       * @event playlistsorted
       * @type {Object}
       */
      player.trigger('playlistsorted');
    };

    // If an initial list was given, populate the playlist with it.
    if (Array.isArray(initialList)) {
      playlist(initialList.slice(), initialIndex);

      // If there is no initial list given, silently set an empty array.
    } else {
      list = [];
    }

    return playlist;
  }

  var version = "4.2.2";

  // Video.js 5/6 cross-compatible.
  var registerPlugin = videojs.registerPlugin || videojs.plugin;

  /**
   * The video.js playlist plugin. Invokes the playlist-maker to create a
   * playlist function on the specific player.
   *
   * @param {Array} list
   *        a list of sources
   *
   * @param {number} item
   *        The index to start at
   */
  var plugin = function plugin(list, item) {
    factory(this, list, item);
  };

  registerPlugin('playlist', plugin);

  plugin.VERSION = version;

  return plugin;

})));

videojs.registerPlugin('related', function (config) {

    if (!(typeof config.list !== 'undefined' && config.list.length)) {

    } else {

        config = config || {
                title: 'Show',
                target: 'self',
                list: [{
                    title:  '',
                    url:    '',
                    image:  '',
                    target: 'self' // blank, self, this
                }]
            };
        var player = this;
        var container;

        var hidden;

        /**
         * Когда плеера закончил играть
         */
        player.on('ended', function (e) {

            if (!document.querySelector('.vjs-ad-playing')) {
                container.classList.add('vjs-related-video-active');
            }

        });

        /**
         * Добавляет кнопку
         */
        player.ready(function () {

            var relatedButton       = document.createElement('span');
            relatedButton.id        = 'vjs-related-video-open-button';
            relatedButton.className = 'vjs-related-video-open vjs-icon-chapters';
            player.el().appendChild(relatedButton);

            //
            var relatedButtonInfo       = document.createElement('span');
            relatedButtonInfo.id        = 'vjs-related-video-open-button-info';
            relatedButtonInfo.innerText = config.title;
            player.el().appendChild(relatedButtonInfo);

            config.target = config.target || 'self';

            var list     = config.list;
            var fragment = document.createDocumentFragment();
            var aside    = document.createElement('aside');
            var div      = document.createElement('div');
            var title    = document.createElement('h5');
            var close    = document.createElement('span');

            aside.id        = 'vjs-related-video';
            aside.className = 'vjs-related-video';
            div.className   = 'vjs-related-video-container';

            title.innerHTML = config.title;
            title.className = 'vjs-related-video-title';

            close.className = 'vjs-related-video-close vjs-icon-cancel';
            close.id        = 'vjs-related-video-close-button';

            aside.appendChild(title);
            aside.appendChild(close);

            // Ограничение на 6 ссылок
            var i = list.length - 1;
            var a;
            var img;
            var span;
            for (; i >= 0; --i) {

                a = document.createElement('a');
                a.className = 'vjs-related-video-url';
                a.href      = list[i].url;
                a.target    = '_' + (list[i].target || config.target);

                img = document.createElement('img');
                img.className = 'vjs-related-video-img';
                img.src       = list[i].image;
                img.alt       = list[i].alt || list[i].title;
                a.appendChild(img);

                span = document.createElement('span');
                span.className = 'vjs-related-video-url-title';
                span.innerHTML += list[i].title;
                a.appendChild(span);

                div.insertBefore(a, div.children[0]);

            }

            aside.appendChild(div);
            container = aside;
            fragment.appendChild(aside);
            player.el().appendChild(fragment);

            if ('addEventListener' in close) {
                close.addEventListener('click', function () {
                    container.classList.remove('vjs-related-video-active');
                    $('#vjs-related-video-open-button').removeClass("hide");
                    if (player.el().firstChild.paused) {
                        player.play();
                    }
                });
            } else if ('attachEvent' in close) {
                close.attachEvent('click', function () {
                    container.classList.remove('vjs-related-video-active');
                    $('#vjs-related-video-open-button').removeClass("hide");
                    if (player.el().firstChild.paused) {
                        player.play();
                    }
                });
            }

            relatedButton.addEventListener('click', function () {
                player.pause();
                container.classList.add('vjs-related-video-active');
                $('#vjs-related-video-open-button').addClass("hide");
                container.classList.add('hidfe');
            });

        });

    }

});

var FORM;
var BTN;

$(document).ready(function () {
    initWebsite();
});

function initWebsite()
{
    FORM = new FormClass();
    BTN = new ButtonClass();

    // init vendor selections on page load
    $('[data-toggle="tooltip"]').tooltip();
    $('[data-toggle="popover"]').popover();

    $.ajaxSetup({
        headers: {
            'X-CSRF-Token': $("meta[name='csrf-token']").attr("content")
        }
    });

    // // back to top button
    // $(window).scroll(function () {
    //     // if u scrolled more than 80% of the current window
    //     if ($(window).scrollTop() > ($(window).height() * .8)) {
    //         $('.back-to-top').css({"bottom": "20px"});
    //     } else {
    //         $('.back-to-top').css({"bottom": "-50px"});
    //     }
    // });

    // jump to an achor link
    $("a.jumper").click(function (event) {
        event.preventDefault();
        var link = $(this).attr('href');
        setTimeout(function () {
            $(link).trigger('click');
        }, 500);
        var urlHashes = this.href.split("#");
        var scrollTop = $("#" + urlHashes[1]).offset().top - 50;
        $('html, body').animate({scrollTop: scrollTop}, 500);
        return false;
    });
}
